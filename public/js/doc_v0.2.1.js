/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(3);

	var _antd = __webpack_require__(4);

	var _Header = __webpack_require__(5);

	var _Header2 = _interopRequireDefault(_Header);

	var _Nav = __webpack_require__(7);

	var _Nav2 = _interopRequireDefault(_Nav);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 使用文档入口文件
	


	__webpack_require__(8);

	// 通用文档
	var CommonList = [{ path: 'Introduction', name: '简要介绍', component: __webpack_require__(12).default }, { path: 'Usage', name: '组件使用', /* retract: true, */children: [{ path: 'Install', name: '快速上手', component: __webpack_require__(164).default }, { path: 'Join', name: '组件嵌套', component: __webpack_require__(165).default }, { path: 'Api', name: '交互API', component: __webpack_require__(166).default }, { path: 'Layout', name: '页面布局', component: __webpack_require__(167).default }, { path: 'Page', name: '页面示例', component: __webpack_require__(168).default }, { path: 'Others', name: '更多用法', component: __webpack_require__(169).default }] }, { path: 'Develop', name: '项目开发', /* retract: true, */children: [{ path: 'Install', name: '快速上手', component: __webpack_require__(170).default }, { path: 'Config', name: '全局配置', component: __webpack_require__(171).default }, { path: 'Modules', name: '模块开发', component: __webpack_require__(172).default }, { path: 'Others', name: '更多用法', component: __webpack_require__(173).default }, { path: 'Build', name: '另一种模式', component: __webpack_require__(174).default }] }, { path: 'UpdateLog', name: '更新日志', component: __webpack_require__(175).default }];

	// 组件文档列表
	var ComponentList = [{ path: 'Custom', name: '定制组件', children: [{ path: 'Export', name: 'Export 导出', component: __webpack_require__(176).default }, { path: 'Form', name: 'Form 表单', component: __webpack_require__(178).default }, { path: 'Modal', name: 'Modal 弹框', component: __webpack_require__(180).default }, { path: 'Table', name: 'Table 表格', component: __webpack_require__(182).default }, { path: 'TableCrud', name: 'Table Crud 表格扩展', component: __webpack_require__(184).default }, { path: 'Tree', name: 'Tree 树形控件', component: __webpack_require__(186).default }, { path: 'Iframe', name: 'Iframe 子页面', component: __webpack_require__(188).default }, { path: 'Ueditor', name: 'Ueditor 富文本', component: __webpack_require__(190).default }] }, { path: 'General', name: '综合组件', children: [{ path: 'Button', name: 'Button 按钮', component: __webpack_require__(192).default }, { path: 'Icon', name: 'Icon 图标', component: __webpack_require__(193).default }, { path: 'Grid', name: 'Grid 栅格', component: __webpack_require__(194).default }, { path: 'Layout', name: 'Layout 布局', component: __webpack_require__(167).default }, { path: 'Router', name: 'Router 路由', component: __webpack_require__(195).default }] }, { path: 'Navigation', name: '导航', children: [{ path: 'Affix', name: 'Affix 固钉', component: __webpack_require__(197).default }, { path: 'Breadcrumb', name: 'Breadcrumb 面包屑', component: __webpack_require__(198).default }, { path: 'Dropdown', name: 'Dropdown 下拉菜单', component: __webpack_require__(199).default }, { path: 'Menu', name: 'Menu 导航菜单', component: __webpack_require__(200).default }, { path: 'Pagination', name: 'Pagination 分页', component: __webpack_require__(201).default }, { path: 'Steps', name: 'Steps 步骤条', component: __webpack_require__(202).default }] }, { path: 'DataEntry', name: '数据录入', children: [{ path: 'AutoComplete', name: 'AutoComplete 自动完成', component: __webpack_require__(203).default }, { path: 'Cascader', name: 'Cascader 级联选择', component: __webpack_require__(204).default }, { path: 'Checkbox', name: 'Checkbox 多选框', component: __webpack_require__(205).default }, { path: 'DatePicker', name: 'DatePicker 日期选择框', component: __webpack_require__(206).default }, { path: 'InputNumber', name: 'InputNumber 数字输入框', component: __webpack_require__(207).default }, { path: 'Input', name: 'Input 输入框', component: __webpack_require__(208).default }, { path: 'Radio', name: 'Radio 单选框', component: __webpack_require__(209).default }, { path: 'Rate', name: 'Rate 评分', component: __webpack_require__(210).default }, { path: 'Select', name: 'Select 选择器', component: __webpack_require__(211).default }, { path: 'Switch', name: 'Switch 开关', component: __webpack_require__(212).default }, { path: 'Upload', name: 'Upload 上传', component: __webpack_require__(213).default }] }, { path: 'DataDisplay', name: '数据展示', children: [{ path: 'Avatar', name: 'Avatar 头像', component: __webpack_require__(214).default }, { path: 'Badge', name: 'Badge 徽标数', component: __webpack_require__(215).default },
	    // {path: 'Calendar', name: 'Calendar 日历', component: require('src/antd/docs/antd-calendar').default},
	    { path: 'Card', name: 'Card 卡片', component: __webpack_require__(216).default }, { path: 'Carousel', name: 'Carousel 走马灯', component: __webpack_require__(217).default }, { path: 'Collapse', name: 'Collapse 折叠面板', component: __webpack_require__(218).default }, { path: 'Popover', name: 'Popover 气泡卡片', component: __webpack_require__(219).default }, { path: 'Tooltip', name: 'Tooltip 文字提示', component: __webpack_require__(220).default }, { path: 'Tabs', name: 'Tabs 标签页', component: __webpack_require__(221).default }, { path: 'Tag', name: 'Tag 标签', component: __webpack_require__(222).default }, { paht: 'Timeline', name: 'Timeline 时间轴', component: __webpack_require__(223).default }] }, { path: 'Feedback', name: '反馈', children: [{ path: 'Alert', name: 'Alert 警告提示', component: __webpack_require__(224).default }, { path: 'Message', name: 'Message 全局提示', component: __webpack_require__(225).default }, { path: 'Notification', name: 'Notification 通知提醒框', component: __webpack_require__(226).default }, { path: 'Progress', name: 'Progress 进度条', component: __webpack_require__(227).default }, { path: 'Popconfirm', name: 'Popconfirm 气泡确认框', component: __webpack_require__(228).default }, { path: 'Loading', name: 'Loading 加载中', component: __webpack_require__(229).default }] }, { path: 'Other', name: '其他组件', children: [
	    // {path: 'Anchor', name: 'Anchor 锚点', component: require('src/antd/docs/antd-anchor').default},
	    { path: 'Backtop', name: 'Backtop 回到顶部', component: __webpack_require__(230).default }] }];

	// 全部路由列表
	var RouteList = [{ path: 'Standard', name: '规范', component: __webpack_require__(231).default }, { path: 'ThirdParty', name: '第三方组件', component: __webpack_require__(232).default }].concat(CommonList, ComponentList);

	var Doc = function (_React$Component) {
	    _inherits(Doc, _React$Component);

	    function Doc() {
	        _classCallCheck(this, Doc);

	        return _possibleConstructorReturn(this, (Doc.__proto__ || Object.getPrototypeOf(Doc)).apply(this, arguments));
	    }

	    _createClass(Doc, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 代码高亮
	            Prism.highlightAll();
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            Prism.highlightAll();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var currentHeader = this.props.routes[1] ? this.props.routes[1].path : '';
	            var currentNav = this.props.location.pathname.slice(1);
	            var Test = function Test(_ref) {
	                var text = _ref.text,
	                    children = _ref.children;
	                return _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        text
	                    ),
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        children
	                    )
	                );
	            };
	            return _react2.default.createElement(
	                'section',
	                null,
	                _react2.default.createElement(_Header2.default, { current: currentHeader }),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'main' },
	                    _react2.default.createElement(
	                        _antd.Row,
	                        null,
	                        _react2.default.createElement(
	                            _antd.Col,
	                            { xs: 6, sm: 6, md: 6, lg: 4, xl: 4 },
	                            _react2.default.createElement(_Nav2.default, { current: currentNav, commons: CommonList, components: ComponentList })
	                        ),
	                        _react2.default.createElement(
	                            _antd.Col,
	                            { xs: 18, sm: 18, md: 18, lg: 20, xl: 20 },
	                            this.props.children
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Doc;
	}(_react2.default.Component);

	var Routes = function (_React$Component2) {
	    _inherits(Routes, _React$Component2);

	    function Routes(props) {
	        _classCallCheck(this, Routes);

	        return _possibleConstructorReturn(this, (Routes.__proto__ || Object.getPrototypeOf(Routes)).call(this, props));
	    }

	    _createClass(Routes, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _reactRouter.Router,
	                { history: _reactRouter.hashHistory },
	                _react2.default.createElement(
	                    _reactRouter.Route,
	                    { path: '/', component: Doc },
	                    _react2.default.createElement(_reactRouter.IndexRedirect, { to: 'Introduction' }),
	                    RouteList.map(function (first) {
	                        return !first.children ? _react2.default.createElement(_reactRouter.Route, { key: first.name, name: first.name,
	                            path: first.path, component: first.component }) : first.children.map(function (second) {
	                            return _react2.default.createElement(_reactRouter.Route, { key: second.name, name: second.name,
	                                path: first.path + '/' + second.path, component: second.component });
	                        });
	                    }),
	                    _react2.default.createElement(_reactRouter.Redirect, { path: 'Component', to: 'Component/Table' }),
	                    _react2.default.createElement(_reactRouter.Route, { path: '*', component: null })
	                )
	            );
	        }
	    }]);

	    return Routes;
	}(_react2.default.Component);

	_reactDom2.default.render(_react2.default.createElement(Routes, null), document.getElementById('container'));

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = window.DLL.React;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = window.DLL.ReactDOM;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = window.DLL.ReactRouter;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = window.DLL.Antd;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 头部导航条
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var SubMenu = _antd.Menu.SubMenu;
	var MenuItemGroup = _antd.Menu.ItemGroup;
	var json = __webpack_require__(6);
	var version = json.version;
	var versionList = json.versionList;

	// 导航列表
	var NavList = [{ key: 'Introduction', path: '#/Introduction', name: '组件' }, { key: 'Standard', path: '#/Standard', name: '规范' }, { key: 'ThirdParty', path: '#/ThirdParty', name: '第三方组件' }, { key: 'ANT DESIGN', path: 'http://antd.uf.baidu.com/docs/react/introduce-cn', name: 'ANT DESIGN' }, { key: 'Old-uf', path: 'http://uf.baidu.com/uf-react.php', name: '返回旧版' }];

	var Header = function (_Component) {
	    _inherits(Header, _Component);

	    function Header(props) {
	        _classCallCheck(this, Header);

	        var _this = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));

	        _this.state = {
	            current: props.current || 'Introduction'
	        };
	        return _this;
	    }

	    _createClass(Header, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.setState({
	                current: nextProps.current
	            });
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.setState({ current: e.key });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { id: 'header' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'logo' },
	                    _react2.default.createElement('img', { alt: 'logo', src: './public/img/logo.svg' }),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'version' },
	                        'UF 2.0'
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'nav' },
	                    _react2.default.createElement(
	                        _antd.Menu,
	                        { mode: 'horizontal', selectedKeys: [this.state.current],
	                            onClick: this.handleClick.bind(this) },
	                        NavList.map(function (v) {
	                            return _react2.default.createElement(
	                                _antd.Menu.Item,
	                                { key: v.key },
	                                _react2.default.createElement(
	                                    'a',
	                                    { href: v.path },
	                                    v.name
	                                )
	                            );
	                        })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'search' },
	                    _react2.default.createElement(
	                        _antd.Dropdown,
	                        { overlay: _react2.default.createElement(
	                                _antd.Menu,
	                                null,
	                                versionList.reverse().map(function (v) {
	                                    return _react2.default.createElement(
	                                        _antd.Menu.Item,
	                                        { key: 'v' + v },
	                                        _react2.default.createElement(
	                                            'a',
	                                            { href: '?v=' + v },
	                                            'v' + v
	                                        )
	                                    );
	                                })
	                            ) },
	                        _react2.default.createElement(
	                            _antd.Button,
	                            { size: 'small' },
	                            'v' + version,
	                            ' ',
	                            _react2.default.createElement(_antd.Icon, { type: 'down' })
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Header;
	}(_react.Component);

	exports.default = Header;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = {"name":"uf","versionList":["0.1","0.2","0.2.1"],"version":"0.2.1","description":"new uf","author":"liuzechun","license":"ISC","repository":{"type":"git","url":"http://icode.baidu.com/files/view/baidu/atm/uf/@tree/master"},"main":"index.js","dependencies":{"antd":"^2.13.7","immutable":"^3.8.1","moment":"^2.17.1","react":"^15.6.2","react-dom":"^15.6.2","react-router":"^3.0.0","reqwest":"^2.0.5"},"devDependencies":{"autoprefixer":"^6.5.4","babel-core":"^6.18.2","babel-loader":"^6.2.8","babel-plugin-import":"^1.4.0","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-preset-es2015":"^6.18.0","babel-preset-react":"^6.16.0","css-loader":"^0.26.1","extract-text-webpack-plugin":"^1.0.1","history":"^4.4.1","json-loader":"^0.5.4","less":"^2.7.1","less-loader":"^2.2.3","marked":"^0.3.6","postcss-loader":"^1.2.1","sass-loader":"^4.0.2","style-loader":"^0.13.1","text-loader":"0.0.1","underscore":"^1.8.3","webpack":"^1.14.0"},"scripts":{"build-watch":"webpack --config dist/config/webpack.build.js --watch","antd-watch":"webpack --config dist/config/webpack.antd.js --watch","build":"webpack --config dist/config/webpack.build.js","antd":"webpack --config dist/config/webpack.antd.js","dll":"webpack --config dist/config/webpack.dll.js","react":"webpack --config dist/config/webpack.react.js","all":"npm run dll & npm run build & npm run antd","start":"webpack --watch"}}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SubMenu = _antd.Menu.SubMenu;
	var MenuItemGroup = _antd.Menu.ItemGroup;

	var Nav = function (_Component) {
	    _inherits(Nav, _Component);

	    function Nav(props) {
	        _classCallCheck(this, Nav);

	        var _this = _possibleConstructorReturn(this, (Nav.__proto__ || Object.getPrototypeOf(Nav)).call(this, props));

	        _this.state = {
	            current: props.current || 'Introduction'
	        };
	        _this.NavList = [].concat(_this.props.commons, [{
	            path: 'Components', name: 'Components', children: _this.props.components
	        }]);
	        return _this;
	    }

	    _createClass(Nav, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.setState({
	                current: nextProps.current
	            });
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.setState({ current: e.key });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return _react2.default.createElement(
	                'div',
	                { className: 'left-side' },
	                _react2.default.createElement(
	                    _antd.Menu,
	                    { mode: 'inline', onClick: this.handleClick.bind(this),
	                        selectedKeys: [this.state.current],
	                        defaultOpenKeys: this.NavList.filter(function (v) {
	                            return !!v.children && (!v.retract || _this2.props.current.indexOf(v.path) !== -1);
	                        }).map(function (v) {
	                            return v.path;
	                        }) },
	                    this.NavList.map(function (first) {
	                        return !first.children ? _react2.default.createElement(
	                            _antd.Menu.Item,
	                            { key: first.path },
	                            _react2.default.createElement(
	                                'a',
	                                { href: '#/' + first.path },
	                                first.name
	                            )
	                        ) : _react2.default.createElement(
	                            SubMenu,
	                            { key: first.path, title: first.name },
	                            first.children.map(function (second) {
	                                return !second.children ? _react2.default.createElement(
	                                    _antd.Menu.Item,
	                                    { key: first.path + '/' + second.path },
	                                    _react2.default.createElement(
	                                        'a',
	                                        { href: '#/' + first.path + '/' + second.path },
	                                        second.name
	                                    )
	                                ) : _react2.default.createElement(
	                                    MenuItemGroup,
	                                    { key: first.path + '/' + second.path, title: second.name },
	                                    second.children.map(function (third) {
	                                        return _react2.default.createElement(
	                                            _antd.Menu.Item,
	                                            { key: second.path + '/' + third.path },
	                                            _react2.default.createElement(
	                                                'a',
	                                                { href: '#/' + second.path + '/' + third.path },
	                                                third.name
	                                            )
	                                        );
	                                    })
	                                );
	                            })
	                        );
	                    })
	                )
	            );
	        }
	    }]);

	    return Nav;
	}(_react.Component);

	exports.default = Nav;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var IntroductionApp = function (_BaseDoc) {
	    _inherits(IntroductionApp, _BaseDoc);

	    function IntroductionApp(props) {
	        _classCallCheck(this, IntroductionApp);

	        var _this = _possibleConstructorReturn(this, (IntroductionApp.__proto__ || Object.getPrototypeOf(IntroductionApp)).call(this, props));

	        _this.doc = 'introduction.md';
	        _this.__init();
	        return _this;
	    }

	    return IntroductionApp;
	}(_BaseDoc3.default);

	exports.default = IntroductionApp;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Markdown = __webpack_require__(14);

	var _Markdown2 = _interopRequireDefault(_Markdown);

	var _Demo = __webpack_require__(72);

	var _Demo2 = _interopRequireDefault(_Demo);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 文档基类
	


	var BaseDoc = function (_React$Component) {
	    _inherits(BaseDoc, _React$Component);

	    function BaseDoc(props) {
	        _classCallCheck(this, BaseDoc);

	        var _this = _possibleConstructorReturn(this, (BaseDoc.__proto__ || Object.getPrototypeOf(BaseDoc)).call(this, props));

	        _this.state = {};
	        // 日志页面需要增加更多样式
	        _this.className = '';
	        return _this;
	    }

	    _createClass(BaseDoc, [{
	        key: '__init',
	        value: function __init() {
	            var originRender = this.render;
	            this.render = function () {
	                return this._render(originRender);
	            };
	        }

	        // 两列展示demo

	    }, {
	        key: '__getDemo',
	        value: function __getDemo() {
	            for (var _len = arguments.length, list = Array(_len), _key = 0; _key < _len; _key++) {
	                list[_key] = arguments[_key];
	            }

	            return _react2.default.createElement(_Demo2.default, { list: list });
	        }

	        // 单列展示demo

	    }, {
	        key: '__getDemoSingle',
	        value: function __getDemoSingle() {
	            for (var _len2 = arguments.length, list = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                list[_key2] = arguments[_key2];
	            }

	            return _react2.default.createElement(_Demo2.default, { list: list, single: true });
	        }

	        // 整体框架在父类里实现，继承此父类的组件，均可使用

	    }, {
	        key: '_render',
	        value: function _render(render) {
	            return _react2.default.createElement(
	                'div',
	                { className: 'umpui-component' },
	                _react2.default.createElement(
	                    'h1',
	                    { className: 'umpui-layer umpui-title' },
	                    this.props.route.name
	                ),
	                render && render.call(this),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'umpui-layer umpui-block markdown ' + this.className },
	                    _react2.default.createElement(_Markdown2.default, { doc: this.doc })
	                )
	            );
	        }
	    }]);

	    return BaseDoc;
	}(_react2.default.Component);

	exports.default = BaseDoc;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _marked = __webpack_require__(15);

	var _marked2 = _interopRequireDefault(_marked);

	var _markdown = __webpack_require__(16);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 生成MarkDown样式，text是通过require引入的
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * */


	var Markdown = function (_React$Component) {
	    _inherits(Markdown, _React$Component);

	    function Markdown(props) {
	        _classCallCheck(this, Markdown);

	        var _this = _possibleConstructorReturn(this, (Markdown.__proto__ || Object.getPrototypeOf(Markdown)).call(this, props));

	        _marked2.default.setOptions({
	            gfm: true,
	            tables: true,
	            breaks: false,
	            pedantic: false,
	            sanitize: true,
	            smartLists: true,
	            smartypants: false
	        });
	        return _this;
	    }

	    _createClass(Markdown, [{
	        key: 'render',
	        value: function render() {
	            return this.props.doc && _markdown2.default[this.props.doc] ? _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: (0, _marked2.default)(_markdown2.default[this.props.doc]) } }) : _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: (0, _marked2.default)(this.props.doc) } });
	        }
	    }]);

	    return Markdown;
	}(_react2.default.Component);

	exports.default = Markdown;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 */

	;(function() {

	/**
	 * Block-Level Grammar
	 */

	var block = {
	  newline: /^\n+/,
	  code: /^( {4}[^\n]+\n*)+/,
	  fences: noop,
	  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
	  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
	  nptable: noop,
	  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
	  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
	  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
	  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
	  table: noop,
	  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
	  text: /^[^\n]+/
	};

	block.bullet = /(?:[*+-]|\d+\.)/;
	block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
	block.item = replace(block.item, 'gm')
	  (/bull/g, block.bullet)
	  ();

	block.list = replace(block.list)
	  (/bull/g, block.bullet)
	  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
	  ('def', '\\n+(?=' + block.def.source + ')')
	  ();

	block.blockquote = replace(block.blockquote)
	  ('def', block.def)
	  ();

	block._tag = '(?!(?:'
	  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
	  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
	  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

	block.html = replace(block.html)
	  ('comment', /<!--[\s\S]*?-->/)
	  ('closed', /<(tag)[\s\S]+?<\/\1>/)
	  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
	  (/tag/g, block._tag)
	  ();

	block.paragraph = replace(block.paragraph)
	  ('hr', block.hr)
	  ('heading', block.heading)
	  ('lheading', block.lheading)
	  ('blockquote', block.blockquote)
	  ('tag', '<' + block._tag)
	  ('def', block.def)
	  ();

	/**
	 * Normal Block Grammar
	 */

	block.normal = merge({}, block);

	/**
	 * GFM Block Grammar
	 */

	block.gfm = merge({}, block.normal, {
	  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
	  paragraph: /^/,
	  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
	});

	block.gfm.paragraph = replace(block.paragraph)
	  ('(?!', '(?!'
	    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
	    + block.list.source.replace('\\1', '\\3') + '|')
	  ();

	/**
	 * GFM + Tables Block Grammar
	 */

	block.tables = merge({}, block.gfm, {
	  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
	  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
	});

	/**
	 * Block Lexer
	 */

	function Lexer(options) {
	  this.tokens = [];
	  this.tokens.links = {};
	  this.options = options || marked.defaults;
	  this.rules = block.normal;

	  if (this.options.gfm) {
	    if (this.options.tables) {
	      this.rules = block.tables;
	    } else {
	      this.rules = block.gfm;
	    }
	  }
	}

	/**
	 * Expose Block Rules
	 */

	Lexer.rules = block;

	/**
	 * Static Lex Method
	 */

	Lexer.lex = function(src, options) {
	  var lexer = new Lexer(options);
	  return lexer.lex(src);
	};

	/**
	 * Preprocessing
	 */

	Lexer.prototype.lex = function(src) {
	  src = src
	    .replace(/\r\n|\r/g, '\n')
	    .replace(/\t/g, '    ')
	    .replace(/\u00a0/g, ' ')
	    .replace(/\u2424/g, '\n');

	  return this.token(src, true);
	};

	/**
	 * Lexing
	 */

	Lexer.prototype.token = function(src, top, bq) {
	  var src = src.replace(/^ +$/gm, '')
	    , next
	    , loose
	    , cap
	    , bull
	    , b
	    , item
	    , space
	    , i
	    , l;

	  while (src) {
	    // newline
	    if (cap = this.rules.newline.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[0].length > 1) {
	        this.tokens.push({
	          type: 'space'
	        });
	      }
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      cap = cap[0].replace(/^ {4}/gm, '');
	      this.tokens.push({
	        type: 'code',
	        text: !this.options.pedantic
	          ? cap.replace(/\n+$/, '')
	          : cap
	      });
	      continue;
	    }

	    // fences (gfm)
	    if (cap = this.rules.fences.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'code',
	        lang: cap[2],
	        text: cap[3] || ''
	      });
	      continue;
	    }

	    // heading
	    if (cap = this.rules.heading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[1].length,
	        text: cap[2]
	      });
	      continue;
	    }

	    // table no leading pipe (gfm)
	    if (top && (cap = this.rules.nptable.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i].split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // lheading
	    if (cap = this.rules.lheading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[2] === '=' ? 1 : 2,
	        text: cap[1]
	      });
	      continue;
	    }

	    // hr
	    if (cap = this.rules.hr.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'hr'
	      });
	      continue;
	    }

	    // blockquote
	    if (cap = this.rules.blockquote.exec(src)) {
	      src = src.substring(cap[0].length);

	      this.tokens.push({
	        type: 'blockquote_start'
	      });

	      cap = cap[0].replace(/^ *> ?/gm, '');

	      // Pass `top` to keep the current
	      // "toplevel" state. This is exactly
	      // how markdown.pl works.
	      this.token(cap, top, true);

	      this.tokens.push({
	        type: 'blockquote_end'
	      });

	      continue;
	    }

	    // list
	    if (cap = this.rules.list.exec(src)) {
	      src = src.substring(cap[0].length);
	      bull = cap[2];

	      this.tokens.push({
	        type: 'list_start',
	        ordered: bull.length > 1
	      });

	      // Get each top-level item.
	      cap = cap[0].match(this.rules.item);

	      next = false;
	      l = cap.length;
	      i = 0;

	      for (; i < l; i++) {
	        item = cap[i];

	        // Remove the list item's bullet
	        // so it is seen as the next token.
	        space = item.length;
	        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

	        // Outdent whatever the
	        // list item contains. Hacky.
	        if (~item.indexOf('\n ')) {
	          space -= item.length;
	          item = !this.options.pedantic
	            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
	            : item.replace(/^ {1,4}/gm, '');
	        }

	        // Determine whether the next list item belongs here.
	        // Backpedal if it does not belong in this list.
	        if (this.options.smartLists && i !== l - 1) {
	          b = block.bullet.exec(cap[i + 1])[0];
	          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
	            src = cap.slice(i + 1).join('\n') + src;
	            i = l - 1;
	          }
	        }

	        // Determine whether item is loose or not.
	        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	        // for discount behavior.
	        loose = next || /\n\n(?!\s*$)/.test(item);
	        if (i !== l - 1) {
	          next = item.charAt(item.length - 1) === '\n';
	          if (!loose) loose = next;
	        }

	        this.tokens.push({
	          type: loose
	            ? 'loose_item_start'
	            : 'list_item_start'
	        });

	        // Recurse.
	        this.token(item, false, bq);

	        this.tokens.push({
	          type: 'list_item_end'
	        });
	      }

	      this.tokens.push({
	        type: 'list_end'
	      });

	      continue;
	    }

	    // html
	    if (cap = this.rules.html.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: this.options.sanitize
	          ? 'paragraph'
	          : 'html',
	        pre: !this.options.sanitizer
	          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	        text: cap[0]
	      });
	      continue;
	    }

	    // def
	    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.links[cap[1].toLowerCase()] = {
	        href: cap[2],
	        title: cap[3]
	      };
	      continue;
	    }

	    // table (gfm)
	    if (top && (cap = this.rules.table.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i]
	          .replace(/^ *\| *| *\| *$/g, '')
	          .split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // top-level paragraph
	    if (top && (cap = this.rules.paragraph.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'paragraph',
	        text: cap[1].charAt(cap[1].length - 1) === '\n'
	          ? cap[1].slice(0, -1)
	          : cap[1]
	      });
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      // Top-level should never reach here.
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'text',
	        text: cap[0]
	      });
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return this.tokens;
	};

	/**
	 * Inline-Level Grammar
	 */

	var inline = {
	  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
	  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
	  url: noop,
	  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
	  link: /^!?\[(inside)\]\(href\)/,
	  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
	  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
	  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
	  em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
	  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
	  br: /^ {2,}\n(?!\s*$)/,
	  del: noop,
	  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
	};

	inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
	inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

	inline.link = replace(inline.link)
	  ('inside', inline._inside)
	  ('href', inline._href)
	  ();

	inline.reflink = replace(inline.reflink)
	  ('inside', inline._inside)
	  ();

	/**
	 * Normal Inline Grammar
	 */

	inline.normal = merge({}, inline);

	/**
	 * Pedantic Inline Grammar
	 */

	inline.pedantic = merge({}, inline.normal, {
	  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
	});

	/**
	 * GFM Inline Grammar
	 */

	inline.gfm = merge({}, inline.normal, {
	  escape: replace(inline.escape)('])', '~|])')(),
	  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
	  del: /^~~(?=\S)([\s\S]*?\S)~~/,
	  text: replace(inline.text)
	    (']|', '~]|')
	    ('|', '|https?://|')
	    ()
	});

	/**
	 * GFM + Line Breaks Inline Grammar
	 */

	inline.breaks = merge({}, inline.gfm, {
	  br: replace(inline.br)('{2,}', '*')(),
	  text: replace(inline.gfm.text)('{2,}', '*')()
	});

	/**
	 * Inline Lexer & Compiler
	 */

	function InlineLexer(links, options) {
	  this.options = options || marked.defaults;
	  this.links = links;
	  this.rules = inline.normal;
	  this.renderer = this.options.renderer || new Renderer;
	  this.renderer.options = this.options;

	  if (!this.links) {
	    throw new
	      Error('Tokens array requires a `links` property.');
	  }

	  if (this.options.gfm) {
	    if (this.options.breaks) {
	      this.rules = inline.breaks;
	    } else {
	      this.rules = inline.gfm;
	    }
	  } else if (this.options.pedantic) {
	    this.rules = inline.pedantic;
	  }
	}

	/**
	 * Expose Inline Rules
	 */

	InlineLexer.rules = inline;

	/**
	 * Static Lexing/Compiling Method
	 */

	InlineLexer.output = function(src, links, options) {
	  var inline = new InlineLexer(links, options);
	  return inline.output(src);
	};

	/**
	 * Lexing/Compiling
	 */

	InlineLexer.prototype.output = function(src) {
	  var out = ''
	    , link
	    , text
	    , href
	    , cap;

	  while (src) {
	    // escape
	    if (cap = this.rules.escape.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += cap[1];
	      continue;
	    }

	    // autolink
	    if (cap = this.rules.autolink.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[2] === '@') {
	        text = cap[1].charAt(6) === ':'
	          ? this.mangle(cap[1].substring(7))
	          : this.mangle(cap[1]);
	        href = this.mangle('mailto:') + text;
	      } else {
	        text = escape(cap[1]);
	        href = text;
	      }
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // url (gfm)
	    if (!this.inLink && (cap = this.rules.url.exec(src))) {
	      src = src.substring(cap[0].length);
	      text = escape(cap[1]);
	      href = text;
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // tag
	    if (cap = this.rules.tag.exec(src)) {
	      if (!this.inLink && /^<a /i.test(cap[0])) {
	        this.inLink = true;
	      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
	        this.inLink = false;
	      }
	      src = src.substring(cap[0].length);
	      out += this.options.sanitize
	        ? this.options.sanitizer
	          ? this.options.sanitizer(cap[0])
	          : escape(cap[0])
	        : cap[0]
	      continue;
	    }

	    // link
	    if (cap = this.rules.link.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.inLink = true;
	      out += this.outputLink(cap, {
	        href: cap[2],
	        title: cap[3]
	      });
	      this.inLink = false;
	      continue;
	    }

	    // reflink, nolink
	    if ((cap = this.rules.reflink.exec(src))
	        || (cap = this.rules.nolink.exec(src))) {
	      src = src.substring(cap[0].length);
	      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	      link = this.links[link.toLowerCase()];
	      if (!link || !link.href) {
	        out += cap[0].charAt(0);
	        src = cap[0].substring(1) + src;
	        continue;
	      }
	      this.inLink = true;
	      out += this.outputLink(cap, link);
	      this.inLink = false;
	      continue;
	    }

	    // strong
	    if (cap = this.rules.strong.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.strong(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // em
	    if (cap = this.rules.em.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.em(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.codespan(escape(cap[2], true));
	      continue;
	    }

	    // br
	    if (cap = this.rules.br.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.br();
	      continue;
	    }

	    // del (gfm)
	    if (cap = this.rules.del.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.del(this.output(cap[1]));
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.text(escape(this.smartypants(cap[0])));
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return out;
	};

	/**
	 * Compile Link
	 */

	InlineLexer.prototype.outputLink = function(cap, link) {
	  var href = escape(link.href)
	    , title = link.title ? escape(link.title) : null;

	  return cap[0].charAt(0) !== '!'
	    ? this.renderer.link(href, title, this.output(cap[1]))
	    : this.renderer.image(href, title, escape(cap[1]));
	};

	/**
	 * Smartypants Transformations
	 */

	InlineLexer.prototype.smartypants = function(text) {
	  if (!this.options.smartypants) return text;
	  return text
	    // em-dashes
	    .replace(/---/g, '\u2014')
	    // en-dashes
	    .replace(/--/g, '\u2013')
	    // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
	    // closing singles & apostrophes
	    .replace(/'/g, '\u2019')
	    // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
	    // closing doubles
	    .replace(/"/g, '\u201d')
	    // ellipses
	    .replace(/\.{3}/g, '\u2026');
	};

	/**
	 * Mangle Links
	 */

	InlineLexer.prototype.mangle = function(text) {
	  if (!this.options.mangle) return text;
	  var out = ''
	    , l = text.length
	    , i = 0
	    , ch;

	  for (; i < l; i++) {
	    ch = text.charCodeAt(i);
	    if (Math.random() > 0.5) {
	      ch = 'x' + ch.toString(16);
	    }
	    out += '&#' + ch + ';';
	  }

	  return out;
	};

	/**
	 * Renderer
	 */

	function Renderer(options) {
	  this.options = options || {};
	}

	Renderer.prototype.code = function(code, lang, escaped) {
	  if (this.options.highlight) {
	    var out = this.options.highlight(code, lang);
	    if (out != null && out !== code) {
	      escaped = true;
	      code = out;
	    }
	  }

	  if (!lang) {
	    return '<pre><code>'
	      + (escaped ? code : escape(code, true))
	      + '\n</code></pre>';
	  }

	  return '<pre><code class="'
	    + this.options.langPrefix
	    + escape(lang, true)
	    + '">'
	    + (escaped ? code : escape(code, true))
	    + '\n</code></pre>\n';
	};

	Renderer.prototype.blockquote = function(quote) {
	  return '<blockquote>\n' + quote + '</blockquote>\n';
	};

	Renderer.prototype.html = function(html) {
	  return html;
	};

	Renderer.prototype.heading = function(text, level, raw) {
	  return '<h'
	    + level
	    + ' id="'
	    + this.options.headerPrefix
	    + raw.toLowerCase().replace(/[^\w]+/g, '-')
	    + '">'
	    + text
	    + '</h'
	    + level
	    + '>\n';
	};

	Renderer.prototype.hr = function() {
	  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	};

	Renderer.prototype.list = function(body, ordered) {
	  var type = ordered ? 'ol' : 'ul';
	  return '<' + type + '>\n' + body + '</' + type + '>\n';
	};

	Renderer.prototype.listitem = function(text) {
	  return '<li>' + text + '</li>\n';
	};

	Renderer.prototype.paragraph = function(text) {
	  return '<p>' + text + '</p>\n';
	};

	Renderer.prototype.table = function(header, body) {
	  return '<table>\n'
	    + '<thead>\n'
	    + header
	    + '</thead>\n'
	    + '<tbody>\n'
	    + body
	    + '</tbody>\n'
	    + '</table>\n';
	};

	Renderer.prototype.tablerow = function(content) {
	  return '<tr>\n' + content + '</tr>\n';
	};

	Renderer.prototype.tablecell = function(content, flags) {
	  var type = flags.header ? 'th' : 'td';
	  var tag = flags.align
	    ? '<' + type + ' style="text-align:' + flags.align + '">'
	    : '<' + type + '>';
	  return tag + content + '</' + type + '>\n';
	};

	// span level renderer
	Renderer.prototype.strong = function(text) {
	  return '<strong>' + text + '</strong>';
	};

	Renderer.prototype.em = function(text) {
	  return '<em>' + text + '</em>';
	};

	Renderer.prototype.codespan = function(text) {
	  return '<code>' + text + '</code>';
	};

	Renderer.prototype.br = function() {
	  return this.options.xhtml ? '<br/>' : '<br>';
	};

	Renderer.prototype.del = function(text) {
	  return '<del>' + text + '</del>';
	};

	Renderer.prototype.link = function(href, title, text) {
	  if (this.options.sanitize) {
	    try {
	      var prot = decodeURIComponent(unescape(href))
	        .replace(/[^\w:]/g, '')
	        .toLowerCase();
	    } catch (e) {
	      return '';
	    }
	    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
	      return '';
	    }
	  }
	  var out = '<a href="' + href + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += '>' + text + '</a>';
	  return out;
	};

	Renderer.prototype.image = function(href, title, text) {
	  var out = '<img src="' + href + '" alt="' + text + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += this.options.xhtml ? '/>' : '>';
	  return out;
	};

	Renderer.prototype.text = function(text) {
	  return text;
	};

	/**
	 * Parsing & Compiling
	 */

	function Parser(options) {
	  this.tokens = [];
	  this.token = null;
	  this.options = options || marked.defaults;
	  this.options.renderer = this.options.renderer || new Renderer;
	  this.renderer = this.options.renderer;
	  this.renderer.options = this.options;
	}

	/**
	 * Static Parse Method
	 */

	Parser.parse = function(src, options, renderer) {
	  var parser = new Parser(options, renderer);
	  return parser.parse(src);
	};

	/**
	 * Parse Loop
	 */

	Parser.prototype.parse = function(src) {
	  this.inline = new InlineLexer(src.links, this.options, this.renderer);
	  this.tokens = src.reverse();

	  var out = '';
	  while (this.next()) {
	    out += this.tok();
	  }

	  return out;
	};

	/**
	 * Next Token
	 */

	Parser.prototype.next = function() {
	  return this.token = this.tokens.pop();
	};

	/**
	 * Preview Next Token
	 */

	Parser.prototype.peek = function() {
	  return this.tokens[this.tokens.length - 1] || 0;
	};

	/**
	 * Parse Text Tokens
	 */

	Parser.prototype.parseText = function() {
	  var body = this.token.text;

	  while (this.peek().type === 'text') {
	    body += '\n' + this.next().text;
	  }

	  return this.inline.output(body);
	};

	/**
	 * Parse Current Token
	 */

	Parser.prototype.tok = function() {
	  switch (this.token.type) {
	    case 'space': {
	      return '';
	    }
	    case 'hr': {
	      return this.renderer.hr();
	    }
	    case 'heading': {
	      return this.renderer.heading(
	        this.inline.output(this.token.text),
	        this.token.depth,
	        this.token.text);
	    }
	    case 'code': {
	      return this.renderer.code(this.token.text,
	        this.token.lang,
	        this.token.escaped);
	    }
	    case 'table': {
	      var header = ''
	        , body = ''
	        , i
	        , row
	        , cell
	        , flags
	        , j;

	      // header
	      cell = '';
	      for (i = 0; i < this.token.header.length; i++) {
	        flags = { header: true, align: this.token.align[i] };
	        cell += this.renderer.tablecell(
	          this.inline.output(this.token.header[i]),
	          { header: true, align: this.token.align[i] }
	        );
	      }
	      header += this.renderer.tablerow(cell);

	      for (i = 0; i < this.token.cells.length; i++) {
	        row = this.token.cells[i];

	        cell = '';
	        for (j = 0; j < row.length; j++) {
	          cell += this.renderer.tablecell(
	            this.inline.output(row[j]),
	            { header: false, align: this.token.align[j] }
	          );
	        }

	        body += this.renderer.tablerow(cell);
	      }
	      return this.renderer.table(header, body);
	    }
	    case 'blockquote_start': {
	      var body = '';

	      while (this.next().type !== 'blockquote_end') {
	        body += this.tok();
	      }

	      return this.renderer.blockquote(body);
	    }
	    case 'list_start': {
	      var body = ''
	        , ordered = this.token.ordered;

	      while (this.next().type !== 'list_end') {
	        body += this.tok();
	      }

	      return this.renderer.list(body, ordered);
	    }
	    case 'list_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.token.type === 'text'
	          ? this.parseText()
	          : this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'loose_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'html': {
	      var html = !this.token.pre && !this.options.pedantic
	        ? this.inline.output(this.token.text)
	        : this.token.text;
	      return this.renderer.html(html);
	    }
	    case 'paragraph': {
	      return this.renderer.paragraph(this.inline.output(this.token.text));
	    }
	    case 'text': {
	      return this.renderer.paragraph(this.parseText());
	    }
	  }
	};

	/**
	 * Helpers
	 */

	function escape(html, encode) {
	  return html
	    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#39;');
	}

	function unescape(html) {
		// explicitly match decimal, hex, and named HTML entities 
	  return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g, function(_, n) {
	    n = n.toLowerCase();
	    if (n === 'colon') return ':';
	    if (n.charAt(0) === '#') {
	      return n.charAt(1) === 'x'
	        ? String.fromCharCode(parseInt(n.substring(2), 16))
	        : String.fromCharCode(+n.substring(1));
	    }
	    return '';
	  });
	}

	function replace(regex, opt) {
	  regex = regex.source;
	  opt = opt || '';
	  return function self(name, val) {
	    if (!name) return new RegExp(regex, opt);
	    val = val.source || val;
	    val = val.replace(/(^|[^\[])\^/g, '$1');
	    regex = regex.replace(name, val);
	    return self;
	  };
	}

	function noop() {}
	noop.exec = noop;

	function merge(obj) {
	  var i = 1
	    , target
	    , key;

	  for (; i < arguments.length; i++) {
	    target = arguments[i];
	    for (key in target) {
	      if (Object.prototype.hasOwnProperty.call(target, key)) {
	        obj[key] = target[key];
	      }
	    }
	  }

	  return obj;
	}


	/**
	 * Marked
	 */

	function marked(src, opt, callback) {
	  if (callback || typeof opt === 'function') {
	    if (!callback) {
	      callback = opt;
	      opt = null;
	    }

	    opt = merge({}, marked.defaults, opt || {});

	    var highlight = opt.highlight
	      , tokens
	      , pending
	      , i = 0;

	    try {
	      tokens = Lexer.lex(src, opt)
	    } catch (e) {
	      return callback(e);
	    }

	    pending = tokens.length;

	    var done = function(err) {
	      if (err) {
	        opt.highlight = highlight;
	        return callback(err);
	      }

	      var out;

	      try {
	        out = Parser.parse(tokens, opt);
	      } catch (e) {
	        err = e;
	      }

	      opt.highlight = highlight;

	      return err
	        ? callback(err)
	        : callback(null, out);
	    };

	    if (!highlight || highlight.length < 3) {
	      return done();
	    }

	    delete opt.highlight;

	    if (!pending) return done();

	    for (; i < tokens.length; i++) {
	      (function(token) {
	        if (token.type !== 'code') {
	          return --pending || done();
	        }
	        return highlight(token.text, token.lang, function(err, code) {
	          if (err) return done(err);
	          if (code == null || code === token.text) {
	            return --pending || done();
	          }
	          token.text = code;
	          token.escaped = true;
	          --pending || done();
	        });
	      })(tokens[i]);
	    }

	    return;
	  }
	  try {
	    if (opt) opt = merge({}, marked.defaults, opt);
	    return Parser.parse(Lexer.lex(src, opt), opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/chjj/marked.';
	    if ((opt || marked.defaults).silent) {
	      return '<p>An error occured:</p><pre>'
	        + escape(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	}

	/**
	 * Options
	 */

	marked.options =
	marked.setOptions = function(opt) {
	  merge(marked.defaults, opt);
	  return marked;
	};

	marked.defaults = {
	  gfm: true,
	  tables: true,
	  breaks: false,
	  pedantic: false,
	  sanitize: false,
	  sanitizer: null,
	  mangle: true,
	  smartLists: false,
	  silent: false,
	  highlight: null,
	  langPrefix: 'lang-',
	  smartypants: false,
	  headerPrefix: '',
	  renderer: new Renderer,
	  xhtml: false
	};

	/**
	 * Expose
	 */

	marked.Parser = Parser;
	marked.parser = Parser.parse;

	marked.Renderer = Renderer;

	marked.Lexer = Lexer;
	marked.lexer = Lexer.lex;

	marked.InlineLexer = InlineLexer;
	marked.inlineLexer = InlineLexer.output;

	marked.parse = marked;

	if (true) {
	  module.exports = marked;
	} else if (typeof define === 'function' && define.amd) {
	  define(function() { return marked; });
	} else {
	  this.marked = marked;
	}

	}).call(function() {
	  return this || (typeof window !== 'undefined' ? window : global);
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	module.exports = _extends({
	    'standard.md': __webpack_require__(17),
	    'third-party.md': __webpack_require__(18),
	    'install.md': __webpack_require__(19),
	    'introduction.md': __webpack_require__(20),

	    'configure-api.md': __webpack_require__(21),
	    'configure-join.md': __webpack_require__(22),
	    'configure-others.md': __webpack_require__(23),
	    'configure-page.md': __webpack_require__(24),

	    'develop-install.md': __webpack_require__(25),
	    'develop-config.md': __webpack_require__(26),
	    'develop-modules.md': __webpack_require__(27),
	    'develop-others.md': __webpack_require__(28),
	    'develop-build.md': __webpack_require__(29),

	    'update-log.md': __webpack_require__(30)

	}, __webpack_require__(31));

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	module.exports = "## 开发标准\n> 技术标准: ES6编码标准，React+npm+Webpack技术  \n\n在实际项目开发中，你会需要对ES2015|ES2016|JSX代码进行构建，调试，代理，打包部署等一系列工程化的需求,这里提供npm+webpack的工具链来辅助开发\n\n> 样式标准: antd.css + sass\n\n本框架是基于Antd开发的，大量引用了antd的样式，详见：http://antd.uf.baidu.com\n\n## 项目结构\n```\nuf\n|-- dist                // 构建好的组件代码，供线上使用\n|-- docs                // 文档代码\n|   |-- app             // 组件 Demo。全部继承`BaseDoc.js`\n|   |-- markdown        // 组件 markdown 文档。其中`index.js`把全部md文件整合到一起\n|   |-- php             // 某些组件依赖后端接口，这里用来模拟后端接口返回模拟数据\n|   `-- entry.js        // 文档入口\n|-- lib                 // 编译后的代码，根据src代码生成，暂时用不到\n|-- public              // 打包生成的文档代码\n|-- src                 // 组件源代码\n|   |-- component       // 公共组件，例如：BaseComponent\n|   |-- utils           // 公共工具，例如：Ajax、Cache、Utils 等\n|   `-- 其他组件         // 其他组件\n|-- index.php           // 页面入口\n|-- package.json\n`-- webpack.config.js   // 构建公共库文件\n\n```\n\n## 文件组织：\nsrc 中，每个组件一个文件夹，里面包含：\n> js代码  \n> scss代码 - style.scss  \n> 引入文件 - index.js  \n\n\n## 组件开发\n\n### UF组件引入：\n`import Export from 'src/export';`\n> uf对应的是src文件夹，export即export组件的文件夹，因为存在index.js，所以无需指定组件名  \n\n### 组件继承：\n`import {BaseComponent} from 'src/component';`  \n`export default class Table extends BaseComponent {}`\n> 为了方便后面对组件通用功能进行拓展，自己开发的组件全部继承`BaseComponent`\n\n### 组件初始化：\n`this.__init();`\n> 组件的`constructor`构造函数里，执行完`super(props);`之后，紧接着需调用`this.__init();`函数对组件进行初始化，此函数再BaseComponent里实现，用于做通用处理\n\n### 组件命名：\n* 组件名和文件名一致，均采用帕斯卡命名法（即全部首字母大写）\n* 组件名要尽量简短易懂，尽量用一个单词\n\n### 通用字段命名\n```\ndata        数据\nparams      参数对象\nsource      异步请求获取数据接口\napi         异步提交数据接口\n```\n\n### 特殊字段\n以下关键字解析时会有额外操作   \ncontent     子内容\n\n\n### 组件开发规范\n1. 除antd外，尽量不要引入其他第三方组件\n2. 接口及配置项命名需语义化，统一采用驼峰命名\n3. 语义化不是把中文转换成英文，命名时，在能表达清楚意思的前提下，名称要尽量短\n4. 组件顶层的配置项尽量少，分为三类：\n> config: 不变的配置，比如组件如何展示，需要调用那些控件等  \n> data:   组件所需的数据列表  \n> params: 组件调用接口时传递的参数（经常变化的参数，如果是静态的，也可以放到config中）  \n> 组件暴露出的事件（回调函数）直接放到组件的props上\n5. 代码注释\n> 开发时，养成随手写注释的习惯  \n> 至少每个函数需要注释说明是函数的作用，注释多多益善  \n> console.log 使用完要删除，不要到处留下 console.log\n\n---\n## BaseComponent 开发及使用\n这里的规范不仅限于BaseComponent，其他基础抽象类也使用以下规范\n\n### 开发规范\n开发时难免会遇到需要覆盖父类函数的情况，比如要在父类定义过的`__init`函数上追加处理逻辑，则需要即执行父类的原函数（super），又要执行新写入的逻辑，用法如下：  \n```javascript\n__init() {\n    super.__init.call(this);\n    this._setProps();\n}\n```\n\n如需要在React的生命周期的5个函数中增加处理逻辑，可以使用`_componentWillReceiveProps`这种名称之前加下划线的形式，组件调用__init函数时会自动把这几个函数的内容插入到对应的函数最前面执行：  \n```javascript\n_componentWillReceiveProps = (nextProps, ...params) => {\n    super._componentWillReceiveProps && super._componentWillReceiveProps();\n    this._initPorps();\n}\n```\n> 需要注意的是：为了防止覆盖父类的函数，需在函数里面加入 `super._xxx`来优先调用一下父类的函数  \n> 其次需要注意的有两点： \n> * 主要保证把全部参数传递给原函数  \n> * 调用顺序为 父类函数 > 当前函数 > 子类函数\n\n### 命名规范  \n直接给用户调用的通用属性或函数，使用正常的驼峰命名，符合用户习惯  \n**`property`、`function`**  \n> 各个组件通用的函数，可在基础类中实现，例如各种表单组件的获取数据函数：getValue()\n\n为了防止基础类里面的函数及变量被子组件覆盖，不对用户可见的变量和函数全部用特殊的命名方式，如下：  \n**`_property`、`_function`**  \n> 私有属性和方法，均使用单下划线开头  \n\n**`__property`、`__function`**  \n> 供子组件调用的函数，使用双下划线开头，且命名要尽量简短易懂。例如：`this.__init()`\n\n### 功能列表\n\n##### **`__props`**  \n定义默认的props参数。  \n在开发组件时，一些不需要做额处理的默认参数，可以直接在`constructor()`里`this.__init()`之前在`this.__props`上增加值（BaseComponent的构造函数中已经初始化并赋值，这里不能直接覆盖）。【推荐直接在config.js中配置】  \n也可以在`config.js`中定义默认参数，见`config.js`文件【推荐】\n> 具体示例可见 `Iframe` 组件的 mode 参数默认值声明用法\n\n##### **`__init()`**  \n初始化BaseComponent里的功能，例如共享组件、注册自动解除共享等功能。每个继承 BaseComponent 的组件都必须在构造函数中调用此函数  \n> 注意本函数的调用时机，应该是在设置父类属性之后（如：`this.__controlled`属性），执行组件本身逻辑之前\n\n##### **`__setProps(props[, follow])`**  \n用于在组件开发中更新__props，类似于setState，只不过是在刷新 __props  \n也可以传入待刷新完成后执行自己想要执行的逻辑（比如Modal，需弹框显示后才能执行其他操作）  \n默认会刷新组件；也可以把第二个参数设为 false 阻止刷新\n\n##### **`__mergeProps(...objs)`**  \n合并默认配置和用户传入的配置，使后续代码中无需再判断属性值是否存在。支持传多个参数  \n以第一个对象为目标，依次把后面的对象merge到上去，支持深层的merge，类似于一个深层的 Object.assign()  \n> tips: 如果把 defaultProps 放在第一位，merge完成后defaultProps的值会变成merge后的数据，如果defaultProps需多次使用，会出问题，针对此问题，可以第一个参数放一个空对象，类似于Object.assign的用法   \n\n##### **`__filterProps(obj, string/array)`**  \n从 obj 中过滤掉某些属性，可以是多个字符串参数，也可以是一个数组\n\n##### **`__shouldUpdate(this.props, nextProps)`**  \n用于 componentWillReceiveProps 中，判断是否需要刷新。这里使用的是正真的 props 和 nextProps   \n具体有如下两种特殊场景：  \n如果是单纯因为父组件属性导致子组件的 cwr 函数被调用，两次的props是相同的，没必要刷新；  \n如果是set导致的，则两次的props肯定会有不同，需刷新  \n还有：需要把_filter中定义的属性全部过滤掉，这些属性是额外定义的，对判断结果会有影响  \n\n\n##### **`__filterProps(props, arr)`**  \n过滤props中的某些属性，返回一个新的props对象。用于过滤例如原始标签上不支持的属性，防止会报很多warning。  \n> arr即可以为一个数组，也可以直接为一个字符串，如果只需要过滤掉一个属性，则可直接传入一个字符串\n\n##### **`__getData(url, params, success, error, onchange)`**\n使用 `get` 的方式向后端发送请求，除url外，其他参数可以不传  \n`success`: 不是指请求成功执行的函数，而是请求的数据符合预期，可以正常使用的处理函数(即 'HTTP Status Code' === 200 && data.status === 0)  \n`error`:   除了请求出错，还有请求不符合预期都会触发error (即 'HTTP Status Code' !== 200 || data.status !== 0)\n>  tips: 如果error执行完返回true，则会继续执行默认的error处理函数       \n\n`onchange`: 请求开始/结束时执行。可以用于绑定 loading 状态     \n>  开始执行请求时执行 onchange 参数为 (true, 'sending')  \n>  请求完成时执行 onchange 参数为 (false, 'success'/'error')  \n\n##### **`__postData(url, params, success, error, onchange)`**\n使用 `post` 的方式向后端发送请求，参数同上。\n\n##### **`__ajax(obj)`**\n通用的 `ajax` 函数。参数为一个对象。\n> 常用参数有：url、method、data、type、onchange、success、error\n\n##### **`__analysis(config)`**\n解析某个属性的配置。方便开发组件时解析一些可以为配置的属性\n\n##### **`__authority(item)`**\n判断是否为权限点 && 是否有权限\n\n##### **`__getComponent(item)`**\n获取缓存中的组件\n\n---\n## 文档编写规范\n1. 每个文档至少包含 4/5 部分\n> 组件示例：尽量把所有的功能在示例里展现出来  \n> 配置参数：解释每个参数的意义，注明是否必填和默认值。可写多个配置参数模块  \n> 回调函数：绑定到组件上的事件的回调函数，如：绑在`Input`组件上的`onChange`  \n> 调用接口：可供用户调用的接口，如暴露给用户的更改某些状态的函数  \n> 示例代码：实现`组件示例`所需代码，用户只需拷贝示例代码就可以在本地实现示例中的效果。(把配置抽离出来)\n2. 其他扩展部分：\n> 组件功能及特点介绍  \n> 组件高级用法、截图等\n\n"

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = "\n为了各个项目引用方便，先把一些常用的组件/库汇总到了一起。\n\n### jQuery\n`3.2.1`\n```\nhttp://uf.baidu.com/third_party/jquery/jquery-3.2.1.js\nhttp://uf.baidu.com/third_party/jquery/jquery-3.2.1.min.js\n```\n\n\n### Echarts\n`3.6.2`\n\n```\nhttp://uf.baidu.com/third_party/echarts/echarts.js\nhttp://uf.baidu.com/third_party/echarts/echarts.min.js\nhttp://uf.baidu.com/third_party/echarts/echarts.simple.min.js\nhttp://uf.baidu.com/third_party/echarts/echarts.common.min.js\n```\n\n> * echarts.js：包含所有图表组件，且是未压缩代码，建议不要在线上环境使用（2.44M）\n> * echarts.min.js：包含所有图表组件，压缩（644k）\n> * echarts.simple.min.js： 只包含基础图表 - 折 柱 饼（254K）\n> * echarts.common.min.js：包含常用的图表组件 - 折 柱 饼 散点 图例、工具栏 标注/线/域、数据区域缩放（387K）\n\n\n### Echarts2\n`2.2.7`\n\n```\nhttp://uf.baidu.com/third_party/echarts2/echarts.js\nhttp://uf.baidu.com/third_party/echarts2/echarts-all.js\n```\n\n\n### Amaze-UI \n\n`2.7.2`\n\n```\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.css\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.min.css\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.flat.css\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.flat.min.css\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.min.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.ie8polyfill.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.ie8polyfill.min.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.widgets.helper.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.widgets.helper.min.js\n```\n\n> * amazeui.css / amazeui.js：包含 Amaze UI 所有的 CSS、JS。\n> * amazeui.flat.css：圆角版 Amaze UI CSS\n> * amazeui.ie8polyfill.js：IE8 polyfill\n> * amazeui.widgets.helper.js： 供使用 Handlebars 的用户使用，其他用户请忽略，内含 Web 组件必须的 Handlebars helper 及 Web 组件模板 partials。\n\n以上每个文件都有对应的 minified 文件。\n\n### UEditor\n`1.4.3-utf8-php`\n\n```\nhttp://uf.baidu.com/third_party/ueditor/js.php\n```\n\n> 本来需要引入一堆js，通过 `js.php` 集成到了一起\n\n\n### UMEditor\n`1.2.3-utf8-php`\n\n类似 UEditor，但是比UEditor轻\n\n```\nhttp://uf.baidu.com/third_party/umeditor/style.min.css\nhttp://uf.baidu.com/third_party/umeditor/js.php\n```\n\n> 本来需要引入一堆js，通过 `js.php` 集成到了一起\n\n\n"

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	module.exports = "UF 致力于提供给 RD 愉悦的页面开发体验\n\n使用此组件，您无需提前安装任何环境。\n\n## 1.组件引入\n\n直接复制如下内容到页面的`<head>`标签里即可：\n\n```html\n<link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/theme.min.css\" />\n<link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/uf_v0.2.min.css\" />\n<script src=\"http://uf.baidu.com/dist/dll.min.js\"></script>\n<script src=\"http://uf.baidu.com/dist/antd.min.js\"></script>\n<script src=\"http://uf.baidu.com/dist/uf_v0.2.min.js\"></script>\n```\n\n> 注：以上文件引入的是压缩版本，适合线上使用，在开发过程中，可以引入开发版本，以查看更多报错信息，即去掉 `.min` 后缀\n\n如果需要兼容比较老的浏览器，可以引入如下文件实现兼容  \n```html\n<script src=\"http://uf.baidu.com/dist/browser-polyfill.min.js\"></script>\n```\n\n\n## 2.组件使用\n\n第一个例子：\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/theme.min.css\" />\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/uf_v0.2.min.css\" />\n        <script src=\"http://uf.baidu.com/dist/dll.min.js\"></script>\n        <script src=\"http://uf.baidu.com/dist/antd.min.js\"></script>\n        <script src=\"http://uf.baidu.com/dist/uf_v0.2.min.js\"></script>\n        <title>代码测试</title>\n    </head>\n    <body>\n        <!-- 页面组件承载元素，使用id作为参数  -->\n        <div id=\"demo\"></div>\n        <!-- 此处为直接从左侧任意一组件demo中拷贝过来的demo，可见 `Layout 布局` 尝试配置整个页面  -->\n        <script>\n            var config = {\n                \"type\": \"card\",\n                \"title\": \"Card title\",\n                \"loading\": true,\n                \"content\": \"包含标题、内容、操作区域的卡片内容区域\"\n            };\n            UF.init(config, '#demo');\n        </script>\n    </body>\n</html>\n\n```\n\n第一步：在 `<head>`标签中引入库文件\n\n第二步：书写页面的配置参数\n\n第三步：最后调用`UF.init`函数在`id=\"demo\"`的元素上按照config初始化页面\n\nconfig 此处为一个组件的配置，也可以是整个页面的配置，具体可见[`页面示例`](#/Usage/Demo)中的示例。\n\n更多`UF`上的函数可见[`组件交互`](#/Usage/Api)\n\n\n"

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = "## 写在最前面\n\nUF 框架是一个面向RD（不仅是FE）的自助配置框架，RD 直接通过简单的 JSON 配置即能生成页面。\n\n他致力于解放业务中各类简单枯燥的前端交互开发工作。直接书写页面上需要的组件的配置并调用 API 初始化他们，即可生成整个页面；并能通过指定 API 完成更加定制化的业务需求。\n\nDemo 演示请点击左侧各组件示例\n\n> 如有需求可以联系`liuzechun@baidu.com`、[`Hi`](baidu://message/?id=861260447) 咨询。\n\n## 特性\n\n##### 1、界面配置化\n\n用配置的 JSON 声明你需要一个什么样的页面，包含什么交互，框架帮你具体实现。\n\n> 框架中包含有 40 余种组件，从元素级到页面级的组件都有，可以满足约 90% 的日常使用场景。\n\n\n##### 2、学习成本低\n框架整合了各种交互场景，抽象成了一个简单的定理。何为组件交互？一个组件改变另一个组件，即为交互。\n\n基于此，框架了统一的API来完成各种组件的不同的操作。\n\n##### 3、开发成本低\n* 无需搭建前端环境\n* 无需关注UI风格，后续还会提供多种主题样式，可自由切换\n* 更少的业务逻辑实现\n\n\n\n## 浏览器支持\n现代浏览器和 IE9 及以上。\n\n\n## 版本\n* 开发版：0.2\n* 稳定版：null\n\n\n## 浏览器引入\n> 以下库文件分为两个版本：  \n> beta 版：多用于开发，开发中的一些 warning 以及 error 会在浏览器控制台中打印出来，方便排查问题。因此 beta 版文件较大。  \n> stable 版：屏蔽了 warning 及部分 error 问题，使代码尽量可以执行。同时，代码进行了压缩，文件较小，报错及问题定位较困难。\n\n#### 公共基础库\n\nUF 底层使用 React / Antd 开发完成的，所以在使用 UF 框架之前，要先引入通用公共基础库，如下：\n\nbeta:  \n* http://uf.baidu.com/css/theme.css\n* http://uf.baidu.com/dist/dll.js\n* http://uf.baidu.com/dist/antd.js\n\nstable:  \n* http://uf.baidu.com/css/theme.min.css\n* http://uf.baidu.com/dist/dll.min.js\n* http://uf.baidu.com/dist/antd.min.js\n\n#### UF组件库\n\nbeta:  \n* http://uf.baidu.com/dist/uf_v0.2.js\n* http://uf.baidu.com/dist/uf_v0.2.css\n\nstable:   \n* http://uf.baidu.com/dist/uf_v0.2.min.js\n* http://uf.baidu.com/dist/uf_v0.2.min.css\n\n\n## 加入我们\n\n欢迎各位大神贡献自己的组件，组件开发请联系`liuzechun@baidu.com`、[`Hi`](baidu://message/?id=861260447)\n"

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	module.exports = "\n如[快速上手](#/Install)中使用的`UF.init()`为一些在UF中事先定义好的函数，这里我们做详细的罗列解释\n\n## # UF\n\nUF 为整个框架的入口，全部组件使用都依赖于这个`UF`。可以类比为jQuery的`$`符号  \n\nUF本身为一个函数，可以通过UF函数查到到指定name的组件。例如 [Button 按钮](#/General/Button) 的demo里面，点击展示按钮loading的例子中：\n\n```javascript\n{\n    \"type\": \"button\",\n    \"name\": \"my-button1\",\n    \"mode\": \"primary\",\n    \"content\": \"Click me!\",\n    \"onClick\": function onClick(v) {\n        return UF('my-button1').set({\n            loading: true\n        });\n    }\n}\n```\n其中 `UF('my-button1')` 即为查找 name 为 my-button1 的组件，即为本身。\n\n\n** *同时 UF 上还提供了一些函数，用法如下：* **  \n\n\n## # UF.init()\n\n`UF.init(config, target/targetSelector)`\n\n包含两个参数：第一个参数为组件配置，第二个参数为页面上目标元素或目标元素选择器\n\n函数用来把配置初始化为组件，并渲染到页面上。用法如下：\n```javascript\nvar config = {\n    \"type\": \"button\",\n    \"mode\": \"primary\",\n    \"content\": \"Primary\"\n};\nUF.init(config, '#demo');\n```\n还有一种用法是不传递第二个参数，则组件生成后不会渲染到页面上，而是返回生成的组件。例如 [DataPicker 日期选择框](#/DataEntry/DatePicker) 的第三个demo的用法，renderExtraFooter 参数要求为一个函数，函数返回一个组件：\n```javascript\nvar config = {\n    \"type\": \"date-picker\",\n    \"renderExtraFooter\": function() {\n        return UF.init({\n            type: 'button',\n            content: '额外的页脚'\n        });\n    }\n};\nUF.init(config, '#demo');\n```\n\n注意：\n> 如果`UF.config`中配置了如`precondition`会阻塞页面加载的属性，`UF.init`函数会在其执行完成后再执行。  \n> 会先清空目标元素，然后把新组件渲染上去  \n\n\n## # UF.render()\n\n`UF.render(config, target/targetSelector)`\n\n作用和`UF.init`函数类似，也是渲染某个配置到页面上，不过不受config中配置的一些延迟因素影响，会直接渲染组件。\n\n\n## # UF.append()\n\n`UF.append(config, target/targetSelector)`\n\n也是用来渲染组件，与上面两个函数的不同点在于，是在目标元素上追加一个组件，不会清空原目标元素。\n\n函数会返回一个对象，包含两个属性，`element`、`destroy`，element 为为了承载新增的组件而创建的标签，destroy 为一个函数，用来销毁新增的标签。详细用法可见 [Modal示例](#/Custom/Modal)\n\n\n## # UF.set()\n\n`UF.set(string, data)`\n\n存储数据。可以使用UF上的set函数来存储任何数据，并可以在任何地方通过`UF.get`获取。\n\n## # UF.get()\n\n`UF.get(string)`\n\n获取数据。可以使用UF上的`set`函数来存储任何数据，并可以在任何地方通过`UF.get`获取。\n\n例如：\n\n```javascript\nlet list = [0, 1, 2, 3];\nUF.set('test.list', list);\nconsole.log(UF.get('test.list'));\n```\n\n\n## # UF.ajax(params)\n\nAjax 获取数据。params 参数如下：\n\n```json\n{\n    url: url,\n    method: 'get',\n    data: params,\n    type: 'json',\n    success: function(){},\n    error: function(){},\n    onchange: function(){}\n}\n```\n`data`: 需要发送的参数对象  \n`success`: 不是指请求成功执行的函数，而是请求的数据符合预期，可以正常使用的处理函数(即 'HTTP Status Code' === 200 && data.status === 0)  \n`error`: 除了请求出错，还有请求不符合预期都会触发error (即 'HTTP Status Code' !== 200 || data.status !== 0)。error有默认的处理逻辑，默认会在右上角展示错误提示信息。如果传入函数，则按照传入的函数执行错误处理\n>  tips: 如果error执行完返回true，则会继续执行默认的error处理函数       \n\n`onchange`: 请求开始/结束时执行。可以用于绑定 loading 状态     \n>  开始执行请求时执行 onchange 参数为 (true, 'sending')  \n>  请求完成时执行 onchange 参数为 (false, 'success'/'error')  \n\n更多参数可见 [全局配置](#/Develop/Config) 的 *`ajax`* 部分\n\n\n*接口返回值为：*\n```json\nsuccess:\n{\n    status:0,\n    data:{}\n}\nerror:\n{\n    status: 1,\n    msg: 'error'\n}\n```\n*快捷用法：*\n\n#### UF.ajax.get(url, params, success, error, onchange)\n以 GET 的方式发送数据。参数不再是一个对象，而是一个列表，除了url，其他参数可不填。\n\n#### UF.ajax.post(url, params, success, error, onchange)\n以 POST 方式发送数据。\n\n\n## # UF.config()\n\n全局配置。具体用法见 [全局配置](#/Develop/Config)\n\n\n## # UF.load()\n\n载入自定义组件。如果已有组件不能满足日常开发，也支持使用 React 开发的自定义组件，在使用前把自定义组件加载到组件库中，即可和其他组件一样使用。\n\n> 注意：配置中使用的type为`-`连接命名，实际配置的组件为`Pascal`命名，框架内部会做转换。(例如：加入一个自定义组件`UF.load({MyComponent: window.myComponet})`，配置中使用的type为`my-component`)。也可以通过这种方式覆盖原生的组件。\n\n\n## # UF.message()\n\n用于全局展示操作反馈信息。详见 [Message 全局提示](#/Feedback/Message)\n\n## # UF.notification()\n\n用于全局展示通知提醒信息。详见 [Notification 通知提醒框](#/Feedback/Notification)\n\n\n## # UF.moment()\n\n时间处理工具，可以用于做时间格式的各种转化、时间的加减法操作、验证等。具体可见：[Moment](http://momentjs.cn/docs/#/parsing/)、 [操作](http://momentjs.cn/docs/#/manipulating/)\n\n例如：`UF.moment(1508294887034).format('YYYY-MM-DD hh:mm:ss')`、`UF.moment(1508294887034).add(7, 'days')`\n\n\n## # UF.utils\n\n工具函数。包含`typeof`、`uniqueId`、`hash`、`copy`、`clone`、`merge`、`filter`等。\n\n\n---  \n** *component 为通过`UF()`获取的组件实例。以下为实例的一些API：* **  \n\n---\n\n## # component._root\n\n每个组件都有`_root`属性，可以通过此属性来获取当前模块的参数信息，访问到从模块之外传递给模块的参数，例如：路由信息，路由参数等等。\n\n多使用其中的`_root.props`参数，例如获取当前页面的路由信息：\n\n```javascript\ncomponent._root.props.routes\ncomponent._root.props.location\ncomponent._root.props.params\n...\n```\n\n## # component.get()  \n\n`component.get(key)`获取组件的参数。  \n\n如果有key，则返回key的值；如果没有key，则返回全部参数。例如 [Progress 进度条](#/Feedback/Progress) 第5个demo：  \n\n```javascript\nvar config = [\n    {\n        \"type\": \"progress\",\n        \"mode\": \"circle\",\n        \"name\": \"my-progress\",\n        \"percent\": 10\n    },\n    {\n        \"type\": \"button-group\",\n        \"content\": [\n            {\n                \"type\": \"button\",\n                \"icon\": \"minus\",\n                \"onClick\": function(v) {\n\t                var progress = UF('my-progress');\n\t                var current = progress.get('percent');\n\t                progress.set({\n\t                    percent: current - 10\n\t                });\n\t            }\n            }\n        ]\n    }\n];\nUF.init(config, '#demo');\n```\n点击减号时，`progress.get('percent')`即为获取 my-progress 的percent值，并重新给组件设置新的值。\n\n\n## # component.set()  \n\n`component.set(object)`重新设置组件的参数。object 为组件的参数列表。用法如上面的demo中用法。\n\n> tips： 需要注意的一点是，部分属性是一次性的，例如声明周期函数`afterCreate`、`source`系列属性等，一旦组件渲染完成，再次调用`set`函数设置新值不会生效。\n\n\n## # component.hide()  \n\n`component.hide()`可以隐藏组件。\n\n\n## # component.show()  \n\n`component.hide()`可以重新展示组件。\n\n\n"

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	module.exports = "很多组件可以嵌套子组件，那么在配置中如何实现组件嵌套呢？\n\n## content 属性\n\n所有组件都有`content`属性，此属性可以是一个子组件的配置，也可以是多个子组件配置组成的一个数组。例如：\n```javascript\n{\n    \"type\": \"button\",\n    \"mode\": \"primary\",\n    \"content\": [\n        {\n            \"type\": \"icon\",\n            \"mode\": \"left\"\n        },\n        \"Backward\"\n    ]\n}\n```\n> Tips: 如上，任何时候，需要一个组件配置的位置均可以使用一个简单的字符串代替\n\n\n## 组件的特殊属性\n\n有些组件的某些属性也可以为一个子组件的配置，例如`Card`组件的`title`属性，文档中的类型为`string|config`，则`title`属性即可以为字符串，又可以为一个子组件配置。其他组件亦如此。"

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	module.exports = "其他一些使用上的细节说明。\n\n## 几个 \"通用参数\" 的说明\n\n#### # type \n`string`\n\n每个组件都有一个type属性，声明是什么类型的组件，type的格式为中横线连接的小写字母，每个组件文档中的属性列表之前都以组件type命名\n\n例如：[Input 输入框](#/DataEntry/Input)中，共包含四个可用组件，type分别为：input、textarea、input-search、input-group\n\n> 有些组件是和其他组件嵌套组合使用的，例如`input-group`，要以多个`input`组件作为子组件使用，本身只有一个可用属性\n\n#### # content \n`config`\n\n子组件配置。\n\n会嵌套在当前组件的相应位置（需要组件本身支持嵌套子组件，大部分组件支持）\n\n#### # name \n`string`\n\n每个组件都可以有一个`name`属性，用于作为组件的“唯一标识”，可以通过`UF()`来获取并操作此组件。\n\n> 注意，name不能重复，如重复了后生成的组件会覆盖先生成的组件，导致不能再获取到\n\n#### # configTpl \n\n配置模板。用于指定复用在`UF.config`函数中定义的`components`属性中定义的通用模板配置。\n\n\n#### # style \n`object` | `string`\n\n因为底层使用的是React，所以此处建议遵照React的用法：style为一个对象，对象的属性名称使用驼峰命名法\n```javascrpit\nstyle: {\n    marginTop: '16px',\n    fontSize: '12px'\n}\n```\n\n当然，为了方便使用，style也可以按照html里的内联样式写法来写，此时style为一个字符\n```javascript\nstyle: 'margin-top: 16px; font-size: 12px;'\n```\n\n#### # className/class \n`string`\n\n和上面的`style`属性类似，className为React中对于元素的类名的推荐用法，这里推荐使用`className`定义元素的类名\n```javascript\n{\n    type: 'div',\n    className: 'my-div'\n}\n```\n为了方便使用，也可以按照写html时的使用习惯使用class来定义元素类名\n```javascript\n{\n    type: 'div',\n    class: 'my-div'\n}\n```\n\n#### # childrenHolder \n\n配合路由使用，声明模块所在路由中 子路由对应的组件 会渲染到当前模块的 childrenHolder 所处位置。具体用法可见 [项目开发](#/Develop/Install) 中`app.js`模块的用法\n\n\n#### # source 系列参数\n\n开发时难免会有一些数据是需要异步获取再展示的，框架提供了一套自动获取数据并处理的机制。\n\n* **`source`** - 异步获取数据的接口\n* **`sourceHandler`** - 接口数据返回后的处理函数（如果数据无需格式化可以不设置此属性）  \n函数的参数`sourceHandler(data, res)`，其中`data`参数为接口返回数据，`res`参数为接口返回的全部内容（按照ajax的[固定规则](#/Usage/Api)）。函数最终返回格式化后的数据。\n* **`sourceTarget`** - 定义数据处理好后赋值的属性（一般有默认的初始值，除非需要自己定制，否则不需要设置此属性）  \n一些数据录入型组件做了定制(见文档)，例如`select`的target为`options`、`input`等的target为`value`，其他组件默认为`children`/`content`（可以先看是否符合预期在确定是否需定制）\n* **`sourceMethod`** - `post`、`get`方式\n* **`sourceParams`** - 请求数据时附带的的参数对象\n\n\n下面为一个使用场景较复杂的`下拉框`实现。\n\n首先`下拉框`的数据为异步获取，其次接口需要的参数不是固定值（从路由处获取到的id），返回数据不符合标准需要额外处理，可以配置如下：\n\n```javascript\n{\n    type: 'select',\n    source: '/uf/docs/php/data.php',\n    sourceParams: {},\n    // sourceTarget: 'options', // 默认值\n    sourceHandler(data, res, self) {\n        return data.map(v=>{\n            return {value: v.name, label: v.name};\n        });\n    },\n    beforeCreate(props, self) {\n        props.sourceParams = {id: self._root.props.params.id};\n        return props;\n    }\n}\n```\n\n组件渲染之前会先执行`beforeCreate`函数（见下面【组件生命周期】），从路由参数中获取 id 赋给 sourceParams 属性，配置中的 sourceParams 由`{}`变为`{id: 1}`；然后组件渲染完成后，开始异步获取数据；获取数据完成后会先调用`sourceHandle`对返回的数据进行处理，最后数据会填充到`sourceTarget`属性定义的组件的`options`上去，就完成了下列框数据异步加载的功能。\n\n\n## html 组件\n\n`type`为`html`的组件，`content`属性为一段html代码。为了方便大块自定义内容。\n\nhtml代码会被一个`<section>`标签包裹，为了方便定义样式，html 组件还支持`style``className`属性，自定义外层样式。\n\n\n\n## 引入自定义组件\n\n`UF.load()`\n\n如果已有组件及配置实在无法支持当前的业务逻辑，也可以某一部分使用React进行开发，然后作为一个新自定义组件引入到项目中使用。具体用法请联系 [liuzechun](baidu://message/?id=861260447)\n\n\n## 组件生命周期\n\n配置中的每个组件从创建到销毁都具有一个生命周期，如果想要把某些逻辑和组件的生命周期相关联，则可以配置如下函数：\n\n* `beforeCreate`: 组件生成到页面之前执行\n* `afterCreate`: 组件生成到页面之后执行\n* `beforeRender`: 组件每次刷新之前执行（包括首次生成）\n* `afterRender`: 组件每次刷新之后执行（包括首次生成）\n* `beforeDestroy`: 组件销毁前执行\n\n例如，可以在下拉列表加载后，向后端获取下拉列表中展示的数据：\n```javascript\n{\n    type: 'select',\n    afterCreate: function(select) {\n        UF.ajax({\n            url: '/uf/docs/php/data.php',\n            success: function(data) {\n                var options = data.map(function(v) {\n                    return {value: v.name, label: v.name};\n                });\n                select.set({options});\n            }\n        });\n    }\n}\n```\n\n**两个`before`函数是在组件渲染/刷新之前执行，所以可以用于对参数进行修改**\n\n* beforeCreate(params)\n* beforeRender(params)\n\n`params`为组件现有参数（包含配置的和默认的参数）。可以根据需要变更参数然后把新的`return`。\n\n例如，可以在组件渲染前，把组件的 title 改为路由传入的值。\n\n```javascript\n{\n    type: 'card',\n    name: 'my-card',\n    title: '标题可以跟着路由变化：/card2/card3/标题',\n    loading: true,\n    beforeCreate(params, self) {\n        params.title = self._root.props.params.title || params.title;\n        return params;\n    }\n}\n```\n\n> 注意：`beforeRender`触发次数较多，注意不要造成性能问题\n\n\n**关于生命周期函数的参数**\n\n为了方便使用，生命周期函数的参数中，全部在最后追加了一个参数，为组件自身，可以在函数中用来调用组件自身的`set`、`get`函数等，无需再写获取当前组件的逻辑。\n\n例如上面`beforeCreate`的示例代码，`self`和`UF('my-card')`等价。\n\n> tips： 有些组件的参数较多，可以先使用`console.log`打印出来确认，再使用\n\n## 关于组件中获取 路由信息 等数据\n\n每个组件都有`_root`属性，可以通过此属性获取当前模块的参数信息，包含有路由，路由上的参数等。见：[组件交互](#/Usage/Api)。\n\n\n\n"

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	module.exports = "这里只是单个页面配置的示例，具体整个项目怎么开发见 [项目示例](#/Develop/Install)"

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	module.exports = "一个项目包含有多个页面，通过前端路由控制各个页面的跳转，即形成一个单页应用。\n\n\n## 开始\n\n\n### 1、准备 html 文件\n\n首先准备一个`demo.html`文件。\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/theme.min.css\" />\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/uf_v0.2.css\" />\n        <script src=\"http://uf.baidu.com/dist/dll.min.js\"></script>\n        <script src=\"http://uf.baidu.com/dist/antd.min.js\"></script>\n        <script src=\"http://uf.baidu.com/dist/uf_v0.2.js\"></script>\n        <!-- <style>html, body {height: auto !important;}</style> -->\n        <title>一个简单的项目示例</title>\n    </head>\n    <body>\n        <div id=\"main\"></div>\n        <script>\n            // document.domain = 'baidu.com';\n            UF.config({\n                modules: {\n                    baseUrl: './',\n                    paths: {\n                        Router: 'router',\n                        App: 'app',\n                        Page1: 'page1',\n                        Page2: 'page2'\n                    }\n                }\n            });\n            UF.init('Router', '#main');\n        </script>\n    </body>\n</html>\n```\n以上html文件做了三件事：  \n##### 一、首先引入了依赖的库文件\n##### 二、然后配置项目全部模块路径\npaths里面定义了四个模块的路径，这里省略了文件的后缀，例如：Router模块对应的文件为`./router.js`。  \n> 更多`UF.config()`的用法可见 [全局配置](#/Develop/Config)\n\n##### 三、初始化页面\n使用路由模块对页面进行初始化。\n\n\n### 2、入口模块\n\n新建一个`router.js`文件，作为项目入口文件，指定路由及对应模块的关系。\n\n```javascript\ndefine(function(require) {\n    var App = require('App');\n    var Page1 = require('Page1');\n    return {\n        type: 'router',\n        routes: [\n            {\n                path: '/',\n                component: App,\n                breadcrumbName: '首页',\n                indexRoute: {component: Page1.Card1},\n                childRoutes: [\n                    {path: 'card', breadcrumbName: '卡片', component: Page1.Card1},\n                    {path: 'card2', breadcrumbName: '卡片2', component: Page1.Card2,\n                        childRoutes: [\n                            {path: 'card3', breadcrumbName: '卡片3', component: 'Page2'}\n                            // {path: 'card3', breadcrumbName: '卡片3', component: Page1.Card3}\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n});\n```\nrouter模块主要用于配置路由和各个模块间的关系。`router`组件的用法见 [Router 路由](#/General/Router)。\n\n和其他模块相同，每一个模块均为`define(function(){ ... })`，define包含的函数中需`return {...};`返回当前模块的配置。\n\n`require()`用来引入当前模块依赖的其他模块，框架会先加载全部依赖的模块再执行下面的逻辑。`require`函数的返回值为定义模块时`return {...}`返回来的配置。\n\n> 更多关于模块如何组织、开发，可见 [模块开发](#/Develop/Modules)\n\n\n### 3、App模块\n\nApp模块为整个项目的框架，其中定义了页面的布局等。从router.js的配置中也可以看出，App模块是跟模块，其他模块渲染之前都会先渲染App。\n\n新建一个`app.js`文件。\n```javascript\ndefine(function() {\n    return [\n        {\n            type: \"menu\",\n            mode: \"horizontal\",\n            theme: \"dark\",\n            items: [\n                {\n                    key: \"mail\",\n                    link: '/card',\n                    icon: 'mail',\n                    title: 'Navigation One'\n                },\n                {\n                    key: \"sub\",\n                    icon: 'setting',\n                    title: 'Navigation Two - Submenu',\n                    childItems: [\n                        {\n                            key: \"setting:1\",\n                            link: '/card2',\n                            title: 'Option 1'\n                        },\n                        {\n                            key: \"setting:2\",\n                            link: '/card2/card3',\n                            title: 'Option 2'\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            type: 'breadcrumb',\n            style: {margin: '12px 24px'}\n        },\n        {\n            type: 'div',\n            style: {background: '#eee', padding: '35px'},\n            childrenHolder: true,\n            content: {\n                type: 'div',\n                style: {background: '#ddd', padding: '25px'}\n            }\n        }\n    ];\n});\n\n```\n此模块使用基本组件的组合搭配实现页面的布局等。值得注意的是，靠底部的部分有个`childrenHolder`属性，配合路由使用，声明模块所在路由中 子路由对应的组件 会渲染到当前模块的 childrenHolder 所处位置\n\n\n### 4、Page1模块、Page2模块\n\nPage1模块`page1.js`实现如下：\n\n```javascript\ndefine(function() {\n    var Card1 = {\n        type: 'card',\n        title: 'Card title',\n        bordered: false,\n        loading: true\n    };\n    var Card2 = {\n        type: 'card',\n        title: 'Card title',\n        bordered: false,\n        childrenHolder: true\n    };\n    var Card3 = {\n        type: 'card',\n        title: 'Card title 3',\n        loading: true\n    };\n    return {\n        Card1: Card1,\n        Card2: Card2,\n        Card3: Card3\n    };\n});\n```\n\nPage2模块`page2.js`实现如下：\n\n```javascript\ndefine({\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n});\n```\n\n至此，配置上面demo的工作就完成了。可以在浏览器上打开刚开始定义的`demo.html`查看效果。\n\n"

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = "此处主要讲解**`UF.config()`**的作用以及其参数的详细用法。\n\n## 使用场景\n\n* 项目开发时，用于给各个模块命名，类似于给模块路径一个别名\n* 给组件配置一些全局的、通用的默认参数，减少开发时多次书写重复的配置\n* 其他一些 [requirejs](http://requirejs.org/docs/api.html#config) 的高级用法，这里不做赘述\n\n\n## 具体用法\n\n一般在页面初始化之前调用`UF.config({})`做一些全局的配置。其参数为一个对象，参数如下：\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nmodules | 模块相关的各种配置，具体见下表：`modules`表 | Object |  | \ncomponents | 用于给组件声明一些全局的、通用的默认参数，减少开发时多次书写重复的配置。 | Object |  | \nglobal | 其他一些全局配置。见：`global`表 | Object |  | \nauthority | 权限控制。见：`authority`表 | Object |  | \nprecondition | 预加载函数列表，会阻塞页面初始化（init之前执行的函数，多为调用api获取基础数据），列表中的函数全部执行完成后才会执行页面初始化，见：`precondition` | Array |  | \n\n\n### # modules\n\n一般用于配置模块路径映射。例如 快速上手 中的如下配置：\n\n```javascript\nUF.config({\n    modules: {\n        baseUrl: './',\n        paths: {\n            Router: 'router',\n            App: 'app',\n            Page1: 'page1',\n            Page2: 'page2'\n        }\n    }\n});\n```\n全部参数说明如下：\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nbaseUrl | 用于所有模块查找的根路径 | string |  | \npaths | 模块名称的路径映射。路径设置被假定为相对于baseUrl，除非路径设置从“/”开始，或者在其中有一个URL协议(“如http:”)。 | Object |  | \nwaitSeconds | 单个模块加载超时时间（单位：s）。将其设置为 0 将禁用超时。默认值是 7 秒。 | string | 7 | \nurlArgs | 模块加载时的后缀。可以通过增加时间戳来防止模块文件缓存：`urlArgs: 'suffix=' + Date.now()` | string &#124; function |  | \nshowLoading | 使用懒加载的方式加载模块时是否展示Loading。一般加载模块速度很快，无需展示Loading。如有特殊情况，可以设置为`true`全部模块都有loading；或者设置为一个模块名数组，当加载到数组中的模块时才会展示loading（推荐） | boolean &#124; Array | false | \n\n\n其他更多配置可见：[这里](http://requirejs.org/docs/api.html#config)\n\n\n### # components\n\n用于提前给组件声明一些全局的、通用的默认参数，减少开发时多次书写重复的配置。例如：\n\n```javascript\nUF.config({\n    components: {\n        'loading': {\n            delay: 200,\n            size: 'small'\n        },\n        'data-picker': {\n            format: 'YYYY/MM/DD'\n        }\n    }\n});\n```\n\n配置全部`Loading组件`默认全部使用小号的图标，且全部延迟200ms展示loading状态；全部`日期选择组件`默认格式化成 2017/10/11 的格式。  \n`loading`、`'data-picker'`即为组件的`type`  \n此外，比如也可以给`Table组件`设置一组配置（比如具有过滤/导出/全屏功能，分页大小为8条/页，不展示复选框），再使用Table时就无需再配置这些属性。  \n全部组件的全部属性都可以这样预设置，从而达到通用配置的高度复用。  \n\n> 这里的配置会深度合并，无需担心被覆盖。比如`Table组件`的参数`rowSelection`是对象，对象里还有一堆值，此时只想要设置其中一两项，也可以正常使用: `table: {rowSelection: {type: 'radio'}}`\n\n\n### # global\n\n其他一些全局配置。\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\ndomain | 设置文档域 document.domain，默认为当前页面域名 | string |  | \najax | 覆盖`UF.ajax`默认的配置。当项目中API规范和当前框架定义的API规范不相符时，需要更改 success 或 error 等的处理逻辑；亦或需使用 jsonp 的方式请求数据，皆可在此配置。具体参数见下表：`ajax` | object |  | \ndata | 用于存放一些公用数据或静态数据（供select等组件直接调用）。 | Object |  | \ncacheApis | 声明某些api的数据无需重复获取，重复调用（url及参数无变化时）直接从缓存中取得。加快获取速度，减小服务器压力。 | string[] |  | \n\n\n#### *ajax*\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nmethod | 默认数据请求方式 | string | `GET` | \nheaders | 设置http请求的headers | object | {} | \ndata | 发送的参数体，可以是一个 JOSN对象 或一个 query串 | object &#124; string | | \nbeforeSend | 发送数据之前，对数据整体进行处理。为一个函数，函数返回处理好的数据。函数第一个参数`data`为数据体，函数第二个参数`conf`为当前请求的全部配置，例如请求的类型等。 | function(data, conf){} | | \ntype | 声明返回的数据格式。可以是：`html`, `xml`, `json`, `jsonp` | string | `json` | \ncontentType | 设置请求的`Content-Type`属性，例如 `contentType: 'application/json'` | string |  |\ncrossOrigin | 设置`cross-origin`请求 | boolean | | \nsuccess | 请求成功时的回调函数。这里的成功失败不是代码逻辑中的成功还是失败，而是状态码是否为200。**默认的处理方式**见 [交互API](#/Usage/Api) 中`UF.ajax()`部分。参数中的`successHandler`和`errorHandler`为代码逻辑中传入的成功和失败的处理函数。可见如下示例 | function(res, successHandler, errorHandler){} | 默认处理逻辑，见 [组件交互](#/Usage/Api) 的 `UF.ajax` 部分 | \nerror | 请求失败时的回调函数。同上，为状态码非 200 时的回调函数。见下面示例 | function(){res, errorHandler} | | \ncomplete | 不管请求成功还是失败，都会调用。可以应用于按照REST规范开发的情况 | function | | \njsonpCallback | 为 JSONP 请求指定回调函数名。这个值将被使用，而不是由reqwest自动生成的随机(但推荐的)名称。 | function | | \n\n*覆盖默认 ajax 处理逻辑的示例：*\n\n```javascript\nUF.config({\n    global: {\n        ajax: {\n            success(res, successHandler, errorHandler) {\n                // 接口定义：code === '0000' 为请求处理成功，数据放在 data 字段中\n                // 非 0000 的全部为失败，其中失败原因在 msg 字段中\n                if (res.code === '0000') {\n                    successHandler(data, res);\n                } else if (res.code === '8001') {\n                    // 错误提示逻辑\n                    UF.notification.error({\n                        message: '请求失败：',\n                        description: res.msg\n                    });\n                    // 业务逻辑中使用 UF.ajax 系列函数时传入的错误处理逻辑\n                    errorHandler(res);\n                }\n                \n            },\n            error(res, errorHandler) {\n                errorHandler(res);\n            }\n        }\n    }\n});\n```\n\n\n### # data\n\n用于存放一些公用数据或静态数据（供select等组件直接调用）。\n\n\n### # authority\n\n权限点列表。在这里配置了权限点之后，即可在组件配置中使用`authority`属性关联此权限点来控制组件是否渲染。例如只有管理员才会展示的按钮等。\n\n\n### # precondition\n\n`precondition`为预加载函数列表，函数的执行会阻塞页面初始化（`UF.init`函数执行之前执行的异步逻辑），等列表中的函数全部执行完成（调用resolve函数）后才会执行页面初始化。多为调用api获取页面所需的基础数据。\n\n```javascript\nprecondition: [\n    (resolve, reject)=>{\n        UF.ajax.get('?r=peripheral/infoManageApi/getPeripheralBaseInfo', null, data=>{\n            UF.set('optionSource', data);\n            resolve();\n        }, error=>{\n            reject();\n            return true;\n        });\n    }\n]\n```"

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	module.exports = "模块化开发使得各个模块间可以自由组合、复用，易于维护。\n\n这里先介绍一种上手简单的开发方式，如果有使用构建工具经验的可以看 [另一种模式](#/Develop/Build)。\n\n## 通用规则\n\n* 全部模块配置必须写在`define()`函数里，`define()`函数之外不能有其他内容  \n* 如果`define()`函数的参数为一个函数，则函数必须有返回值，返回值为当前模块的配置\n\n\n## 具体用法\n\n### 用法1： define(params: object) \n参数为一个对象，即模块的配置。\n\n当模块比较简单不依赖其他模块时，可以直接把模块配置传给`define()`。\n\n例如 快速上手 中的`page2.js`模块：\n```javascript\ndefine({\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n});\n```\n\n\n### 用法2： define(params: function(){}) \n\n再来回顾一些快速上手中的`routes.js`模块：\n\n```javascript\ndefine(function(require) {\n    var App = require('App');\n    var Page1 = require('Page1');\n    return {\n        type: 'router',\n        routes: [\n            ...\n        ]\n    };\n});\n```\n可见，define函数的参数也可以是一个函数，函数里面可以写一些逻辑，最后return返回一个对象作为当前模块的配置。  \n\n当模块依赖其他模块时，就需要用到`require()`函数引入依赖模块。如上面的demo所示，使用`require`引入了 App.js 模块和 Page1.js 模块，框架会先加载此依赖的模块再执行后面的逻辑。`require`函数的返回值为定义模块时`return {...}`返回来的模块配置。\n\n\n### 用法3： define(params1: [], params2: function(){})\n\n也可以有两个参数，第一个参数为当前模块的依赖模块数组，第二个函数为定义当前模块的函数，函数的参数和第一个参数列举的模块意义对应。\n\n作用和`用法2`相同，如下：\n\n```javascript\ndefine(['App', 'Page1'], function(App, Page1) {\n    return {\n        type: 'router',\n        routes: [\n            ...\n        ]\n    };\n});\n```\n这种用法相比于`用法2`看起来更简洁一点。\n\n> 更多用法可见：[这里](http://requirejs.org/docs/api.html#define)\n\n## 模块间数据通信\n\n因为上面定义的模块时一个纯配置对象，所以不具备数据通信能力（或者说实现比较复杂）。接下来介绍一种定义动态模块的方法 -- 即返回的不是纯配置，而是一个 return 出一个配置的函数。例如`page2.js`模块。  \n\n先把模块改为`define(function(){})`的形式：  \n\n```javascript\ndefine(function() {\n    return {\n        type: 'card',\n        title: 'Card Title 2',\n        loading: true\n    };\n});\n```\n\n然后把配置替换为一个函数，函数可以有多个参数：\n\n```javascript\ndefine(function() {\n    return function(title) {\n        return {\n            type: 'card',\n            title: title,\n            loading: true\n        };\n    }\n});\n```\n\n如上，模块的 title 属性即为一个动态的属性，根据外面传入的不同参数变化。使用的时候也会对应有一些变化，如下：\n\n```javascript\ndefine(function() {\n    var Page2 = require('Page2');\n    ...\n    // component: Page2\n    component: Page2('Card Title 22')\n    ...\n});\n```\n\n"

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	module.exports = ""

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	module.exports = "为了最大程度上减少使用的门槛，我们底层引入了 requirejs 来实现模块化加载，【快速上手】及【模块开发】中介绍的开发模式皆是用的 requirejs 实现的。\n\n对于有一定前端基础的前端同学来说，可能这种开发模式并不是最方便，这里我们来介绍另一种开发模式：**使用构建工具来进行模块化开发**。\n\n## 第一个例子\n\n这里不会介绍构建工具如何使用，其实和用什么构建工具无关，关键是模块组织上与前一种开发模式上有所不同。\n\n还是拿【快速上手】上面的例子来说明，用当前这种开发模式代码如何书写。\n\n> demo 中使用的是 es6 的方式进行`import`、`export`\n\n\n### 1、准备 html 文件\n\n首先准备一个`demo.html`文件。\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/theme.min.css\" />\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/css/uf_v0.2.css\" />\n        <script src=\"http://uf.baidu.com/dist/dll.min.js\"></script>\n        <script src=\"http://uf.baidu.com/dist/antd.min.js\"></script>\n        <script src=\"http://uf.baidu.com/dist/uf_v0.2.js\"></script>\n        <!-- <style>html, body {height: auto !important;}</style> -->\n        <title>一个简单的项目示例</title>\n    </head>\n    <body>\n        <div id=\"main\"></div>\n        <script src=\"./bundle.js\"></script>\n    </body>\n</html>\n```\n**`./bundle.js`文件为构建工具把全部模块打包生成的文件。**\n\n这里因为不再用 requirejs ，所以无需再用`UF.config()`配置modules属性。\n\n\n### 入口模块\n\n新建一个`router.js`文件，作为项目入口文件，指定路由及对应模块的关系。**在这里，同时也是构建工具的入口文件。**\n\n```javascript\nimport App from './app.js';\nimport Page1 from './page1.js';\nimport Page2 from './page2.js';\nexport default {\n    type: 'router',\n    routes: [\n        {\n            path: '/',\n            component: App,\n            breadcrumbName: '首页',\n            indexRoute: {component: Page1.Card1},\n            childRoutes: [\n                {path: 'card', breadcrumbName: '卡片', component: Page1.Card1},\n                {path: 'card2', breadcrumbName: '卡片2', component: Page1.Card2,\n                    childRoutes: [\n                        {path: 'card3', breadcrumbName: '卡片3', component: Page2}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n**不再存在懒加载的模块，全部模块使用前必定是`import`过的。**\n\n\n### App模块\n\n新建一个`app.js`文件。\n\n```javascript\nexport default [\n    {\n        type: \"menu\",\n        ...\n    },\n    {\n        type: 'breadcrumb'\n    },\n    {\n        type: 'div',\n        ...\n    }\n];\n```\n\n### Page1模块、Page2模块\n\nPage1模块`page1.js`实现如下：\n\n```javascript\nvar Card1 = {\n    type: 'card',\n    title: 'Card title',\n    bordered: false,\n    loading: true\n};\nvar Card2 = {\n    type: 'card',\n    title: 'Card title',\n    bordered: false,\n    childrenHolder: true\n};\nvar Card3 = {\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n};\nexport default {\n    Card1: Card1,\n    Card2: Card2,\n    Card3: Card3\n};\n```\n\nPage2模块`page2.js`实现如下：\n\n```javascript\nexport default {\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n};\n```\n\n**模块开发好后，最后使用构建工具生成`demo.html`中引用的`bundle.js`文件即可。**\n\n> TODO: 后面可以写个webpack安装配置的教程。\n"

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	module.exports = "\n### 发布周期\n\n* 修订版本号：每周末会进行日常 bugfix 更新。（如果有紧急的 bugfix，则任何时候都可发布）\n* 次版本号：每月发布一个带有新特性的向下兼容的版本。\n* 主版本号：含有破坏性更新和新特性，不在发布周期内。\n\n- - -\n\n### 0.1.1\n\n`2017-09-22`\n\nantd `2.12.2` 升级为 `2.13.7`\n\n\n\n`2017-09-22`\n\n* 增加 `Table`、`Form`、`Modal` 组件说明文档及Demo\n\n* 增加用于临时使用的 `Table2` 组件，后面 `Table` 组件功能完善后，会再次把 `Table2` 去掉\n\n### 0.1.0\n\n`2017-09-18`\n\n* 配置化页面一期上线\n"

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    'antd-button.md': __webpack_require__(32),
	    'antd-icon.md': __webpack_require__(33),
	    'antd-grid.md': __webpack_require__(34),
	    'antd-layout.md': __webpack_require__(35),

	    'antd-auto-complete.md': __webpack_require__(36),
	    'antd-cascader.md': __webpack_require__(37),
	    'antd-checkbox.md': __webpack_require__(38),
	    'antd-date-picker.md': __webpack_require__(39),
	    'antd-input-number.md': __webpack_require__(40),
	    'antd-input.md': __webpack_require__(41),
	    'antd-radio.md': __webpack_require__(42),
	    'antd-rate.md': __webpack_require__(43),
	    'antd-select.md': __webpack_require__(44),
	    'antd-switch.md': __webpack_require__(45),
	    'antd-upload.md': __webpack_require__(46),

	    'antd-avatar.md': __webpack_require__(47),
	    'antd-badge.md': __webpack_require__(48),
	    'antd-calendar.md': __webpack_require__(49),
	    'antd-card.md': __webpack_require__(50),
	    'antd-carousel.md': __webpack_require__(51),
	    'antd-collapse.md': __webpack_require__(52),
	    'antd-popover.md': __webpack_require__(53),
	    'antd-tooltip.md': __webpack_require__(54),
	    'antd-tabs.md': __webpack_require__(55),
	    'antd-tag.md': __webpack_require__(56),
	    'antd-timeline.md': __webpack_require__(57),

	    'antd-affix.md': __webpack_require__(58),
	    'antd-breadcrumb.md': __webpack_require__(59),
	    'antd-dropdown.md': __webpack_require__(60),
	    'antd-menu.md': __webpack_require__(61),
	    'antd-pagination.md': __webpack_require__(62),
	    'antd-steps.md': __webpack_require__(63),

	    'antd-alert.md': __webpack_require__(64),
	    'antd-message.md': __webpack_require__(65),
	    'antd-notification.md': __webpack_require__(66),
	    'antd-progress.md': __webpack_require__(67),
	    'antd-popconfirm.md': __webpack_require__(68),
	    'antd-loading.md': __webpack_require__(69),

	    'antd-anchor.md': __webpack_require__(70),
	    'antd-backtop.md': __webpack_require__(71)
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = "按钮用于开始一个即时操作。\n\n## 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n## 组件&配置\n\n### # button\n\n通过设置 Button 的属性来产生不同的按钮样式，推荐顺序为：`mode` -> `shape` -> `size` -> `loading` -> `disabled`\n\n属性 | 说明 | 类型 | 默认值\n-----|-----|-----|------\nmode | 设置按钮类型，可选值为 `primary` `dashed` `danger` 或者不设 | string | -\nhtmlType | 设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button`\nicon | 设置按钮的图标类型 | string | -\nshape | 设置按钮形状，可选值为 `circle` 或者不设 | string | -\nsize | 设置按钮大小，可选值为 `small` `large` 或者不设 | string | `default`\nloading | 设置按钮载入状态 | boolean &#124; { delay: number } | `false`\nonClick | `click` 事件的 handler | function | -\nghost | 幽灵属性，使按钮背景透明 | boolean | false\nlink | 如果配置了link属性，则按钮点击后会跳转到link指定的页面 | string | \n\n\n### # button-group\n\n可以将多个 `button` 放入 `button-group` 的容器中，使按钮作为一组展示。\n\n属性 | 说明 | 类型 | 默认值\n-----|-----|-----|------\nsize | 设置按钮大小，可选值为 `small` `large` 或者不设 | string | `default`"

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = "语义化的矢量图形。\n\n## 组件&配置\n\n### # icon\n\n由于图标字体本质上还是文字，可以使用 `style` 和 `className` 设置图标的大小和颜色。\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| mode | 图标类型 | string | - |\n| spin | 是否有旋转动画 | boolean | false |\n| style | 设置图标的样式，例如 fontSize 和 color | object | - |\n\n## 图标的命名规范\n\n我们为每个图标赋予了语义化的命名，命名规则如下:\n\n- 实心和描线图标保持同名，用 `-o` 来区分，比如 `question-circle`（实心） 和 `question-circle-o`（描线）；\n- 命名顺序：`[图标名]-[形状?]-[描线?]-[方向?]`。\n\n> `?` 为可选。\n\n完整的图标设计规范请访问 [图标规范](http://antd.uf.baidu.com/docs/spec/icon-cn)。\n"

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	module.exports = "\n## 概述\n\n布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：\n\n* 通过`row`在水平方向建立一组`column`（简写col）\n* 你的内容应当放置于`col`内，并且，只有`col`可以作为`row`的直接元素\n* 栅格系统中的列是指1到24的值来表示其跨越的范围。例如，三个等宽的列可以使用`.col-8`来创建\n* 如果一个`row`中的`col`总和超过 24，那么多余的`col`会作为一个整体另起一行排列\n\n## Flex 布局\n\n我们的栅格化系统支持 Flex 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 order 来定义元素的排列顺序。\n\nFlex 布局是基于 24 栅格来定义每一个『盒子』的宽度，但排版则不拘泥于栅格。\n\n## 组件&配置\n\n### # row\n\n| 成员       | 说明             | 类型               | 默认值       |\n|-----------|-----------------|--------------------|-------------|\n| gutter    | 栅格间隔   | number | 0        |\n| mode      | 布局模式，可选 `flex`，[现代浏览器](http://caniuse.com/#search=flex) 下有效 | string |         |\n| align     | flex 布局下的垂直对齐方式：`top` `middle` `bottom`  | string | `top`      |\n| justify   | flex 布局下的水平排列方式：`start` `end` `center` `space-around` `space-between`   | string | `start`        |\n\n### # col\n\n| 成员      | 说明             | 类型               | 默认值       |\n|----------|-----------------|--------------------|-------------|\n| span     | 栅格占位格数，为 0 时相当于 `display: none`   | number | -        |\n| order    | 栅格顺序，`flex` 布局模式下有效   | number | 0        |\n| offset   | 栅格左侧的间隔格数，间隔内不可以有栅格  | number | 0        |\n| push     | 栅格向右移动格数   | number | 0        |\n| pull     | 栅格向左移动格数   | number | 0        |\n| xs       | `<768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| sm       | `≥768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| md       | `≥992px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| lg       | `≥1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| xl       | `≥1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n\n响应式栅格的断点遵循了 [BootStrap 3 的规则](https://getbootstrap.com/docs/3.3/css/#responsive-utilities-classes)（不包含链接里 `occasionally` 的部分)。\n"

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	module.exports = "协助进行页面级整体布局。\n\n## 设计规则\n\n### 尺寸\n\n一级导航项偏左靠近 logo 放置，辅助菜单偏右放置。\n\n- 顶部导航（大部分系统）：一级导航高度 `64px`，二级导航 `48px`。\n- 顶部导航（展示类页面）：一级导航高度 `80px`，二级导航 `56px`。\n- 顶部导航高度的范围计算公式为：`48+8n`。\n- 侧边导航宽度的范围计算公式：`200+8n`。\n\n### 交互\n\n- 一级导航和末级的导航需要在可视化的层面被强调出来；\n- 当前项应该在呈现上优先级最高；\n- 当导航收起的时候，当前项的样式自动赋予给它的上一个层级；\n- 左侧导航栏的收放交互同时支持手风琴和全展开的样式，根据业务的要求进行适当的选择。\n\n### 视觉\n\n导航样式上需要根据信息层级合理的选择样式：\n\n- **大色块强调**\n\n  建议用于底色为深色系时，当前页面父级的导航项。\n\n- **高亮火柴棍**\n\n  当导航栏底色为浅色系时使用，可用于当前页面对应导航项，建议尽量在导航路径的最终项使用。\n\n- **字体高亮变色**\n\n  从可视化层面，字体高亮的视觉强化力度低于大色块，通常在当前项的上一级使用。\n\n- **字体放大**\n\n  `12px`、`14px` 是导航的标准字号，14 号字体用在一、二级导航中。字号可以考虑导航项的等级做相应选择。\n\n## 组件概述\n\n- `Layout`：布局容器，其下可嵌套 `Header` `Sider` `Content` `Footer` 或 `Layout` 本身，可以放在任何父容器中。\n- `Header`：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Sider`：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Content`：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Footer`：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n\n> 注意：采用 flex 布局实现，请注意[浏览器兼容性](http://caniuse.com/#search=flex)问题。\n\n## 组件&配置\n\n### # layout\n\n布局容器。\n\n| 参数      | 说明                                      | 类型         | 默认值 |\n|----------|------------------------------------------|-------------|-------|\n| style | 指定样式 | object | - |\n| className | 容器 className | string | - |\n\n> `Header` `Footer` `Content` API 与 `Layout` 相同\n\n### # sider\n\n侧边栏。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|-----------------------------------------|------------|-------|\n| collapsible | 是否可收起 | boolean | false  |\n| defaultCollapsed | 是否默认收起 | boolean | false  |\n| reverseArrow | 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用 | boolean | false  |\n| collapsed | 当前收起状态 | boolean |  |\n| onCollapse | 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发 | (collapsed, type) => {} | - |\n| trigger | 自定义 trigger。设置为 null 时隐藏 trigger（隐藏trigger后可以在其他任何地方使用`sider-trigger`组件关联当前的sider） | string&#124;`config` |  |\n| triggerPosition | 自定义 trigger 的位置，可选值`top`、`bottom` | string | `bottom` |\n| width | 宽度 | number&#124;string | 200 |\n| collapsedWidth | 收缩宽度，设置为 0 会出现特殊 trigger | number | 64 |\n| breakpoint | 触发响应式布局的断点 | Enum { 'xs', 'sm', 'md', 'lg', 'xl' } | - |\n| style | 指定样式 | object | - |\n| className | 容器 className | string | - |\n\n#### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-sider').toggleCollapsed()`\n函数名称   | 说明             | 参数   \n----------|--------------------|----------\ntoggleCollapsed | 切换收起/展开状态 | 无 \n\n### # sider-trigger\n从`sider`中独立出来的`trigger`，可以放在任何地方，通过`target`属性和`sider`组件关联\n参数      | 说明                                     | 类型       | 默认值\n----------|-----------------------------------------|------------|-------\ntarget | 关联`sider`组件的名称 | boolean | false\n\n\n### # header、content、footer\n\n这三个组件没有特殊功能，参数见 `# layout`\n"

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	module.exports = "输入框自动补全功能。\n\n## 何时使用\n\n需要自动补全时。\n\n### # auto-complete\n\n| 参数           | 说明                             | 类型        | 默认值 |\n|---------------|----------------------------------|------------|---------|\n| value    | 指定当前选中的条目 | string  |  无  |\n| allowClear   | 支持清除, 单选模式有效 | boolean | false |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value) | 无 |\n| onSelect | 被选中时调用，参数为选中项的 value 值\t| function(value, option)\t| 无 |\n| options | 自动补全的数据源\t | string[] | [] |\n| disabled | 是否禁用 | boolean | false |\n| placeholder | 输入框提示 | string | - |"

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	module.exports = "\n级联选择框。\n\n## 何时使用\n\n- 需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。\n- 从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。\n- 比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。\n\n## 组件&配置\n\n### # cascader\n\n| 参数 | 说明 | 类型 | 默认值 |\n|------|------|------|--------|\n| options | 可选项数据源 [*默认异步属性*] | object | - |\n| defaultValue | 默认的选中项 | [CascaderOptionType](https://git.io/vMMoK)[]  |[] |\n| value | 指定选中项 | [CascaderOptionType](https://git.io/vMMoK)[] | - |\n| onChange | 选择完成后的回调 | `(value, selectedOptions) => void` | - |\n| displayRender | 选择后展示的渲染函数 | `(label, selectedOptions) => UF.init({...})` | `label => label.join(' / ')` |\n| style | 自定义样式 | string | - |\n| className | 自定义类名 | string | - |\n| changeOnSelect | 当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示\t | boolean | false |\n| popupClassName | 自定义浮层类名 | string | - |\n| popupPlacement | 浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight` | Enum | `bottomLeft` |\n| placeholder | 输入框占位文本 | string | '请选择' |\n| size | 输入框大小，可选 `large` `default` `small` | string | `default` |\n| disabled | 禁用 | boolean | false |\n| allowClear | 是否支持清除 | boolean | true |\n| expandTrigger | 次级菜单的展开方式，可选 'click' 和 'hover' | string | 'click' |\n| changeOnSelect | 当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示 | boolean | false |\n| showSearch | 在选择框中显示搜索框 | boolean | false |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | 'Not Found' |\n| loadData  | 用于动态加载选项，无法与 `showSearch` 一起使用 | `(selectedOptions) => void`  | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](http://codepen.io/anon/pen/xVBOVQ?editors=001) | Function(triggerNode) | () => document.body |\n\n`showSearch` 为对象时，其中的字段：\n\n| 参数 | 说明 | 类型 | 默认值 |\n|------|------|------|--------|\n| filter | 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false。 | `function(inputValue, path): boolean` | |\n| render | 用于渲染 filter 后的选项 | `function(inputValue, path): UF.init({...})` | |\n| sort | 用于排序 filter 后的选项 | `function(a, b, inputValue)` | |\n| matchInputWidth | 搜索结果列表是否与输入框同宽 | boolean | |\n\n> 注意，如果需要获得中国省市区数据，可以参考 [china-division](https://gist.github.com/afc163/7582f35654fd03d5be7009444345ea17)。\n"

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	module.exports = "\n多选框。\n\n## 何时使用\n\n- 在一组可选项中进行多项选择时；\n- 单独使用可以表示两种状态之间的切换，和 `switch` 类似。区别在于切换 `switch` 会直接触发状态改变，而 `checkbox` 一般用于状态标记，需要和提交操作配合。\n\n## 组件&配置\n\n### # checkbox\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| checked | 指定当前是否选中 | boolean  | false |\n| onChange | 变化时回调函数 | Function(e:Event) | - |\n\n### # checkbox-group\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| value | 指定选中的选项| string[] | [] |\n| options  | 指定可选项 [*默认异步属性*] | object[] | [] |\n| onChange | 变化时回调函数 | Function(checkedValue) | - |\n"

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	module.exports = "\n输入或选择日期的控件。\n\n## 何时使用\n\n当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n## 组件&配置\n\n日期类组件包括以下三种形式。\n\n* DatePicker\n* MonthPicker\n* RangePicker\n\n### 共同的 API\n\n以下 API 为 DatePicker、MonthPicker、RangePicker 共享的 API。\n\n| 参数          | 说明            | 类型     | 默认值        |\n|--------------|----------------|----------|--------------|\n| allowClear   | 是否显示清除按钮 | boolean     | true         |\n| disabled     | 禁用           | boolean     | false        |\n| className    | 选择器 className | string | '' |\n| style        | 自定义输入框样式     | object     | {}   |\n| popupStyle   | 格外的弹出日历样式   | object     | {}   |\n| size         | 输入框大小，`large` 高度为 32px，`small` 为 22px，默认是 28px | string   | 无  |\n| locale       | 国际化配置 | object   | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)  |\n| disabledDate | 不可选择的日期 | (currentDate: moment) => boolean | 无           |\n| getCalendarContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | 无 |\n| open | 控制弹层是否展开 | boolean | - |\n| onOpenChange   | 弹出日历和关闭日历的回调 | function(status) | 无 |\n| placeholder  | 输入框提示文字 | string&#124;RangePicker[] | - |\n\n### # date-picker\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 日期           | [moment](http://momentjs.com/)   | 无           |\n| format       | 展示的日期格式，Y表示年，M表示月，D表示天，H表示小时，m表示分钟，s表示秒钟 | string   | \"YYYY-MM-DD\" |\n| onChange     | 时间发生变化的回调 | function(date: moment, dateString: string) | 无           |\n| showTime     | 增加时间选择功能  | Object&#124;boolean | 根据`format`的值确定是否展示 |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](http://antd.uf.baidu.com/components/date-picker/#components-date-picker-demo-disabled-date) | [moment](http://momentjs.com/) | moment() |\n| showToday    | 是否展示“今天”按钮 | boolean | true |\n| disabledTime | 不可选择的时间 | function(date) | 无 |\n| onOk | 点击确定按钮的回调 | function() | - |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => UF.init({...}) | - |\n\n### # month-picker\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 日期           | [moment](http://momentjs.com/)   | 无           |\n| onChange     | 时间发生变化的回调，发生在用户选择时间时 | function(date: moment, dateString: string) | -    |\n\n### # range-picker\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 日期          | [moment](http://momentjs.com/)[] | 无           |\n| format       | 展示的日期格式  | string    | \"YYYY-MM-DD HH:mm:ss\" |\n| onChange     | 时间发生变化的回调，发生在用户选择时间时 | function(dates: [moment, moment], dateStrings: [string, string]) | 无           |\n| showTime     | 增加时间选择功能  | Object&#124;boolean | `TimePicker` |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](http://antd.uf.baidu.com/components/date-picker/#components-date-picker-demo-disabled-date) | [moment](http://momentjs.com/)[] | [moment(), moment()] |\n| disabledTime | 不可选择的时间 | function(dates: [moment, moment], partial: `'start'/'end'`) | 无 |\n| ranges       | 预设时间范围快捷选择 | { [range: string]: [moment](http://momentjs.com/)[] } | 无 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => UF.init({...}) | - |\n| onOk | 点击确定按钮的回调 | function() | - |\n\n### # time-picker\n\n| 参数                 | 说明 | 类型 | 默认值 |\n|---------------------|-----|-----|-------|\n| value               | 当前时间 | [moment](http://momentjs.com/) | 无 |\n| defaultOpenValue    | 无选中值时，面板打开时高亮的值 | [moment](http://momentjs.com/) | moment() |\n| open                | 面板是否打开 | boolean | false |\n| onOpenChange        | 面板打开/关闭时的回调 | (open: boolean): void | 无 |\n| placeholder         | 没有值的时候显示的内容 | string | \"请选择时间\" |\n| onChange            | 时间发生变化的回调     | function(time: moment, timeString: string): void | 无 |\n| format              | 展示的时间格式 | string | \"HH:mm:ss\" |\n| disabled            | 禁用全部操作 | boolean | false |\n| disabledHours       | 禁止选择部分小时选项 | function() | 无 |\n| disabledMinutes     | 禁止选择部分分钟选项 | function(selectedHour) | 无 |\n| disabledSeconds     | 禁止选择部分秒选项 | function(selectedHour, selectedMinute) | 无 |\n| hideDisabledOptions | 隐藏禁止选择的选项 | boolean | false |\n| getPopupContainer   | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | 无 |\n| addon | 选择框底部显示自定义的内容 | function | 无 |\n| use12Hours | 使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a` | boolean | false |\n| className | 选择器类名 | string | '' |\n| popupClassName | 弹出层类名 | string | '' |\n"

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	module.exports = "\n通过鼠标或键盘，输入范围内的数值。\n\n## 何时使用\n\n当需要获取标准数值时。\n\n## 组件&配置\n\n### # input-number\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| min     | 最小值   | number | -Infinity        |\n| max     | 最大值       | number      | Infinity           |\n| value     | 当前值       | number      |            |\n| step     | 每次改变步数，可以为小数  | number&#124;string      |  1      |\n| precision | 数值精度 | number | - |\n| defaultValue     | 初始值       | number      |            |\n| onChange     | 变化回调       | Function(value: number &#124; string) |            |\n| disabled     | 禁用       | boolean      |      false      |\n| size    | 输入框大小  | string      |      无      |\n| formatter | 指定输入框展示值的格式 | function(value: number &#124; string): string | - |\n| parser | 指定从 formatter 里转换回数字的方式，和 formatter 搭配使用 | function( string): number | - |\n"

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	module.exports = "\n通过鼠标或键盘输入内容，是最基础的表单域的包装。\n\n## 何时使用\n\n- 需要用户输入表单域内容时。\n- 提供组合型输入框，带搜索的输入框，还可以进行大小选择。\n\n## 组件&配置\n\n### # input\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|-----------------------------------------|------------|-------|--------|\n| mode | 声明 input 类型，同原生 input 标签的 type 属性 | string  | `text` |\n| id | 输入框的 id | string | |\n| value | 输入框内容 | string | |\n| defaultValue | 输入框默认内容 | string | |\n| size | 控件大小。注：标准表单内的输入框大小限制为 `large`。可选 `large` `default` `small` | string | `default` |\n| disabled | 是否禁用状态，默认为 false | boolean | false |\n| addonBefore | 带标签的 input，设置前置标签 | string&#124;`config` | |\n| addonAfter | 带标签的 input，设置后置标签 | string&#124;`config` | |\n| prefix | 带有前缀图标的 input | string&#124;`config` | |\n| suffix | 带有后缀图标的 input | string&#124;`config` | |\n| onPressEnter | 按下回车的回调 | function(e) | - |\n\n`Input` 的其他属性和 React 自带的 [input](https://facebook.github.io/react/docs/events.html#supported-events) 一致。\n\n### # textarea\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|-----------------------------------------|------------|-------|--------|\n| defaultValue | 输入框默认内容 | string | |\n| value | 输入框内容 | string | |\n| onPressEnter | 按下回车的回调 | function(e) | |\n| autosize | 自适应内容高度，可设置为 `true/false` 或对象：`{ minRows: 2, maxRows: 6 }` | boolean&#124;object | false |\n| rows | 输入框初始行数 | number | |\n\n`TextArea` 的其他属性和浏览器自带的 [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) 一致。\n\n### # input-search\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|-----------------------------------------|-----------|-------|\n| onSearch | 点击搜索或按下回车键时的回调                 | function(value) | -  |\n\n其余属性和 Input 一致。\n\n### # input-group\n\n| 参数      | 说明                                     | 类型         | 默认值 |\n|-----------|-----------------------------------------|-------------|-------|\n|  size | `Input.Group` 中所有的 `Input` 的大小，可选 `large` `default` `small` | string | `default` |\n\n"

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	module.exports = "\n单选框。\n\n## 何时使用\n\n- 用于在多个备选项中选中单个状态。\n- 和 Select 的区别是，Radio 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。\n\n## 组件&配置\n\n### # radio\n\nRadio要为一组数据。\n\n| 参数           | 说明                             | 类型              | 可选值 | 默认值 |\n|----------------|----------------------------------|-------------------|--------|--------|\n| onChange       | 选项变化时的回调函数             | Function(e:Event) | 无     | 无     |\n| value          | 用于设置当前选中的值             | any            | 无     | 无     |\n| defaultValue   | 默认选中的值                     | any            | 无     | 无     |\n| showAsButton   | 以一组按钮展示单选组合           | boolean            |  | 无 |\n| size           | 大小，只对按钮样式生效           | string            | `large` `default` `small` | `default` |\n| options        | 以配置形式设置子元素 [*默认异步属性*]   | string[] &#124; Array<{ label: string value: string disabled?: boolean style?: {}}>            | 无     | 无     |\n\n"

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	module.exports = "\n评分组件。\n\n## 何时使用\n\n- 对评价进行展示。\n- 对事物进行快速的评级操作。\n\n## 组件&配置\n\n### # rate\n\n| 属性        | 说明           | 类型               | 默认值       |\n|------------|----------------|-------------------|-------------|\n| count    | star 总数 | number | 5 |\n| value | 当前数，受控值 | number | - |\n| onChange | 选择时的回调 | Function(value: number) | - |\n| allowHalf | 是否允许半选   | boolean | false |\n| disabled | 只读，无法进行交互 | boolean | false |\n| character | 自定义字符 | `config` | `{type: 'icon', mode: 'star'}` |\n| className | 自定义样式类名 | string | - |\n| style | 自定义样式对象 | object | - |\n"

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	module.exports = "\n下拉选择器。\n\n## 何时使用\n\n- 弹出一个下拉菜单给用户选择操作，用于代替原生的选择器，或者需要一个更优雅的多选器时。\n- 当选项少时（少于 5 项），建议直接将选项平铺，使用 [Radio](/components/radio/) 是更好的选择。\n\n## 组件&配置\n\n### # select\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| value    | 指定当前选中的条目 | string&#124;string[] |  -  |\n| defaultValue | 指定默认选中的条目 | string&#124;string[] |  -  |\n| mode | 设置 Select 的模式 | 'multiple' &#124; 'tags' &#124; 'combobox' | - |\n| allowClear   | 支持清除 | boolean | false |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。 | boolean or function(inputValue, option) | true     |\n| onSelect | 被选中时调用，参数为选中项的 value (或 key) 值 | function(value, option) | -   |\n| onDeselect | 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 multiple 或 tags 模式下生效 |  function(value) | -   |\n| onChange | 选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数 | function(value) | - |\n| onSearch | 文本框值变化时回调 | function(value: string) |  |\n| onBlur | 失去焦点的时回调 | function | - |\n| onFocus | 获得焦点时回调 | function | - |\n| placeholder | 选择框默认文字 | string | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | 'Not Found' |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽 | boolean | true |\n| options | 选项数据列表，可以是一个字符串数据，或者对象数组 [*默认异步属性*] | string[] &#124; Array<{ label: string value: string disabled?: boolean style?: {}}> |  |\n| optionFilterProp | 搜索时过滤对应的 option 属性，默认为搜索下拉列表展示的内容，如设置为 value 表示对真实值进行搜索 | string | children |\n| optionLabelProp | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。 | string | `children` （combobox 模式下为 `value`） |\n| size    | 选择框大小，可选 `large` `small`  | string      |      default      |\n| showSearch | 使单选模式可搜索 | boolean | false |\n| disabled | 是否禁用 | boolean | false |\n| defaultActiveFirstOption | 是否默认高亮第一个选项。 | boolean | true\n| dropdownStyle | 下拉菜单的 style 属性 | object | - |\n| dropdownClassName | 下拉菜单的 className 属性 | string | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](http://codepen.io/anon/pen/xVBOVQ?editors=001) | Function(triggerNode) | () => document.body |\n| tokenSeparators | 在 tags 和 multiple 模式下自动分词的分隔符 | string[] |  |\n\n> 注意，如果发现下拉菜单跟随页面滚动，或者需要在其他弹层中触发 Select，请尝试使用 `getPopupContainer={triggerNode => triggerNode.parentNode}` 将下拉弹层渲染节点固定在触发器的父元素中。\n"

/***/ }),
/* 45 */
/***/ (function(module, exports) {

	module.exports = "\n开关选择器。\n\n## 何时使用\n\n- 需要表示开关状态/两种状态之间的切换时；\n- 和 `checkbox `的区别是，切换 `switch` 会直接触发状态改变，而 `checkbox` 一般用于状态标记，需要和提交操作配合。\n\n## 组件&配置\n\n### # switch\n\n| 参数      | 说明                                     | 类型        |默认值 |\n|-----------|------------------------------------------|------------|--------|\n| checked | 指定当前是否选中 [*默认异步属性*] | boolean    | false    |\n| onChange | 变化时回调函数 | Function(checked:Boolean) |   |\n| checkedChildren | 选中时的内容 | string&#124;`config` |   |\n| unCheckedChildren | 非选中时的内容 | string&#124;`config` |  |\n| size | 开关大小，可选值：`default` `small` | string  | default |\n"

/***/ }),
/* 46 */
/***/ (function(module, exports) {

	module.exports = "\n文件选择上传和拖拽上传控件。\n\n## 何时使用\n\n上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。\n\n- 当需要上传一个或一些文件时。\n- 当需要展现上传的进度时。\n- 当需要使用拖拽交互时。\n\n## 组件&配置\n\n> 服务端上传接口实现可以参考 [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload/wiki)。\n\n### # upload\n\n| 参数       | 说明                                                         | 类型        | 默认值|\n|------------|--------------------------------------------------------------| ----------- |-------|\n| name       | 发到后台的文件参数名                                         | string      | 'file'  |\n| defaultFileList | 默认已经上传的文件列表                           | object[] | 无  |\n| fileList   | 已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423) | object[] | 无 |\n| action     | 必选参数, 上传的地址                                         | string      | 无    |\n| data       | 上传所需参数或返回上传参数的方法                   | object&#124;function(file) | 无    |\n| headers    | 设置上传的请求头部，IE10 以上有效                    | object      | 无    |\n| showUploadList | 是否展示 uploadList, 可设为一个对象，用于单独设定 showPreviewIcon 和 showRemoveIcon | Boolean or { showPreviewIcon?: boolean, showRemoveIcon?: boolean } | true |\n| multiple   | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件。  | boolean     | false |\n| accept     | 接受上传的文件类型, 详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)    | string      | 无    |\n| beforeUpload | 上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传。**注意：IE9 不支持该方法**。 | (file, fileList) => `boolean | Promise`    | 无    |\n| customRequest | 通过覆盖默认的上传行为，可以自定义自己的上传实现 | Function | 无 |\n| onChange   | 上传文件改变时的状态，详见 [onChange](#onChange)                | Function    | 无    |\n| listType   | 上传列表的内建样式，支持三种基本样式 `text`, `picture` 和 `picture-card`     | string      | 'text'|\n| onPreview  | 点击文件链接或预览图标时的回调                              | Function(file) | 无    |\n| onRemove   | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除。                | Function(file): `boolean | Promise` | 无   |\n| supportServerRender | 服务端渲染时需要打开这个                           | boolean | false    |\n| disabled | 是否禁用                           | boolean | false    |\n| withCredentials | 上传请求时是否携带 cookie | boolean | false |\n\n### onChange\n\n> 上传中、完成、失败都会调用这个函数。\n\n文件状态改变的回调，返回为：\n\n```js\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n1. `file` 当前操作的文件对象。\n\n   ```js\n   {\n      uid: 'uid',      // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突\n      name: 'xx.png'   // 文件名\n      status: 'done',  // 状态有：uploading done error removed\n      response: '{\"status\": \"success\"}',  // 服务端响应内容\n   }\n   ```\n   > `antd@1.9.0` 之前，multiple 模式下，此参数为一个对象数组 `[file, ...]`，`antd@1.9.0` 开始无论是否多选，均为一个对象。\n\n2. `fileList` 当前的文件列表。\n3. `event` 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。\n\n"

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	module.exports = "\n用来代表用户或事物，支持图片、图标或字符展示。\n\n## 组件&配置\n\n### # avatar\n\n| 参数        | 说明                                                      | 类型        | 默认值 |\n|----------- |--------------------------------------------------------- | ----------  | ------- |\n| shape       | 指定头像的形状                          | Enum{ 'circle', 'square' }     | `circle`  |\n| size       | 设置头像的大小                           | Enum{ 'large', 'small', 'default' }       | `default` |\n| src  | 图片类头像的资源地址                                     | string   | -    |\n| icon    | 设置头像的图标类型，参考 `Icon` 组件                                       | string   | -    |\n"

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	module.exports = "\n图标右上角的圆形徽标数字。\n\n## 何时使用\n\n一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。\n\n## 组件&配置\n\n### # badge\n\n| 参数           | 说明                             | 类型       | 默认值 |\n|----------------|----------------------------------|------------|---------|\n| count          | 展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏 | number | |\n| overflowCount  | 展示封顶的数字值                 | number | 99 |\n| showZero       | 当数值为 0 时，是否展示 Badge   | boolean | false |\n| dot            | 不展示数字，只有一个小红点       | boolean | false  |\n| status         | 设置 badge 为状态点            | Enum{ 'success', 'processing, 'default', 'error', 'warning' } | '' |\n| text           | 在设置了 `status` 的前提下有效，设置状态点的文本  | string | '' |\n"

/***/ }),
/* 49 */
/***/ (function(module, exports) {

	module.exports = "\n按照日历形式展示数据的容器。\n\n## 何时使用\n\n当数据是日期或按照日期划分时，例如日程、课表、价格日历等，农历等。目前支持年/月切换。\n\n\n## 组件&配置\n\n### # calendar\n\n**注意：**calendar 部分 locale 是从 value 中读取，所以请先正确设置 moment 的 locale。\n\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 展示日期       | [moment](http://momentjs.com/)     | 当前日期     |\n| defaultValue | 默认展示的日期  | [moment](http://momentjs.com/)     | 默认日期     |\n| mode         | 初始模式，`month/year` | string | month  |\n| fullscreen   | 是否全屏显示   | boolean     | true         |\n| dateCellRender      | 自定义渲染日期单元格，返回内容会被追加到单元格| (date: moment) => UF.init({...})   | 无 |\n| monthCellRender     | 自定义渲染月单元格，返回内容会被追加到单元格  | (date: moment) => UF.init({...})   | 无 |\n| dateFullCellRender  | 自定义渲染日期单元格，返回内容覆盖单元格| (date: moment) => UF.init({...})   | 无 |\n| monthFullCellRender | 自定义渲染月单元格，返回内容覆盖单元格  | (date: moment) => UF.init({...})   | 无 |\n| locale       | 国际化配置     | object   | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)  |\n| onPanelChange| 日期面板变化回调 | function(date: moment, mode: string) | 无 |\n| onSelect     | 点击选择日期回调 | function(date: moment）              | 无 |\n| disabledDate | 不可选择的日期 | (currentDate: moment) => boolean | 无 |"

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	module.exports = "\n通用卡片容器。\n\n## 何时使用\n\n最基础的卡片容器，可承载文字、列表、图片、段落，常用于后台概览页面。\n\n## 组件&配置\n\n### # card\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| title    | 卡片标题 | string&#124;`config`   |  -  |\n| extra    | 卡片右上角的操作区域 | string&#124;`config`   | - |\n| bordered | 是否有边框 | boolean   |  true  |\n| bodyStyle | 内容区域自定义样式 | object   |  -  |\n| noHovering | 取消鼠标移过浮起 | boolean | false |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean   |  false  |\n"

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	module.exports = "\n旋转木马，一组轮播的区域。\n\n## 何时使用\n\n- 当有一组平级的内容。\n- 当内容空间不足时，可以用走马灯的形式进行收纳，进行轮播展现。\n- 常用于一组图片或卡片轮播。\n\n## 组件&配置\n\n### # carousel\n\n| 参数             | 说明                                         | 类型     | 默认值                          |\n|------------------|----------------------------------------------|----------|---------------------------------|\n| effect           | 动画效果函数，可取 scrollx, fade | string | scrollx |\n| dots | 是否显示面板指示点 | boolean   | true |\n| vertical | 垂直显示 | boolean   | false |\n| autoplay | 是否自动切换 | boolean   | false |\n| easing | 动画效果 | string   | linear |\n| beforeChange      | 切换面板的回调                              | function(from, to) | 无\n| afterChange       | 切换面板的回调                              | function(current)  | 无\n"

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	module.exports = "\n可以折叠/展开的内容区域。\n\n## 何时使用\n\n- 对复杂区域进行分组和隐藏，保持页面的整洁。\n- `手风琴` 是一种特殊的折叠面板，只允许单个内容区域展开。\n\n## 组件&配置\n\n### # collapse\n\n| 参数             | 说明                                         | 类型     | 默认值                          |\n|------------------|----------------------------------------------|----------|---------------------------------|\n| accordion        | 手风琴，每次只打开一个tab。默认打开第一个。 | boolean   | 无 |\n| activeKey        | 当前激活 tab 面板的 key| string[]&#124;string   | 默认无，accordion模式下默认第一个元素|\n| bordered        | 是否显示边框，提供一套没有边框的简洁样式。 |  boolean  | true |\n| onChange         | 切换面板的回调                               | Function | 无  |\n\n### # panel\n\n| 参数 | 说明             | 类型                    | 默认值 |\n|------|------------------|-------------------------|--------|\n| key  | 对应 activeKey   | string                  | 无 (如果key不存在则取name值)   |\n| header | 面板头内容 | string&#124;`config` | 无     |\n| disabled | 禁用后的面板展开与否将无法通过用户交互改变 | boolean | false |\n| style | 样式对象，可用于控制每个面板的样式，如背景色、圆角和边距等 | object | false |\n"

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	module.exports = "\n点击/鼠标移入元素，弹出气泡式的卡片浮层。\n\n## 何时使用\n\n当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。\n\n和 `Tooltip` 的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等。\n\n## 组件&配置\n\n### # popover\n\n| 参数      | 说明                                     | 类型          | 默认值 |\n|-----------|------------------------------------------|---------------|--------|\n| title     | 卡片标题                                 | string&#124;`config` | 无     |\n| body   | 卡片内容                            | string&#124;`config` | 无     |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string     | top    |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上 | Function(triggerNode) | () => document.body |\n| arrowPointAtCenter | 箭头是否指向目标元素中心 | boolean | `false` |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置             | boolean | `true` |\n| visible   | 用于手动控制浮层显隐                     | boolean       | false  |\n| onVisibleChange | 显示隐藏的回调                      | (visible) => void | 无     |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0 |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |\n| trigger   | 触发行为，可选 `hover/focus/click`       | string        | hover  |\n| overlayClassName | 卡片类名                            | string | 无     |\n| overlayStyle | 卡片样式                            | object | 无     |\n"

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	module.exports = "\n简单的文字提示气泡框。\n\n## 何时使用\n\n鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。\n\n可用来代替系统默认的 `title` 提示，提供一个`按钮/文字/操作`的文案解释。\n\n## 组件&配置\n\n### # tooltip\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|------------------------------------------|------------|--------|\n| title     | 提示文字                                 | string &#124; `config` | 无     |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string     | top    |\n| arrowPointAtCenter | 箭头是否指向目标元素中心 | boolean | `false` |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置             | boolean | `true` |\n| visible   | 用于手动控制浮层显隐                     | boolean       | false  |\n| onVisibleChange | 显示隐藏的回调                      | (visible) => void | 无     |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0 |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |\n| trigger   | 触发行为，可选 `hover/focus/click`       | string        | hover  |\n| overlayClassName | 卡片类名                            | string | 无     |\n| overlayStyle | 卡片样式                            | object | 无     |\n\n"

/***/ }),
/* 55 */
/***/ (function(module, exports) {

	module.exports = "\n选项卡切换组件。\n\n## 何时使用\n\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\nAnt Design 依次提供了三级选项卡，分别用于不同的场景。\n\n- 卡片式的页签，提供可关闭的样式，常用于容器顶部。\n- 标准线条式页签，用于容器内部的主功能切换，这是最常用的 Tabs。\n- [RadioButton](#/DataEntry/Radio) 可作为更次级的页签来使用。\n\n## 组件&配置\n\n### # tabs\n\n| 参数             | 说明                                         | 类型     | 默认值        |\n|------------------|----------------------------------------------|----------|---------------|\n| activeKey        | 当前激活 tab 面板的 key                      | string   | 无            |\n| defaultActiveKey | 初始化选中面板的 key，如果没有设置 activeKey | string   | 第一个面板    |\n| onChange         | 切换面板的回调                               | Function | 无            |\n| onTabClick       | tab 被点击的回调                             | Function | 无            |\n| tabBarExtraContent | tab bar 上额外的元素                       | `config` | 无          |\n| tabBarStyle      | tar bar 的样式对象                           | object   | -             |\n| mode | 页签的基本样式，可选 `line`、`card`       类型   | string   | 'line'      |\n| size | 大小，提供 `default` 和 `small` 两种大小，仅当 `mode=\"line\"` 时生效。  | string   | 'default'      |\n| tabPosition | 页签位置，可选值有 `top` `right` `bottom` `left`  | string   | 'top'      |\n| animated | 是否使用动画切换 Tabs，在 `tabPosition=top\\bottom` 时有效 | boolean &#124; {inkBar:boolean, tabPane:boolean} | true, 当 mode=\"card\" 时为 false |\n\n### # tab-pane\n\n| 参数 | 说明             | 类型                    | 默认值 |\n|------|------------------|-------------------------|--------|\n| key  | 对应 activeKey   | string                  | 无 (如果 key 不存在，则取 name 值)    |\n| tab  | 选项卡头显示文字 | string&#124;`config` | 无     |\n"

/***/ }),
/* 56 */
/***/ (function(module, exports) {

	module.exports = "\n进行标记和分类的小标签。\n\n## 何时使用\n\n- 用于标记事物的属性和维度。\n- 进行分类。\n\n## 组件&配置\n\n### # tag\n\n| 参数           | 说明                           | 类型  | 默认值 |\n|----------------|-------------------------------|------|-------|\n| color          | 标签色                         | string | -   |\n| closable       | 标签是否可以关闭               | boolean    | false  |\n| onClose        | 关闭时的回调                  | (e) => void | - |\n\n### # checkable-tag\n\n| 参数           | 说明                           | 类型  | 默认值 |\n|----------------|-------------------------------|------|--------|\n| checked        | 设置标签的选中状态               | boolean | false |\n| onChange       | 点击标签时触发的回调             | (checked) => void | - |\n"

/***/ }),
/* 57 */
/***/ (function(module, exports) {

	module.exports = "\n垂直展示的时间流信息。\n\n## 何时使用\n\n- 当有一系列信息需要从上至下按时间排列时；\n- 需要有一条时间轴进行视觉上的串联时；\n\n## 组件&配置\n\n### # timeline\n\n时间轴。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|----------------------------------------|------------|-------|\n| pending  | 指定最后一个幽灵节点是否存在或内容 | boolean 或 string 或 `config` | false  |\n\n### # timeline-item\n\n时间轴的每一个节点。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|------------------------------------------|------------|-------|\n| color   | 指定圆圈颜色 `blue, red, green`，或自定义的色值 | string | blue  |\n| dot   | 自定义时间轴点（会使用默认颜色） | string 或 `config` | -  |"

/***/ }),
/* 58 */
/***/ (function(module, exports) {

	module.exports = "\n将页面元素钉在可视范围。\n\n## 何时使用\n\n当内容区域比较长，需要滚动页面时，这部分内容对应的操作或者导航需要在滚动范围内始终展现。常用于侧边菜单和按钮组合。\n\n页面可视范围过小时，慎用此功能以免遮挡页面内容。\n\n## 组件&配置\n\n### # affix\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发   | number |         |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发   | number |         |\n| onChange | 固定状态改变时触发的回调函数   | Function(affixed) | 无        |\n\n**注意：**`affix` content内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接在 `affix` 的style中设置绝对定位：\n"

/***/ }),
/* 59 */
/***/ (function(module, exports) {

	module.exports = "\n显示当前页面在系统层级结构中的位置，并能向上返回。\n\n## 何时使用\n\n- 当系统拥有超过两级以上的层级结构时；\n- 当需要告知用户『你在哪里』时；\n- 当需要向上导航的功能时。\n\n## 组件&配置\n\n### # breadcrumb\n\n 参数      | 说明                              | 类型              |  可选值 | 默认值 \n-----------|-----------------------------------|-----------------|---------|--------\nseparator | 分隔符自定义                      | string &#124; `config` |         | '/'    \nitemRender | 自定义链接函数，和 `items属性`/`Router` 配合使用 | (route, params, items, paths) => `{...config}` | |\nitems | 自定义内容。值为一个数组，数组的每一项包含两个值，如：`[{path: 'index', breadcrumbName: 'Home'}]` | array |  |\n\n\n***可配合[`Router`](#/General/Router)使用***\n\n需在`Router`的各项配置中增加`breadcrumbName`作为面包屑展示的名称，可以配置`breadcrumbIcon`作为面包屑名称前面的图标。\n\n当某一层级的路由没有配置 `breadcrumbName` 和 `breadcrumbIcon`，则会在面包屑中把这一层过滤掉\n\n和 `Router` 配合使用能满足大部分应用场景，所以一般不使用`items`属性。\n\n所以使用面包屑时的配置很简单，如下：\n\n```javascript\n{\n    type: 'breadcrumb'\n}\n```"

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	module.exports = "\n向下弹出的列表。\n\n## 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n## 组件&配置\n\n### # dropdown\n\n属性如下\n\n| 参数        | 说明             | 类型               | 默认值       |\n|-------------|------------------|--------------------|--------------|\n| trigger     | 触发下拉的行为   | Array['click'或'hover'] | ['hover']        |\n| overlay     | 菜单         | `Menu` 见 [Menu](#/Navigation/Menu) | -     |\n| visible     | 菜单是否显示 | boolean   | -           |\n| disabled    | 菜单是否禁用 | boolean   | -           |\n| onVisibleChange  | 菜单显示状态改变时调用，参数为 visible | Function(visible) | - |\n| placement | 菜单弹出位置：`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight` | String | `bottomLeft` |\n\n菜单可由 `menu` 取得，可设置 `onSelect` 回调。\n\n> dropdown 下的 menu 默认不可选中。如果需要菜单可选中，可以指定 `menu`的`selectable`属性为`true`.\n\n### # dropdown-button\n\n| 参数        | 说明             | 类型               | 默认值       |\n|-------------|------------------|--------------------|--------------|\n| type        | 按钮类型，和 Button 一致 | string | 'default' |\n| size        | 按钮大小，和 Button 一致 | string | 'default' |\n| onClick     | 点击左侧按钮的回调，和 [Button]、 一致 | Function   | - |\n| trigger     | 触发下拉的行为   | Array['click'或'hover'] | ['hover']        |\n| overlay     | 菜单         | Menu | -     |\n| visible     | 菜单是否显示 | boolean   | -           |\n| disabled    | 菜单是否禁用 | boolean   | -           |\n| onVisibleChange  | 菜单显示状态改变时调用，参数为 visible | Function | - |\n| placement | 菜单弹出位置：`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight` | String | `bottomLeft` |\n"

/***/ }),
/* 61 */
/***/ (function(module, exports) {

	module.exports = "\n为页面和功能提供导航的菜单列表。\n\n## 何时使用\n\n导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n更多布局和导航的使用可以参考：[Layout 布局](#/General/Layout)。\n\n## 组件&配置\n\n### # menu\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|---------------|----------|--------------|\n| theme    | 主题颜色 | string: `light` `dark` | `light` |\n| mode | 菜单类型，现在支持垂直、水平、和内嵌模式三种 | string: `vertical` `horizontal` `inline` | `vertical` |\n| selectedKeys | 当前选中的菜单项 key 数组 | string[] |      |\n| items | 菜单项列表，定义菜单都包含哪些值，为一个对象数组，见`items` | items[] |  |\n| defaultSelectedKeys | 初始选中的菜单项 key 数组 | string[] |      |\n| openKeys | 当前展开的 SubMenu 菜单项 key 数组 | string[] |  |\n| defaultOpenKeys | 初始展开的 SubMenu 菜单项 key 数组 |  |      |\n| onOpenChange | SubMenu 展开/关闭的回调 | function(openKeys: string[]) | noop |\n| onSelect | 被选中时调 | function({ item, key, selectedKeys }) | 无   |\n| onDeselect | 取消选中时调用，仅在 multiple 生效 | function({ item, key, selectedKeys }) | - |\n| onClick | 点击 MenuItem 调用此函数  | function({ item, key, keyPath }) | - |\n| style | 根节点样式 | object | |\n| inlineIndent | inline 模式的菜单缩进宽度 | number | 24 |\n| multiple | 是否允许多选 | boolean | false |\n| inlineCollapsed | inline 时菜单是否收起状态 | boolean | - |\n| selectable | 是否允许选中 | boolean | true |\n| followRoute | 是否跟随路由自动高亮对应项。需和`items`中的`key`值配合使用 | boolean | true |\n\n\n#### *items*\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| disabled  | 是否禁用 | boolean   |  false  |\n| title  | 菜单项在页面显示的内容 | string&#124;`config` |    |\n| icon | 图标，显示在`title`内容之前。当需要使用折叠侧边栏功能时，建议设置图标。图标类型可选值见[Icon](#/General/Icon)的`mode`属性 |  string |  |\n| key | 唯一标志。和`link`属性配合时可以不填。如果设置`followRoute: true`，建议不设置 key 或者 key 值和对应的路由保持一致 |  string | 必须 |\n| link | 点击菜单项时跳转的链接（路由）。默认作为一个路由处理，如果想使用真正的链接，可在链接前加上 http/https。如果是 subMenu 或 group 类型，则建议留空 | string | |\n| childItems | 子菜单项列表。一旦设置 childItems，则认为当前菜单项为一个 subMenu 类型或者是 group 类型 | items[] | |\n| mode | 菜单项类型。当为非普通菜单项时，可以定义两种菜单项类型：`subMenu`、`group` | string | `subMenu` |\n| onTitleClick | 点击子菜单标题 | function({ key, domEvent }) | - |\n\n***以上参数自由组合可以产生三种类型的菜单项：item、subMenu、group。***\n\n**item**\n\n普通菜单项，其下没有子内容，用于点击菜单项切换页面。\n\n常用参数为： `disabled` / `title` / `link`\n\n**subMenu**\n\n当有 `childItems` 属性时，菜单项默认为 subMenu 类型，具有折叠收起/展开的功能。此类型的组件一般不使其具有切换路由的能力，多用于分类，此时需设置key值。\n\n常用参数为： `disabled` / `title` / `key` / `icon` / `childItems`\n\n**group**\n\nsubMenu 的另一种形式，取消了折叠收起/展开功能。具有对菜单项进行分类的同时，又减少了菜单项的层级。\n\n常用参数为： `title` / `childItems`\n"

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	module.exports = "\n采用分页的形式分隔长列表，每次只加载一个页面。\n\n## 何时使用\n\n- 当加载/渲染所有数据将花费很多时间时；\n- 可切换页码浏览数据。\n\n## 组件&配置\n\n### # pagination\n\n| 参数             | 说明                               | 类型          | 默认值                   |\n|------------------|------------------------------------|---------------|--------------------------|\n| current          | 当前页数                           | number        | -                   |\n| total            | 数据总数                           | number        | 0                        |\n| pageSize         | 每页条数                           | number        | -                         |\n| onChange         | 页码改变的回调，参数是改变后的页码及每页条数 | Function(page, pageSize)      | noop                     |\n| showSizeChanger  | 是否可以改变 pageSize              | boolean        | false                    |\n| pageSizeOptions  | 指定每页可以显示多少条             | string[] | ['10', '20', '30', '40'] |\n| onShowSizeChange | pageSize 变化的回调                | Function(current, size)      | noop                     |\n| showQuickJumper  | 是否可以快速跳转至某页             | boolean         | false                    |\n| size             | 当为「small」时，是小尺寸分页      | string        | \"\"                       |\n| simple           | 当添加该属性时，显示为简单分页     | boolean        | -                       |\n| showTotal        | 用于显示数据总量和当前数据顺序     | Function(total, range) | -              |\n"

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	module.exports = "\n引导用户按照流程完成任务的导航条。\n\n## 何时使用\n\n当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务。\n\n## 组件&配置\n\n### # steps\n\n整体步骤条。\n\n| 参数      | 说明                                      | 类型         | 默认值 |\n|----------|------------------------------------------|-------------|-------|\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | process |\n| size | 指定大小，目前支持普通（`default`）和迷你（`small`）| string | default |\n| direction | 指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向 | string | horizontal  |\n| progressDot | 指定为点状步骤条 | Boolean | false |\n\n### # step\n\n步骤条内的每一个步骤。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|-----------------------------------------|------------|-------|\n| status | 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error` | string | wait |\n| title | 标题 | string&#124;`config` | - |\n| description | 步骤的详情描述，可选 | string&#124;`config` | -  |\n| icon | 步骤图标的类型，可选 | string&#124;`config` | - |\n"

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	module.exports = "\n警告提示，展现需要关注的信息。\n\n## 何时使用\n\n- 当某个页面需要向用户显示警告的信息时。\n- 非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。\n\n## 组件&配置\n\n### # alert\n\n| 参数        | 说明                                                      | 类型        | 默认值 |\n|----------- |---------------------------------------------------------  | ---------- |-------|\n| mode       | 指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error`   | string     | `info`，`banner` 模式下默认值为 `warning`    |\n| closable   | 默认不显示关闭按钮                                  | boolean   | 无    |\n| closeText  | 自定义关闭按钮                                     | string&#124;   | 无    |\n| message    | 警告提示内容                                       | string&#124;`config`   | 无    |\n| description | 警告提示的辅助性文字介绍                            | string&#124;`config`   | 无    |\n| onClose     | 关闭时触发的回调函数                                | Function   | 无    |\n| showIcon   | 是否显示辅助图标                                 | boolean   | false，`banner` 模式下默认值为 true    |\n| banner   | 是否用作顶部公告                                 | boolean   | false    |\n"

/***/ }),
/* 65 */
/***/ (function(module, exports) {

	module.exports = "\n全局展示操作反馈信息。\n\n## 何时使用\n\n- 可提供成功、警告和错误等反馈信息。\n- 顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。\n\n## API\n\n组件提供了一些静态方法，使用方式和参数如下：\n\n- `UF.message.success(content, duration, onClose)`\n- `UF.message.error(content, duration, onClose)`\n- `UF.message.info(content, duration, onClose)`\n- `UF.message.warning(content, duration, onClose)`\n- `UF.message.warn(content, duration, onClose)` // alias of warning\n- `UF.message.loading(content, duration, onClose)`\n\n| 参数       | 说明           | 类型                       | 默认值       |\n|------------|----------------|--------------------------|--------------|\n| content    | 提示内容       | string&#124;`config` | -           |\n| duration   | 自动关闭的延时，单位秒。如果设置为0，则一直显示，直到调用 `destroy` 方法 | number               | 3          |\n| onClose   | 关闭时触发的回调函数 | Function          | -         |\n\n还提供了全局配置和全局销毁方法：\n\n- `UF.message.config(options)`\n- `UF.message.destroy()`\n\n### message.config\n\n```js\nUF.message.config({\n    top: 100,\n    duration: 2,\n});\n```\n\n| 参数       | 说明                | 类型                       | 默认值       |\n|------------|--------------------|--------------------------|-------------|\n| top        | 消息距离顶部的位置 | number                      | 24px        |\n| duration   | 默认自动关闭延时，单位秒 | number                 | 3         |\n"

/***/ }),
/* 66 */
/***/ (function(module, exports) {

	module.exports = "\n全局展示通知提醒信息。\n\n## 何时使用\n\n在系统四个角显示通知提醒信息。经常用于以下情况：\n\n- 较为复杂的通知内容。\n- 带有交互的通知，给出用户下一步的行动点。\n- 系统主动推送。\n\n## API\n\n- `UF.notification.success(config)`\n- `UF.notification.error(config)`\n- `UF.notification.info(config)`\n- `UF.notification.warning(config)`\n- `UF.notification.warn(config)`\n- `UF.notification.close(key: String)`\n- `UF.notification.destroy()`\n\nconfig 参数如下：\n\n| 参数          | 说明                                       | 类型                | 默认值      |\n| ----------- | ---------------------------------------- | ----------------- | -------- |\n| message     | 通知提醒标题，必选                                | string&#124;`config` | -        |\n| description | 通知提醒内容，必选                                | string&#124;`config` | -        |\n| className   | 自定义 CSS class                            | string            | -        |\n| style       | 自定义内联样式                                  | Object            | -        |\n| btn         | 自定义关闭按钮                                  | `config`         | -        |\n| icon        | 自定义图标                                    | `config`         | -        |\n| key         | 当前通知唯一标志                                 | string            | -        |\n| onClose     | 点击默认关闭按钮时触发的回调函数                         | Function          | -        |\n| duration    | 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭            | number            | 4.5      |\n| placement   | 弹出位置，可选 `topLeft` `topRight` `bottomLeft` `bottomRight` | string            | topRight |\n\n还提供了一个全局配置方法，在调用前提前配置，全局一次生效。\n\n- `UF.notification.config(options)`\n\n```js\nUF.notification.config({\n    placement: 'bottomRight',\n    bottom: 50,\n    duration: 3,\n});\n```\n\n| 参数           | 说明                                       | 类型             | 默认值                 |\n| ------------ | ---------------------------------------- | -------------- | ------------------- |\n| placement    | 弹出位置，可选 `topLeft` `topRight` `bottomLeft` `bottomRight` | string         | topRight            |\n| top          | 消息从顶部弹出时，距离顶部的位置，单位像素。                   | number         | 24                  |\n| bottom       | 消息从底部弹出时，距离底部的位置，单位像素。                   | number         | 24                  |\n| duration     | 默认自动关闭延时，单位秒                             | number         | 4.5                 |\n"

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	module.exports = "\n展示操作的当前进度。\n\n## 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n- 当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过2秒时；\n- 当需要显示一个操作完成的百分比时。\n\n## 组件&配置\n\n### # progress\n\n| 属性      | 说明           | 类型     | 默认值         |\n|----------|---------------|----------|---------------|\n| mode     | 类型，可选 `line` `circle` `dashboard` | string   | line      |\n| percent  | 百分比 | number | 0 |\n| format   | 内容的模板函数 | function(percent)   | `percent => percent + '%'` |\n| status   | 状态，可选：`success` `exception` `active` | string   | - |\n| showInfo | 是否显示进度数值或状态图标 | boolean | true  |\n| strokeWidth  | `(mode=line)` 进度条线的宽度，单位 px | number | 10 |\n| strokeWidth | `(mode=circle)` 圆形进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 |\n| width  | `(mode=circle)` 圆形进度条画布宽度，单位 px | number | 132 |\n| gapDegree | `(mode=circle)` 圆形进度条缺口角度，可取值 0 ~ 360 | number | 0 |\n| gapPosition | `(mode=circle)` 圆形进度条缺口位置 | Enum{ 'top', 'bottom', 'left', 'right' } | `top` |"

/***/ }),
/* 68 */
/***/ (function(module, exports) {

	module.exports = "\n点击元素，弹出气泡式的确认框。\n\n## 何时使用\n\n目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。\n\n和 `confirm` 弹出的全屏居中模态对话框相比，交互形式更轻量。\n\n## 组件&配置\n\n### # popconfirm\n\n| 参数      | 说明                                     | 类型          | 默认值 |\n|-----------|------------------------------------------|---------------|--------|\n| title     | 确认框的描述                             | string&#124;`config` | 无     |\n| onConfirm | 点击确认的回调                           | function(e)      | 无     |\n| onCancel  | 点击取消的回调                           | function(e)      | 无     |\n| okText    | 确认按钮文字                              | string        | 确定   |\n| okType     | 确认按钮类型    | string           | primary       |\n| cancelText| 取消按钮文字                              | string        | 取消   |\n| cancelType | 取消按钮类型    | string           | default       |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string     | top    |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上。`2.5.2` 之前请使用 `getTooltipContainer` | Function(triggerNode) | () => document.body |\n| arrowPointAtCenter | 箭头是否指向目标元素中心，`antd@1.11+` 支持 | boolean | `false` |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置             | boolean | `true` |\n| visible   | 用于手动控制浮层显隐                     | boolean       | false  |\n| onVisibleChange | 显示隐藏的回调                      | (visible) => void | 无     |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0 |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |\n| trigger   | 触发行为，可选 `hover/focus/click`       | string        | hover  |\n| overlayClassName | 卡片类名                            | string | 无     |\n| overlayStyle | 卡片样式                            | object | 无     |\n\n"

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	module.exports = "\n用于页面和区块的加载中状态。\n\n## 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n## 组件&配置\n\n### # loading\n\n参数 | 说明 | 类型 | 默认值\n----|------|-----|------\nsize | 组件大小，可选值为 `small` `default` `large` | string | 'default'\nloading | 是否展示 loading 状态 | boolean | false\ntip | 当作为包裹元素时，可以自定义描述文案 | string | -\ndelay | 延迟显示加载效果的时间（防止闪烁） | number (毫秒) | -\nwrapperClassName | 包装器的类属性 | string | -\n\n#### api\n\n函数名 | 说明 | 参数\n------|------|-----\nloading | 更改 loading 状态 | loading(true/false)\n\n> 使用方法如：`UF('my-loading').loading(true);`"

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	module.exports = "\n用于跳转到页面指定位置。\n\n## 何时使用\n\n需要展现当前页面上可供跳转的锚点链接，以及快速在锚点之间跳转。\n\n## 组件&配置\n\n### # anchor\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发   | number |         |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发   | number |         |\n| bounds | 锚点区域边界 | number | 5(px) |\n| affix | 固定模式 | boolean | false |\n| showInkInFixed | 固定模式是否显示小圆点 | boolean | false |\n\n### anchor-link\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| href    | 锚点链接   | string |         |\n| title | 文字内容   | string&#124;`config` |         |"

/***/ }),
/* 71 */
/***/ (function(module, exports) {

	module.exports = "\n返回页面顶部的操作按钮。\n\n## 何时使用\n\n- 当页面内容区域比较长时；\n- 当用户需要频繁返回顶部查看相关内容时。\n\n> 有默认样式，距离底部 `50px`，可覆盖。\n\n> 自定义样式宽高不大于 40px * 40px。\n\n### # backtop\n\n| 参数        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| type    | 组件类型: `backtop`   | string |         |\n| visibilityHeight    | 滚动高度达到此参数值才出现 `Backtop`   | number | 400        |\n| onClick | 点击按钮的回调函数   | Function | -        |\n| target | 设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | Function | () => window |\n"

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _marked = __webpack_require__(15);

	var _marked2 = _interopRequireDefault(_marked);

	var _antd = __webpack_require__(4);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _utils = __webpack_require__(79);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo展示
	


	var Demo = function (_React$Component) {
	    _inherits(Demo, _React$Component);

	    function Demo(props) {
	        _classCallCheck(this, Demo);

	        var _this = _possibleConstructorReturn(this, (Demo.__proto__ || Object.getPrototypeOf(Demo)).call(this, props));

	        _this.state = {};
	        _this.show = {};
	        _marked2.default.setOptions({
	            gfm: true,
	            tables: true,
	            breaks: false,
	            pedantic: false,
	            sanitize: true,
	            smartLists: true,
	            smartypants: false
	        });
	        _this.funcList = [];
	        _this.sourceCode = [];
	        (_this.props.list || []).map(function (item, i) {
	            _this.sourceCode[i] = _this.getSourceCode(item.config);
	        });
	        return _this;
	    }

	    _createClass(Demo, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            _utils.Utils.clone(this.props.list).map(function (item, i) {
	                _tools2.default.init(item.config, '#demo-' + i);
	            });
	        }
	    }, {
	        key: 'toggle',
	        value: function toggle(i) {
	            this.show[i] = !this.show[i];
	            this.forceUpdate();
	        }
	    }, {
	        key: 'getSourceCode',
	        value: function getSourceCode(config) {
	            var _this2 = this;

	            var obj = this.handleFunction(config);
	            var cfgStr = JSON.stringify(obj, null, 4);
	            cfgStr = cfgStr.replace(/\"\$F(\d+)\$\"/g, function (v, v1) {
	                return _this2.funcList[v1];
	            });
	            cfgStr = cfgStr.replace(/\(0\, _tools2\.default\)/g, 'UF');
	            cfgStr = cfgStr.replace(/_tools2\.default/g, 'UF');

	            var code = 'var config = ' + cfgStr + ';\nUF.init(config, \'#demo\');';
	            return _react2.default.createElement(
	                'pre',
	                { className: 'language-javascript', style: { background: 'transparent' } },
	                _react2.default.createElement('code', { className: 'language-json', dangerouslySetInnerHTML: { __html: code } })
	            );
	        }
	        // 处理配置里的函数

	    }, {
	        key: 'handleFunction',
	        value: function handleFunction(config) {
	            var result = void 0;
	            if (_utils.Utils.typeof(config, 'array')) {
	                result = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = config[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        result.push(this.handleFunction(v));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            } else if (_utils.Utils.typeof(config, 'object')) {
	                result = {};
	                for (var i in config) {
	                    result[i] = this.handleFunction(config[i]);
	                }
	            } else if (_utils.Utils.typeof(config, 'function')) {
	                result = '$F' + this.funcList.length + '$';
	                this.funcList.push(config.toString());
	            } else {
	                result = config;
	            }
	            return result;
	        }
	    }, {
	        key: 'getCard',
	        value: function getCard(item, i) {
	            return _react2.default.createElement(
	                _antd.Card,
	                { key: i, style: { borderRadius: '4px', marginBottom: '16px' } },
	                _react2.default.createElement('div', { className: 'show', id: 'demo-' + i }),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'description' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'title' },
	                        item.title
	                    ),
	                    _react2.default.createElement('div', { className: 'content', dangerouslySetInnerHTML: { __html: (0, _marked2.default)(item.description || '') } }),
	                    _react2.default.createElement(_antd.Icon, { className: 'collapse', type: this.show[i] ? 'up-circle-o' : 'down-circle-o',
	                        onClick: this.toggle.bind(this, i) })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'source-code', style: { display: this.show[i] ? 'block' : 'none' } },
	                    this.sourceCode[i]
	                )
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;

	            var odd = [],
	                even = [];
	            (this.props.list || []).map(function (item, i) {
	                if (!_this3.props.single) {
	                    if (i % 2 > 0) {
	                        odd.push(_this3.getCard(item, i));
	                    } else {
	                        even.push(_this3.getCard(item, i));
	                    }
	                } else {
	                    odd.push(_this3.getCard(item, i));
	                }
	            });
	            return _react2.default.createElement(
	                'div',
	                { className: 'demo' },
	                _react2.default.createElement(
	                    'h2',
	                    { style: { margin: '16px 0' } },
	                    '\u4EE3\u7801\u6F14\u793A'
	                ),
	                !this.props.single ? _react2.default.createElement(
	                    _antd.Row,
	                    { gutter: 18 },
	                    _react2.default.createElement(
	                        _antd.Col,
	                        { span: 12 },
	                        even
	                    ),
	                    _react2.default.createElement(
	                        _antd.Col,
	                        { span: 12 },
	                        odd
	                    )
	                ) : odd
	            );
	        }
	    }]);

	    return Demo;
	}(_react2.default.Component);

	exports.default = Demo;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.requirejs = exports.Authority = exports.Adaptor = exports.Model = exports.WhiteList = exports.Loader = exports.Factory = undefined;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _src = __webpack_require__(74);

	var _src2 = _interopRequireDefault(_src);

	var _moment = __webpack_require__(82);

	var _moment2 = _interopRequireDefault(_moment);

	__webpack_require__(152);

	var _utils = __webpack_require__(79);

	var _cache = __webpack_require__(94);

	var _adaptor = __webpack_require__(153);

	var _adaptor2 = _interopRequireDefault(_adaptor);

	var _authority = __webpack_require__(158);

	var _authority2 = _interopRequireDefault(_authority);

	var _factory = __webpack_require__(159);

	var _factory2 = _interopRequireDefault(_factory);

	var _loader = __webpack_require__(154);

	var _loader2 = _interopRequireDefault(_loader);

	var _whitelist = __webpack_require__(161);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	var _model = __webpack_require__(155);

	var _model2 = _interopRequireDefault(_model);

	var _precondition = __webpack_require__(163);

	var _precondition2 = _interopRequireDefault(_precondition);

	var _requirejs = __webpack_require__(162);

	var _requirejs2 = _interopRequireDefault(_requirejs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 设置 moment 的 locale
	_moment2.default.locale('zh-cn');

	// 这里设置一下，domain才能同域，否则即使在同一个域名下的iframe也会有跨域问题。这一行一定不能删！
	// 本地访问的时候，domain为''，不能给domain赋值''
	!!document.domain && (document.domain = document.domain);

	var func = {
	    /*******************************************************/
	    /******** 私有属性/方法 *********************************/
	    /*****************************************************/

	    // 是否阻塞
	    waiting: false,
	    waitingCache: {},
	    // 异步逻辑执行完成后，重新执行init函数
	    _reInit: function _reInit() {
	        this.waiting = false;
	        var config = this.waitingCache.config;
	        var selector = this.waitingCache.selector;
	        this.waitingCache = {};
	        this.render(config, selector);
	    },

	    // 获取组件
	    _get: function _get(name, key) {
	        var cp = _cache.ComponentsCache.get(name);
	        if (key && cp) {
	            return cp.get(key);
	        }
	        return cp;
	    },

	    // 根据选择器获取目标元素
	    _getTarget: function _getTarget(selector) {
	        if (_utils.Utils.typeof(selector, 'string')) {
	            var result = document.querySelector(selector);
	            if (!result) {
	                console.warn('The specified element is not found.');
	            }
	            return result;
	            // 如果传入的是dom元素，直接返回
	        } else if (selector instanceof Element) {
	            return selector;
	        } else {
	            return null;
	        }
	    },

	    // 向selector中插入新的组件
	    _append: function _append(config, selector) {
	        var destoryHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	        var div = document.createElement('div');
	        var target = document.body;
	        if (selector) {
	            target = this._getTarget(selector) || target;
	        }
	        target.appendChild(div);
	        function destory() {
	            var unmountResult = _reactDom2.default.unmountComponentAtNode(div);
	            if (unmountResult && div.parentNode) {
	                div.parentNode.removeChild(div);
	            }
	        }
	        // 给config增加destory逻辑
	        if (destoryHandler) {
	            var origin = config[destoryHandler];
	            config[destoryHandler] = !!origin ? function () {
	                origin.apply(undefined, arguments);
	                destory();
	            } : destory;
	        }
	        this.render(config, div);
	        return {
	            element: div,
	            destory: destory
	        };
	    },


	    /*******************************************************/
	    /******** 公共属性/方法 *********************************/
	    /*****************************************************/

	    // ajax请求。包含 ajax(), ajax.get(), ajax.post()
	    ajax: _utils.Ajax,
	    // 暴露全部工具类
	    utils: _utils.Utils,
	    // moment 暴露全部功能
	    moment: _moment2.default,
	    // model 数据绑定页面
	    model: _model2.default,
	    get: _model2.default.get,
	    set: _model2.default.set,
	    // 根据组件配置 生成&渲染组件实例
	    init: function init(config, selector) {
	        if (!this.waiting) {
	            this.render(config, selector);
	        } else {
	            this.waitingCache = { config: config, selector: selector };
	        }
	    },

	    // 根据组件配置 生成&渲染组件实例
	    render: function render(config, selector) {
	        var result = _react2.default.createElement(_factory2.default, { config: config });
	        // 如果没有指定目标容器的id，则直接返回生成的组件实例
	        if (!selector || !this._getTarget(selector)) {
	            return result;
	        }
	        return _reactDom2.default.render(_react2.default.createElement(_factory2.default, { config: config }), this._getTarget(selector));
	    },

	    // 向selector中插入新的组件
	    append: function append(config, selector) {
	        return this._append(config, selector);
	    },

	    // 载入自定义组件
	    load: function load(components) {
	        _loader2.default.add(components);
	    },

	    // 整体配置
	    config: function config(obj) {
	        var config = _cache.Config.set(_utils.Utils.filter(obj, 'data'));
	        // modules 属性里定义了 requirejs的配置项，具体参数详见：http://requirejs.org/docs/api.html#config
	        _requirejs2.default.config(config.modules);
	        // 设置默认域，解决跨域问题
	        !!document.domain && (document.domain = config.global['domain']);
	        // 设置默认公用数据，存入 model 中
	        if (obj.data) {
	            _cache.ModelCache.setData(null, obj.data);
	        }
	        // 执行阻塞页面加载的函数
	        if (obj.precondition) {
	            if (_utils.Utils.typeof(obj.precondition, 'array') && obj.precondition.length > 0) {
	                this.waiting = true;
	                _precondition2.default.handle(obj.precondition, this);
	            }
	        }
	    }
	};

	var UF = func._get;

	Object.assign(UF, _src2.default, func);

	exports.default = UF;
	exports.Factory = _factory2.default;
	exports.Loader = _loader2.default;
	exports.WhiteList = _whitelist2.default;
	exports.Model = _model2.default;
	exports.Adaptor = _adaptor2.default;
	exports.Authority = _authority2.default;
	exports.requirejs = _requirejs2.default;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(75);

	module.exports = Object.assign(
	// require('./dom'),
	// antd 组件统一迁移，见 src/antd/index.js
	__webpack_require__(77),
	// 路由组件
	__webpack_require__(107),
	// 其他自己实现/封装的组件
	{
	    // Dom: require('./dom'),
	    Iframe: __webpack_require__(109),

	    Export: __webpack_require__(113),
	    Tree: __webpack_require__(117),
	    Table: __webpack_require__(121),
	    Form: __webpack_require__(127),
	    Modal: __webpack_require__(135),
	    Ueditor: __webpack_require__(129),
	    // ...require('./modal'),

	    Table2: __webpack_require__(139)
	}); /**
	     * @file index.js 汇总所有 src 里对用户暴露的组件
	     * @author liuzechun@baidu.com
	     */

/***/ }),
/* 75 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 76 */,
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _dataentry = __webpack_require__(78);

	var DataEntry = _interopRequireWildcard(_dataentry);

	var _datadisplay = __webpack_require__(97);

	var DataDisplay = _interopRequireWildcard(_datadisplay);

	var _genaral = __webpack_require__(99);

	var Genaral = _interopRequireWildcard(_genaral);

	var _navigation = __webpack_require__(101);

	var Navigation = _interopRequireWildcard(_navigation);

	var _feedback = __webpack_require__(103);

	var Feedback = _interopRequireWildcard(_feedback);

	var _layout = __webpack_require__(105);

	var Layout = _interopRequireWildcard(_layout);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	// 感觉 ES6 的方式用起来不灵活啊。。。
	// export default Object.assign({}, DataEntry, DataDisplay, Genaral, Navigation, Feedback);

	/**
	 * @file antd组件统一封装，实现几个基础抽象类做继承
	 * @author liuzechun@baidu.com
	 */
	module.exports = Object.assign({}, DataEntry, DataDisplay, Genaral, Navigation, Feedback, Layout);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Upload = exports.Switch = exports.Select = exports.Radio = exports.Rate = exports.InputNumber = exports.InputGroup = exports.InputSearch = exports.Textarea = exports.Input = exports.TimePicker = exports.MonthPicker = exports.RangePicker = exports.DatePicker = exports.CheckboxGroup = exports.Checkbox = exports.Cascader = exports.AutoComplete = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = __webpack_require__(79);

	var _DataEntry18 = __webpack_require__(90);

	var _DataEntry19 = _interopRequireDefault(_DataEntry18);

	var _antd = __webpack_require__(4);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据录入 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	// import moment from 'moment';


	/************ AutoComplete 自动补全 *************************************************************************** */
	// 简单的补全功能
	var AutoComplete = exports.AutoComplete = function (_DataEntry) {
	    _inherits(AutoComplete, _DataEntry);

	    function AutoComplete(props) {
	        _classCallCheck(this, AutoComplete);

	        // _onSearch 中的逻辑会注入到 onSearch 事件中，见 BaseComponent
	        var _this = _possibleConstructorReturn(this, (AutoComplete.__proto__ || Object.getPrototypeOf(AutoComplete)).call(this, props));

	        _this._injectEvent = ['onSearch'];
	        _this.__init();
	        _this.state = {
	            result: []
	        };
	        return _this;
	    }
	    // 注入到 onSearch 事件中


	    _createClass(AutoComplete, [{
	        key: '_onSearch',
	        value: function _onSearch(value) {
	            var result = [];
	            if (!!value) {
	                result = this.__props.options.map(function (i) {
	                    return value + i;
	                });
	            }
	            this.setState({ result: result });
	        }
	        // 默认对应的是 onChange

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            var _get2;

	            // 对change前后的数据进行对比
	            var oldValue = this.__props.value;

	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            (_get2 = _get(AutoComplete.prototype.__proto__ || Object.getPrototypeOf(AutoComplete.prototype), '_onControlEvent', this)).call.apply(_get2, [this].concat(params));
	            var newValue = this.__props.value;
	            // 如果长度变短，说明是在删除，如果和后缀能匹配上，直接把后缀删除
	            if (oldValue && newValue && oldValue.length > newValue.length) {
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = this.__props.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        if (oldValue.indexOf(v) !== -1) {
	                            var result = oldValue.replace(v, '');
	                            if (result.length < newValue.length) {
	                                this.__props.value = result;
	                                this.__props.onSearch(result);
	                                break;
	                            }
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                Antd.AutoComplete,
	                this.__props,
	                this.state.result.map(function (item) {
	                    return _react2.default.createElement(
	                        Antd.AutoComplete.Option,
	                        { key: item },
	                        item
	                    );
	                })
	            );
	        }
	    }]);

	    return AutoComplete;
	}(_DataEntry19.default);

	/************* Cascader 级联选择 ************************************************************************** */

	var Cascader = exports.Cascader = function (_DataEntry2) {
	    _inherits(Cascader, _DataEntry2);

	    function Cascader(props) {
	        _classCallCheck(this, Cascader);

	        // 异步属性为 options
	        var _this2 = _possibleConstructorReturn(this, (Cascader.__proto__ || Object.getPrototypeOf(Cascader)).call(this, props));

	        _this2._asyncAttr = 'options';
	        _this2.__controlled.defaultVal = [];
	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Cascader, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Cascader, this.__props);
	        }
	    }]);

	    return Cascader;
	}(_DataEntry19.default);

	/************* Checkbox 复选框 ************************************************************************** */

	var Checkbox = exports.Checkbox = function (_DataEntry3) {
	    _inherits(Checkbox, _DataEntry3);

	    function Checkbox(props) {
	        _classCallCheck(this, Checkbox);

	        var _this3 = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

	        _this3.__controlled.key = 'checked';
	        _this3.__controlled.defaultVal = false;
	        // 异步属性为 checked
	        _this3._asyncAttr = 'checked';
	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Checkbox, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Checkbox, this.__props);
	        }
	    }]);

	    return Checkbox;
	}(_DataEntry19.default);
	// 多复选框组合


	var CheckboxGroup = exports.CheckboxGroup = function (_DataEntry4) {
	    _inherits(CheckboxGroup, _DataEntry4);

	    function CheckboxGroup(props) {
	        _classCallCheck(this, CheckboxGroup);

	        // 异步属性为 options
	        var _this4 = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call(this, props));

	        _this4._asyncAttr = 'options';
	        _this4.__controlled.defaultVal = [];
	        _this4.__init();
	        return _this4;
	    }

	    _createClass(CheckboxGroup, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Checkbox.Group, this.__props);
	        }
	    }]);

	    return CheckboxGroup;
	}(_DataEntry19.default);

	/************* DatePicker 日期选择框 ************************************************************************** */

	var BasePicker = function (_DataEntry5) {
	    _inherits(BasePicker, _DataEntry5);

	    function BasePicker() {
	        _classCallCheck(this, BasePicker);

	        return _possibleConstructorReturn(this, (BasePicker.__proto__ || Object.getPrototypeOf(BasePicker)).apply(this, arguments));
	    }

	    _createClass(BasePicker, [{
	        key: '_initProps',

	        // 继承父组件的函数，并在__props上追加一些属性
	        // 此函数会在初始化以及componentWillReceiveProps时调用
	        value: function _initProps() {
	            var _get3;

	            for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                params[_key2] = arguments[_key2];
	            }

	            (_get3 = _get(BasePicker.prototype.__proto__ || Object.getPrototypeOf(BasePicker.prototype), '_initProps', this)).call.apply(_get3, [this].concat(params));
	            this.__props = this.__mergeProps({ format: 'YYYY-MM-DD' }, this.__props);
	            // 如果没有设置showTime，根据format自动增删showTime属性
	            if (_utils.Utils.typeof(this.__props.showTime, 'undefined')) {
	                this.__props.showTime = this._judgeShowTime(this.__props.format);
	            }
	        }
	        // 根据format自动增删showTime属性

	    }, {
	        key: '_judgeShowTime',
	        value: function _judgeShowTime(format) {
	            return format && format.toLowerCase().indexOf('h') !== -1;
	        }
	    }]);

	    return BasePicker;
	}(_DataEntry19.default);
	// 日期[时间]选择


	var DatePicker = exports.DatePicker = function (_BasePicker) {
	    _inherits(DatePicker, _BasePicker);

	    function DatePicker(props) {
	        _classCallCheck(this, DatePicker);

	        var _this6 = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

	        _this6.__controlled.paramsIndex = 1;
	        _this6.__init();
	        return _this6;
	    }

	    _createClass(DatePicker, [{
	        key: 'render',
	        value: function render() {
	            var value = this.__props.value;
	            return _react2.default.createElement(Antd.DatePicker, _extends({}, this.__props, {
	                value: value ? _utils.Utils.moment(value) : value }));
	        }
	    }]);

	    return DatePicker;
	}(BasePicker);
	// 范围选择


	var RangePicker = exports.RangePicker = function (_BasePicker2) {
	    _inherits(RangePicker, _BasePicker2);

	    function RangePicker(props) {
	        _classCallCheck(this, RangePicker);

	        var _this7 = _possibleConstructorReturn(this, (RangePicker.__proto__ || Object.getPrototypeOf(RangePicker)).call(this, props));

	        _this7.__controlled.paramsIndex = 1;
	        _this7.__controlled.defaultVal = [];
	        _this7.__init();
	        return _this7;
	    }

	    _createClass(RangePicker, [{
	        key: 'render',
	        value: function render() {
	            // 需注意，RangePicker 的value是一个数组
	            var value = this.__props.value;
	            var format = this.__props.format;
	            return _react2.default.createElement(Antd.DatePicker.RangePicker, _extends({}, this.__props, {
	                value: value ? [_utils.Utils.moment(value[0], format), _utils.Utils.moment(value[1], format)] : value }));
	        }
	    }]);

	    return RangePicker;
	}(BasePicker);
	// 月份选择 ------ 注意，此处用的是 DataEntry，为的是防止 format 被覆盖成 datepicker 的默认值


	var MonthPicker = exports.MonthPicker = function (_DataEntry6) {
	    _inherits(MonthPicker, _DataEntry6);

	    function MonthPicker(props) {
	        _classCallCheck(this, MonthPicker);

	        var _this8 = _possibleConstructorReturn(this, (MonthPicker.__proto__ || Object.getPrototypeOf(MonthPicker)).call(this, props));

	        _this8.__controlled.paramsIndex = 1;
	        _this8.__init();
	        return _this8;
	    }

	    _createClass(MonthPicker, [{
	        key: 'render',
	        value: function render() {
	            var value = this.__props.value;
	            return _react2.default.createElement(Antd.DatePicker.MonthPicker, _extends({}, this.__props, {
	                value: value ? _utils.Utils.moment(value, this.__props.format) : value }));
	        }
	    }]);

	    return MonthPicker;
	}(_DataEntry19.default);

	/************* TimePicker 时间选择 *************** */
	// 时间选择，注意是继承的 DataEntry


	var TimePicker = exports.TimePicker = function (_DataEntry7) {
	    _inherits(TimePicker, _DataEntry7);

	    function TimePicker(props) {
	        _classCallCheck(this, TimePicker);

	        var _this9 = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));

	        _this9.__controlled.paramsIndex = 1;
	        _this9.__init();
	        return _this9;
	    }

	    _createClass(TimePicker, [{
	        key: 'render',
	        value: function render() {
	            var value = this.__props.value;
	            return _react2.default.createElement(Antd.TimePicker, _extends({}, this.__props, {
	                value: value ? _utils.Utils.moment(value, this.__props.format) : value }));
	        }
	    }]);

	    return TimePicker;
	}(_DataEntry19.default);

	/************* Input 输入框 ************************************************************************** */

	var Input = exports.Input = function (_DataEntry8) {
	    _inherits(Input, _DataEntry8);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this10 = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this10.__init();
	        return _this10;
	    }

	    _createClass(Input, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Input, this.__props);
	        }
	    }]);

	    return Input;
	}(_DataEntry19.default);
	// textarea


	var Textarea = exports.Textarea = function (_DataEntry9) {
	    _inherits(Textarea, _DataEntry9);

	    function Textarea(props) {
	        _classCallCheck(this, Textarea);

	        var _this11 = _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).call(this, props));

	        _this11.__init();
	        return _this11;
	    }

	    _createClass(Textarea, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Input.TextArea, this.__props);
	        }
	    }]);

	    return Textarea;
	}(_DataEntry19.default);
	// 带搜索按钮


	var InputSearch = exports.InputSearch = function (_DataEntry10) {
	    _inherits(InputSearch, _DataEntry10);

	    function InputSearch(props) {
	        _classCallCheck(this, InputSearch);

	        var _this12 = _possibleConstructorReturn(this, (InputSearch.__proto__ || Object.getPrototypeOf(InputSearch)).call(this, props));

	        _this12.__init();
	        return _this12;
	    }

	    _createClass(InputSearch, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Input.Search, this.__props);
	        }
	    }]);

	    return InputSearch;
	}(_DataEntry19.default);
	// 输入框连接在一起形成一组


	var InputGroup = exports.InputGroup = function (_DataEntry11) {
	    _inherits(InputGroup, _DataEntry11);

	    function InputGroup(props) {
	        _classCallCheck(this, InputGroup);

	        var _this13 = _possibleConstructorReturn(this, (InputGroup.__proto__ || Object.getPrototypeOf(InputGroup)).call(this, props));

	        _this13.__init();
	        return _this13;
	    }

	    _createClass(InputGroup, [{
	        key: 'render',
	        value: function render() {
	            // 使用ref会报错
	            delete this.__props.ref;
	            return _react2.default.createElement(Antd.Input.Group, _extends({ compact: true }, this.__props));
	        }
	    }]);

	    return InputGroup;
	}(_DataEntry19.default);
	// 数字输入框


	var InputNumber = exports.InputNumber = function (_DataEntry12) {
	    _inherits(InputNumber, _DataEntry12);

	    function InputNumber(props) {
	        _classCallCheck(this, InputNumber);

	        var _this14 = _possibleConstructorReturn(this, (InputNumber.__proto__ || Object.getPrototypeOf(InputNumber)).call(this, props));

	        _this14.__init();
	        return _this14;
	    }

	    _createClass(InputNumber, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.InputNumber, _extends({ compact: true }, this.__props));
	        }
	    }]);

	    return InputNumber;
	}(_DataEntry19.default);

	/************* Rate 评分 ************************************************************************** */

	var Rate = exports.Rate = function (_DataEntry13) {
	    _inherits(Rate, _DataEntry13);

	    function Rate(props) {
	        _classCallCheck(this, Rate);

	        var _this15 = _possibleConstructorReturn(this, (Rate.__proto__ || Object.getPrototypeOf(Rate)).call(this, props));

	        _this15.__init();
	        return _this15;
	    }

	    _createClass(Rate, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Rate, this.__props);
	        }
	    }]);

	    return Rate;
	}(_DataEntry19.default);

	/************* Radio 单选 ************************************************************************** */

	// 这里直接使用Radio组，单个radio没想到什么应用场景


	var Radio = exports.Radio = function (_DataEntry14) {
	    _inherits(Radio, _DataEntry14);

	    function Radio(props) {
	        _classCallCheck(this, Radio);

	        // 异步属性为 options
	        var _this16 = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

	        _this16._asyncAttr = 'options';
	        _this16.__init();
	        return _this16;
	    }

	    _createClass(Radio, [{
	        key: 'render',
	        value: function render() {
	            // 增加了一个配置项，来控制是否以button的形式展示
	            var Item = Antd.Radio;
	            if (this.__props.showAsButton) {
	                Item = Antd.Radio.Button;
	            }
	            return _react2.default.createElement(
	                Antd.Radio.Group,
	                _extends({}, this.__props, { options: undefined }),
	                _utils.Utils.toOptions(this.__props.options).map(function (item) {
	                    return _react2.default.createElement(
	                        Item,
	                        { key: item.value, disabled: item.disabled, style: item.style,
	                            value: item.value },
	                        item.label
	                    );
	                })
	            );
	        }
	    }]);

	    return Radio;
	}(_DataEntry19.default);

	/************* Select 下拉菜单 ************************************************************************** */

	var Select = exports.Select = function (_DataEntry15) {
	    _inherits(Select, _DataEntry15);

	    function Select(props) {
	        _classCallCheck(this, Select);

	        // 异步属性为 options
	        var _this17 = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

	        _this17._asyncAttr = 'options';
	        _this17.__init();
	        return _this17;
	    }
	    // TODO: Form报错，需要看下


	    _createClass(Select, [{
	        key: '_sourceSuccess',
	        value: function _sourceSuccess(data) {
	            var current = this.__props.value;
	            // 如果当前值再列表中，则不做任何处理
	            if (_utils.Utils.toOptions(data).some(function (v) {
	                return v.value === current;
	            })) {
	                return;
	            }
	            // 否则把值设置为第一个或者清空
	            if (this.__props.defaultFirst) {
	                var first = _utils.Utils.getFirstOption(data);
	                this.props.onChange && this.props.onChange(first);
	            } else {
	                this.props.onChange && this.props.onChange(undefined);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                Antd.Select,
	                this.__props,
	                _utils.Utils.toOptions(this.__props.options).map(function (item) {
	                    return _react2.default.createElement(
	                        Antd.Select.Option,
	                        { key: item.value, disabled: item.disabled, style: item.style,
	                            value: item.value },
	                        item.label
	                    );
	                })
	            );
	        }
	    }]);

	    return Select;
	}(_DataEntry19.default);

	/************* Transfer 穿梭框 ************************************************************************** */

	// export class Transfer extends DataEntry {
	//     constructor(props) {
	//         super(props);
	//         this.__init();
	//     }
	//     render() {
	//         return <Antd.Transfer {...this.__props}/>;
	//     }
	// }


	/************* Slider 滑动输入 ************************************************************************** */

	// export class Slider extends DataEntry {
	//     constructor(props) {
	//         super(props);
	//         this.__init();
	//     }
	//     render() {
	//         return <Antd.Slider {...this.__props}/>;
	//     }
	// }


	/************* Switch 开关 ************************************************************************** */

	var Switch = exports.Switch = function (_DataEntry16) {
	    _inherits(Switch, _DataEntry16);

	    function Switch(props) {
	        _classCallCheck(this, Switch);

	        var _this18 = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

	        _this18.__controlled.key = 'checked';
	        // 异步属性为 checked
	        _this18._asyncAttr = 'checked';
	        _this18.__init();
	        return _this18;
	    }

	    _createClass(Switch, [{
	        key: 'render',
	        value: function render() {
	            // Switch用的是checked受控
	            return _react2.default.createElement(Antd.Switch, this.__props);
	        }
	    }]);

	    return Switch;
	}(_DataEntry19.default);

	/************* Upload 开关 ************************************************************************** */

	var Upload = exports.Upload = function (_DataEntry17) {
	    _inherits(Upload, _DataEntry17);

	    function Upload(props) {
	        _classCallCheck(this, Upload);

	        var _this19 = _possibleConstructorReturn(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));

	        _this19.__controlled.key = 'fileList';
	        // 异步属性为 fileList
	        _this19._asyncAttr = 'fileList';
	        _this19.__init();
	        return _this19;
	    }

	    _createClass(Upload, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Upload, this.__props);
	        }
	    }]);

	    return Upload;
	}(_DataEntry19.default);

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    Utils: __webpack_require__(80).default,
	    Ajax: __webpack_require__(83).default
	};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _underscore = __webpack_require__(81);

	var _underscore2 = _interopRequireDefault(_underscore);

	var _moment2 = __webpack_require__(82);

	var _moment3 = _interopRequireDefault(_moment2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
	                                                                                                                                                                                                     * @file 一些常用的函数工具
	                                                                                                                                                                                                     * @author liuzechun
	                                                                                                                                                                                                     **/


	var I64BIT_TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-'.split('');
	var s4 = function s4() {
	    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
	};

	// 引入了underscore的功能，并在其上增加了自定义的一些函数
	var Utils = Object.assign({
	    // 如果要使用原生的功能，可通过 _ 来访问
	    _: _underscore2.default,
	    // 如果数据合法，返回moment数据；否则返回null
	    moment: function moment() {
	        var result = _moment3.default.apply(undefined, arguments);
	        if (result.isValid()) {
	            return result;
	        }
	        return null;
	    },

	    // 数字前面补充0
	    padNum: function padNum(num, n) {
	        var len = ('' + num).length;
	        return Array(n > len ? n - len + 1 : 0).join(0) + num;
	    },

	    // 生成随机唯一ID
	    uniqueId: function uniqueId() {
	        return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
	    },

	    // 字符串哈希
	    hash: function hash(text, len) {
	        var hash = 5381;
	        text = JSON.stringify(text);
	        var i = text.length - 1;
	        for (; i > -1; i--) {
	            hash += (hash << 5) + text.charCodeAt(i);
	        }
	        var value = hash & 0x7FFFFFFF;
	        var retValue = '';
	        do {
	            retValue += I64BIT_TABLE[value & 0x3F];
	        } while (value >>= 1);
	        // 凑长度
	        if (len) {
	            while (retValue.length < len) {
	                retValue = retValue + retValue;
	            }
	            if (retValue.length > len) {
	                retValue = retValue.slice(0, len);
	            }
	        }
	        return retValue;
	    },

	    // 数组去重
	    distinct: function distinct(arr) {
	        return [].concat(_toConsumableArray(new Set(arr)));
	    },

	    // 获取数组的交集
	    without: function without() {
	        return _underscore2.default.without.apply(_underscore2.default, arguments);
	    },

	    // 获取数组的交集
	    difference: function difference() {
	        return _underscore2.default.difference.apply(_underscore2.default, arguments);
	    },

	    // 获取数组的交集
	    intersection: function intersection() {
	        return _underscore2.default.intersection.apply(_underscore2.default, arguments);
	    },

	    // 数组是否有交集
	    isIntersection: function isIntersection() {
	        return _underscore2.default.intersection.apply(_underscore2.default, arguments).length > 0;
	    },

	    // 对象转数组
	    objToArr: function objToArr(obj) {
	        var arr = [];
	        for (var i in obj) {
	            arr.push(obj[i]);
	        }
	        return arr;
	    },

	    // 数组转对象
	    arrToObj: function arrToObj(arr) {
	        var obj = {};
	        for (var i in arr) {
	            obj[i] = arr[i];
	        }
	        return obj;
	    },

	    // 判断数组或对象是否为空
	    empty: function empty(obj) {
	        for (var t in obj) {
	            return false;
	        }
	        return true;
	    },

	    // 浅拷贝，指针指向，只拷贝一层
	    copy: function copy(obj) {
	        return this.clone(obj, 1);
	    },

	    // 深拷贝对象/数组
	    // level 为深拷贝的层级，默认一直遍历到最深层.
	    // 默认10层，防止循环引用
	    clone: function clone(data) {
	        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

	        if (level <= 0) {
	            return data;
	        }
	        var newData = void 0;
	        if (this.typeof(data, 'array')) {
	            newData = [];
	        } else if (this.typeof(data, 'object')) {
	            newData = {};
	        } else {
	            return data;
	        }
	        for (var i in data) {
	            if (data.hasOwnProperty(i)) {
	                newData[i] = this.clone(data[i], level - 1);
	            }
	        }
	        return newData;
	    },

	    // 以第一个对象为目标，依次把后面的对象merge到上去，支持深层的merge，类似于一个深层的 Object.assign()
	    // ghost 为一特殊参数，分三种情况
	    //   level 参数为拷贝层数，不传则默认遍历10层，防止循环引用
	    //   filter 为数组，声明某些属性无需合并直接覆盖
	    // ** 只适用于JSON等对象字面量的对象，比较复杂的对象直接覆盖，不做深层遍历
	    merge: function merge(ghost, target) {
	        var filter = [];
	        var level = 10;
	        // 场景1：ghost 为level值，即merge的深度

	        for (var _len = arguments.length, objs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	            objs[_key - 2] = arguments[_key];
	        }

	        if (this.typeof(ghost, 'number')) {
	            level = ghost;
	            // 场景2：ghost 为filter数组，声明某些属性无需合并直接覆盖
	        } else if (this.typeof(ghost, 'array')) {
	            filter = ghost;
	            // 场景3：无上述两种类型的参数，ghost为target
	        } else {
	            objs.unshift(target);
	            target = ghost;
	        }
	        if (level <= 0) {
	            return Utils.copy(objs[0]);
	        }
	        var result = target;
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = objs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var obj = _step.value;

	                // 首先判断对象是否冻结（冻结的对象为只读对象，其属性不可直接更改），直接覆盖
	                // 其次判断两个数据的格式，只有两个数据都为引用类型时，才需要循环合并
	                // 然后判断对象是否为直接继承自Object，如果不是，复杂对象不再深层遍历，直接覆盖
	                // array 应该直接覆盖，否则数组的值只增不减
	                if (!Object.isFrozen(result) && this.typeof(result, 'object') && this.typeof(obj, 'object') && this.directInstanceof(result, Object)) {
	                    for (var i in obj) {
	                        if (filter.indexOf(i) === -1) {
	                            result[i] = this.merge(level - 1, result[i], obj[i]);
	                        } else {
	                            result[i] = obj[i];
	                        }
	                    }
	                } else {
	                    // update at 2018/01/19，undefined的值也要覆盖，否则影响form中select的清空功能
	                    // result = obj === undefined ? target : obj;
	                    result = obj;
	                }
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return result;
	    },

	    // 从obj中过滤掉某些属性
	    filter: function filter(obj, arr) {
	        if (this.typeof(arr, 'string')) {
	            arr = [arr];
	        }
	        var newObj = {};
	        for (var i in obj) {
	            if (obj.hasOwnProperty(i) && arr.indexOf(i) === -1) {
	                newObj[i] = obj[i];
	            }
	        }
	        return newObj;
	    },

	    // 从obj中获取某些属性
	    reverseFilter: function reverseFilter(obj, arr) {
	        if (this.typeof(arr, 'string')) {
	            arr = [arr];
	        }
	        var newObj = {};
	        for (var i in obj) {
	            if (obj.hasOwnProperty(i) && arr.indexOf(i) >= 0) {
	                newObj[i] = obj[i];
	            }
	        }
	        return newObj;
	    },

	    // 对比两个对象是否相等
	    // 只检查了一层
	    equals: function equals(obj1, obj2) {
	        // 方式1
	        // return JSON.stringify(obj1) === JSON.stringify(obj2);
	        // 方式2
	        // return underscore.isEqual(obj1, obj2);
	        // 方式3
	        if (!this.typeof(obj1, 'object') || !this.typeof(obj2, 'object')) {
	            return false;
	        }
	        var keys = Object.keys(Object.assign({}, obj1, obj2));
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var i = _step2.value;

	                // 如果是函数，把函数转换成字符串再做比较。否则如果函数声明两次，用is比较返回的是false
	                if (this.typeof(obj1[i], 'function') && this.typeof(obj2[i], 'function')) {
	                    if (obj1[i].toString() !== obj2[i].toString()) {
	                        return false;
	                    }
	                } else {
	                    if (!Object.is(obj1[i], obj2[i])) {
	                        return false;
	                    }
	                }
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }

	        return true;
	    },

	    // 子串是否处于字符串最末尾
	    isLast: function isLast(sub, str) {
	        return str.lastIndexOf(sub) === str.length - sub.length;
	    },

	    // each 遍历对象属性，类似于jQuery的each函数，方便react的render函数中遍历对象
	    // callback 为回调函数，支持三个参数：依次是 item, index, obj
	    each: function each(obj, callback) {
	        var result = [];
	        for (var i in obj) {
	            result.push(callback(obj[i], i, obj));
	        }
	        return result;
	    },

	    // 根据路由模式生成真实的链接
	    // pattern  路由模式，如：#/visual/room/:room/realMode/:rack_col/:sn
	    // data 真实数据，模式中的:room即在data中取room字段的值
	    getPathFromPattern: function getPathFromPattern(pattern, data) {
	        var path = '#';
	        if (pattern) {
	            var arr = pattern.slice(2, pattern.length).split('/');
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = arr[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var v = _step3.value;

	                    if (v.indexOf(':') === 0) {
	                        var key = v.slice(1, v.length);
	                        path += '/' + data[key];
	                    } else {
	                        path += '/' + v;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }
	        } else {
	            path = 'javascript:void(0);';
	        }
	        return path;
	    },

	    // 跳转链接，router的调整组件会刷新两次，不过也不建议使用此函数，可以使用a标签代替
	    goto: function goto(path) {
	        var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        // 如果path不是已#/开头，且不是/开头，则加上#/
	        path = path.indexOf('#/') !== 0 ? path.indexOf('/') !== 0 ? '#/' + path : path : path;
	        var nowPath = window.location.hash;
	        if (path !== nowPath && path !== '' || forceUpdate) {
	            // 之所以不用hashHistory.push()是因为会自动执行两次push
	            window.location.href = path;
	        }
	    },

	    // 获取数据的类型，返回的类型名称为全小写
	    // 包括：object、array、function、null、undefined、regexp、number、string、boolean、date ...
	    // 推荐使用 Utils.typeof 函数
	    getType: function getType(value) {
	        return {}.toString.call(value).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
	    },

	    // 判断 value 是否为指定类型
	    // type 可以为一个字符串或者一个数组
	    typeof: function _typeof(value, type) {
	        if (this.getType(type) === 'string') {
	            return this.getType(value) === type;
	        } else if (this.getType(type) === 'array') {
	            return type.indexOf(this.getType(value)) !== -1;
	        } else {
	            return false;
	        }
	    },

	    // 把中横线命名的字符串转换成帕斯卡命名形式
	    toPascal: function toPascal(str) {
	        return str.split('-').map(function (i) {
	            return i.replace(/^\w/g, function (v) {
	                return v.toUpperCase();
	            });
	        }).join('');
	    },

	    // 判断组件是否继承自某个类，支持验证自己
	    // 根据组件的引用（通过import获得）判断，支持深层查找
	    isExtendsOf: function isExtendsOf(item, superClass) {
	        if (item === superClass) return true;
	        // item.prototype.__proto__.__proto__.constructor === SuperClass
	        // let Item = item.prototype && item.prototype.__proto__;
	        // while(Item) {
	        //     if (Item.constructor === superClass) {
	        //         return true;
	        //     }
	        //     Item = Item.__proto__
	        // };
	        // return false;
	        return superClass.isPrototypeOf(item);
	    },

	    // 某个对象是否直接来自某个类的实例
	    directInstanceof: function directInstanceof(obj, cls) {
	        if (!this.typeof(cls, 'array')) {
	            cls = [cls];
	        }
	        var _iteratorNormalCompletion4 = true;
	        var _didIteratorError4 = false;
	        var _iteratorError4 = undefined;

	        try {
	            for (var _iterator4 = cls[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                var v = _step4.value;

	                if (obj && obj.constructor && obj.constructor.prototype === v.prototype) {
	                    return true;
	                }
	            }
	        } catch (err) {
	            _didIteratorError4 = true;
	            _iteratorError4 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                    _iterator4.return();
	                }
	            } finally {
	                if (_didIteratorError4) {
	                    throw _iteratorError4;
	                }
	            }
	        }

	        return false;
	    },


	    // 把数组、对象转换成select等需要的options标准格式
	    toOptions: function toOptions(data) {
	        var result = [];
	        if (this.typeof(data, 'array')) {
	            // ['value', 'value2']
	            if (this.typeof(data[0], 'string')) {
	                result = this.distinct(data).map(function (v) {
	                    return { label: v, value: v };
	                });
	                // {label:1, value:'a'}，已格式化好的数据
	            } else {
	                result = data;
	            }
	        } else if (this.typeof(data, 'object')) {
	            // {key: value}
	            for (var i in data) {
	                result.push({
	                    label: data[i],
	                    value: i
	                });
	            }
	        }
	        return result;
	    },

	    // 获取options数据中的第一个值
	    getFirstOption: function getFirstOption(data) {
	        var format = this.toOptions(data);
	        if (format[0]) {
	            return format[0].value;
	        }
	        return;
	    },

	    // 把数据格式化成json展示
	    prettyJson: function prettyJson(data, origin) {
	        if (origin) {
	            return this._syntaxHighlight(data);
	        }
	        return {
	            type: 'pre',
	            className: 'json',
	            dangerouslySetInnerHTML: { __html: this._syntaxHighlight(data) }
	        };
	    },


	    /************************************************************************/
	    // 私有方法
	    _syntaxHighlight: function _syntaxHighlight(json) {
	        var _this = this;

	        if (typeof json !== 'string') {
	            json = JSON.stringify(json, undefined, 2);
	        }
	        json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');
	        var reg = /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g;
	        return json.replace(reg, function (match) {
	            var cls = 'number';
	            if (/^"/.test(match)) {
	                if (/:$/.test(match)) {
	                    cls = 'key';
	                } else {
	                    try {
	                        var type = JSON.parse(match);
	                        if (_typeof2(JSON.parse(type)) === 'object') {
	                            return _this._syntaxHighlight(JSON.parse(type));
	                        } else {
	                            cls = 'string';
	                        }
	                    } catch (e) {
	                        cls = 'string';
	                    }
	                }
	            } else if (/true|false/.test(match)) {
	                cls = 'boolean';
	            } else if (/null/.test(match)) {
	                cls = 'null';
	            }
	            return '<span class="' + cls + '">' + match + '</span>';
	        });
	    }
	});

	exports.default = Utils;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ }),
/* 82 */
/***/ (function(module, exports) {

	module.exports = window.DLL.moment;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _antd = __webpack_require__(4);

	var _utils = __webpack_require__(80);

	var _utils2 = _interopRequireDefault(_utils);

	var _config2 = __webpack_require__(84);

	var _config3 = _interopRequireDefault(_config2);

	var _ajaxData = __webpack_require__(88);

	var _ajaxData2 = _interopRequireDefault(_ajaxData);

	var _reqwest = __webpack_require__(89);

	var _reqwest2 = _interopRequireDefault(_reqwest);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
	                                                                                                                                                                                                     * @file 通用的请求发送+错误处理工具
	                                                                                                                                                                                                     *       全部请求都通过这里处理
	                                                                                                                                                                                                     *       request参数为一个对象，即reqwest这个库需要的参数的对象
	                                                                                                                                                                                                     *          但是有几个参数需要注意：
	                                                                                                                                                                                                     *              success: 不是指请求成功执行的函数，而是请求的数据符合预期，可以正常使用的处理函数(即 'HTTP Status Code' === 200 && data.status === 0)
	                                                                                                                                                                                                     *              error:   除了请求出错，还有请求不符合预期都会触发error (即 'HTTP Status Code' !== 200 || data.status !== 0)
	                                                                                                                                                                                                     *                       >> tips: 如果error执行完返回true，则会继续执行默认的error处理函数
	                                                                                                                                                                                                     *              onchange: 请求开始/结束时执行。
	                                                                                                                                                                                                     *                      开始执行请求时执行 onchange 参数为 (true, 'sending'); 
	                                                                                                                                                                                                     *                      请求完成时执行 onchange 参数为 (false, 'success'/'error')
	                                                                                                                                                                                                     *
	                                                                                                                                                                                                     * @author liuzechun@baidu.com
	                                                                                                                                                                                                     * **/


	var errorMsg = {
	    top: 24,
	    message: '请求出错',
	    description: '请求数据时出错，请稍后重试。',
	    duration: 3.5
	};

	// 获取错误信息
	function getErrorMsg(error) {
	    var message = void 0;
	    try {
	        if (_utils2.default.typeof(error, 'string')) {
	            message = error;
	        } else if (error.message) {
	            message = error.message;
	            if (_utils2.default.typeof(message, 'array')) {
	                message = message.join('; ');
	            }
	        } else {
	            message = JSON.stringify(error);
	        }
	    } catch (e) {
	        console.warn(e);
	    }
	    return message;
	}

	// 请求出错的处理函数
	function errorMessage(error) {
	    var message = getErrorMsg(error);
	    _antd.notification.error(Object.assign({}, errorMsg, !message ? null : {
	        description: message
	    }));
	}

	function getCacheKey(config) {
	    var cacheApis = _config3.default.get('global.cacheApis');
	    if (cacheApis) {
	        if (cacheApis.indexOf(config.url) > -1) {
	            var key = config.url;
	            if (config.params && !_utils2.default.empty(config.params)) {
	                key += JSON.stringify(config.params);
	            }
	            var hv = _utils2.default.hash(key);
	            return hv;
	        }
	    }
	    return null;
	}

	// 向缓存池中设置缓存数据
	function setCacheData(config, res) {
	    var key = getCacheKey(config);
	    if (key) {
	        _ajaxData2.default.set(key, _utils2.default.clone(res));
	    }
	}

	// 从缓存池中获取缓存数据
	function getCacheData(config) {
	    var key = getCacheKey(config);
	    if (key) {
	        return _ajaxData2.default.get(key);
	    }
	    return null;
	}

	function request(config) {
	    var globalAjax = _config3.default.get('global.ajax');
	    var successHandler = config.success;
	    // 如果需要做缓存，key不为空
	    if (getCacheKey(config)) {
	        // 如果能获取到缓存数据，则直接以此数据作为success的返回值，中断真正的ajax调用
	        var cacheData = getCacheData(config);
	        if (cacheData) {
	            // 异步
	            setTimeout(function () {
	                var _config;

	                return (_config = config).success.apply(_config, _toConsumableArray(cacheData));
	            }, 0);
	            return;
	        }
	        // 否则继续执行。调用success函数之前，增加缓存当前全部参数的逻辑
	        var oSuccess = config.success;
	        successHandler = function successHandler() {
	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            setCacheData(config, params);
	            oSuccess.apply(undefined, params);
	        };
	    }
	    // 如果是null或者false等，则不执行错误处理；如果是true，则执行默认错误处理
	    var errorHandler = !config.error ? function () {} : config.error || errorMessage;
	    if (config.error === true) {
	        errorHandler = errorMessage;
	    }
	    // onchange 为请求前后执行，开始执行请求返回参数true，请求完成返回参数false
	    var onchange = config.onchange || function () {
	        return;
	    };
	    // 配置合并
	    config = Object.assign({
	        method: 'get',
	        type: 'json'
	    }, globalAjax, config, {
	        data: config.data || config.params
	    });
	    // 用户可配置通用数据处理方法，比如把传入的参数序列化
	    if (globalAjax.beforeSend) {
	        config.data = globalAjax.beforeSend(config.data, config);
	    }

	    onchange(true, 'sending');
	    var final = Object.assign({}, config, {
	        success: function success(res) {
	            // 如果用户配置了success处理逻辑，则按照用户配置的逻辑做处理
	            if (globalAjax.success) {
	                var result = globalAjax.success(res, successHandler, errorHandler, config);
	                onchange(false, 'success');
	                return result;
	            }
	            // 兼容 message/msg、status/code
	            res.status = res.status || res.code || 0;
	            res.message = res.message || res.msg;
	            res.msg = res.message;
	            if (+res.status === 0) {
	                successHandler(res.data, res);
	            } else {
	                // 如果错误处理函数返回 true，则继续执行 errorHandle 把错误提示抛出
	                var _result = errorHandler(res);
	                // handler有返回值，则执行默认错误提示
	                if (_result) {
	                    if (_result === true) {
	                        errorMessage(err);
	                    } else {
	                        errorMessage(_result);
	                    }
	                }
	            }
	            onchange(false, 'success');
	        },
	        error: function error(err) {
	            // 如果用户配置了success处理逻辑，则按照用户配置的逻辑做处理
	            var result = void 0;
	            if (globalAjax.error) {
	                result = globalAjax.error(err, errorHandler, config);
	            } else {
	                result = errorHandler(err);
	            }
	            // handler有返回值，则执行默认错误提示
	            if (result) {
	                if (result === true) {
	                    errorMessage(err);
	                } else {
	                    errorMessage(result);
	                }
	            }
	            onchange(false, 'error');
	        }
	    });

	    (0, _reqwest2.default)(final);
	};

	request.init = function (url, method) {
	    return function (params, success, error, onchange) {
	        request({
	            url: url,
	            method: method,
	            data: params,
	            onchange: onchange,
	            success: success,
	            error: error
	        });
	    };
	};

	// 增加 RESTful 函数
	var _arr = ['get', 'post', 'put', 'delete'];

	var _loop = function _loop() {
	    var v = _arr[_i];
	    request[v] = function (url, params, success, error, onchange) {
	        request.init(url, v)(params, success, error, onchange);
	    };
	};

	for (var _i = 0; _i < _arr.length; _i++) {
	    _loop();
	}

	// 抛出错误处理函数
	request.errorMessage = errorMessage;

	// 通用ajax函数，参数为一个对象
	exports.default = request;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _BaseCache2 = __webpack_require__(85);

	var _BaseCache3 = _interopRequireDefault(_BaseCache2);

	var _default = __webpack_require__(86);

	var _default2 = _interopRequireDefault(_default);

	var _utils = __webpack_require__(80);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 默认配置
	可以用于配置各个组件通用的默认参数
	用户可以使用 `UF.config()` 来更改或者自定义任何默认参数
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-11 01:40:57
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-10-11 01:42:17
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Config = function (_BaseCache) {
	    _inherits(Config, _BaseCache);

	    function Config() {
	        _classCallCheck(this, Config);

	        return _possibleConstructorReturn(this, (Config.__proto__ || Object.getPrototypeOf(Config)).apply(this, arguments));
	    }

	    _createClass(Config, [{
	        key: 'get',
	        value: function get(names) {
	            var result = _get(Config.prototype.__proto__ || Object.getPrototypeOf(Config.prototype), 'get', this).call(this, names);
	            // 组件全局配置components为引用类型，组件使用时对配置进行更改会影响全局，需要clone一份
	            if (names && names.split('.')[0] === 'components') {
	                result = _utils2.default.clone(result);
	            }
	            return result;
	        }
	    }]);

	    return Config;
	}(_BaseCache3.default);

	exports.default = new Config(_default2.default);

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @file 缓存基类
	每 new 一次，会产生一个对象实例来做一类缓存
	author liuzechun
	reated Date: 2017-10-24 11:05:57
	


	var _utils = __webpack_require__(80);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var BaseCache = function () {
	    // 构造函数又两个参数，第一个参数必填，为缓存前缀，第二个参数为缓存对象的默认值
	    function BaseCache(_cache) {
	        _classCallCheck(this, BaseCache);

	        this._cache = _cache || {};
	    }

	    _createClass(BaseCache, [{
	        key: 'get',
	        value: function get(names) {
	            // 如果传递了name，则只去config中查找name字段，否则返回全部
	            var result = this._cache;
	            if (names) {
	                // 可以传递多个name依次向下查找，查找不到返回null
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = names.split('.')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        if (result && _utils2.default.typeof(result, 'object') && result[v]) {
	                            result = result[v];
	                        } else {
	                            return null;
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            return result;
	        }
	        // set函数有两种用法
	        // 如果 target 为字符串，则直接替换缓存中 target 保存的值
	        // 如果传入的第一个参数不是一个 target 字符串，而是一个对象，则把对象和现有缓存做merge，适用于 config.js 等

	    }, {
	        key: 'set',
	        value: function set(target, component) {
	            if (_utils2.default.typeof(target, 'object')) {
	                var origin = this.get();
	                var config = _utils2.default.merge(10, origin, target);
	                // 存完后返回存储的值
	                return config;
	            } else {
	                this._cache[target] = component;
	                return component;
	            }
	        }
	    }, {
	        key: 'del',
	        value: function del(key) {
	            delete this._cache[key];
	        }
	    }]);

	    return BaseCache;
	}();

	exports.default = BaseCache;
	;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _components = __webpack_require__(87);

	var _components2 = _interopRequireDefault(_components);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	    // 模块引入相关配置
	    modules: {
	        // 加载模块时是否展示loading
	        showLoading: false
	    },
	    // 全局系统配置
	    global: {
	        // 设置文档域 document.domain，默认为原始值
	        domain: document.domain,
	        // ajax 的全局配置，可更改全部 ajax 规则（例如报错规则）
	        ajax: {}
	    },
	    // 组件默认配置
	    components: _components2.default,
	    // 权限点，用户有权限的权限点列表
	    // key（权限点） => value（boolen/object）
	    authority: {}
	}; /**
	    * @file 全局默认配置
	    * @author liuzechun
	    * Created Date: 2018-01-30 10:55:45
	    */

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _router$loading$ifram;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/**
	 * @file 组件默认参数定义
	 * @author liuzechun
	 * Created Date: 2017-10-12 03:23:12
	 *
	 * Last Modified: 2017-10-12 03:23:16
	 * Modified By: liuzechun
	 */

	exports.default = (_router$loading$ifram = {
	    // 路由
	    'router': {
	        history: 'hashHistory'
	    },
	    // Loading
	    'loading': {
	        delay: 150
	    },
	    // Iframe
	    'iframe': {
	        mode: 'auto',
	        delay: 0,
	        showLoading: true
	    },
	    'select': {
	        optionFilterProp: 'children'
	    },
	    // 面包屑
	    'breadcrumb': {
	        style: { padding: '12px 24px', lineHeight: '18px', background: '#f7f7f7' }
	    }
	}, _defineProperty(_router$loading$ifram, 'select', {
	    // style: {width: 120}
	}), _defineProperty(_router$loading$ifram, 'auto-complete', {
	    style: { width: 160 },
	    options: []
	}), _defineProperty(_router$loading$ifram, 'month-picker', {
	    format: 'YYYY-MM'
	}), _defineProperty(_router$loading$ifram, 'time-picker', {
	    format: 'HH:mm:ss'
	}), _defineProperty(_router$loading$ifram, 'menu', {
	    // 默认高亮随路由一起变换
	    followRoute: true
	}), _defineProperty(_router$loading$ifram, 'form', {
	    items: [],
	    buttons: null,
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    }
	}), _defineProperty(_router$loading$ifram, 'table', {
	    rowKey: 'id',
	    pagination: {
	        current: 1,
	        pageSize: 10,
	        pageType: 'client',
	        total: 0
	    },
	    // 自动加载数据
	    autoLoadSource: true,
	    data: []
	}), _defineProperty(_router$loading$ifram, 'modal', {
	    visible: false
	}), _defineProperty(_router$loading$ifram, 'form-modal', {
	    visible: false
	}), _router$loading$ifram);

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _BaseCache = __webpack_require__(85);

	var _BaseCache2 = _interopRequireDefault(_BaseCache);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = new _BaseCache2.default(); /**
	                                              * @file ajax 数据缓存
	                                              * @author liuzechun
	                                              * Created Date: 2017-10-24 01:40:57
	                                              */

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	module.exports = window.DLL.reqwest;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(91);

	var _Antd3 = _interopRequireDefault(_Antd2);

	var _utils = __webpack_require__(79);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据录入 相关的组件抽象类，如：Input等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 01:11:19
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:11
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var DataEntry = function (_Antd) {
	    _inherits(DataEntry, _Antd);

	    function DataEntry(props) {
	        _classCallCheck(this, DataEntry);

	        // 默认异步属性为 value
	        var _this = _possibleConstructorReturn(this, (DataEntry.__proto__ || Object.getPrototypeOf(DataEntry)).call(this, props));

	        _this._asyncAttr = 'value';
	        _this.__controlled = {
	            key: 'value',
	            event: 'onChange',
	            defaultVal: undefined,
	            paramsIndex: 0
	        };
	        return _this;
	    }

	    // 增加 onChange 时默认保存数据的函数
	    // 父类的 _onControlEvent 函数不能满足需求，直接覆盖了


	    _createClass(DataEntry, [{
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            var _controlled = this.__controlled,
	                key = _controlled.key,
	                paramsIndex = _controlled.paramsIndex;
	            // 适合的组件：input、checkbox、radio

	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            if (_utils.Utils.typeof(params[paramsIndex], 'object') && params[paramsIndex].target) {
	                this.__props[key] = params[paramsIndex].target[key];
	            } else {
	                this.__props[key] = params[paramsIndex];
	            }
	            this.forceUpdate();
	        }

	        // 获取数据接口

	    }, {
	        key: 'getValue',
	        value: function getValue() {
	            var key = this.__controlled.key;
	            return this.__props[key];
	        }
	    }]);

	    return DataEntry;
	}(_Antd3.default);

	exports.default = DataEntry;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Antd 全部组件的基类，其中实现了接管受控属性的逻辑
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 01:11:19
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Antd = function (_BaseComponent) {
	    _inherits(Antd, _BaseComponent);

	    function Antd(props) {
	        _classCallCheck(this, Antd);

	        // __props 需要过滤的属性
	        // this._filter.push();
	        // 开放给用户使用的 Api
	        var _this = _possibleConstructorReturn(this, (Antd.__proto__ || Object.getPrototypeOf(Antd)).call(this, props));

	        _this._openApi.push('trigger');
	        // 壳子调用antd组件，调用的组件的实例存储在_component中
	        _this._component = null;
	        // 受控属性名，供子类设置。如果子类设置了此属性，则会绑定change事件，同时也受控于用户传入的此值。见 _handleControlled
	        _this.__controlled = null;
	        return _this;
	    }

	    /* 暴露给用户的方法 ***********************************************************************/

	    // 触发组件上的原生事件，例如 focus、change 等


	    _createClass(Antd, [{
	        key: 'trigger',
	        value: function trigger(event) {
	            if (this._component && this._component[event]) {
	                for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                    params[_key - 1] = arguments[_key];
	                }

	                this._component[event](params);
	            } else {
	                console.warn('there is no event named: ' + event);
	            }
	        }

	        /* 供子组件调用方法 ***********************************************************************/

	    }, {
	        key: '__init',
	        value: function __init() {
	            var _get2,
	                _this2 = this;

	            for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                params[_key2] = arguments[_key2];
	            }

	            (_get2 = _get(Antd.prototype.__proto__ || Object.getPrototypeOf(Antd.prototype), '__init', this)).call.apply(_get2, [this].concat(params));
	            // 保存原始antd组件的引用
	            this.__props['ref'] = function (ele) {
	                return _this2._component = ele;
	            };
	            // 受控配置 - 如果不为null,则合并覆盖
	            this.__controlled = this.__controlled ? this.__mergeProps({
	                key: 'value',
	                event: 'onChange',
	                defaultVal: undefined,
	                paramsIndex: 0
	            }, this.__controlled) : null;
	            // 受控组件默认处理逻辑
	            this._handleControlled();
	        }

	        // 受控属性绑定change事件，同时也受控于用户传入的值

	    }, {
	        key: '_handleControlled',
	        value: function _handleControlled() {
	            if (!this.__controlled) {
	                return;
	            }
	            var _controlled = this.__controlled,
	                key = _controlled.key,
	                defaultVal = _controlled.defaultVal,
	                event = _controlled.event;
	            // 受控属性对应的默认属性，(如：value => defaultValue)

	            var defaultKey = 'default' + key.replace(/^\w/g, function (v) {
	                return v.toUpperCase();
	            });
	            // 把value和defaultValue merge一下，统一交由 value 控制
	            var keyValue = this.__props[key] || this.__props[defaultKey];
	            // 如果这个值为空，否则受控属性为空会出现异常
	            if (keyValue !== undefined) {
	                this.__props[key] = keyValue;
	            } else {
	                // 屏蔽warning，非受控组件转换为受控组件会报warning
	                this.__props[key] = defaultVal;
	            }
	            this._inject(this.__props, event, this._onControlEvent);
	        }

	        // 同步onChange的数据到受控属性上，默认取第一个参数
	        // ** 可直接被子类覆盖重写 **
	        // **     如果有其他需求可以直接覆盖重写，注意函数内要调用下 callback（如：DataEntry中用法）

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            var _controlled2 = this.__controlled,
	                key = _controlled2.key,
	                paramsIndex = _controlled2.paramsIndex;

	            if (key) {
	                for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                    params[_key3] = arguments[_key3];
	                }

	                this.__props[key] = params[paramsIndex];
	                this.forceUpdate();
	            }
	        }
	    }]);

	    return Antd;
	}(_base.BaseComponent);

	exports.default = Antd;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    BaseComponent: __webpack_require__(93).default,
	    BaseConf: __webpack_require__(93)
	};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.FilterProps = exports.Uncomplex = exports.ForUserApi = exports.PreventCoverageMap = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(4);

	var _utils = __webpack_require__(79);

	var _tools = __webpack_require__(73);

	var _cache = __webpack_require__(94);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 基础类
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xuziqian on 2017/8/4.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// React的生命周期中的7个常用函数，为了防止函数被终的子组件覆盖，这7个函数会经过逻辑处理
	// 中间子类在使用这几个函数的时候，需要在函数最前面调用parent.[func]()
	var PreventCoverageMap = exports.PreventCoverageMap = ['componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount', 'shouldComponentUpdate'];

	// // 提供给用户的和生命周期相关的函数，命名更加语义化
	var ForUserApi = exports.ForUserApi = {
	    beforeCreate: 'componentWillMount',
	    afterCreate: 'componentDidMount',
	    beforeRender: 'componentWillMount,componentWillUpdate',
	    afterRender: 'componentDidMount,componentDidUpdate',
	    beforeDestroy: 'componentWillUnmount'
	};

	// 不复杂的属性，即无需merge处理直接覆盖的属性
	var Uncomplex = exports.Uncomplex = ['params', 'sourceParams', 'data', 'options'];

	// // 转化为__props时需过滤的属性 - 用户配置的特殊功能的属性
	var FilterProps = exports.FilterProps = Object.keys(ForUserApi).concat(PreventCoverageMap, [
	// 复用配置模板。
	'configTpl',
	// source 系列函数
	'source', 'sourceHandler', 'sourceTarget', 'sourceMethod', 'sourceParams', 'sourceAutoLoad', 'sourceSuccess',
	// 组件额外动作及组件关联相关属性
	'actionType', 'actionTrigger', 'actionTarget', 'actionParams',
	// 提交/发送数据系列参数
	'api', 'method', 'paramsHandler']);

	// 因为组件很少使用 props 和 state，某些时候需要组件刷新的。例如面包屑组件

	var BaseComponent = function (_Component) {
	    _inherits(BaseComponent, _Component);

	    // export default class BaseComponent extends PureComponent {
	    function BaseComponent(props) {
	        _classCallCheck(this, BaseComponent);

	        var _this = _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call(this, props));

	        _this.type = _this.props.__type;
	        _this.key = _this.props.__key;
	        // 组件缓存的key。有值的话组件才会缓存，如果值为null，则不会做缓存
	        _this.cacheName = _this._getTransmitName();
	        // _factory 是最初 Factory 的 this
	        _this._factory = _this.props._factory;
	        // 如果用户自己配置了 sourceTarget 属性，则按照用户定义的赋值
	        _this._asyncAttr = 'children';
	        // 供用户使用，例如获取路由信息/参数等
	        _this._root = _this._factory;
	        // 开发时自定义的需注入到事件中的函数，例如 AutoComplete 组件中的 'onSearch' 函数
	        _this._injectEvent = [];
	        // 转化为 __props 时需过滤的属性
	        _this._filter = _utils.Utils.copy(FilterProps).concat([
	        // 一些隐藏的属性
	        '__cache', '__type', '__key', '_factory']);
	        // 不复杂的属性，即无需merge处理直接覆盖的属性
	        _this._uncomplex = _utils.Utils.copy(Uncomplex);
	        // 开放给用户使用的 Api，需处理下
	        _this._openApi = ['set', 'get', 'show', 'hide', 'refresh'];
	        // 存储一些程序执行过程中的数据
	        _this._tempData = {};
	        // 从缓存中读出组件的默认参数。参数来源可以是在 config.js 里配置；也可以是用户通过调用 UF.config() 配置
	        // （如 loading 组件的 delay 参数在 config.js 中定义为 150）
	        // 开发组件的时候，也可以在this.__props上增加一些默认的参数（注意不要直接用对象覆盖）
	        _this.__props = _cache.Config.get('components.' + _this.props.__type) || {};
	        // 复用配置模板。
	        _this.__props = _this.__getConfigTpl(_this.props, _this.__props);
	        // 更新前的__props
	        _this.__prevProps = {};
	        // 用于存放被过滤掉的props上的属性，使用户重新set也可以生效（如果直接在props上取的话，set不会触发props更新，被过滤掉的属性就无法再更新了）
	        _this.__filtered = {};
	        return _this;
	    }
	    // 覆盖原生的setState方法。如果组件已销毁，则不再执行setState。用于异步操作中调用setState时的通用状态检测
	    // setState(...params) {
	    //     if (!this.isMounted()) {
	    //         return false;
	    //     }
	    //     super.setState.call(this, ...params);
	    // }

	    /* 暴露给用户的方法 ***********************************************************************/

	    // 暴露给用户刷新组件的接口


	    _createClass(BaseComponent, [{
	        key: 'set',
	        value: function set(options) {
	            // 使用 factory.handleProps 函数处理用户配置的参数，并生成组件需要使用的 props
	            options = this._factory.handleProps(Object.assign({ type: this.type }, options));
	            // 要保证调用cwr时传入的nextProps的完整性
	            var props = this.__mergeProps({}, this.__props, options);
	            // cwr一定存在，且cwr中会执行__setProps。不管子组件是否用的是__props，都能保证兼容性
	            // 因为默认会更改__props并且forceUpdate；如果组件用的自己的props，必定会自己实现cwr中的逻辑
	            this.componentWillReceiveProps(props, this.__props);
	            return this;
	        }
	        // 如果有key则返回key的值；如果没有key，则返回全部参数

	    }, {
	        key: 'get',
	        value: function get(key) {
	            return key ? this.__props[key] : this.__props;
	        }
	        // 隐藏组件
	        // 子组件中有可能重写

	    }, {
	        key: 'hide',
	        value: function hide() {
	            var oStyle = this.__props.style || {};
	            var oDisplay = oStyle.display;
	            this._tempData.display = oDisplay;
	            this.__setProps({
	                style: Object.assign(oStyle, {
	                    display: 'none'
	                })
	            });
	        }
	        // 展示组件

	    }, {
	        key: 'show',
	        value: function show() {
	            var style = this.__props.style || {};
	            if (this._tempData.display) {
	                style.display = this._tempData.display;
	            } else {
	                delete style.display;
	            }
	            this.__setProps(style);
	        }

	        /* 供子组件调用方法 ***********************************************************************/

	        // 供子组件调用初始化 使用子组件this调用

	    }, {
	        key: '__init',
	        value: function __init() {
	            // 以下几个函数执行顺序固定，请慎重调整！！
	            // 把父类中设置的需注入到生命周期中的逻辑注入到对应生命周期函数中
	            this._injectFunction();
	            // 共享组件
	            this._transmitComponent();
	            // 后面传入组件的参数用 __props 代替 props
	            this._initProps();
	            // 处理数据绑定页面
	            this._handleModel();
	            // 把__props上的全部回调函数的最后增加一个参数设置为组件本身，方便使用
	            // this._updateCallback();
	            // 挂载用户传入的需要关联到生命周期中的函数（这个把生命周期的函数做个一个转换，更加语义化）
	            this._loadUserFunction();
	            // 把开发时定义的需注入到组件事件中的逻辑注入到对应的事件函数中（防止被覆盖）
	            this._injectEventFunction();
	            // 组件额外动作处理：actionType、actionTrigger、actionTarget、actionParams
	            this._handleActionType();
	            // 开放给用户使用的 Api，需处理下
	            this._handleOpenApi();
	        }

	        // 获取可复用的配置模板。
	        // 除定义全局组件通用配置外，还可以额外再定义一些配置模板供组件复用
	        // 使用时用户只需使用 configTpl 字段指定要复用哪个模板即可

	    }, {
	        key: '__getConfigTpl',
	        value: function __getConfigTpl(props, currentProps) {
	            if (props && props.configTpl) {
	                var tpl = _cache.Config.get('components.' + props.configTpl);
	                if (tpl) {
	                    if (_utils.Utils.typeof(tpl, 'function')) {
	                        tpl = tpl();
	                    }
	                    if (currentProps) {
	                        return this.__mergeProps({}, currentProps, tpl);
	                    } else {
	                        // 如果没有传入已有currentProps参数，则默认和自己当前的配置合并
	                        currentProps = _utils.Utils.copy(props);
	                        delete currentProps.configTpl;
	                        // 此处要注意，是原props往tpl上覆盖
	                        return this.__mergeProps({}, tpl, currentProps);
	                    }
	                }
	            }
	            return currentProps || props;
	        }

	        // 用于在组件开发中更新__props，类似于setState，只不过是在刷新 __props
	        // 也可以传入待刷新完成后执行自己想要执行的逻辑（比如Modal，需弹框显示后才能执行其他操作）
	        // 默认会刷新组件；也可以把第二个参数设为 false 阻止刷新

	    }, {
	        key: '__setProps',
	        value: function __setProps(nextProps, follow) {
	            // 去除掉多余的属性（解决报warning问题）
	            var __props = this._filterHandler(nextProps);
	            // 直接更新 this.__props 即可，
	            // this.__mergeProps(this.__props, nextProps);
	            this.__prevProps = this.__props;
	            this.__props = this.__mergeProps({}, this.__props, __props);

	            if (follow !== false) {
	                this.forceUpdate();
	                // 延迟执行
	                setTimeout(follow, 10);
	            }
	        }

	        // 把默认配置和当前用户传入配置进行合并，可以传多个参数
	        //  如果把 defaultProps 放在第一位，merge完成后defaultProps的值会变成merge后的数据，如果defaultProps需多次使用，会出问题
	        //  针对此问题，可以第一个参数放一个空对象，类似于Object.assign的用法

	    }, {
	        key: '__mergeProps',
	        value: function __mergeProps() {
	            for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
	                props[_key] = arguments[_key];
	            }

	            return _utils.Utils.merge.apply(_utils.Utils, [this._uncomplex].concat(props));
	        }

	        // 从props中过滤掉某些属性，例如原始元素不支持的属性

	    }, {
	        key: '__filterProps',
	        value: function __filterProps(props, arr) {
	            return _utils.Utils.filter(props, arr);
	        }

	        // 判断是否需要刷新
	        //   如果是单纯因为父组件属性导致子组件的 cwr 函数被调用，两次的props是相同的，没必要刷新；
	        //   如果是set导致的，则两次的props肯定会有不同，需刷新
	        // 还有：需要把_filter中定义的属性全部过滤掉，这些属性是额外定义的，对判断结果会有影响
	        // TODO: 貌似现在没什么作用，都返回true。。。

	    }, {
	        key: '__shouldUpdate',
	        value: function __shouldUpdate(props, nextProps) {
	            return !_utils.Utils.equals(_utils.Utils.filter(props, this._filter), _utils.Utils.filter(nextProps, this._filter));
	        }

	        // ajax的get方法

	    }, {
	        key: '__getData',
	        value: function __getData() {
	            _utils.Ajax.get.apply(_utils.Ajax, arguments);
	        }

	        // ajax的post方法

	    }, {
	        key: '__postData',
	        value: function __postData() {
	            _utils.Ajax.post.apply(_utils.Ajax, arguments);
	        }

	        // ajax通用方法

	    }, {
	        key: '__ajax',
	        value: function __ajax(params) {
	            (0, _utils.Ajax)(params);
	        }

	        // 解析某个属性的配置。方便开发组件时定义一些可以为配置的属性

	    }, {
	        key: '__analysis',
	        value: function __analysis(item) {
	            return this._factory.generateElement(item);
	        }

	        // 判断是否为权限点 && 是否有权限

	    }, {
	        key: '__authority',
	        value: function __authority(item) {
	            return _tools.Authority.check(item);
	        }

	        // 获取缓存中的组件

	    }, {
	        key: '__getComponent',
	        value: function __getComponent(name) {
	            return _cache.ComponentsCache.get(name);
	        }

	        // 兼容自定义额外操作返回结果有可能为 Promise 的情况。
	        // 如果result是Promse，使用then/catch处理；
	        // 否则，根据返回的是否为false判断要执行成功还是失败

	    }, {
	        key: '__compatePromise',
	        value: function __compatePromise(result, success, error) {
	            if (result instanceof Promise) {
	                result.then(function () {
	                    success && success();
	                }).catch(function () {
	                    error && error();
	                });
	            } else {
	                if (result !== false) {
	                    success && success();
	                } else {
	                    error && error();
	                }
	            }
	        }

	        /* 私有方法 ***********************************************************************/

	        // 组件的 componentWillReceiveProps 中注入的处理逻辑
	        // 有两种情况会调用cwr：
	        //  一种是父组件刷新，currentProps = this.props，如果props确实发生了变化，则需要重新调用__setProps
	        //  还有一种是set函数调用的，currentProps = this.__props，如果__props发生变化，则需要重新调用__setProps

	    }, {
	        key: '_componentWillReceiveProps',
	        value: function _componentWillReceiveProps(nextProps, currentProps) {
	            // cwr函数执行很频繁，这里对一些props不变的情况进行一些过滤
	            currentProps = !_utils.Utils.empty(currentProps) ? currentProps : this.props;
	            if (this.__shouldUpdate(currentProps, nextProps)) {
	                // 如果参数变化，则重新获取数据。要在变更 __props 之前判断。
	                var reGetData = nextProps.sourceParams && !_utils.Utils.equals(nextProps.sourceParams, this.__filtered.sourceParams);
	                // 重新设置 __props
	                this.__setProps(nextProps);
	                // 如果参数变化，则重新获取数据，此时 __props 已变更完成。
	                if (reGetData) {
	                    this._handleAsyncData();
	                }
	            }
	        }

	        // componentDidMount 中注入的处理逻辑

	    }, {
	        key: '_componentDidMount',
	        value: function _componentDidMount() {
	            // 组件加载完成后再中心共享一次组件，保证渲染完成后缓存中一定存在。
	            //   貌似如果组件需重新解析渲染时，时先执行构造函数生成新组件，再销毁原来组件，再把新组件渲染（未验证...）
	            //   如果如上面的流程，则会导致新组件写入缓存中后有被老组件销毁掉，最终缓存中不再有新组件
	            this._transmitComponent();
	            // 如果设置了自动获取异步数据，则执行逻辑
	            if (this.__filtered.sourceAutoLoad === undefined || this.__filtered.sourceAutoLoad) {
	                this._handleAsyncData();
	            }
	        }

	        // componentWillUnmount 中注入的处理逻辑
	        // 最外层的子类实例化的时候会调用 _injectFunction 函数，把函数注入到子类示例的 componentWillUnmount 中

	    }, {
	        key: '_componentWillUnmount',
	        value: function _componentWillUnmount() {
	            this._unsetTransmitComponent();
	        }

	        // 自动异步获取数据

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {
	            var _this2 = this;

	            if (this.__filtered.source) {
	                this.__ajax({
	                    url: this.__filtered.source,
	                    method: this.__filtered.sourceMethod || 'get',
	                    data: this.__filtered.sourceParams,
	                    success: function success(data, res) {
	                        // 如果用户定义了数据处理函数，先对数据进行处理
	                        if (_this2.__filtered.sourceHandler) {
	                            data = _this2.__filtered.sourceHandler(data, res, _this2);
	                        }
	                        // 如果用户自己配置了 sourceTarget 属性，则按照用户定义的赋值
	                        var target = _this2.__filtered.sourceTarget || _this2._asyncAttr;
	                        target = target === 'content' ? 'children' : target;
	                        _this2.__setProps(_defineProperty({}, target, data));
	                        // 成功后的额外操作
	                        _this2._sourceSuccess && _this2._sourceSuccess(data);
	                    }
	                });
	            }
	        }

	        // 过滤 props，生成 __props 和 __filtered

	    }, {
	        key: '_filterHandler',
	        value: function _filterHandler(props) {
	            var newProps = {};
	            for (var i in props) {
	                if (props.hasOwnProperty(i)) {
	                    if (this._filter.indexOf(i) === -1) {
	                        newProps[i] = props[i];
	                    } else {
	                        this.__filtered[i] = props[i];
	                    }
	                }
	            }
	            return newProps;
	        }

	        // 后面传入组件的参数用 __props 代替 props

	    }, {
	        key: '_initProps',
	        value: function _initProps() {
	            // 先把 this.__props 中初始化的多余属性过滤掉
	            // 在这里执行是为了方便子类中__init之前在去更改__props
	            this.__props = this._filterHandler(this.__props);
	            // 然后把组件原props作为新值传给__setProps做合并
	            this.__setProps(this.props, false);
	        }

	        // 获取key的名称

	    }, {
	        key: '_getTransmitName',
	        value: function _getTransmitName() {
	            // 根据 __cache 属性判断
	            var key = this.props.__cache;
	            if (!!this.props.route && this.props.route.__cache) {
	                key = this.props.route.__cache;
	            }
	            // 如果没有key，则根据是否关联model数据判断
	            if (!key) {
	                if (_tools.Model.if(this.props)) {
	                    key = this.props.__key;
	                }
	            }
	            return key;
	        }

	        // 共享组件

	    }, {
	        key: '_transmitComponent',
	        value: function _transmitComponent() {
	            if (!!this.cacheName) {
	                _cache.ComponentsCache.set(this.cacheName, this);
	            }
	        }

	        // 解除共享

	    }, {
	        key: '_unsetTransmitComponent',
	        value: function _unsetTransmitComponent() {
	            if (!!this.cacheName) {
	                _cache.ComponentsCache.del(this.cacheName);
	            }
	        }

	        // 处理数据绑定页面。设置关联关系 && 替换模板

	    }, {
	        key: '_handleModel',
	        value: function _handleModel() {
	            this.__props = _tools.Model.setCache(this.cacheName, this.__props);
	        }

	        // 更新配置中的回调函数，给回调函数的最后增加一个参数为组件本身，方便使用
	        // 有些函数参数不定，容易造成问题，且应用场景不多
	        // _updateCallback(props) {
	        //     !props && (props = this.__props);
	        //     for (let i in props) {
	        //         let item = props[i];
	        //         // 不是冻结对象，且不是类
	        //         if (item && !Object.isFrozen(item) && !Utils.isExtendsOf(item, React.Component)) {
	        //             if (Utils.typeof(item, 'function')) {
	        //                 props[i] = (...params) => {
	        //                     return item.call(this, ...params, this);
	        //                 }
	        //             } else if ((Utils.typeof(item, 'object') && Utils.directInstanceof(item, Object))
	        //                 || Utils.typeof(item, 'array')) {
	        //                     this._updateCallback(item);
	        //             }
	        //         }
	        //     }
	        // }

	        // 开放给用户使用的 Api，需处理下

	    }, {
	        key: '_handleOpenApi',
	        value: function _handleOpenApi() {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._openApi[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    if (_utils.Utils.typeof(this[v], 'function')) {
	                        this[v] = this[v].bind(this);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }

	        // 把父组件定义的 需在React的生命周期中的7个函数中增加的处理逻辑 注入到对应的7个函数中

	    }, {
	        key: '_injectFunction',
	        value: function _injectFunction() {
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = PreventCoverageMap[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var v = _step2.value;

	                    // 如果父组件中有等待注入的函数
	                    var inject = this['_' + v];
	                    if (inject) {
	                        this._inject(this, v, inject);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	        }

	        // 把开发时定义的需注入到组件事件中的逻辑注入到对应的事件函数中，可见 AutoComplete 组件中的 'onSearch' 函数

	    }, {
	        key: '_injectEventFunction',
	        value: function _injectEventFunction() {
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = this._injectEvent[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var v = _step3.value;

	                    var inject = this['_' + v];
	                    if (inject) {
	                        this._inject(this.__props, v, inject);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }
	        }

	        // 挂载用户传入的需要关联到生命周期中的函数

	    }, {
	        key: '_loadUserFunction',
	        value: function _loadUserFunction() {
	            var _this3 = this;

	            var _loop = function _loop(f) {
	                // 如果props中有等待注入的函数
	                var inject = _this3.__filtered[f];
	                if (inject) {
	                    var _iteratorNormalCompletion5 = true;
	                    var _didIteratorError5 = false;
	                    var _iteratorError5 = undefined;

	                    try {
	                        for (var _iterator5 = ForUserApi[f].split(',')[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                            var v = _step5.value;

	                            _this3._inject(_this3, v, function () {
	                                var result = inject.call(_this3, _this3.__props, _this3);
	                                // 组件渲染/刷新前可以让用户有机会改参数
	                                if (result && ['beforeCreate', 'beforeRender'].indexOf(f) !== -1) {
	                                    // 防止用户设置过滤属性
	                                    _this3.__props = _this3._filterHandler(result);
	                                }
	                            }, true);
	                        }
	                    } catch (err) {
	                        _didIteratorError5 = true;
	                        _iteratorError5 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                                _iterator5.return();
	                            }
	                        } finally {
	                            if (_didIteratorError5) {
	                                throw _iteratorError5;
	                            }
	                        }
	                    }
	                }
	            };

	            for (var f in ForUserApi) {
	                _loop(f);
	            }
	            // 支持高级用户（专业前端）直接使用原始的生命周期函数
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = PreventCoverageMap[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var v = _step4.value;

	                    // 如果父组件中有等待注入的函数
	                    var _inject2 = this.__filtered['_' + v];
	                    if (_inject2) {
	                        this._inject(this, v, _inject2);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }
	        }

	        // 组件额外动作处理：actionType

	    }, {
	        key: '_handleActionType',
	        value: function _handleActionType() {
	            var _this4 = this;

	            if (this.__filtered['actionType']) {
	                var _filtered = this.__filtered,
	                    actionType = _filtered.actionType,
	                    _filtered$actionTrigg = _filtered.actionTrigger,
	                    actionTrigger = _filtered$actionTrigg === undefined ? 'onClick' : _filtered$actionTrigg,
	                    actionTarget = _filtered.actionTarget,
	                    _filtered$actionParam = _filtered.actionParams,
	                    actionParams = _filtered$actionParam === undefined ? [] : _filtered$actionParam;
	                // actionTarget可以为一个函数，函数的参数为actionTrigger的参数列表
	                // 函数返回一个actionTarget的字符串

	                var actionTargetStr = actionTarget;
	                if (_utils.Utils.typeof(actionTarget, 'function')) {
	                    actionTargetStr = actionTarget.apply(undefined, _toConsumableArray(params));
	                }
	                switch (actionType) {
	                    // 动作类型为链接跳转
	                    case 'link':
	                        _utils.Utils.goto(actionTargetStr);
	                        break;
	                    // 动作类型为：调用
	                    case 'call':
	                        this._inject(this.__props, actionTrigger, function () {
	                            var _actionTargetStr$spli = actionTargetStr.split('.'),
	                                _actionTargetStr$spli2 = _toArray(_actionTargetStr$spli),
	                                targetName = _actionTargetStr$spli2[0],
	                                targetFunction = _actionTargetStr$spli2.slice(1);

	                            var target = _this4.__getComponent(targetName);
	                            if (target) {
	                                var func = target;
	                                var _iteratorNormalCompletion6 = true;
	                                var _didIteratorError6 = false;
	                                var _iteratorError6 = undefined;

	                                try {
	                                    for (var _iterator6 = targetFunction[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                                        var v = _step6.value;

	                                        func[v] && (func = func[v]);
	                                    }
	                                } catch (err) {
	                                    _didIteratorError6 = true;
	                                    _iteratorError6 = err;
	                                } finally {
	                                    try {
	                                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                                            _iterator6.return();
	                                        }
	                                    } finally {
	                                        if (_didIteratorError6) {
	                                            throw _iteratorError6;
	                                        }
	                                    }
	                                }

	                                func.apply(undefined, _toConsumableArray(actionParams));
	                            }
	                        }, true);
	                        break;
	                    // 提交数据
	                    case 'ajax':
	                        this._inject(this.__props, actionTrigger, this._handleApiProps, true);
	                        break;
	                    default:
	                        break;
	                }
	            }
	        }
	    }, {
	        key: '_handleApiProps',
	        value: function _handleApiProps() {
	            var _this5 = this;

	            var _filtered2 = this.__filtered,
	                api = _filtered2.api,
	                _filtered2$method = _filtered2.method,
	                method = _filtered2$method === undefined ? 'post' : _filtered2$method,
	                actionParams = _filtered2.actionParams,
	                paramsHandler = _filtered2.paramsHandler;

	            if (api) {
	                var _params = actionParams;
	                paramsHandler && (_params = paramsHandler(_params));
	                return new Promise(function (resolve, reject) {
	                    _this5.__ajax({
	                        url: api,
	                        method: method,
	                        params: _params,
	                        success: function success(data, res) {
	                            var result = res.msg;
	                            _antd.message.success('执行成功，结果返回: ' + result, 2.5);
	                            resolve();
	                        },
	                        error: function error(res) {
	                            var result = res.msg;
	                            _antd.message.error('执行失败，结果返回: ' + result, 4);
	                            reject();
	                        }
	                    });
	                });
	            }
	        }

	        // 函数替换 函数
	        // 参数依次为 父级 、 目标函数 、 新函数 、 是否把原来逻辑提前

	    }, {
	        key: '_inject',
	        value: function _inject(parent, target, newFunc, oldAhead) {
	            var _this6 = this;

	            var origin = parent[target];
	            parent[target] = !!origin ? function () {
	                for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                    params[_key2] = arguments[_key2];
	                }

	                // return原函数执行结果
	                var result = void 0;
	                oldAhead ? result = origin.call.apply(origin, [_this6].concat(params)) : null;
	                newFunc.call.apply(newFunc, [_this6].concat(params));
	                oldAhead ? null : result = origin.call.apply(origin, [_this6].concat(params));
	                return result;
	            } : newFunc.bind(this);
	            return parent;
	        }
	    }]);

	    return BaseComponent;
	}(_react.Component);

	exports.default = BaseComponent;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    Config: __webpack_require__(84).default,
	    ComponentsCache: __webpack_require__(95).default,
	    ModelCache: __webpack_require__(96).default
	};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _BaseCache = __webpack_require__(85);

	var _BaseCache2 = _interopRequireDefault(_BaseCache);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = new _BaseCache2.default(); /**
	                                              * @file 组件实例缓存
	                                              * @author liuzechun
	                                              * Created Date: 2017-10-24 01:40:57
	                                              */

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _utils = __webpack_require__(79);

	var _BaseCache2 = __webpack_require__(85);

	var _BaseCache3 = _interopRequireDefault(_BaseCache2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 组件实例缓存
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-24 01:40:57
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var _key = '_uf-models';
	var _cache = {

	    // 数据存储
	    data: {
	        // a: 1
	    },

	    // model关联的属性，以model为单位。(数据驱动页面)
	    model: {}
	    // 'a': {
	    //     'input': {
	    //         'value': '${a}',
	    //     },
	    //     'span': {
	    //         'children': '${a}'
	    //     }
	    // }


	    // 属性关联的model，以组件为单位。(页面驱动数据，使用 $model/$join 属性)
	    // attr: {
	    //     'my-table': {
	    //         'title': 'a',
	    //     }
	    // }

	};

	var Models = function (_BaseCache) {
	    _inherits(Models, _BaseCache);

	    function Models() {
	        _classCallCheck(this, Models);

	        return _possibleConstructorReturn(this, (Models.__proto__ || Object.getPrototypeOf(Models)).apply(this, arguments));
	    }

	    _createClass(Models, [{
	        key: 'getData',

	        // 获取摸个model点关联的数据
	        value: function getData(model) {
	            var result = this._cache.data;
	            if (!!model) {
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = model.split('.')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        if (_utils.Utils.typeof(result, 'object')) {
	                            result = result[v];
	                        } else {
	                            // console.error(`Uncaught TypeError: model '${model}' is invalid.`);
	                            // 获取不到的数据全部返回空字符串
	                            result = '';
	                            break;
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            return result || '';
	        }
	        // 获取摸个model点关联的组件

	    }, {
	        key: 'getModel',
	        value: function getModel(name) {
	            return !!name ? this._cache.model[name] : this._cache.model;
	        }
	        // 获取某个model点影响的所有组件及属性

	    }, {
	        key: 'getConnections',
	        value: function getConnections(model) {
	            var models = this.getModel();
	            var connectionsMode = model + '.';
	            var result = _utils.Utils.copy(models[model]);
	            for (var i in models) {
	                if (i.indexOf(connectionsMode) !== -1) {
	                    var item = models[i];
	                    for (var j in item) {
	                        if (result[j]) {
	                            var itemComp = item[j];
	                            var resultComp = result[j];
	                            for (var k in itemComp) {
	                                resultComp[k] = resultComp[k] || itemComp[k];
	                            }
	                        } else {
	                            result[j] = item[j];
	                        }
	                    }
	                }
	            }
	            return result;
	        }

	        // 给某个一model点设置数据

	    }, {
	        key: 'setData',
	        value: function setData(model, data) {
	            // 如果没有设置model点，则直接更改整个data。用于一开始用户使用 UF.config 配置通用数据
	            if (!model) {
	                this._cache.data = data;
	                return;
	            }
	            var origin = this.getData();
	            var arr = model.split('.');
	            var target = origin;
	            var parent = void 0,
	                v = void 0;
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    v = _step2.value;

	                    if (!_utils.Utils.typeof(target[v], 'object')) {
	                        target[v] = {};
	                    }
	                    parent = target;
	                    target = parent[v];
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            parent[v] = data;
	        }
	    }, {
	        key: 'setModel',
	        value: function setModel(model, data) {}
	    }]);

	    return Models;
	}(_BaseCache3.default);

	exports.default = new Models(_cache);

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TimelineItem = exports.Timeline = exports.CheckableTag = exports.Tag = exports.TabPane = exports.Tabs = exports.Popconfirm = exports.Popover = exports.Tooltip = exports.Panel = exports.Collapse = exports.Carousel = exports.Card = exports.Badge = exports.Avatar = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = __webpack_require__(79);

	var _DataDisplay16 = __webpack_require__(98);

	var _DataDisplay17 = _interopRequireDefault(_DataDisplay16);

	var _antd = __webpack_require__(4);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据展示 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/************* Avatar 头像 ************************************************************************** */

	var Avatar = exports.Avatar = function (_DataDisplay) {
	    _inherits(Avatar, _DataDisplay);

	    function Avatar(props) {
	        _classCallCheck(this, Avatar);

	        var _this = _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Avatar, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Avatar, this.__props);
	        }
	    }]);

	    return Avatar;
	}(_DataDisplay17.default);

	/************* Badge 徽标数 ************************************************************************** */

	var Badge = exports.Badge = function (_DataDisplay2) {
	    _inherits(Badge, _DataDisplay2);

	    function Badge(props) {
	        _classCallCheck(this, Badge);

	        var _this2 = _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Badge, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Badge, this.__props);
	        }
	    }]);

	    return Badge;
	}(_DataDisplay17.default);

	/************* Card 卡片 ************************************************************************** */

	var Card = exports.Card = function (_DataDisplay3) {
	    _inherits(Card, _DataDisplay3);

	    function Card(props) {
	        _classCallCheck(this, Card);

	        var _this3 = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));

	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Card, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Card, this.__props);
	        }
	    }]);

	    return Card;
	}(_DataDisplay17.default);

	/************* Carousel 轮播 ************************************************************************** */

	var Carousel = exports.Carousel = function (_DataDisplay4) {
	    _inherits(Carousel, _DataDisplay4);

	    function Carousel(props) {
	        _classCallCheck(this, Carousel);

	        var _this4 = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Carousel, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Carousel, this.__props);
	        }
	    }]);

	    return Carousel;
	}(_DataDisplay17.default);

	/************* Collapse 折叠面板 ************************************************************************** */

	var Collapse = exports.Collapse = function (_DataDisplay5) {
	    _inherits(Collapse, _DataDisplay5);

	    function Collapse(props) {
	        _classCallCheck(this, Collapse);

	        // 受控属性
	        // event: onChange / paramsIndex: 0
	        var _this5 = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));

	        _this5.__controlled = {
	            key: 'activeKey'
	        };
	        _this5.__init();
	        return _this5;
	    }

	    _createClass(Collapse, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Collapse, this.__props);
	        }
	    }]);

	    return Collapse;
	}(_DataDisplay17.default);
	// 单个面板


	var Panel = exports.Panel = function (_DataDisplay6) {
	    _inherits(Panel, _DataDisplay6);

	    function Panel(props) {
	        _classCallCheck(this, Panel);

	        var _this6 = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

	        _this6.__init();
	        return _this6;
	    }

	    _createClass(Panel, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Collapse.Panel, this.__props);
	        }
	    }]);

	    return Panel;
	}(_DataDisplay17.default);

	/************* Tooltip 文字提示 ************************************************************************** */
	// 默认提示


	var Tooltip = exports.Tooltip = function (_DataDisplay7) {
	    _inherits(Tooltip, _DataDisplay7);

	    function Tooltip(props) {
	        _classCallCheck(this, Tooltip);

	        var _this7 = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

	        _this7.__init();
	        return _this7;
	    }

	    _createClass(Tooltip, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tooltip, this.__props);
	        }
	    }]);

	    return Tooltip;
	}(_DataDisplay17.default);
	// 气泡卡片 - tooltip 的升级


	var Popover = exports.Popover = function (_DataDisplay8) {
	    _inherits(Popover, _DataDisplay8);

	    function Popover(props) {
	        _classCallCheck(this, Popover);

	        var _this8 = _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(this, props));

	        _this8.__init();
	        return _this8;
	    }

	    _createClass(Popover, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Popover, _extends({}, this.__props, { content: this.__props.body }));
	        }
	    }]);

	    return Popover;
	}(_DataDisplay17.default);
	// 气泡确认框


	var Popconfirm = exports.Popconfirm = function (_DataDisplay9) {
	    _inherits(Popconfirm, _DataDisplay9);

	    function Popconfirm(props) {
	        _classCallCheck(this, Popconfirm);

	        var _this9 = _possibleConstructorReturn(this, (Popconfirm.__proto__ || Object.getPrototypeOf(Popconfirm)).call(this, props));

	        _this9.__init();
	        return _this9;
	    }

	    _createClass(Popconfirm, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Popconfirm, this.__props);
	        }
	    }]);

	    return Popconfirm;
	}(_DataDisplay17.default);

	/************* Tabs 标签页 ************************************************************************** */

	var Tabs = exports.Tabs = function (_DataDisplay10) {
	    _inherits(Tabs, _DataDisplay10);

	    function Tabs(props) {
	        _classCallCheck(this, Tabs);

	        // 受控属性
	        // event: onChange / paramsIndex: 0
	        var _this10 = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));

	        _this10.__controlled = {
	            key: 'activeKey'
	        };
	        _this10.__init();
	        return _this10;
	    }

	    _createClass(Tabs, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tabs, this.__props);
	        }
	    }]);

	    return Tabs;
	}(_DataDisplay17.default);
	// tab的每一项


	var TabPane = exports.TabPane = function (_DataDisplay11) {
	    _inherits(TabPane, _DataDisplay11);

	    function TabPane(props) {
	        _classCallCheck(this, TabPane);

	        var _this11 = _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).call(this, props));

	        _this11.__init();
	        return _this11;
	    }

	    _createClass(TabPane, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tabs.TabPane, this.__props);
	        }
	    }]);

	    return TabPane;
	}(_DataDisplay17.default);

	/************* Tag 标签 ************************************************************************** */

	var Tag = exports.Tag = function (_DataDisplay12) {
	    _inherits(Tag, _DataDisplay12);

	    function Tag(props) {
	        _classCallCheck(this, Tag);

	        var _this12 = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));

	        _this12.__init();
	        return _this12;
	    }

	    _createClass(Tag, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tag, this.__props);
	        }
	    }]);

	    return Tag;
	}(_DataDisplay17.default);

	var CheckableTag = exports.CheckableTag = function (_DataDisplay13) {
	    _inherits(CheckableTag, _DataDisplay13);

	    function CheckableTag(props) {
	        _classCallCheck(this, CheckableTag);

	        var _this13 = _possibleConstructorReturn(this, (CheckableTag.__proto__ || Object.getPrototypeOf(CheckableTag)).call(this, props));

	        _this13.__init();
	        return _this13;
	    }

	    _createClass(CheckableTag, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tag.CheckableTag, this.__props);
	        }
	    }]);

	    return CheckableTag;
	}(_DataDisplay17.default);

	/************* Timeline 时间轴 ************************************************************************** */

	var Timeline = exports.Timeline = function (_DataDisplay14) {
	    _inherits(Timeline, _DataDisplay14);

	    function Timeline(props) {
	        _classCallCheck(this, Timeline);

	        var _this14 = _possibleConstructorReturn(this, (Timeline.__proto__ || Object.getPrototypeOf(Timeline)).call(this, props));

	        _this14.__init();
	        return _this14;
	    }

	    _createClass(Timeline, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Timeline, this.__props);
	        }
	    }]);

	    return Timeline;
	}(_DataDisplay17.default);

	var TimelineItem = exports.TimelineItem = function (_DataDisplay15) {
	    _inherits(TimelineItem, _DataDisplay15);

	    function TimelineItem(props) {
	        _classCallCheck(this, TimelineItem);

	        var _this15 = _possibleConstructorReturn(this, (TimelineItem.__proto__ || Object.getPrototypeOf(TimelineItem)).call(this, props));

	        _this15.__init();
	        return _this15;
	    }

	    _createClass(TimelineItem, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Timeline.Item, this.__props);
	        }
	    }]);

	    return TimelineItem;
	}(_DataDisplay17.default);

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(91);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据展示 组件抽象类，如：Card、Tooltip 等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:33
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:27:40
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var DataDisplay = function (_Antd) {
	  _inherits(DataDisplay, _Antd);

	  function DataDisplay() {
	    _classCallCheck(this, DataDisplay);

	    return _possibleConstructorReturn(this, (DataDisplay.__proto__ || Object.getPrototypeOf(DataDisplay)).apply(this, arguments));
	  }

	  return DataDisplay;
	}(_Antd3.default);

	exports.default = DataDisplay;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Content = exports.Sider = exports.Footer = exports.Header = exports.Layout = exports.Col = exports.Row = exports.Icon = exports.Backtop = exports.ButtonGroup = exports.Button = exports.AnchorLink = exports.Anchor = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = __webpack_require__(79);

	var _Genaral14 = __webpack_require__(100);

	var _Genaral15 = _interopRequireDefault(_Genaral14);

	var _antd = __webpack_require__(4);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Genaral 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/************* Anchor 锚点 ************************************************************************** */

	var Anchor = exports.Anchor = function (_Genaral) {
	    _inherits(Anchor, _Genaral);

	    function Anchor(props) {
	        _classCallCheck(this, Anchor);

	        var _this = _possibleConstructorReturn(this, (Anchor.__proto__ || Object.getPrototypeOf(Anchor)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Anchor, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Anchor, this.__props);
	        }
	    }]);

	    return Anchor;
	}(_Genaral15.default);

	var AnchorLink = exports.AnchorLink = function (_Genaral2) {
	    _inherits(AnchorLink, _Genaral2);

	    function AnchorLink(props) {
	        _classCallCheck(this, AnchorLink);

	        var _this2 = _possibleConstructorReturn(this, (AnchorLink.__proto__ || Object.getPrototypeOf(AnchorLink)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(AnchorLink, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Anchor.Link, this.__props);
	        }
	    }]);

	    return AnchorLink;
	}(_Genaral15.default);

	/************* Button 按钮 ************************************************************************** */

	var Button = exports.Button = function (_Genaral3) {
	    _inherits(Button, _Genaral3);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this3 = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this3._filter.push('link');
	        _this3._injectEvent.push('onClick');
	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Button, [{
	        key: '_onClick',
	        value: function _onClick() {
	            // 如果配置了link属性，则按钮点击后会跳转到link指定的页面
	            if (this.__filtered.link) {
	                _utils.Utils.goto(this.__filtered.link);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Button, this.__props);
	        }
	    }]);

	    return Button;
	}(_Genaral15.default);
	// 按钮组


	var ButtonGroup = exports.ButtonGroup = function (_Genaral4) {
	    _inherits(ButtonGroup, _Genaral4);

	    function ButtonGroup(props) {
	        _classCallCheck(this, ButtonGroup);

	        var _this4 = _possibleConstructorReturn(this, (ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(ButtonGroup, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Button.Group, this.__props);
	        }
	    }]);

	    return ButtonGroup;
	}(_Genaral15.default);

	/************* Backtop 返回顶部 ************************************************************************** */

	var Backtop = exports.Backtop = function (_Genaral5) {
	    _inherits(Backtop, _Genaral5);

	    function Backtop(props) {
	        _classCallCheck(this, Backtop);

	        var _this5 = _possibleConstructorReturn(this, (Backtop.__proto__ || Object.getPrototypeOf(Backtop)).call(this, props));

	        _this5.__init();
	        return _this5;
	    }

	    _createClass(Backtop, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.BackTop, this.__props);
	        }
	    }]);

	    return Backtop;
	}(_Genaral15.default);

	/************* Icon 图标 ************************************************************************** */

	var Icon = exports.Icon = function (_Genaral6) {
	    _inherits(Icon, _Genaral6);

	    function Icon(props) {
	        _classCallCheck(this, Icon);

	        var _this6 = _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).call(this, props));

	        _this6.__init();
	        return _this6;
	    }

	    _createClass(Icon, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Icon, this.__props);
	        }
	    }]);

	    return Icon;
	}(_Genaral15.default);

	/************* Grid 栅格 ************************************************************************** */
	// Row


	var Row = exports.Row = function (_Genaral7) {
	    _inherits(Row, _Genaral7);

	    function Row(props) {
	        _classCallCheck(this, Row);

	        var _this7 = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, props));

	        _this7.__init();
	        return _this7;
	    }

	    _createClass(Row, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Row, this.__props);
	        }
	    }]);

	    return Row;
	}(_Genaral15.default);
	// Col


	var Col = exports.Col = function (_Genaral8) {
	    _inherits(Col, _Genaral8);

	    function Col(props) {
	        _classCallCheck(this, Col);

	        var _this8 = _possibleConstructorReturn(this, (Col.__proto__ || Object.getPrototypeOf(Col)).call(this, props));

	        _this8.__init();
	        return _this8;
	    }

	    _createClass(Col, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Col, this.__props);
	        }
	    }]);

	    return Col;
	}(_Genaral15.default);

	/************* Layout 布局 ************************************************************************** */

	// Layout 组件


	var Layout = exports.Layout = function (_Genaral9) {
	    _inherits(Layout, _Genaral9);

	    function Layout(props) {
	        _classCallCheck(this, Layout);

	        var _this9 = _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));

	        _this9.__init();
	        return _this9;
	    }

	    _createClass(Layout, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout, this.__props);
	        }
	    }]);

	    return Layout;
	}(_Genaral15.default);

	// Layout 组件


	var Header = exports.Header = function (_Genaral10) {
	    _inherits(Header, _Genaral10);

	    function Header(props) {
	        _classCallCheck(this, Header);

	        var _this10 = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));

	        _this10.__init();
	        return _this10;
	    }

	    _createClass(Header, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Header, this.__props);
	        }
	    }]);

	    return Header;
	}(_Genaral15.default);

	// Layout 组件


	var Footer = exports.Footer = function (_Genaral11) {
	    _inherits(Footer, _Genaral11);

	    function Footer(props) {
	        _classCallCheck(this, Footer);

	        var _this11 = _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).call(this, props));

	        _this11.__init();
	        return _this11;
	    }

	    _createClass(Footer, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Footer, this.__props);
	        }
	    }]);

	    return Footer;
	}(_Genaral15.default);

	// Layout 组件


	var Sider = exports.Sider = function (_Genaral12) {
	    _inherits(Sider, _Genaral12);

	    function Sider(props) {
	        _classCallCheck(this, Sider);

	        var _this12 = _possibleConstructorReturn(this, (Sider.__proto__ || Object.getPrototypeOf(Sider)).call(this, props));

	        _this12.__init();
	        return _this12;
	    }

	    _createClass(Sider, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Sider, this.__props);
	        }
	    }]);

	    return Sider;
	}(_Genaral15.default);

	// Layout 组件


	var Content = exports.Content = function (_Genaral13) {
	    _inherits(Content, _Genaral13);

	    function Content(props) {
	        _classCallCheck(this, Content);

	        var _this13 = _possibleConstructorReturn(this, (Content.__proto__ || Object.getPrototypeOf(Content)).call(this, props));

	        _this13.__init();
	        return _this13;
	    }

	    _createClass(Content, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Content, this.__props);
	        }
	    }]);

	    return Content;
	}(_Genaral15.default);

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(91);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 通用的组件 抽象类，如：Button、Icon 等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:24
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:35
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Genaral = function (_Antd) {
	  _inherits(Genaral, _Antd);

	  function Genaral() {
	    _classCallCheck(this, Genaral);

	    return _possibleConstructorReturn(this, (Genaral.__proto__ || Object.getPrototypeOf(Genaral)).apply(this, arguments));
	  }

	  return Genaral;
	}(_Antd3.default);

	exports.default = Genaral;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Step = exports.Steps = exports.Pagination = exports.Menu = exports.DropdownButton = exports.Dropdown = exports.Breadcrumb = exports.Affix = undefined;

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(3);

	var _utils = __webpack_require__(79);

	var _Navigation9 = __webpack_require__(102);

	var _Navigation10 = _interopRequireDefault(_Navigation9);

	var _antd = __webpack_require__(4);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导航 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-26 01:18:00
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:31:44
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/************ Affix 图钉 *************************************************************************** */

	var Affix = exports.Affix = function (_Navigation) {
	    _inherits(Affix, _Navigation);

	    function Affix(props) {
	        _classCallCheck(this, Affix);

	        var _this = _possibleConstructorReturn(this, (Affix.__proto__ || Object.getPrototypeOf(Affix)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Affix, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Affix, this.__props);
	        }
	    }]);

	    return Affix;
	}(_Navigation10.default);

	/************ Breadcrumb 面包屑 *************************************************************************** */

	var Breadcrumb = exports.Breadcrumb = function (_Navigation2) {
	    _inherits(Breadcrumb, _Navigation2);

	    function Breadcrumb(props) {
	        _classCallCheck(this, Breadcrumb);

	        var _this2 = _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Breadcrumb, [{
	        key: '__init',
	        value: function __init() {
	            var _get2,
	                _this3 = this;

	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            (_get2 = _get(Breadcrumb.prototype.__proto__ || Object.getPrototypeOf(Breadcrumb.prototype), '__init', this)).call.apply(_get2, [this].concat(params));
	            // itemRender 用户返回的是一个配置，这里根据配置生成组件
	            if (this.__props.itemRender) {
	                // this._inject(this.__props, 'itemRender')
	                var origin = this.__props.itemRender;
	                this.__props.itemRender = function () {
	                    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                        params[_key2] = arguments[_key2];
	                    }

	                    var result = origin.call.apply(origin, [_this3].concat(params));
	                    return _this3.__analysis(result);
	                };
	            } else {
	                // 如果用户没有配置 itemRender，则使用默认的 itemRender
	                // 增加了 breadcrumbIcon 属性解析
	                this.__props.itemRender = function (route, params, routes, paths) {
	                    var last = routes.indexOf(route) === routes.length - 1;
	                    var icon = route.breadcrumbIcon ? _react2.default.createElement(Antd.Icon, { type: route.breadcrumbIcon }) : null;
	                    var item = !!icon ? [icon, _react2.default.createElement(
	                        'span',
	                        null,
	                        route.breadcrumbName
	                    )] : route.breadcrumbName;
	                    return last ? item : _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: paths.join('/'), className: 'ant-breadcrumb-link' },
	                        item
	                    );
	                };
	            }
	        }
	        // 每次render都需要重新获取routes

	    }, {
	        key: 'beforeRender',
	        value: function beforeRender() {
	            // 如果用户配置了items，则按照用户配置的items列表类展示面包屑
	            if (!this.__props.items) {
	                var routes = this._root.props.routes;
	                // 过滤掉无效的面包屑（既没有name，又没有icon）
	                var newRoutes = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = routes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        if (v.breadcrumbName || v.breadcrumbIcon) {
	                            newRoutes.push(v);
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                this.__props.routes = newRoutes;
	                this.__props.params = this._root.props.params;
	            } else {
	                this.__props.routes = this.__props.items;
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            this.beforeRender();
	            return _react2.default.createElement(Antd.Breadcrumb, this.__props);
	        }
	    }]);

	    return Breadcrumb;
	}(_Navigation10.default);

	/************ Dropdown 下拉菜单 *************************************************************************** */

	var Dropdown = exports.Dropdown = function (_Navigation3) {
	    _inherits(Dropdown, _Navigation3);

	    function Dropdown(props) {
	        _classCallCheck(this, Dropdown);

	        var _this4 = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Dropdown, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Dropdown, this.__props);
	        }
	    }]);

	    return Dropdown;
	}(_Navigation10.default);

	var DropdownButton = exports.DropdownButton = function (_Navigation4) {
	    _inherits(DropdownButton, _Navigation4);

	    function DropdownButton(props) {
	        _classCallCheck(this, DropdownButton);

	        var _this5 = _possibleConstructorReturn(this, (DropdownButton.__proto__ || Object.getPrototypeOf(DropdownButton)).call(this, props));

	        _this5.__init();
	        return _this5;
	    }

	    _createClass(DropdownButton, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Dropdown.Button, this.__props);
	        }
	    }]);

	    return DropdownButton;
	}(_Navigation10.default);

	/************ Menu 导航菜单 *************************************************************************** */

	var Menu = exports.Menu = function (_Navigation5) {
	    _inherits(Menu, _Navigation5);

	    function Menu(props) {
	        _classCallCheck(this, Menu);

	        var _this6 = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

	        _this6.__controlled = {
	            key: 'selectedKeys',
	            event: 'onSelect',
	            defaultVal: []
	        };
	        // 收集全部可用的key值
	        _this6.allKeys = {};
	        _this6.__init();
	        return _this6;
	    }
	    // 继承父组件的函数，并在__props上设置history属性
	    // 此函数会在初始化以及componentWillReceiveProps时调用


	    _createClass(Menu, [{
	        key: '_initProps',
	        value: function _initProps() {
	            var _get3;

	            for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                params[_key3] = arguments[_key3];
	            }

	            (_get3 = _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), '_initProps', this)).call.apply(_get3, [this].concat(params));
	            if (this.__props.items) {
	                this.__props.children = this.handleItems(this.__props.items);
	                delete this.__props.items;
	            }
	        }
	        // 见 BaseComponent

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            var _ref = arguments.length <= 0 ? undefined : arguments[0],
	                selectedKeys = _ref.selectedKeys;

	            this.__props['selectedKeys'] = selectedKeys;
	            this.forceUpdate();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps() {
	            this.followRoute();
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.followRoute();
	            this.forceUpdate();
	        }
	        // 解析子组件结构

	    }, {
	        key: 'handleItems',
	        value: function handleItems(items, parentKey) {
	            var arr = items;
	            if (!_utils.Utils.typeof(items, 'array')) {
	                arr = [items];
	            }
	            var children = [];
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var v = _step2.value;

	                    // 判断是否有权限
	                    if (!this.__authority(v)) {
	                        continue;
	                    }
	                    // 首先处理所有类型的菜单项公共属性
	                    if (!v.key && v.link) {
	                        v.key = v.link;
	                    }
	                    if (v.title) {
	                        v.title = _react2.default.createElement(
	                            'span',
	                            null,
	                            this.__analysis(v.title)
	                        );
	                    }
	                    if (v.icon) {
	                        v.title = _react2.default.createElement(
	                            'span',
	                            null,
	                            _react2.default.createElement(Antd.Icon, { type: v.icon }),
	                            v.title
	                        );
	                    }
	                    if (v.link) {
	                        // 如果是http链接，则改用 a 标签
	                        if (v.link.indexOf('http') === 0) {
	                            v.title = _react2.default.createElement(
	                                'a',
	                                { href: v.link, target: v._target },
	                                v.title
	                            );
	                        } else {
	                            v.title = _react2.default.createElement(
	                                _reactRouter.Link,
	                                { to: v.link },
	                                v.title
	                            );
	                        }
	                    }
	                    // 菜单项类型，默认为单个 菜单项组件
	                    var _Antd$Menu = Antd.Menu,
	                        Item = _Antd$Menu.Item,
	                        ItemGroup = _Antd$Menu.ItemGroup,
	                        SubMenu = _Antd$Menu.SubMenu;

	                    var Comp = Item;
	                    // 解析子菜单
	                    if (v.childItems) {
	                        // 如果有子菜单，则默认为 子菜单组件
	                        Comp = SubMenu;
	                        v.children = v.children || [];
	                        if (!_utils.Utils.typeof(v.children, 'array')) {
	                            v.children = [v.children];
	                        }
	                        v.children.push(this.handleItems(v.childItems, parentKey || v.key));
	                        delete v.childItems;
	                    }
	                    // 指定为group类型，则使用 菜单分组组件
	                    if (v.mode === 'group') {
	                        Comp = ItemGroup;
	                    }
	                    // 普通菜单项组件没有title属性，取而代之的是children
	                    if (Comp === Item) {
	                        v.children = v.title;
	                        delete v.title;
	                    }

	                    children.push(_react2.default.createElement(Comp, v));

	                    // 保存key值
	                    if (v.key && !v.disabled) {
	                        // 存储的是顶层导航的 key
	                        this.allKeys[v.key] = parentKey || v.key;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return children;
	        }
	        // 高亮的菜单项跟随路由一起变换

	    }, {
	        key: 'followRoute',
	        value: function followRoute() {
	            if (!this.__props.followRoute) {
	                return;
	            }
	            var routes = this._root.props.routes;
	            var location = this._root.props.location;
	            if (routes && location) {
	                var key = routes[routes.length - 1].path;
	                var path = location.pathname.slice(1);
	                // 分两种情况：
	                //   1、每个菜单项都有key，且key为最简单（仅含当前层级的路由信息）的情况。如果路由的最后一项和菜单项相匹配，则高亮菜单项
	                //   2、具有path的菜单项没有设置key，则默认使用path值。path值为路由全路径，所有需要再用path和allKeys进行一次比对
	                if (this.allKeys[key]) {
	                    this.__props.selectedKeys = [key];
	                    this.changeDefaultOpenKeys(this.allKeys[key]);
	                } else if (this.allKeys[path]) {
	                    this.__props.selectedKeys = [path];
	                    this.changeDefaultOpenKeys(this.allKeys[path]);
	                }
	            }
	        }
	    }, {
	        key: 'changeDefaultOpenKeys',
	        value: function changeDefaultOpenKeys(key) {
	            var defaultKeys = this.__props.defaultOpenKeys;
	            if (defaultKeys && defaultKeys.indexOf(key) === -1) {
	                this.__props.defaultOpenKeys.push(key);
	            } else {
	                this.__props.defaultOpenKeys = [key];
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Menu, this.__props);
	        }
	    }]);

	    return Menu;
	}(_Navigation10.default);

	/************ Pagination 分页 *************************************************************************** */

	var Pagination = exports.Pagination = function (_Navigation6) {
	    _inherits(Pagination, _Navigation6);

	    function Pagination(props) {
	        _classCallCheck(this, Pagination);

	        // current为受控属性，父类中统一实现属性的绑定和变更（BaseComponent）
	        // event: onChange / paramsIndex: 0
	        var _this7 = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

	        _this7.__controlled = {
	            key: 'current'
	        };
	        _this7.__init();
	        return _this7;
	    }
	    // reset() {
	    //     this.__setProps({
	    //         current: 1
	    //     });
	    // }


	    _createClass(Pagination, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Pagination, this.__props);
	        }
	    }]);

	    return Pagination;
	}(_Navigation10.default);

	/************ Steps 步骤条 *************************************************************************** */

	var Steps = exports.Steps = function (_Navigation7) {
	    _inherits(Steps, _Navigation7);

	    function Steps(props) {
	        _classCallCheck(this, Steps);

	        var _this8 = _possibleConstructorReturn(this, (Steps.__proto__ || Object.getPrototypeOf(Steps)).call(this, props));

	        _this8.__init();
	        return _this8;
	    }

	    _createClass(Steps, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Steps, this.__props);
	        }
	    }]);

	    return Steps;
	}(_Navigation10.default);
	// Step 单条步骤


	var Step = exports.Step = function (_Navigation8) {
	    _inherits(Step, _Navigation8);

	    function Step(props) {
	        _classCallCheck(this, Step);

	        var _this9 = _possibleConstructorReturn(this, (Step.__proto__ || Object.getPrototypeOf(Step)).call(this, props));

	        _this9.__init();
	        return _this9;
	    }

	    _createClass(Step, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Steps.Step, this.__props);
	        }
	    }]);

	    return Step;
	}(_Navigation10.default);

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(91);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导航 相关的组件抽象类，如：Menu等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:17
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:48
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Navigation = function (_Antd) {
	  _inherits(Navigation, _Antd);

	  function Navigation() {
	    _classCallCheck(this, Navigation);

	    return _possibleConstructorReturn(this, (Navigation.__proto__ || Object.getPrototypeOf(Navigation)).apply(this, arguments));
	  }

	  return Navigation;
	}(_Antd3.default);

	exports.default = Navigation;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.notification = exports.message = exports.Loading = exports.Progress = exports.Alert = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Feedback4 = __webpack_require__(104);

	var _Feedback5 = _interopRequireDefault(_Feedback4);

	var _utils = __webpack_require__(79);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _antd = __webpack_require__(4);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Layout 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/************* Alert 警告提示 ************************************************************************** */

	var Alert = exports.Alert = function (_Feedback) {
	    _inherits(Alert, _Feedback);

	    function Alert(props) {
	        _classCallCheck(this, Alert);

	        var _this = _possibleConstructorReturn(this, (Alert.__proto__ || Object.getPrototypeOf(Alert)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Alert, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Alert, this.__props);
	        }
	    }]);

	    return Alert;
	}(_Feedback5.default);

	/************* Progress 警告提示 ************************************************************************** */

	var Progress = exports.Progress = function (_Feedback2) {
	    _inherits(Progress, _Feedback2);

	    function Progress(props) {
	        _classCallCheck(this, Progress);

	        var _this2 = _possibleConstructorReturn(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Progress, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Progress, this.__props);
	        }
	    }]);

	    return Progress;
	}(_Feedback5.default);

	/************* Loading 加载中 ************************************************************************** */

	var Loading = exports.Loading = function (_Feedback3) {
	    _inherits(Loading, _Feedback3);

	    function Loading(props) {
	        _classCallCheck(this, Loading);

	        var _this3 = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, props));

	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Loading, [{
	        key: 'loading',
	        value: function loading(status) {
	            this.__setProps({ loading: status });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Spin, _extends({}, _utils.Utils.filter(this.__props, 'loading'), {
	                spinning: !!this.__props.loading }));
	        }
	    }]);

	    return Loading;
	}(_Feedback5.default);

	/************* message 提示 ************************************************************************** */

	// 统一处理config（某些属性需要二次解析）


	function messageHandler(type, config) {
	    var _Antd$message;

	    var list = _tools.WhiteList.get(config, 'message');
	    if (list) {
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;

	                config[v] = _tools2.default.render(config[v]);
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }
	    }

	    for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	        params[_key - 2] = arguments[_key];
	    }

	    return (_Antd$message = Antd.message)[type].apply(_Antd$message, [config].concat(params));
	}

	var message = exports.message = Object.assign({}, Antd.message, {
	    success: messageHandler.bind(null, 'success'),
	    error: messageHandler.bind(null, 'error'),
	    info: messageHandler.bind(null, 'info'),
	    warning: messageHandler.bind(null, 'warning'),
	    warn: messageHandler.bind(null, 'warn'),
	    loading: messageHandler.bind(null, 'loading')
	});

	/************* notification 提示 ************************************************************************** */

	function notificationHandler(type, config) {
	    var list = _tools.WhiteList.get(config, 'notification');
	    if (list) {
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var v = _step2.value;

	                config[v] = _tools2.default.render(config[v]);
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }
	    }
	    return Antd.notification[type](config);
	}

	var notification = exports.notification = Object.assign({}, Antd.notification, {
	    success: notificationHandler.bind(null, 'success'),
	    error: notificationHandler.bind(null, 'error'),
	    info: notificationHandler.bind(null, 'info'),
	    warning: notificationHandler.bind(null, 'warning'),
	    warn: notificationHandler.bind(null, 'warn'),
	    open: notificationHandler.bind(null, 'open')
	});

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(91);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 反馈 类组件抽象类，如：Button、Icon 等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:29
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:24
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Feedback = function (_Antd) {
	  _inherits(Feedback, _Antd);

	  function Feedback() {
	    _classCallCheck(this, Feedback);

	    return _possibleConstructorReturn(this, (Feedback.__proto__ || Object.getPrototypeOf(Feedback)).apply(this, arguments));
	  }

	  return Feedback;
	}(_Antd3.default);

	exports.default = Feedback;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Content = exports.SiderTrigger = exports.Sider = exports.Footer = exports.Header = exports.Layout = undefined;

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Layout = __webpack_require__(106);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _utils = __webpack_require__(79);

	var _cache = __webpack_require__(94);

	var _antd = __webpack_require__(4);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Description
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:26:02
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:26:02
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/************* Layout 布局 ************************************************************************** */

	// Layout 组件
	var Layout = exports.Layout = function (_BaseLayout) {
	    _inherits(Layout, _BaseLayout);

	    function Layout(props) {
	        _classCallCheck(this, Layout);

	        var _this = _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));

	        _this.__init();
	        _this.hasSiderClass = _this._handler();
	        return _this;
	    }
	    // 如果content里面包含有sider，则className中增加 ant-layout-has-sider。ps：没想清antd的官方是怎么做到适配的


	    _createClass(Layout, [{
	        key: '_handler',
	        value: function _handler() {
	            if (this.__props.children) {
	                var children = this.__props.children;
	                if (!_utils.Utils.typeof(children, 'array')) {
	                    children = [children];
	                }
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        // children中为实例化后的组件，type对应组件的构造函数
	                        if (v.type === Sider) {
	                            return ' ant-layout-has-sider';
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            return '';
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout, _extends({}, this.__props, { className: (this.__props.className || '') + this.hasSiderClass }));
	        }
	    }]);

	    return Layout;
	}(_Layout2.default);

	// Layout 组件


	var Header = exports.Header = function (_BaseLayout2) {
	    _inherits(Header, _BaseLayout2);

	    function Header(props) {
	        _classCallCheck(this, Header);

	        var _this2 = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Header, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Header, this.__props);
	        }
	    }]);

	    return Header;
	}(_Layout2.default);

	// Layout 组件


	var Footer = exports.Footer = function (_BaseLayout3) {
	    _inherits(Footer, _BaseLayout3);

	    function Footer(props) {
	        _classCallCheck(this, Footer);

	        var _this3 = _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).call(this, props));

	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Footer, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Footer, this.__props);
	        }
	    }]);

	    return Footer;
	}(_Layout2.default);

	// Layout 组件


	var Sider = exports.Sider = function (_BaseLayout4) {
	    _inherits(Sider, _BaseLayout4);

	    function Sider(props) {
	        _classCallCheck(this, Sider);

	        var _this4 = _possibleConstructorReturn(this, (Sider.__proto__ || Object.getPrototypeOf(Sider)).call(this, props));

	        _this4.__controlled = {
	            key: 'collapsed',
	            event: 'onCollapse',
	            defaultVal: false
	        };
	        // 属性组件本身不支持，需要过滤掉。使用时在 __filtered 上获取
	        _this4._filter.push('triggerPosition');
	        _this4._openApi.push('toggleCollapsed');
	        _this4.__init();
	        _this4.handleCollapsed();
	        return _this4;
	    }

	    _createClass(Sider, [{
	        key: '_initProps',
	        value: function _initProps() {
	            var _get2;

	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            (_get2 = _get(Sider.prototype.__proto__ || Object.getPrototypeOf(Sider.prototype), '_initProps', this)).call.apply(_get2, [this].concat(params));
	            var topClass = ' top-trigger';
	            var className = this.__props.className || '';
	            if (this.__filtered.triggerPosition === 'top' && className.indexOf(topClass) === -1) {
	                this.__props.className = className + topClass;
	            }
	        }
	        // 切换收起/展示状态（暴露给用户使用）

	    }, {
	        key: 'toggleCollapsed',
	        value: function toggleCollapsed() {
	            var collapsed = !this.__props.collapsed;
	            this.__setProps({ collapsed: collapsed });
	            this.__props.onCollapse(collapsed);
	        }
	        // Sider 组件自动和其子组件 Menu 做关联，收起时同时收起 Menu
	        // TODO: 代码耦合严重，需要剥离关联逻辑

	    }, {
	        key: 'handleCollapsed',
	        value: function handleCollapsed() {
	            var _this5 = this;

	            if (this.__props.collapsible) {
	                var children = this.__props.children;
	                if (children) {
	                    if (!_utils.Utils.typeof(children, 'array')) {
	                        children = [children];
	                    }
	                    // 查找 Menu 组件
	                    var _iteratorNormalCompletion2 = true;
	                    var _didIteratorError2 = false;
	                    var _iteratorError2 = undefined;

	                    try {
	                        for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                            var v = _step2.value;

	                            if (v.props.__type === 'menu') {
	                                (function () {
	                                    var key = v.props.__cache || v.props.__key;
	                                    var inject = function inject(collapsed) {
	                                        var menu = _cache.ComponentsCache.get(key);
	                                        if (menu) {
	                                            var defaultOpenKeys = menu.get('_defaultOpenKeys') || menu.get('defaultOpenKeys');
	                                            // 从缓存中获取 Menu 组件，并更改组件状态
	                                            menu.set({
	                                                inlineCollapsed: collapsed,
	                                                // 保存原 defaultOpenKeys 的值
	                                                _defaultOpenKeys: defaultOpenKeys,
	                                                defaultOpenKeys: collapsed ? [] : defaultOpenKeys
	                                            });
	                                        }
	                                    };
	                                    // 注入到 onCollapse 函数中
	                                    _this5._inject(_this5.__props, 'onCollapse', inject);
	                                })();
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError2 = true;
	                        _iteratorError2 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }
	                        } finally {
	                            if (_didIteratorError2) {
	                                throw _iteratorError2;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var trigger = this.__props.trigger;
	            if (trigger === undefined) {
	                trigger = _react2.default.createElement(Antd.Icon, { className: 'trigger', type: this.__props.collapsed ? 'menu-unfold' : 'menu-fold' });
	            }
	            return _react2.default.createElement(Antd.Layout.Sider, _extends({}, this.__props, { trigger: trigger }));
	        }
	    }]);

	    return Sider;
	}(_Layout2.default);

	// Sider 子组件
	// TODO: 关联关系如何增加？


	var SiderTrigger = exports.SiderTrigger = function (_BaseLayout5) {
	    _inherits(SiderTrigger, _BaseLayout5);

	    function SiderTrigger(props) {
	        _classCallCheck(this, SiderTrigger);

	        var _this6 = _possibleConstructorReturn(this, (SiderTrigger.__proto__ || Object.getPrototypeOf(SiderTrigger)).call(this, props));

	        _this6.__init();
	        _this6.target = null;
	        return _this6;
	    }

	    _createClass(SiderTrigger, [{
	        key: '_componentDidMount',
	        value: function _componentDidMount() {
	            _get(SiderTrigger.prototype.__proto__ || Object.getPrototypeOf(SiderTrigger.prototype), '_componentDidMount', this) && _get(SiderTrigger.prototype.__proto__ || Object.getPrototypeOf(SiderTrigger.prototype), '_componentDidMount', this).call(this);
	            this.target = _cache.ComponentsCache.get(this.__props.target);
	            this.forceUpdate();
	        }
	    }, {
	        key: 'onClick',
	        value: function onClick() {
	            this.target.toggleCollapsed();
	            this.forceUpdate();
	            this.__props.onClick && this.__props.onClick();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var style = Object.assign({ cursor: 'pointer' }, this.__props.style);
	            return _react2.default.createElement(Antd.Icon, _extends({}, this.__props, {
	                type: this.target && this.target.get('collapsed') ? 'menu-unfold' : 'menu-fold',
	                onClick: this.target && this.onClick.bind(this) }));
	        }
	    }]);

	    return SiderTrigger;
	}(_Layout2.default);

	// Layout 组件


	var Content = exports.Content = function (_BaseLayout6) {
	    _inherits(Content, _BaseLayout6);

	    function Content(props) {
	        _classCallCheck(this, Content);

	        var _this7 = _possibleConstructorReturn(this, (Content.__proto__ || Object.getPrototypeOf(Content)).call(this, props));

	        _this7.__init();
	        return _this7;
	    }

	    _createClass(Content, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Content, this.__props);
	        }
	    }]);

	    return Content;
	}(_Layout2.default);

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(91);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 布局类组件 抽象类
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:26:34
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:26:34
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Layout = function (_Antd) {
	  _inherits(Layout, _Antd);

	  function Layout() {
	    _classCallCheck(this, Layout);

	    return _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).apply(this, arguments));
	  }

	  return Layout;
	}(_Antd3.default);

	exports.default = Layout;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Router = __webpack_require__(108);

	var Router = _interopRequireWildcard(_Router);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	module.exports = Router;

	// module.exports = require('./Router.js').default;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.IndexLink = exports.Link = exports.Router = exports.BaseRouter = exports.RouteHolder = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(3);

	var OriRouter = _interopRequireWildcard(_reactRouter);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _tools = __webpack_require__(73);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 路由 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// 抽象类 每个配置均使用这个抽象类作为外壳，把组件实例转换为类
	var RouteHolder = exports.RouteHolder = function (_React$Component) {
	    _inherits(RouteHolder, _React$Component);

	    function RouteHolder() {
	        _classCallCheck(this, RouteHolder);

	        return _possibleConstructorReturn(this, (RouteHolder.__proto__ || Object.getPrototypeOf(RouteHolder)).apply(this, arguments));
	    }

	    _createClass(RouteHolder, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            // console.log(nextProps);
	            // if (nextProps, nextProps.location, nextProps.location.action) {
	            //     let lastAction = this.action;
	            //     this.action = nextProps.location.action;
	            //     console.log(this.action === lastAction || nextProps.location.action === "POP");
	            //     return this.action === lastAction || nextProps.location.action === "POP";
	            // }
	            // console.log(this.props.router.location.action);
	            return true;
	            // 待观察效果
	            // 有五种情况 PUSH、PUSH->POP、REPLACE、REPLACE->POP、POP
	            // return ['PUSH', 'REPLACE'].indexOf(this.props.router.location.action) !== -1;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_tools.Factory, _extends({}, this.props, { config: this.props.route.__component }));
	        }
	    }]);

	    return RouteHolder;
	}(_react2.default.Component);

	// 抽象类 用于做组件种类区分


	var BaseRouter = exports.BaseRouter = function (_BaseComponent) {
	    _inherits(BaseRouter, _BaseComponent);

	    function BaseRouter() {
	        _classCallCheck(this, BaseRouter);

	        return _possibleConstructorReturn(this, (BaseRouter.__proto__ || Object.getPrototypeOf(BaseRouter)).apply(this, arguments));
	    }

	    return BaseRouter;
	}(_base.BaseComponent);

	// Router
	var Router = exports.Router = function (_BaseRouter) {
	    _inherits(Router, _BaseRouter);

	    function Router(props) {
	        _classCallCheck(this, Router);

	        var _this3 = _possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).call(this, props));

	        _this3.__init();
	        // 从 OriRouter 上获取真正的 hashHistory（用户设置的是字符串）
	        _this3.__props.history = OriRouter[_this3.__props.history];
	        // 把 routes 的内容转换为真正的路由组件
	        if (_this3.__props.routes) {
	            _this3.__props.children = _this3.handleRoutes(_this3.__props.routes);
	            delete _this3.__props.routes;
	        }
	        return _this3;
	    }
	    // 继承父组件的函数，并在__props上设置history属性
	    // 此函数会在初始化以及componentWillReceiveProps时调用
	    // _initProps(...params) {
	    //     super._initProps.call(this, ...params);
	    // }


	    _createClass(Router, [{
	        key: 'handleRoutes',
	        value: function handleRoutes(routes) {
	            var arr = routes;
	            if (!_utils.Utils.typeof(routes, 'array')) {
	                arr = [routes];
	            }
	            var children = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    v = this.setRoute(v);
	                    v.children = [];
	                    // indexRoute 字段 => IndexRoute
	                    if (v.indexRoute) {
	                        v.children.push(_react2.default.createElement(OriRouter.IndexRoute, this.setRoute(v.indexRoute)));
	                        delete v.indexRoute;
	                    }
	                    //  indexRedirect 字段 => IndexRedirect
	                    if (v.indexRedirect) {
	                        v.children.push(_react2.default.createElement(OriRouter.IndexRedirect, { to: v.indexRedirect, query: v.query }));
	                        delete v.indexRedirect;
	                    }
	                    // childRoutes 字段 => 子路由 (Route、Redirect)
	                    if (v.childRoutes) {
	                        v.children = v.children.concat(this.handleRoutes(v.childRoutes));
	                        delete v.childRoutes;
	                    }
	                    if (v.children.length === 0) {
	                        delete v.children;
	                    }
	                    // if (v.breadcrumbName) {
	                    //     v.breadcrumbName = this.__analysis(v.breadcrumbName);
	                    // }
	                    // 不含 component && 包含 from & to 字段 => Redirect
	                    // 否则为普通的 Route 组件
	                    var Item = void 0;
	                    if (!v.component && v.path && v.to) {
	                        Item = OriRouter.Redirect;
	                    } else {
	                        Item = OriRouter.Route;
	                    }
	                    children.push(_react2.default.createElement(Item, v));
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return children;
	        }
	        // Route/IndexRoute 类型的组件
	        // component 转换为 RouteHolder

	    }, {
	        key: 'setRoute',
	        value: function setRoute(item) {
	            if (item.component) {
	                // 组件实例放在新属性content里
	                item.__component = item.component;
	                // component属性为一个抽象类
	                item.component = RouteHolder;
	            }
	            return item;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(OriRouter.Router, this.__props);
	        }
	    }]);

	    return Router;
	}(BaseRouter);

	// Link


	var Link = exports.Link = function (_BaseRouter2) {
	    _inherits(Link, _BaseRouter2);

	    function Link(props) {
	        _classCallCheck(this, Link);

	        var _this4 = _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Link, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(OriRouter.Link, this.__props);
	        }
	    }]);

	    return Link;
	}(BaseRouter);

	// IndexLink


	var IndexLink = exports.IndexLink = function (_BaseRouter3) {
	    _inherits(IndexLink, _BaseRouter3);

	    function IndexLink(props) {
	        _classCallCheck(this, IndexLink);

	        var _this5 = _possibleConstructorReturn(this, (IndexLink.__proto__ || Object.getPrototypeOf(IndexLink)).call(this, props));

	        _this5.__init();
	        return _this5;
	    }

	    _createClass(IndexLink, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(OriRouter.IndexLink, this.__props);
	        }
	    }]);

	    return IndexLink;
	}(BaseRouter);

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(110).default;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(4);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	__webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file iframe 功能增强
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-12 03:13:45
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-10-12 03:17:08
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Iframe = function (_BaseComponent) {
	    _inherits(Iframe, _BaseComponent);

	    function Iframe(props) {
	        _classCallCheck(this, Iframe);

	        var _this = _possibleConstructorReturn(this, (Iframe.__proto__ || Object.getPrototypeOf(Iframe)).call(this, props));

	        _this.state = {
	            loading: true
	        };
	        _this.__init();
	        return _this;
	    }

	    _createClass(Iframe, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 重新获取页面时重新展示loading
	            if (nextProps.src !== this.__prevProps.src) {
	                this.setState({ loading: true });
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (!this.ifr.height) {
	                // 获取父级容器的高度，使ifame和容器等高
	                this.ifr.height = this.getParentHeight();
	            }
	        }
	    }, {
	        key: 'getParentHeight',
	        value: function getParentHeight() {
	            var parent = this.root.parentElement;
	            return parent.offsetHeight + 'px';
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-iframe', ref: function ref(ele) {
	                        return _this2.root = ele;
	                    },
	                    'data-src': new URL(this.__props.src, window.location.href).href },
	                _react2.default.createElement(
	                    _antd.Spin,
	                    { spinning: this.state.loading && this.__props.showLoading },
	                    _react2.default.createElement('iframe', _extends({}, _utils.Utils.filter(this.__props, ['showLoading', 'delay']), {
	                        ref: function ref(ele) {
	                            return _this2.ifr = ele;
	                        },
	                        onLoad: function onLoad(even) {
	                            try {
	                                _this2.setState({ loading: false });
	                                var ifr = even.target;
	                                var iDoc = ifr.contentWindow.document;
	                                var iWindow = ifr.contentWindow;
	                                // Iframe高度根据内容高度变化的三种模式: auto / max / fixed
	                                var mode = _this2.__props.mode;
	                                if (mode !== 'fixed') {
	                                    var setIfrHeight = function setIfrHeight() {
	                                        var iDocHight = void 0;
	                                        // 这里分别从 documentElement 和 body 上取值，即可达到 max/auto 的效果
	                                        if (mode === 'max') {
	                                            iDocHight = iDoc.documentElement.scrollHeight;
	                                            // mode === 'auto'
	                                        } else {
	                                            // 注意：如果iframe的页面body/html设置了height: 100%，则auto失效，展示效果和max相同
	                                            iDocHight = iDoc.body.scrollHeight;
	                                        }
	                                        ifr.height = iDocHight + 'px';
	                                    };
	                                    setIfrHeight();
	                                    // iframe文档做监听，如果发生变化则重新设置高度
	                                    // 注意观察是否会有性能问题（监听了整个页面的元素和属性变化）
	                                    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
	                                    var timer = void 0;
	                                    var observer = new MutationObserver(function (m) {
	                                        // 延迟重新设定iframe高度，可防止高度闪烁
	                                        timer && clearTimeout(timer);
	                                        timer = setTimeout(function () {
	                                            setIfrHeight();
	                                            timer = null;
	                                        }, _this2.__props.delay);
	                                    });
	                                    observer.observe(iDoc, {
	                                        childList: true,
	                                        attributes: true,
	                                        subtree: true
	                                    });
	                                }
	                                // 监听页面跳转
	                                iWindow.addEventListener('popstate', function (e) {
	                                    _this2.root.setAttribute('data-src', e.currentTarget.location);
	                                });

	                                _this2.__props.onLoad && _this2.__props.onLoad(even);
	                            } catch (e) {
	                                console.warn(e);
	                            }
	                        } }))
	                )
	            );
	        }
	    }]);

	    return Iframe;
	}(_base.BaseComponent);

	exports.default = Iframe;

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 112 */,
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	*   @file Export导出组件的引入文件
	*/
	module.exports = __webpack_require__(114).default;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	var _antd = __webpack_require__(4);

	var _utils = __webpack_require__(79);

	__webpack_require__(115);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导出表格数据组件
	uSisi <susisi@baidu.com>
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date 2017-08-25
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var Export = function (_BaseComponent) {
	    _inherits(Export, _BaseComponent);

	    function Export(props) {
	        _classCallCheck(this, Export);

	        var _this = _possibleConstructorReturn(this, (Export.__proto__ || Object.getPrototypeOf(Export)).call(this, props));

	        _this._filter = _utils.Utils.difference(_this._filter, ['source', 'sourceHandler']);
	        _this.__init();
	        _this.state = {};
	        // 默认配置
	        _this.config = {
	            // 表格头部
	            headers: [],
	            // 用于保存计时器的句柄
	            timer: null,
	            // 数据导出方式 异步/同步[asyn/sync]
	            // 异步 - 通过source获取要导出的数据
	            // 同步 - 实例化组件是直接传入data
	            type: 'asyn',
	            // 记录参数中有没有message传入,如果没有传入,导出完成时进度条不隐藏
	            noMessage: true,
	            // 后端请求数据接口
	            source: '',
	            params: null,
	            // 异步数据导出时的提示信息
	            message: null,
	            total: 0,
	            // 导出文件名称和格式
	            fileName: null,
	            fileFormat: '.xls'
	        };
	        _this.initExport();
	        return _this;
	    }

	    _createClass(Export, [{
	        key: 'initExport',
	        value: function initExport(nextProps) {
	            var objProps = nextProps ? nextProps : this.props;
	            this.config = this.__mergeProps(this.config, this.__filterProps(objProps, 'data'));
	            this.data = [];
	            if (objProps.data === undefined) {
	                this.config.type = 'asyn';
	                this.state = {
	                    visible: false,
	                    pageSize: 200,
	                    exporting: false, // 正在导出或导出完成时的界面为true
	                    fatchedData: 0,
	                    usedTime: 0,
	                    lastTime: 0,
	                    finish: false,
	                    error: false,
	                    errorMsg: '',
	                    total: this.config.total
	                };
	                // 判断参数中有没有message传入
	                var message = this.config.message;
	                if (!!message && !!message['page2']) {
	                    this.config.noMessage = false;
	                }
	            } else {
	                this.config.type = 'sync';
	                // 用于存储导出的数据，为避免合并数据时出错，请求过来的数据没有合并到一个数组
	                // data里面的数据是这样的：[[{...},{...},...],[],[]]
	                this.data = [objProps.data];
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.data) {
	                this.config.type = 'sync';
	                this.data = [nextProps.data];
	            }
	            this.config = this.__mergeProps(this.config, nextProps);
	            // Table后端分页的情况会用到
	            if (this.config.total && this.config.total !== this.state.total) {
	                this.setState({
	                    total: this.config.total
	                });
	            }
	        }
	        // 重置数据

	    }, {
	        key: 'initState',
	        value: function initState() {
	            clearInterval(this.config.timer);
	            this.config.timer = null;
	            delete this.data;
	            this.data = [];
	            this.setState({
	                pageSize: 200,
	                exporting: false,
	                fatchedData: 0,
	                usedTime: 0,
	                lastTime: 0,
	                finish: false,
	                error: false,
	                errorMsg: '',
	                total: this.config.total
	            });
	            // 销毁之前创建的url
	            window.URL.revokeObjectURL(this.url);
	        }
	    }, {
	        key: 'setTimer',
	        value: function setTimer() {
	            var _this2 = this;

	            clearInterval(this.config.timer);
	            this.config.timer = setInterval(function () {
	                _this2.setState({ usedTime: _this2.state.usedTime + 1 });
	                // 如果时间只剩一秒且导出没完成，则停在1s不动
	                if (_this2.state.lastTime > 1) {
	                    _this2.setState({ lastTime: _this2.state.lastTime - 1 });
	                }
	            }, 1000);
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({ visible: true });
	        }
	    }, {
	        key: 'handleCancel',
	        value: function handleCancel() {
	            this.setState({ visible: false });
	            this.initState();
	        }
	    }, {
	        key: 'pageSizeChange',
	        value: function pageSizeChange(value) {
	            this.setState({ pageSize: value });
	        }
	        // 点击开始导出

	    }, {
	        key: 'doExport',
	        value: function doExport() {
	            this.setState({ exporting: true });
	            this.setTimer();
	            this.handleExport(1);
	        }
	        // 导出进程

	    }, {
	        key: 'handleExport',
	        value: function handleExport(page) {
	            var _this3 = this;

	            var config = this.config;
	            var params = config.params ? config.params : {};
	            var request = Object.assign({}, params, {
	                page: page,
	                // pageNum: page,
	                index: page,
	                size: this.state.pageSize,
	                // pageSize: this.state.pageSize,
	                limit: this.state.pageSize,
	                total: this.state.total
	            });
	            this.getData(request, function (res) {
	                if (_this3.state.exporting && !_this3.state.error) {
	                    // 存储数据
	                    _this3.saveData(res);
	                    var size = _this3.state.pageSize;
	                    var total = _this3.state.total;
	                    // 计算剩余时间
	                    var fatchedData = _this3.state.fatchedData;
	                    var usedTime = _this3.state.usedTime;
	                    var lastTime = _this3.state.lastTime;
	                    var newLastTime = 0;
	                    if (usedTime !== 0 && fatchedData !== 0) {
	                        newLastTime = usedTime * (total - fatchedData) / fatchedData;
	                        newLastTime = Math.max(0, Math.ceil(newLastTime));
	                    }
	                    // 防止剩余时间一直波动，如果波动区间在5秒之内就用原来的值
	                    var range = Math.abs(newLastTime - lastTime);
	                    if (range > 5 || newLastTime < 10 && range > 1) {
	                        _this3.setState({ lastTime: newLastTime });
	                    }
	                    // 判断是否已经取得全部数据
	                    if (page * size < total) {
	                        _this3.handleExport(page + 1);
	                    } else {
	                        _this3.finish();
	                    }
	                }
	            });
	        }
	        // 存储数据

	    }, {
	        key: 'saveData',
	        value: function saveData(res) {
	            this.data.push(res.data);
	            this.setState({
	                fatchedData: this.state.fatchedData + res.data.length,
	                total: res.total || res.count || this.state.total
	            });
	            if (this.state.fatchedData > this.state.total) {
	                this.error('服务器返回数据异常，请重新导出或联系管理员');
	            }
	        }
	        // 创建下载链接

	    }, {
	        key: 'createDownload',
	        value: function createDownload() {
	            var data = this.data;
	            var headers = this.config.headers;
	            // 组装数据,打包成文件
	            var link = void 0;
	            if (this.config.fileFormat === '.xls') {
	                link = this.packageDataToXLS(data, headers);
	            } else if (this.config.fileFormat === '.csv') {
	                link = this.packageDataToCSV(data, headers);
	            }
	            var download = this.refs.download;
	            download.href = link;
	            download.download = this.getFileName();
	        }
	        // 导出文件名前缀+文件格式

	    }, {
	        key: 'getFileName',
	        value: function getFileName() {
	            var fileName = this.config.fileName;
	            var fileFormat = this.config.fileFormat;
	            if (fileName) {
	                return fileName + fileFormat;
	            }
	            var date = new Date();
	            var prefix = '';
	            prefix += date.getFullYear();
	            prefix += date.getMonth() + 1;
	            prefix += date.getDate();
	            prefix += date.getHours();
	            prefix += date.getMinutes();
	            return prefix + '导出数据' + fileFormat;
	        }
	        // 从一个对象中获取需要导出的关键字

	    }, {
	        key: 'getKeyDataOfObject',
	        value: function getKeyDataOfObject(obj) {
	            var val = '';
	            // 如果传入的是一个数组，则递归的遍历这个数组，拿出数组中各个对象的关键字
	            if (_utils.Utils.typeof(obj, 'array')) {
	                var tArr = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var t = _step.value;

	                        tArr.push(this.getKeyDataOfObject(t));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                val = tArr.join('\n');
	            } else if (_utils.Utils.typeof(obj, 'object')) {
	                // 如果字段是个对象，则优先获取Title字段，否则将该对象转化为json字符串
	                if (obj.hasOwnProperty('title')) {
	                    val = obj['title'];
	                } else {
	                    val = JSON.stringify(obj);
	                }
	            } else if (obj) {
	                val = obj.toString ? obj.toString() : obj;
	            }
	            return val;
	        }
	        // 把数据打包成xls文件，返回文件链接

	    }, {
	        key: 'packageDataToXLS',
	        value: function packageDataToXLS(data, headers) {
	            var _this4 = this;

	            var thead = '<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>';
	            // headers的格式为[{key: '', title: ''}, ...]
	            for (var i = 0; i < headers.length; i++) {
	                thead += '<th>' + headers[i].title + '</th>';
	            }
	            var tbody = '';
	            data.forEach(function (list) {
	                list.forEach(function (item) {
	                    tbody += '<tr>';
	                    for (var _i = 0; _i < headers.length; _i++) {
	                        var key = headers[_i].key;
	                        var val = item[key];
	                        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
	                            val = _this4.getKeyDataOfObject(val);
	                        }
	                        val = typeof val === 'undefined' ? '' : val;
	                        tbody += '<td>' + val + '</td>';
	                    }
	                    tbody += '</tr>';
	                });
	            });
	            // 如果单元格内容长度大于11，则将number类型的数字强制转换成文本
	            var format = 'style="vnd.ms-excel.numberformat:@"';
	            var table = '<table ' + format + '>' + thead + tbody + '</table>';
	            var htmlParts = [table];
	            var dataBlob = new Blob(htmlParts, { 'type': 'text\/xls' });
	            var link = window.URL.createObjectURL(dataBlob);
	            this.url = link;
	            return link;
	        }
	        // 把数据打包成csv文件，返回文件链接

	    }, {
	        key: 'packageDataToCSV',
	        value: function packageDataToCSV(data, headers) {
	            var _this5 = this;

	            var thead = '';
	            // headers的格式为[{key: '', title: ''}, ...]
	            for (var i = 0; i < headers.length; i++) {
	                thead += i === headers.length - 1 ? headers[i].title : headers[i].title + ',';
	            }
	            thead += '\n';
	            var tbody = '';
	            data.forEach(function (list) {
	                list.forEach(function (item) {
	                    for (var _i2 = 0; _i2 < headers.length; _i2++) {
	                        var key = headers[_i2].key;
	                        var val = item[key];
	                        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
	                            val = _this5.getKeyDataOfObject(val);
	                        }
	                        val = typeof val === 'undefined' ? '' : val;
	                        tbody += _i2 === headers.length - 1 ? val : val + ',';
	                    }
	                    tbody += '\n';
	                });
	            });
	            var table = thead + tbody;
	            var htmlParts = [table];
	            var dataBlob = new Blob(htmlParts, { 'type': 'text/csv,charset=UTF-8' });
	            var link = window.URL.createObjectURL(dataBlob);
	            this.url = link;
	            return link;
	        }
	    }, {
	        key: 'reExport',
	        value: function reExport() {
	            this.initState();
	        }
	    }, {
	        key: 'finish',
	        value: function finish() {
	            clearInterval(this.config.timer);
	            this.setState({ finish: true, lastTime: 0 });
	            this.createDownload();
	            // 判断数据是否丢失
	            var fatchedData = this.state.fatchedData * 1;
	            var total = this.state.total * 1;
	            if (fatchedData !== total) {
	                this.error('服务器返回数据异常，预期获取数据' + total + '条，实际获取到' + fatchedData + '条。');
	            }
	        }
	        // 导出发生错误

	    }, {
	        key: 'error',
	        value: function error(res) {
	            var msg = JSON.stringify(res);
	            clearInterval(this.config.timer);
	            this.setState({
	                error: true,
	                errorMsg: msg,
	                lastTime: 0
	            });
	        }
	        // 覆盖原生获取异步数据的函数

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {}
	        // 向后端请求

	    }, {
	        key: 'getData',
	        value: function getData(params, callback) {
	            var _this6 = this;

	            var url = this.config.source;
	            var method = this.config.method || 'get';
	            var ajax = method === 'post' ? this.__postData : this.__getData;
	            ajax(url, params, function (data, res) {
	                callback(res);
	            }, function (err) {
	                _this6.error(err);
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            if (this.config.type === 'asyn') {
	                return this.asynExportRender();
	            } else {
	                return this.syncExportRender();
	            }
	        }
	        // 同步导出方式页面 - 即实例化组件时直接传入数据

	    }, {
	        key: 'syncExportRender',
	        value: function syncExportRender() {
	            var data = this.data;
	            var headers = this.config.headers;
	            var link = void 0;
	            if (this.config.fileFormat === '.xls') {
	                link = this.packageDataToXLS(data, headers);
	            } else if (this.config.fileFormat === '.csv') {
	                link = this.packageDataToCSV(data, headers);
	            }
	            var name = this.getFileName();
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-export' },
	                _react2.default.createElement(
	                    'a',
	                    { href: link, download: name },
	                    this.props.children
	                )
	            );
	        }
	        // 异步导出方式页面 - 即通过url异步加载数据

	    }, {
	        key: 'asynExportRender',
	        value: function asynExportRender() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-export' },
	                _react2.default.createElement(
	                    'span',
	                    { onClick: this.showModal.bind(this) },
	                    this.props.children
	                ),
	                _react2.default.createElement(
	                    _antd.Modal,
	                    { ref: 'modal', className: 'export_modal',
	                        maskClosable: false,
	                        visible: this.state.visible,
	                        title: '\u5BFC\u51FA\u6570\u636E',
	                        onCancel: this.handleCancel.bind(this),
	                        footer: [_react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary', key: 'btn1',
	                                disabled: this.state.exporting,
	                                onClick: this.doExport.bind(this) },
	                            '\u5F00\u59CB\u5BFC\u51FA'
	                        ), _react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary', key: 'btn2',
	                                onClick: this.reExport.bind(this) },
	                            '\u91CD\u65B0\u5BFC\u51FA'
	                        )] },
	                    _react2.default.createElement(
	                        'section',
	                        { hidden: this.state.exporting },
	                        this.renderSetting()
	                    ),
	                    _react2.default.createElement(
	                        'section',
	                        { hidden: !this.state.exporting },
	                        this.renderExporting()
	                    )
	                )
	            );
	        }
	        // 导出前的设置界面

	    }, {
	        key: 'renderSetting',
	        value: function renderSetting() {
	            var pageSize = this.state.pageSize;
	            var total = this.state.total;
	            var requestNum = Math.ceil(total / pageSize);
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'export_info' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        '\u60A8\u5373\u5C06\u5BFC\u51FA\u73B0\u6709\u7684',
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'fw700' },
	                            '\u5168\u90E8\u6570\u636E'
	                        ),
	                        '\uFF0C',
	                        total === 0 ? '数据总数未知。' : _react2.default.createElement(
	                            'span',
	                            null,
	                            '\u5171\u8BA1 ',
	                            _react2.default.createElement(
	                                'span',
	                                { className: 'fw700' },
	                                ' ',
	                                total,
	                                ' '
	                            ),
	                            ' \u6761'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        '\u6BCF\u6B21\u670D\u52A1\u5668\u8BF7\u6C42\u7684\u5927\u5C0F\u4E3A ',
	                        _react2.default.createElement(_antd.InputNumber, {
	                            size: 'small', min: 15, max: 1000, step: 100,
	                            defaultValue: pageSize, onChange: this.pageSizeChange.bind(this) }),
	                        ' \u6761',
	                        total === 0 ? '' : _react2.default.createElement(
	                            'span',
	                            null,
	                            '\uFF0C\u672C\u6B21\u5BFC\u51FA\u5171\u9700 ',
	                            _react2.default.createElement(
	                                'span',
	                                { className: 'fw700' },
	                                requestNum
	                            ),
	                            ' \u6B21\u670D\u52A1\u5668\u8BF7\u6C42'
	                        )
	                    )
	                ),
	                this.renderMessage(1)
	            );
	        }
	        // 正在导出的界面

	    }, {
	        key: 'renderExporting',
	        value: function renderExporting() {
	            var total = this.state.total;
	            var usedTime = this.state.usedTime;
	            var fatchedData = this.state.fatchedData;
	            var progress = total === 0 ? 0 : (fatchedData / total * 100).toFixed(2);
	            progress = progress > 100 ? 100 : progress;
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'export_progress', hidden: !this.config.noMessage && this.state.finish },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'ex_percent' },
	                        _react2.default.createElement(
	                            'span',
	                            { hidden: this.state.finish || this.state.error },
	                            _react2.default.createElement(_antd.Icon, { type: 'loading' }),
	                            '\u6B63\u5728\u5BFC\u51FA\uFF0C'
	                        ),
	                        '\u5DF2\u5B8C\u6210 ',
	                        progress,
	                        '%...'
	                    ),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'ex_time' },
	                        '\u5DF2\u7528\u65F6 ',
	                        usedTime,
	                        ' \u79D2\uFF0C\u9884\u8BA1\u5269\u4F59 ',
	                        this.state.lastTime,
	                        ' \u79D2'
	                    ),
	                    _react2.default.createElement(_antd.Progress, { percent: Math.floor(progress),
	                        status: this.state.finish ? 'success' : this.state.error ? 'exception' : 'active',
	                        showInfo: false }),
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        '\u6BCF\u6B21\u670D\u52A1\u5668\u8BF7\u6C42\u6570\u636E ',
	                        this.state.pageSize,
	                        ' \u6761\uFF0C\u5DF2\u5BFC\u51FA\u6570\u636E ',
	                        fatchedData,
	                        ' of ',
	                        total
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { hidden: this.state.error },
	                    this.renderMessage(2)
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { hidden: !this.state.error },
	                    _react2.default.createElement(_antd.Alert, { description: '出错了：' + this.state.errorMsg,
	                        type: 'error',
	                        showIcon: true })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { hidden: !this.state.finish, style: { marginTop: '10px' } },
	                    _react2.default.createElement(
	                        'a',
	                        { ref: 'download', style: { color: '#fff' } },
	                        _react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary' },
	                            '\u4E0B\u8F7D\u6587\u4EF6'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'p',
	                        { className: 'mt8' },
	                        _react2.default.createElement(_antd.Icon, { type: 'check-circle', style: { color: '#90ed7d' } }),
	                        ' \u6570\u636E\u5BFC\u51FA\u5B8C\u6BD5\uFF0C\u5408\u8BA1',
	                        fatchedData,
	                        '\u6761\u6570\u636E\uFF0C\u7528\u65F6',
	                        usedTime,
	                        '\u79D2'
	                    )
	                )
	            );
	        }
	        // 渲染提示信息模块

	    }, {
	        key: 'renderMessage',
	        value: function renderMessage(pageNum) {
	            var message = this.config.message;
	            if (!message) {
	                return '';
	            } else if (!message['page' + pageNum]) {
	                return '';
	            } else {
	                var msg = message['page' + pageNum];
	                return _react2.default.createElement(
	                    'div',
	                    null,
	                    msg.map(function (item) {
	                        return _react2.default.createElement(_antd.Alert, { description: item, key: item,
	                            type: 'warning',
	                            showIcon: true });
	                    })
	                );
	            }
	        }
	    }]);

	    return Export;
	}(_base.BaseComponent);

	exports.default = Export;

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 116 */,
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	*   @file Tree组件的引入文件
	*/
	module.exports = __webpack_require__(118).default;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _antd = __webpack_require__(4);

	__webpack_require__(119);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 树形控件源码
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author SuSisi
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var TreeNode = _antd.Tree.TreeNode;
	var Search = _antd.Input.Search;

	var expandedKeys = [];
	var getParentNode = function getParentNode(value, tree) {
	    var node = [];
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = tree[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var v = _step.value;

	            var children = void 0;
	            if (v.children) {
	                children = getParentNode(value, v.children);
	            }
	            if (children && children.length > 0 || v.name.indexOf(value) !== -1) {
	                // 根节点或者子节点包含搜索内容或者本节点包含搜索内容
	                node.push(Object.assign({}, v, { children: children }));
	            }
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    return node;
	};
	var getParentsKeys = function getParentsKeys(nodes, keyArray) {
	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	        for (var _iterator2 = nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var v = _step2.value;

	            if (v.children && v.children.length > 0) {
	                keyArray.push(v.key);
	                getParentsKeys(v.children, keyArray);
	            }
	        }
	    } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	            }
	        } finally {
	            if (_didIteratorError2) {
	                throw _iteratorError2;
	            }
	        }
	    }
	};

	var OriginTree = function (_BaseComponent) {
	    _inherits(OriginTree, _BaseComponent);

	    function OriginTree(props) {
	        _classCallCheck(this, OriginTree);

	        var _this = _possibleConstructorReturn(this, (OriginTree.__proto__ || Object.getPrototypeOf(OriginTree)).call(this, props));

	        _this.__init();
	        _this.config = {
	            style: {},
	            expand: {
	                defaultExpandAll: false,
	                defaultExpandedKeys: [],
	                expandLeavals: null,
	                expandedKeys: null,
	                autoExpandParent: true,
	                onExpand: function onExpand() {}
	            },
	            checkbox: {
	                checkable: false,
	                checkedKeys: null,
	                checkStrictly: false,
	                defaultCheckedKeys: [],
	                onCheck: function onCheck() {}
	            },
	            search: {
	                enable: false,
	                onlyShowSearchResult: true
	            },
	            select: {
	                defaultSelectedKeys: [],
	                selectedKeys: null,
	                multiple: false,
	                onSelect: function onSelect() {}
	            },
	            loadData: {
	                enable: false,
	                source: '',
	                params: []
	            },
	            widthResize: {
	                resizeAble: false,
	                minWidth: '',
	                maxWidth: ''
	            },
	            showLine: false,
	            showIcon: false
	        };
	        _this.initTree();
	        _this.timer = 0;
	        return _this;
	    }
	    // 树形控件初始化配置及数据


	    _createClass(OriginTree, [{
	        key: 'initTree',
	        value: function initTree(nextProps) {
	            var objProps = nextProps ? nextProps : this.props;
	            var propsData = _utils.Utils.clone(objProps.data);
	            // 针对数据进行处理
	            // 生成指针树，便于快速定位树节点
	            this.completePointerTree = {};
	            this.createPointerTree(propsData, this.completePointerTree);
	            // 生成层级树，包含每层可展开的父节点的key
	            this.levalPointerTree = {};
	            this.createLevalTree(propsData, this.levalPointerTree);

	            // 针对配置进行处理
	            // 对用户未配置的项使用默认配置
	            // this.config = this.__mergeProps(this.config, objProps.config);
	            this.config = this.__mergeProps(this.config, this.__filterProps(objProps, 'data'));
	            this.style = this.config.style;
	            this.expand = this.config.expand;
	            this.checkbox = this.config.checkbox;
	            this.search = this.config.search;
	            this.select = this.config.select;
	            this.loadData = this.config.loadData;
	            this.widthResize = this.config.widthResize;
	            this.showLine = this.config.showLine;
	            this.showIcon = this.config.showIcon;
	            this.antdConfig = {
	                defaultExpandAll: this.expand['expandLeavals'] ? false : this.expand['defaultExpandAll'],
	                defaultExpandedKeys: this.expand['expandLeavals'] ? [] : this.expand['defaultExpandedKeys'],
	                checkable: this.checkbox['checkable'],
	                defaultCheckedKeys: this.checkbox['defaultCheckedKeys'],
	                checkStrictly: this.checkbox['checkStrictly'],
	                defaultSelectedKeys: this.select['defaultSelectedKeys'],
	                multiple: this.select['multiple'],
	                showLine: this.showLine
	                // showIcon: this.showIcon
	            };
	            var state = {
	                treeData: propsData,
	                completeTree: propsData,
	                expandedKeys: this.expand.expandedKeys,
	                autoExpandParent: this.expand.autoExpandParent,
	                checkedKeys: this.checkbox.checkedKeys, // 受控选择复选框
	                selectedKeys: this.select.selectedKeys, // 受控选择
	                searchValue: '' // 搜索框中输入内容
	            };
	            if (!!nextProps) {
	                this.setState(state);
	                this.componentDidMount();
	            } else {
	                this.state = state;
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 具有expand，及expandLeavals配置，且没有配置expandedKeys时才按照用户要求展开到某一层
	            if (this.expand.expandLeavals && !this.expand.expandedKeys) {
	                this.showToLeval(this.expand.expandLeavals);
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 就算props没有改变，当父组件重新渲染时，也会进这里，所以需要在这里判断是否需要重新渲染组件
	            // if (!Utils.equals(this.props.config, nextProps.config)
	            //     || !Utils.equals(this.props.data, nextProps.data)) {
	            //     this.initTree(nextProps);
	            // }
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.initTree(nextProps);
	            }
	        }
	        // 创建指针树，创建之后，pointerTree的每个元素都能指向树的一个节点

	    }, {
	        key: 'createPointerTree',
	        value: function createPointerTree(nodes, pointerTree) {
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var v = _step3.value;

	                    if (!!v.key) {
	                        var key = v.key;
	                        pointerTree[key] = v;
	                        if (v.children && v.children.length > 0) {
	                            this.createPointerTree(v.children, pointerTree);
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }
	        }
	        // 生成一个层级树，记录每层可展开的有子节点的父节点

	    }, {
	        key: 'createLevalTree',
	        value: function createLevalTree(tree, levalPointerTree) {
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = tree[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var v = _step4.value;

	                    var type = v.type;
	                    if (!levalPointerTree[type]) {
	                        levalPointerTree[type] = [];
	                    }
	                    // 对可展开的父节点进行key值存放
	                    if (v.children && v.children.length > 0) {
	                        levalPointerTree[type].push(v.key);
	                        this.createLevalTree(v.children, levalPointerTree);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'onExpand',
	        value: function onExpand(expandedKeys, e) {
	            // if not set autoExpandParent to false, if children expanded, parent can not collapse.
	            // or, you can remove all expanded children keys.
	            this.setState({
	                expandedKeys: expandedKeys,
	                autoExpandParent: false
	            });
	            this.expand.onExpand(expandedKeys, e);
	        }
	    }, {
	        key: 'onCheck',
	        value: function onCheck(checkedKeys, e) {
	            this.setState({
	                checkedKeys: checkedKeys
	            });
	            this.checkbox.onCheck(checkedKeys, e);
	        }
	    }, {
	        key: 'onSelect',
	        value: function onSelect(selectedKeys, e) {
	            this.setState({
	                selectedKeys: selectedKeys
	            });
	            this.select.onSelect(selectedKeys, e);
	        }
	        // 展示树形到哪一层，expandLeavals为数组，表示展示到哪些层

	    }, {
	        key: 'showToLeval',
	        value: function showToLeval(expandLeavals) {
	            var keys = [];
	            if (expandLeavals === null) {
	                // 展示所有节点
	                for (var i in this.levalPointerTree) {
	                    keys = keys.concat(this.levalPointerTree[i]);
	                }
	            } else {
	                for (var e in expandLeavals) {
	                    keys = keys.concat(this.levalPointerTree[expandLeavals[e]]);
	                }
	            }
	            this.setState({
	                expandedKeys: keys
	            });
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var _this2 = this;

	            var value = e.target.value;
	            // 延迟200ms再做处理
	            clearTimeout(this.timer);
	            this.timer = setTimeout(function () {
	                _this2.handleSearch(value);
	                _this2.timer = null;
	            }, 200);
	        }
	        // 通过搜索内容对策略树进行搜索

	    }, {
	        key: 'handleSearch',
	        value: function handleSearch(value) {
	            var newTree = this.state.completeTree;
	            if (value.length < 1) {
	                // 搜索框中无内容，数据展示情况分类讨论
	                if (this.expand['expandedKeys']) {
	                    // 展开用户说明的指定节点
	                    this.setState({
	                        expandedKeys: this.expand['expandedKeys'],
	                        autoExpandParent: this.expand['autoExpandParent']
	                    });
	                } else if (this.expand['expandLeavals']) {
	                    // 根据用户最初定义进行展示
	                    this.showToLeval(this.expand['expandLeavals']);
	                } else if (this.expand['defaultExpandAll']) {
	                    // 全部展开
	                    this.showToLeval(null);
	                }
	            } else {
	                // 有搜索内容时根据搜索结果渲染
	                newTree = getParentNode(value, this.state.completeTree);
	                // 对搜索结果的所有树节点进行展开
	                var newKeys = [];
	                getParentsKeys(newTree, newKeys);
	                // 搜索结果仍然展示整个树，只是对含有搜索内容的节点进行展开
	                if (!this.search.onlyShowSearchResult) {
	                    newTree = this.state.completeTree;
	                }
	                this.setState({
	                    expandedKeys: newKeys
	                });
	            }
	            this.setState({
	                treeData: newTree,
	                searchValue: value
	            });
	        }
	        // 异步对数据进行加载，满足一定要求再加载

	    }, {
	        key: 'onLoadData',
	        value: function onLoadData(treeNode) {
	            var _this3 = this;

	            var key = treeNode.props.data.key;
	            var nodeData = this.completePointerTree[key];
	            return new Promise(function (resolve) {
	                if (!nodeData.children && nodeData.isLeaf === false || nodeData.children.length < 1 && !nodeData.isLeaf) {
	                    // 没有children数据又非叶子节点的时候需要去异步请求
	                    var params = {};
	                    var url = '';
	                    if (_this3.loadData['params'].length > 0 && _this3.loadData['source'].length > 0) {
	                        url = _this3.loadData['source'];
	                        _this3.loadData['params'].map(function (ele) {
	                            if (nodeData[ele]) {
	                                params[ele] = nodeData[ele];
	                            }
	                            return;
	                        });
	                        _this3.__getData(url, params, function (backChildren) {
	                            _this3.insertData(nodeData.key, nodeData.type, backChildren);
	                            resolve();
	                        });
	                    }
	                } else {
	                    resolve();
	                }
	            });
	        }
	        // 向展示树和完整树中插入数据

	    }, {
	        key: 'insertData',
	        value: function insertData(curKey, type, nodeData) {
	            var completeTree = this.state.completeTree;
	            // 通过完整树指针向完整数据中插入一份数据
	            this.completePointerTree[curKey].children = nodeData;
	            // 需要更新指针树的指针情况
	            this.createPointerTree(nodeData, this.completePointerTree);
	            // 需要更新层级树的情况
	            // 当前节点为一个可展开的父节点，故层级树中加入此节点，同时用取回的数据更新层级树
	            if (!this.levalPointerTree[type]) {
	                this.levalPointerTree[type] = [];
	            }
	            this.levalPointerTree[type].push(curKey);
	            this.createLevalTree(nodeData, this.levalPointerTree);
	            this.setState({
	                completeTree: completeTree
	            });
	            // 用户在搜索时对数据进行了加载，且要求只展示与搜索相匹配的结果，则需要重新过滤树
	            // 如果用户要求搜索时仍然展示全量数据，则不需要重新过滤，直接展示用户新加载的节点即可
	            if (this.search.onlyShowSearchResult && this.state.searchValue.length > 0) {
	                this.handleSearch(this.state.searchValue);
	            }
	        }
	        // 树组建右边缘可扩展

	    }, {
	        key: 'resizeWidth',
	        value: function resizeWidth(ev) {
	            var _this4 = this;

	            var iEvent = ev || event;
	            if (iEvent.button === 2) {
	                this.stopResize();
	                return false;
	            }
	            var oBox = _reactDom2.default.findDOMNode(this.refs['tree']);
	            // 当单击的时候，存储x轴的坐标。
	            var dx = iEvent.clientX;
	            // 当单击的时候，储存Y轴的坐标。
	            var dy = iEvent.clientY;
	            // 存储默认的div的宽度。
	            var dw = oBox.offsetWidth;
	            document.onmousemove = function (ev) {
	                var iEvent = ev || event;
	                oBox.style.width = dw + (iEvent.clientX - dx) + 'px';
	                // 此时的iEvent.clientX的为拖动时一直改变的鼠标的X坐标，
	                // 所以，此时的盒子宽度就等于鼠标移动的距离加上原本盒子的宽度
	                if (_this4.widthResize['minWidth']) {
	                    if (oBox.offsetWidth <= parseInt(_this4.widthResize['minWidth'], 10)) {
	                        // 当盒子缩小到一定范围内的时候，让他保持一个固定值，不再继续改变
	                        oBox.style.width = _this4.widthResize['minWidth'];
	                    }
	                }
	                if (_this4.widthResize['maxWidth']) {
	                    if (oBox.offsetWidth >= parseInt(_this4.widthResize['maxWidth'], 10)) {
	                        // 当盒子缩小到一定范围内的时候，让他保持一个固定值，不再继续改变
	                        oBox.style.width = _this4.widthResize['maxWidth'];
	                    }
	                }
	            };
	            document.onmouseup = function () {
	                document.onmouseup = null;
	                document.onmousemove = null;
	            };
	            return false;
	        }
	    }, {
	        key: 'stopResize',
	        value: function stopResize() {
	            document.onmouseup = null;
	            document.onmousemove = null;
	        }
	        // 渲染树

	    }, {
	        key: 'renderTreeNode',
	        value: function renderTreeNode(data) {
	            var _this5 = this;

	            var _state = this.state,
	                expandedKeys = _state.expandedKeys,
	                searchValue = _state.searchValue;

	            return data.map(function (item) {
	                var title = item.name;
	                if (_this5.search && _this5.search.enable) {
	                    // indexOf搜索普通字符串效率最高
	                    var index = item.name.indexOf(searchValue);
	                    var beforeStr = item.name.substr(0, index);
	                    var afterStr = item.name.substr(index + searchValue.length);
	                    title = index > -1 ? _react2.default.createElement(
	                        'span',
	                        null,
	                        beforeStr,
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'ant-tree-searchable-filter', style: { color: 'red' } },
	                            searchValue
	                        ),
	                        afterStr
	                    ) : _react2.default.createElement(
	                        'span',
	                        null,
	                        item.name
	                    );
	                }
	                if (item.isLeaf === false || !!item.children) {
	                    return _react2.default.createElement(
	                        TreeNode,
	                        { key: item.key, title: title, data: item, isLeaf: false,
	                            disableCheckbox: !!item.disableCheckbox, disabled: !!item.disabled },
	                        !!item.children && _this5.renderTreeNode(item.children)
	                    );
	                } else {
	                    return _react2.default.createElement(TreeNode, { key: item.key, title: title, isLeaf: true, data: item,
	                        disableCheckbox: !!item.disableCheckbox, disabled: !!item.disabled });
	                }
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _state2 = this.state,
	                expandedKeys = _state2.expandedKeys,
	                autoExpandParent = _state2.autoExpandParent,
	                checkedKeys = _state2.checkedKeys,
	                selectedKeys = _state2.selectedKeys,
	                searchValue = _state2.searchValue,
	                treeData = _state2.treeData;

	            var searchTip = treeData.length === 0 ? '未找到可以匹配的结果' : '';
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-tree', style: this.style, ref: 'tree' },
	                this.search.enable && _react2.default.createElement(
	                    'div',
	                    { className: 'uf-tree-search' },
	                    _react2.default.createElement(Search, {
	                        style: { width: '90%' },
	                        placeholder: 'Search',
	                        onChange: this.onChange.bind(this)
	                    }),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'uf-tree-treeSearchTip',
	                            style: { display: searchTip.length > 0 ? 'block' : 'none' } },
	                        searchTip
	                    )
	                ),
	                _react2.default.createElement(
	                    _antd.Tree,
	                    _extends({}, this.antdConfig, {
	                        autoExpandParent: autoExpandParent,
	                        onExpand: this.onExpand.bind(this),
	                        onSelect: this.onSelect.bind(this),
	                        onCheck: this.onCheck.bind(this)
	                    }, !!expandedKeys ? { expandedKeys: expandedKeys } : null, !!checkedKeys ? { checkedKeys: checkedKeys } : null, !!selectedKeys ? { selectedKeys: selectedKeys } : null, !!this.loadData['enable'] ? { loadData: this.onLoadData.bind(this) } : null),
	                    this.renderTreeNode(treeData)
	                ),
	                this.widthResize['resizeAble'] && _react2.default.createElement('div', { className: 'uf-tree-ew-resize', onMouseDown: this.resizeWidth.bind(this) })
	            );
	        }
	    }]);

	    return OriginTree;
	}(_base.BaseComponent);

	exports.default = OriginTree;

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 120 */,
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(122);

	module.exports = __webpack_require__(124).default;

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 123 */,
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _antd = __webpack_require__(4);

	var _export = __webpack_require__(113);

	var _export2 = _interopRequireDefault(_export);

	var _Crud = __webpack_require__(125);

	var _Crud2 = _interopRequireDefault(_Crud);

	var _Title = __webpack_require__(126);

	var _Title2 = _interopRequireDefault(_Title);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 表格组件:antd Table的基础上增加了原来uf Table中的一些功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author susisi@baidu.com
	


	// 扩展功能 - 增删改查等


	var CheckboxGroup = _antd.Checkbox.Group;
	// 从obg2中获取obj1所需要的一些属性
	var getNeedObject = function getNeedObject(obj1, obj2) {
	    for (var i in obj1) {
	        if (!!obj2[i]) {
	            obj1[i] = obj2[i];
	        }
	    }
	};

	var NewTable = function (_BaseComponent) {
	    _inherits(NewTable, _BaseComponent);

	    // 以下是函数定义
	    function NewTable(props) {
	        _classCallCheck(this, NewTable);

	        // Table自己实现的source获取数据，不实用BaseComponent中的通用逻辑，也就无需过滤参数
	        var _this = _possibleConstructorReturn(this, (NewTable.__proto__ || Object.getPrototypeOf(NewTable)).call(this, props));

	        _this._filter = _utils.Utils.difference(_this._filter, ['source', 'sourceHandler']);
	        // 暴露给用户使用的函数
	        _this._openApi.push('loadData', 'refresh', 'showCrud', 'getSelected', 'getSelectedKeys', 'selectAll',
	        // 纯粹为了 bind this
	        'toggleFullScreen', 'refreshTable', 'toShowAllTags');
	        _this.__init();
	        _this.state = {
	            antdConfig: null,
	            // 数据默认为空
	            completeData: [],
	            // 单列过滤
	            filterInputValue: '',
	            // 全屏展示与否
	            fullScreen: false,
	            // 是否展示全部字段
	            showAllTags: false,
	            // 存储选择的行信息
	            selectedRowKeys: [],
	            selectedRows: [],
	            // 加载状态
	            loading: false
	        };
	        // 用于存储多列的筛选条件
	        _this.filterConditions = {};
	        // 请求序号，当执行新请求时，之前的未返回数据的请求则废弃，通过index值是否相等判断
	        _this.requerstIndex = 0;
	        _this.initTable();
	        return _this;
	    }

	    _createClass(NewTable, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 即使props没有改变，当父组件重新渲染时，也会进这里，所以需要在这里判断是否需要重新渲染组件
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.initTable(true);
	                // 只有自动获取数据开启时，参数变化才会导致数据刷新；否则需用户手动调用 loadData() 函数拉取数据
	                if (this.__props.autoLoadSource) {
	                    // 置为第一页
	                    this.getData(1);
	                }
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            // 组件删除时，请求返回的数据无效
	            this.requerstIndex = null;
	        }
	    }, {
	        key: 'initTable',
	        value: function initTable(nextProps) {
	            var _this2 = this;

	            var objProps = this.__props;
	            var state = {};
	            this.rowKey = objProps.rowKey || 'id';
	            // 注意：引用类型，this.pagination 和 this.__props.pagination 是同一个东西
	            this.pagination = objProps.pagination;
	            // 列配置
	            this.columns = objProps.columns;
	            var propsData = objProps.data;
	            // 行配置
	            if (!!objProps.rowSelection) {
	                this.rowSelection = objProps.rowSelection;
	                if (this.rowSelection.selectedRowKeys) {
	                    state.selectedRowKeys = this.rowSelection.selectedRowKeys;
	                }
	            } else {
	                this.rowSelection = null;
	            }
	            // 判断数据是disable。如果没定义，默认处理逻辑为数据中是否有disable/disabled === true
	            // this.disabledRow = this.rowSelection && (this.rowSelection.disabledRow !== undefined)
	            //         ? this.rowSelection.disabledRow
	            //         : v=>v.disable || v.disabled;
	            var defaultCif = {
	                size: 'default',
	                rowKey: 'id',
	                rowClassName: function rowClassName() {},
	                expandedRowRender: null,
	                defaultExpandedRowKeys: [],
	                expandedRowKeys: [],
	                defaultExpandAllRows: false,
	                locale: { filterTitle: '筛选', filterConfirm: '确定', filterReset: '重置', emptyText: '暂无数据' },
	                indentSize: 15,
	                bordered: false,
	                showHeader: true,
	                footer: null,
	                scroll: {},
	                onChange: function onChange() {},
	                onExpand: function onExpand() {},
	                onExpandedRowsChange: function onExpandedRowsChange() {},
	                onRowClick: function onRowClick() {},
	                onRowDoubleClick: function onRowDoubleClick() {},
	                onRowMouseEnter: function onRowMouseEnter() {},
	                onRowMouseLeave: function onRowMouseLeave() {}
	            };
	            getNeedObject(defaultCif, this.__props);
	            // 关于表头
	            if (!!objProps.title) {
	                var titleConfig = objProps.title;
	                // 如果是字符串 或者 非对象（组件配置，可以是数组）或者 单一组件配置
	                if (_utils.Utils.typeof(titleConfig, 'string')) {
	                    titleConfig = { text: titleConfig };
	                }
	                titleConfig.showText = titleConfig.showText !== undefined ? titleConfig.showText : true;
	                this.title = titleConfig;
	            } else {
	                this.title = null;
	            }
	            // 关于异步操作
	            if (propsData) {
	                state.completeData = propsData;
	                if (this.pagination) {
	                    this.pagination.total = propsData.length;
	                }
	            }
	            // 关于行样式与不可选相关联，不可选时至为灰色
	            if (this.rowSelection && this.rowSelection.disabledRow) {
	                // 暂存用户配置
	                var rowClassNameFun = defaultCif.rowClassName;
	                defaultCif.rowClassName = function (record, index) {
	                    var customRowClassName = rowClassNameFun(record, index);
	                    // 用户未定义rowClassName时customRowClassName为undefined
	                    if (!customRowClassName) {
	                        customRowClassName = '';
	                    }
	                    if (_this2.rowSelection.disabledRow(record)) {
	                        return 'disabledRow ' + customRowClassName;
	                    } else {
	                        return customRowClassName;
	                    }
	                };
	            }
	            this.antdConfig = defaultCif;
	            state.antdConfig = this.antdConfig;
	            if (!nextProps) {
	                this.state = Object.assign({}, this.state, state);
	            } else {
	                this.setState(state);
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 可以通过给 autoLoadSource 设置 false 来阻止自动加载数据
	            if (this.__props.source && this.__props.autoLoadSource) {
	                this.getData();
	            }
	        }

	        /* 供用户调用接口 ***********************************************************************/
	        // 手动拉取数据

	    }, {
	        key: 'loadData',
	        value: function loadData() {
	            this.getData();
	        }
	        // 刷新表格

	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            this.refreshTable();
	        }
	        // 展示增删改查等弹框，具体实现逻辑见 Crud.js

	    }, {
	        key: 'showCrud',
	        value: function showCrud() {
	            var _crud;

	            this.crud && (_crud = this.crud).showCrud.apply(_crud, arguments);
	        }
	        // 获取当前全部选中行的数据

	    }, {
	        key: 'getSelected',
	        value: function getSelected() {
	            return this.state.selectedRows;
	        }
	        // 获取当前全部选中行的key

	    }, {
	        key: 'getSelectedKeys',
	        value: function getSelectedKeys() {
	            return this.state.selectedRowKeys;
	        }
	        // 全选

	    }, {
	        key: 'selectAll',
	        value: function selectAll() {
	            this._selectAllData();
	        }

	        /* 内部函数 ****************************************************************************/
	        // 覆盖原生获取异步数据的函数

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {}
	        // 异步获取数据

	    }, {
	        key: 'getData',
	        value: function getData(pageNum) {
	            var _this3 = this;

	            var url = this.__props.source;
	            if (!url) {
	                return;
	            }
	            // 如果有pageNum，则置为对应页；否则，pageNum等于当前页
	            if (pageNum) {
	                this.pagination.current = pageNum;
	            } else {
	                pageNum = this.pagination.current || 1;
	            }
	            var method = this.__props.method || 'get';
	            var params = this.__props.params;
	            if (this.pagination.pageType === 'server') {
	                params = Object.assign({}, params, {
	                    page: pageNum,
	                    index: pageNum,
	                    size: this.pagination.pageSize,
	                    limit: this.pagination.pageSize
	                });
	            }
	            this.setState({ loading: true });
	            var ajax = method === 'post' ? this.__postData : this.__getData;
	            // 当前请求的标号
	            var index = ++this.requerstIndex;
	            ajax(url, params, function (data, res) {
	                if (index !== _this3.requerstIndex) {
	                    return;
	                }
	                var displayData = data || [];
	                if (_this3.__props.sourceHandler) {
	                    displayData = _this3.__props.sourceHandler(data, res);
	                }
	                if (_this3.pagination.pageType === 'server') {
	                    displayData = displayData.slice(0, _this3.pagination.pageSize);
	                }
	                _this3.pagination.total = res.total || res.count || data.length;
	                _this3.__setProps({ data: displayData }, false);
	                _this3.setState({ completeData: displayData });
	                _this3.onRefreshData(data);
	            }, true, function (loading) {
	                if (index !== _this3.requerstIndex) {
	                    return;
	                }
	                _this3.setState({ loading: loading });
	            });
	        }
	        // 数据刷新

	    }, {
	        key: 'onRefreshData',
	        value: function onRefreshData(data) {
	            this.forceUpdate();
	        }
	        // 刷新表格

	    }, {
	        key: 'refreshTable',
	        value: function refreshTable() {
	            // 清空某些控制状态
	            this.clearState();
	            this.__setProps({ data: this.state.completeData }, false);
	            if (this.__props.source) {
	                this.getData();
	            } else {
	                this.onRefreshData(this.state.completeData);
	            }'';
	        }
	        // 清空某些控制状态

	    }, {
	        key: 'clearState',
	        value: function clearState() {
	            this.setState({
	                filterInputValue: '',
	                selectedRowKeys: []
	            });
	            this.filterConditions = {};
	            this.titleRef && this.titleRef.clearState();
	            this.forceUpdate();
	        }
	        // 全屏或退出全屏

	    }, {
	        key: 'toggleFullScreen',
	        value: function toggleFullScreen() {
	            this.setState({
	                fullScreen: !this.state.fullScreen
	            });
	        }
	        // 展示全部字段

	    }, {
	        key: 'toShowAllTags',
	        value: function toShowAllTags() {
	            this.setState({
	                showAllTags: !this.state.showAllTags
	            });
	        }
	        // 通过Pagination组建设置展示多少条

	    }, {
	        key: 'onShowSizeChange',
	        value: function onShowSizeChange(current, size) {
	            this.pagination.pageSize = parseInt(size, 10);
	            this.forceUpdate();
	            if (this.pagination.onShowSizeChange) {
	                this.pagination.onShowSizeChange(current, size);
	            }
	        }
	        // 过滤

	    }, {
	        key: 'onFilterData',
	        value: function onFilterData() {
	            var data = this.state.completeData;
	            // 对数据进行单列过滤
	            if (!_utils.Utils.empty(this.filterConditions)) {
	                data = this.filterInputSearch(data);
	            }
	            this.__setProps({ data: data });
	        }
	        // 单列数据搜索

	    }, {
	        key: 'filterChange',
	        value: function filterChange(filterProperty, e) {
	            // this.filterConditions用于记录多个列的同时筛选条件
	            var searchText = e.target.value;
	            if (!!searchText && searchText.length > 0) {
	                this.filterConditions[filterProperty] = searchText;
	            } else {
	                delete this.filterConditions[filterProperty];
	            }
	            this.forceUpdate();
	        }
	    }, {
	        key: 'filterInputSearch',
	        value: function filterInputSearch(filteredData) {
	            var _this4 = this;

	            var data = [];
	            var needFilterData = !!filteredData ? filteredData : this.state.completeData;
	            // 如果传入filteredData,则在filteredData基础上筛选
	            // 如果没有传入如果传入filteredData，则在全量数据上进行筛选
	            data = needFilterData.filter(function (record) {
	                var flag = true;
	                for (var cdit in _this4.filterConditions) {
	                    if (record[cdit].toString().indexOf(_this4.filterConditions[cdit]) === -1) {
	                        flag = false;
	                        break;
	                    }
	                }
	                return flag;
	            });
	            return data;
	        }
	        // 从全量数据中提取某列的所有可能的值

	    }, {
	        key: 'getAllFilterValue',
	        value: function getAllFilterValue(dataIndex) {
	            var obj = {};
	            var result = [];
	            var data = this.state.completeData;
	            for (var i = 0; i < data.length; i++) {
	                // 用obj存储所有可能的字段
	                if (data[i][dataIndex] && !obj[data[i][dataIndex]]) {
	                    obj[data[i][dataIndex]] = 1;
	                }
	            }
	            // 将obj转换为数组
	            for (var key in obj) {
	                result.push({ text: key, value: key });
	            }
	            return result;
	        }
	    }, {
	        key: '_selectAllData',
	        value: function _selectAllData() {
	            var _this5 = this;

	            var displayData = this.__props.data;
	            var selectedRowKeys = [];
	            var selectedRows = [];
	            var rowKey = this.__props.rowKey;
	            // 只有选择形式为复选框时才能进行全选
	            selectedRows = displayData.filter(function (record) {
	                if (_this5.rowSelection.disabledRow && _this5.rowSelection.disabledRow(record)) {
	                    // 当满足不可选条件时，不可以进行选择
	                    return false;
	                } else {
	                    selectedRowKeys.push(record[rowKey]);
	                    return true;
	                }
	            });
	            // 通过组件的onChange函数完成全选
	            this.rowOnChange(selectedRowKeys, selectedRows);
	        }
	    }, {
	        key: 'clearSelect',
	        value: function clearSelect() {
	            this.rowOnChange([], []);
	        }
	        // 行change时触发此函数

	    }, {
	        key: 'rowOnChange',
	        value: function rowOnChange(selectedRowKeys, selectedRows) {
	            this.setState({
	                selectedRowKeys: selectedRowKeys,
	                selectedRows: selectedRows
	            });
	            if (this.rowSelection.onChange) {
	                this.rowSelection.onChange(selectedRowKeys, selectedRows);
	            }
	        }
	    }, {
	        key: 'onPageChange',
	        value: function onPageChange(page) {
	            this.pagination.current = page;
	            if (this.pagination.pageType === 'server') {
	                this.getData(page);
	            }
	            this.forceUpdate();
	        }

	        // 从一个对象中获取需要用于过滤的关键字

	    }, {
	        key: '_getKeyDataOfObject',
	        value: function _getKeyDataOfObject(obj) {
	            var val = '';
	            // 如果传入的是一个数组，则递归的遍历这个数组，拿出数组中各个对象的关键字
	            if (obj instanceof Array) {
	                var tArr = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var t = _step.value;

	                        tArr.push(this._getKeyDataOfObject(t));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                val = tArr.join('\n');
	            } else if (obj instanceof Object) {
	                // 如果字段是个对象，则优先获取Title字段，否则获取该对象的第一个字段
	                if ('title' in obj) {
	                    val = obj['title'];
	                } else {
	                    for (var i in obj) {
	                        val = obj[i];
	                        break;
	                    }
	                }
	            } else if (obj) {
	                val = obj.toString ? obj.toString() : obj;
	            }
	            return val;
	        }
	    }, {
	        key: '_syntaxHighlight',
	        value: function _syntaxHighlight(json) {
	            var _this6 = this;

	            if (typeof json !== 'string') {
	                json = JSON.stringify(json, undefined, 2);
	            }
	            json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');
	            var reg = /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g;
	            return json.replace(reg, function (match) {
	                var cls = 'number';
	                if (/^"/.test(match)) {
	                    if (/:$/.test(match)) {
	                        cls = 'key';
	                    } else {
	                        try {
	                            var type = JSON.parse(match);
	                            if (_typeof(JSON.parse(type)) === 'object') {
	                                return _this6._syntaxHighlight(JSON.parse(type));
	                            } else {
	                                cls = 'string';
	                            }
	                        } catch (e) {
	                            cls = 'string';
	                        }
	                    }
	                } else if (/true|false/.test(match)) {
	                    cls = 'boolean';
	                } else if (/null/.test(match)) {
	                    cls = 'null';
	                }
	                return '<span class="' + cls + '">' + match + '</span>';
	            });
	        }
	        // _operation 为一个特殊属性，此属性中可以使用特定的action，关联table的crud等功能

	    }, {
	        key: '_handleOperationColumn',
	        value: function _handleOperationColumn(config, record) {
	            var _this7 = this;

	            var arr = config;
	            if (!_utils.Utils.typeof(arr, 'array')) {
	                arr = [config];
	            }
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                var _loop = function _loop() {
	                    var v = _step2.value;

	                    // action的值与crud中的配置的key一一对应
	                    if (v.action && !v.onClick) {
	                        v.onClick = function (e) {
	                            e && e.preventDefault();
	                            e && e.stopPropagation();
	                            _this7.showCrud(v.action, record);
	                        };
	                    }
	                };

	                for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return config;
	        }
	    }, {
	        key: 'renderColumns',
	        value: function renderColumns() {
	            var _this8 = this;

	            // 列功能相关
	            var antdColumnConfig = [];

	            var _loop2 = function _loop2(i) {
	                var item = _this8.columns[i];
	                if (!_this8.state.showAllTags && item.display === false) {
	                    // 在展示部分字段下过滤掉不展示的列数据
	                    return 'continue';
	                }
	                var defaultColumn = {
	                    title: '',
	                    key: '',
	                    dataIndex: '',
	                    // 默认是从用户配置中获取此字段，对于特殊的格式再做处理
	                    render: null,
	                    sorter: false,
	                    colSpan: null,
	                    width: '',
	                    className: '',
	                    fixed: false,
	                    sortOrder: false,
	                    onCellClick: null
	                };

	                getNeedObject(defaultColumn, item);
	                if (defaultColumn.dataIndex === '_operation') {
	                    defaultColumn.className += ' uf-operation';
	                }
	                // 用户配置的render是一个uf组建配置，在此转为dom
	                if (!!item.render) {
	                    defaultColumn.render = function (text, record, index) {
	                        // 配置中的render返回的是配置，配置再解析后才是真正的元素
	                        var config = item.render(text, record, index);
	                        // _operation 为一个特殊属性，此属性中可以使用特定的action，关联table的crud等功能
	                        if (defaultColumn.dataIndex === '_operation') {
	                            config = _this8._handleOperationColumn(config, record);
	                        }
	                        return _this8.__analysis(config);
	                    };
	                }
	                // 将用户配置的单列筛选选项转换成antd的配置
	                if (!!item.filterConfig) {
	                    var filterConfig = item.filterConfig;
	                    if (!filterConfig.filterType) {
	                        // 若没有配置filterType则直接返回
	                        return {
	                            v: void 0
	                        };
	                    }
	                    var dataIndex = item.dataIndex;
	                    if (filterConfig.filterType === 'checkbox' || filterConfig.filterType === 'radio') {
	                        // 多选框或单选框筛选
	                        var filterObj = {
	                            filters: null,
	                            filterMultiple: false,
	                            onFilter: null
	                        };
	                        if (!!filterConfig.filters) {
	                            // 用户配置了filters,则将用户配置进行转换
	                            filterObj.filters = filterConfig.filters.map(function (o) {
	                                return { text: o, value: o };
	                            });
	                        } else {
	                            // 用户没有配置filters，则将该字段的所有可能值展示出来
	                            filterObj.filters = _this8.getAllFilterValue(dataIndex);
	                        }
	                        filterObj.filterMultiple = filterConfig.filterType === 'checkbox' ? true : false;
	                        filterObj.onFilter = function (value, record) {
	                            return record[item.dataIndex].indexOf(value) !== -1;
	                        };
	                        defaultColumn = Object.assign({}, defaultColumn, filterObj);
	                    } else if (filterConfig.filterType === 'input') {
	                        // 通过输入筛选
	                        var _filterObj = {
	                            filterDropdown: null,
	                            filterIcon: _react2.default.createElement(_antd.Icon, { type: 'filter',
	                                style: { color: !!_this8.filterConditions[dataIndex] ? '#108ee9' : '#aaa' } })
	                        };
	                        _filterObj.filterDropdown = _react2.default.createElement(
	                            'div',
	                            { className: 'custom-filter-dropdown' },
	                            _react2.default.createElement(_antd.Input, { placeholder: 'Search',
	                                value: !!_this8.filterConditions[dataIndex] ? _this8.filterConditions[dataIndex] : '',
	                                onChange: _this8.filterChange.bind(_this8, dataIndex),
	                                onPressEnter: _this8.onFilterData.bind(_this8)
	                            })
	                        );
	                        defaultColumn = Object.assign({}, defaultColumn, _filterObj);
	                    }
	                }
	                // 文字过长，鼠标移入时进行气泡展示
	                if (!!item.ellipsis) {
	                    defaultColumn.render = function (text, record, index) {
	                        var newText = item.render ? _this8.__analysis(item.render(text, record, index)) : text;
	                        return _react2.default.createElement(
	                            _antd.Popover,
	                            { content: newText },
	                            _react2.default.createElement(
	                                'span',
	                                { className: 'uf-table-td-ellipsis' },
	                                newText
	                            )
	                        );
	                    };
	                }
	                // 对特殊格式进行展示处理，包括html格式，json格式，duration格式
	                if (item.textType) {
	                    var textType = item.textType.toString().toLowerCase();
	                    // let elliClass = v['ellipsis'] ? ' ellipsis' : '';
	                    // style.className += elliClass;
	                    defaultColumn.render = function (text, record, index) {
	                        var newText = text;
	                        switch (textType) {
	                            case 'duration':
	                                var timeDiff = (+new Date() - +new Date(Date.parse(text.replace(/-/g, '/')))) / 1000;
	                                var dayTime = Math.floor(timeDiff / (24 * 3600));
	                                var hourTime = Math.floor(timeDiff % (24 * 3600) / 3600);
	                                var minuteTime = Math.floor(timeDiff % (24 * 3600) % 3600 / 60);
	                                var secTime = Math.floor(timeDiff % (24 * 3600) % 3600 % 60);
	                                var timeArr = [];
	                                dayTime > 0 && timeArr.push(dayTime + '天');
	                                hourTime > 0 && timeArr.push(hourTime + '时');
	                                minuteTime > 0 && timeArr.push(minuteTime + '分');

	                                dayTime === 0 && hourTime === 0 && minuteTime === 0 && secTime > 0 && timeArr.push(secTime + '秒');
	                                var tdData = timeArr.join('');
	                                // 若用户配置了render，则将转换之后的数据给用户的render
	                                newText = item.render ? _this8.__analysis(item.render(tdData, record, index)) : tdData;
	                                break;
	                            case 'json':
	                                var json = JSON.stringify(text, null, 2);
	                                if (text && json !== '""') {
	                                    var html = _this8._syntaxHighlight(json);
	                                    newText = _react2.default.createElement(
	                                        _antd.Popover,
	                                        { content: _react2.default.createElement('pre', { className: 'json', dangerouslySetInnerHTML: { __html: html } }) },
	                                        _react2.default.createElement('pre', { className: 'json', dangerouslySetInnerHTML: { __html: html } })
	                                    );
	                                }
	                                break;
	                            case 'html':
	                                return _react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: text } });
	                                break;
	                            // 默认将格式进行一下转换然后输出
	                            default:
	                                text = _this8._getKeyDataOfObject(text);
	                                newText = item.render ? _this8.__analysis(item.render(text, record, index)) : text;
	                                break;
	                        }
	                        return newText;
	                    };
	                }
	                antdColumnConfig.push(defaultColumn);
	            };

	            for (var i in this.columns) {
	                var _ret2 = _loop2(i);

	                switch (_ret2) {
	                    case 'continue':
	                        continue;

	                    default:
	                        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	                }
	            }
	            return antdColumnConfig;
	        }
	    }, {
	        key: 'renderRowSelection',
	        value: function renderRowSelection() {
	            var _this9 = this;

	            if (!this.rowSelection) {
	                return null;
	            }
	            var rowSelection = {
	                type: 'checkbox'
	            };
	            getNeedObject(rowSelection, this.rowSelection);
	            // 对行进行受控选择
	            rowSelection.selectedRowKeys = this.state.selectedRowKeys;
	            if (this.rowSelection.disabledRow) {
	                rowSelection.getCheckboxProps = function (record) {
	                    return { disabled: _this9.rowSelection.disabledRow(record) };
	                };
	            }
	            // 任何一行的选择与否都会触发改方法
	            rowSelection.onChange = this.rowOnChange.bind(this);
	            rowSelection.onSelect = this.rowSelection.onSelect;
	            rowSelection.onSelectAll = this.rowSelection.onSelectAll;
	            rowSelection.onSelectInvert = this.rowSelection.onSelectInvert;
	            if (this.rowSelection.selections) {
	                // 在自定义选择项中增加全选功能
	                rowSelection.selections = [{
	                    key: 'uf-table-select-all',
	                    text: '全选',
	                    onSelect: this._selectAllData.bind(this)
	                }];
	                if (_utils.Utils.typeof(this.rowSelection.selections, 'array')) {
	                    rowSelection.selections.push(this.rowSelection.selections);
	                }
	            }

	            return rowSelection;
	        }
	    }, {
	        key: 'renderPagination',
	        value: function renderPagination() {
	            if (!this.pagination) {
	                return false;
	            }
	            var pagination = {
	                pageSize: null,
	                showSizeChanger: false,
	                pageSizeOptions: null,
	                showQuickJumper: false,
	                size: '',
	                simple: false,
	                showTotal: function showTotal(total) {
	                    return _react2.default.createElement(
	                        'span',
	                        null,
	                        '共' + total + '条数据'
	                    );
	                },
	                current: 1,
	                total: 0,
	                onShowSizeChange: this.onShowSizeChange.bind(this),
	                onChange: this.onPageChange.bind(this)
	            };
	            getNeedObject(pagination, this.pagination);
	            return pagination;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this10 = this;

	            var className = 'uf-table ';
	            className += this.state.fullScreen ? 'uf-fullscreen ' : '';
	            className += this.__props.className || '';
	            // 额外加一个mini类型的size
	            var size = this.state.antdConfig.size;
	            if (size === 'mini') {
	                className += ' uf-table-mini';
	                size = 'small';
	            }
	            return _react2.default.createElement(
	                'div',
	                { className: className, style: this.__props.style },
	                _react2.default.createElement(_antd.Table, _extends({}, this.state.antdConfig, { size: size,
	                    title: this.title && function () {
	                        return _react2.default.createElement(_Title2.default, { parent: _this10, ref: function ref(ele) {
	                                return _this10.titleRef = ele;
	                            }, config: _this10.title });
	                    },
	                    dataSource: this.__props.data,
	                    columns: this.renderColumns(),
	                    rowSelection: this.renderRowSelection(),
	                    pagination: this.renderPagination(),
	                    loading: this.state.loading })),
	                this.__props.crud && _react2.default.createElement(_Crud2.default, { parent: this, ref: function ref(ele) {
	                        return _this10.crud = ele;
	                    },
	                    config: this.__props.crud })
	            );
	        }
	    }]);

	    return NewTable;
	}(_base.BaseComponent);

	exports.default = NewTable;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(4);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table扩展 - 增删改查等功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	


	var Crud = function (_BaseComponent) {
	    _inherits(Crud, _BaseComponent);

	    function Crud(props) {
	        _classCallCheck(this, Crud);

	        // 其本身无需初始化组件
	        // this.__init();
	        var _this = _possibleConstructorReturn(this, (Crud.__proto__ || Object.getPrototypeOf(Crud)).call(this, props));

	        _this.parent = props.parent;
	        _this.config = null;
	        _this.oConfig = null;
	        _this.init();
	        return _this;
	    }
	    // 不必多次刷新


	    _createClass(Crud, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            return false;
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            var _this2 = this;

	            // 批量导入/编辑的表单配置
	            var batchAddFormConf = {
	                layout: {
	                    type: 'vertical'
	                },
	                items: [{
	                    type: 'textarea', name: 'data', default: '', required: true,
	                    rows: 6, style: { width: '100%' }
	                }]
	            };
	            var config = this.props.config;
	            var result = {};
	            // 额外存储的临时配置，用于配置复用
	            var tempConf = {};

	            var _loop = function _loop(i) {
	                var item = _utils.Utils.copy(config[i]);
	                var action = _this2._getAction(i);
	                switch (action) {
	                    // 展示信息弹框配置。会在message中传入当前数据
	                    case 'show':
	                        item.okText = item.okText || '关闭';
	                        item.footer = item.footer || [{
	                            type: 'button', mode: 'primary', action: 'cancel', content: item.okText
	                        }];
	                        break;
	                    // 新增弹框的配置
	                    case 'add':
	                        // add 可以复用 edit 的配置，可以减少配置书写
	                        tempConf['edit'] && (item = Object.assign(_utils.Utils.clone(tempConf['edit']), item));
	                        item.okText = item.okText || '提交';
	                        break;
	                    // 编辑弹框的配置
	                    case 'edit':
	                        // edit 可以复用 add 的配置，可以减少配置书写
	                        tempConf['add'] && (item = Object.assign(_utils.Utils.clone(tempConf['add']), item));
	                        // 可以通过forbidden字段指定编辑的时候哪些字段不可编辑。便于复用add的form时
	                        if (item.forbidden && item.form) {
	                            item.form.forbidden = item.forbidden.split(',');
	                            delete item.forbidden;
	                        }
	                        item.okText = item.okText || '提交';
	                        break;
	                    // 删除确认框的配置
	                    case 'delete':
	                        // 默认把参数处理为：只返回 id（rowKey对应的字段）
	                        item.paramsHandler = item.paramsHandler || function (params) {
	                            return _defineProperty({}, _this2.parent.rowKey, params[_this2.parent.rowKey]);
	                        };
	                        item.message = item.message || function () {
	                            return '确定要删除吗？';
	                        };
	                        item.okText = item.okText || '删除';
	                        break;
	                    // 批量展示table中选中的数据
	                    case 'batchShow':
	                        item.okText = item.okText || '关闭';
	                        item.footer = item.footer || [{
	                            type: 'button', mode: 'primary', action: 'cancel', content: item.okText
	                        }];
	                        break;
	                    // 批量新增弹框的配置
	                    case 'batchAdd':
	                        // batchAdd 可以复用 batchEdit 的配置，可以减少配置书写
	                        tempConf['batchEdit'] && (item = Object.assign(_utils.Utils.clone(tempConf['batchEdit']), item));
	                        item.okText = item.okText || '提交';
	                        // form 需用指定的，此弹框用户传入的form配置无效
	                        item.form = _utils.Utils.clone(batchAddFormConf);
	                        break;
	                    // 批量新增弹框的配置
	                    case 'batchEdit':
	                        // batchEdit 可以复用 batchAdd 的配置，可以减少配置书写
	                        tempConf['batchAdd'] && (item = Object.assign(_utils.Utils.clone(tempConf['batchAdd']), item));
	                        item.okText = item.okText || '提交';
	                        // form 需用指定的，此弹框用户传入的form配置无效
	                        item.form = _utils.Utils.clone(batchAddFormConf);
	                        break;
	                    // 批量删除确认框的配置
	                    case 'batchDelete':
	                        // 默认把参数处理为：只返回英文逗号分隔的 id[s]（rowKey对应的字段）如：{ids: 123,456}
	                        item.paramsHandler = item.paramsHandler || function (params) {
	                            return _defineProperty({}, _this2.parent.rowKey + 's', params.map(function (v) {
	                                return v[_this2.parent.rowKey];
	                            }).join(','));
	                        };
	                        item.message = item.message || function () {
	                            return '确定要执行『 批量删除 』操作吗？';
	                        };
	                        break;
	                    default:
	                        break;
	                }
	                item.type = item.type || 'modal';
	                item.name = _this2._getModalName(i);
	                // 默认点击提交时自动刷新表格。
	                if (item.autoReload !== false) {
	                    // 不用this.parent._inject，edit复用add的配置时，这里回把两个同样的函数合并到一起，导致table刷新两次
	                    item.onSuccess = function () {
	                        return new Promise(function (resolve, reject) {
	                            setTimeout(function () {
	                                _this2.parent.refreshTable();
	                                resolve();
	                            }, +item.autoReload || 0);
	                        });
	                    };
	                }

	                result[i] = item;
	                // 存储的复用配置用action做区分
	                tempConf[action] = item;
	            };

	            for (var i in config) {
	                _loop(i);
	            }
	            this.oConfig = result;
	            this.config = Object.values(result);
	        }

	        // 展示各种弹框框

	    }, {
	        key: 'showCrud',
	        value: function showCrud(key) {
	            var action = this._getAction(key);
	            var modal = this.__getComponent(this._getModalName(key));
	            if (modal) {
	                // 除批量编辑需要额外操作，其他都是直接展示即可
	                switch (action) {
	                    case 'batchEdit':
	                        this._showBatchEdit(key);
	                        break;
	                    case 'batchDelete':
	                        this._showBatchDelete(key);
	                        break;
	                    case '_showBatchShow':
	                        this._showBatchShow(key);
	                        break;
	                    default:
	                        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                            params[_key - 1] = arguments[_key];
	                        }

	                        modal.show.apply(modal, params);
	                }
	            }
	        }

	        // 获取crud中某项配置的action属性：如果没有action属性，则返回配置的key值

	    }, {
	        key: '_getAction',
	        value: function _getAction(key) {
	            var config = this.props.config;
	            return config[key] && config[key].action || key;
	        }
	        // 生成弹框名称，唯一，table的key+crud的key

	    }, {
	        key: '_getModalName',
	        value: function _getModalName(key) {
	            // 如果用户自己配了name，使用用户的name
	            var config = this.props.config;
	            if (config[key] && config[key].name) {
	                return name;
	            }
	            return '__' + this.parent.key + '-' + key;
	        }
	        // 展示批量编辑框

	    }, {
	        key: '_showBatchEdit',
	        value: function _showBatchEdit(key) {
	            var datas = this.parent.getSelected();
	            if (!(datas && datas.length > 0)) {
	                _antd.message.warning('请先在表格中选择至少一条数据，再执行操作。', 3.5);
	                return;
	            }
	            if (this.oConfig[key] && this.oConfig[key].keys) {
	                var str = '';
	                var keys = this.oConfig[key].keys.split(',');
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = datas[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var row = _step.value;

	                        var tmp = '';
	                        var _iteratorNormalCompletion2 = true;
	                        var _didIteratorError2 = false;
	                        var _iteratorError2 = undefined;

	                        try {
	                            for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                                var v = _step2.value;

	                                tmp += (row[v] || '') + ',';
	                            }
	                        } catch (err) {
	                            _didIteratorError2 = true;
	                            _iteratorError2 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                    _iterator2.return();
	                                }
	                            } finally {
	                                if (_didIteratorError2) {
	                                    throw _iteratorError2;
	                                }
	                            }
	                        }

	                        str += tmp.slice(0, -1) + '\n';
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                var modal = this.__getComponent(this._getModalName(key));
	                modal && modal.show({ data: str });
	            } else {
	                console.error('there is no property "batchEdit" or "batchEdit.keys" in table config');
	            }
	        }
	        // 展示批量删除框

	    }, {
	        key: '_showBatchDelete',
	        value: function _showBatchDelete(key) {
	            var datas = this.parent.getSelected();
	            if (!(datas && datas.length > 0)) {
	                _antd.message.warning('请先在表格中选择至少一条数据，再执行操作。', 3.5);
	                return;
	            }
	            var modal = this.__getComponent(this._getModalName(key));
	            modal && modal.show(datas);
	        }
	        // 批量展示数据。即展示表格中的选中的数据

	    }, {
	        key: '_showBatchShow',
	        value: function _showBatchShow(key) {
	            var datas = this.parent.getSelected();
	            if (!(datas && datas.length > 0)) {
	                _antd.message.warning('请先在表格中选择至少一条数据，再执行操作。', 3.5);
	                return;
	            }
	            var modal = this.__getComponent(this._getModalName(key));
	            modal && modal.show(datas);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                this.parent.__analysis(this.config)
	            );
	        }
	    }]);

	    return Crud;
	}(_base.BaseComponent);

	exports.default = Crud;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _antd = __webpack_require__(4);

	var _export = __webpack_require__(113);

	var _export2 = _interopRequireDefault(_export);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table扩展 - 表格上方的title以及其全部可选控件实现
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	

	var CheckboxGroup = _antd.Checkbox.Group;
	var MenuItem = _antd.Menu.Item;

	// 从obg2中获取obj1所需要的一些属性
	var getNeedObject = function getNeedObject(obj1, obj2) {
	    for (var i in obj1) {
	        if (!!obj2[i]) {
	            obj1[i] = obj2[i];
	        }
	    }
	};

	var Title = function (_BaseComponent) {
	    _inherits(Title, _BaseComponent);

	    function Title(props) {
	        _classCallCheck(this, Title);

	        // 其本身无需初始化组件
	        // this.__init();
	        var _this = _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).call(this, props));

	        _this.parent = props.parent;
	        _this.title = props.config;
	        _this.state = {
	            antdConfig: null,
	            // table表头右侧设置按钮的下拉框是否展示
	            showTableMenu: false,
	            // 是否展示全部字段
	            showAllTags: false,
	            showSetTagsModal: false
	        };
	        // 用于存储多列的筛选条件
	        _this.globalFilterInput = '';
	        // 过滤字段黑名单/白名单
	        _this.globalFilterList = null;
	        _this.init();
	        return _this;
	    }
	    // 不必多次刷新
	    // shouldComponentUpdate(nextProps, nextState) {
	    //     return false;
	    // }


	    _createClass(Title, [{
	        key: 'init',
	        value: function init() {}
	    }, {
	        key: 'clearState',
	        value: function clearState() {
	            this.globalFilterInput = '';
	            this.hideMenuDropdown();
	        }

	        /* 内部函数 ****************************************************************************/
	        // // 表头生成-包括文字标题及自定义控件

	    }, {
	        key: 'titleGenerate',
	        value: function titleGenerate() {
	            if (!this.title) {
	                return null;
	            }
	            var text = this.title.text || '';
	            var result = [];
	            // 表头标题
	            if (text) {
	                result.push(_react2.default.createElement(
	                    'div',
	                    { key: 'table-title', className: 'uf-header' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        this.parent.__analysis(text)
	                    )
	                ));
	            }
	            // 以下为一些控件的生成，全部保存在divList里
	            // 直接展示在表头的控件
	            var divList = this.getBasicWidghts();
	            // 展示在menu下拉列表中的控件
	            var gearsList = this.getMenuWidghts();
	            if (gearsList) {
	                divList.push(gearsList);
	            }
	            result.push(_react2.default.createElement(
	                'div',
	                { key: 'table-extra', className: 'uf-header-extra-con' },
	                divList
	            ));
	            return result;
	        }
	        // 基本控件

	    }, {
	        key: 'getBasicWidghts',
	        value: function getBasicWidghts() {
	            var arrBasic = this.title.basicControls;
	            var result = [];
	            if (!arrBasic) {
	                return result;
	            }
	            var showText = this.title.showText;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arrBasic[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    // 全部转化为对象
	                    if (_utils.Utils.typeof(v, 'string')) {
	                        v = { name: v };
	                    }
	                    switch (v.name) {
	                        case 'filter':
	                            if (!this.globalFilterList && (v.whitelist || v.blacklist)) {
	                                this.globalFilterList = {
	                                    whitelist: v.whitelist,
	                                    blacklist: v.blacklist
	                                };
	                            }
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-extra filter no-hover', key: 'uf-header-extra' },
	                                _react2.default.createElement(_antd.Input, { name: 'filter', prefix: _react2.default.createElement(_antd.Icon, { type: v.icon || 'filter' }),
	                                    placeholder: v.text || '要过滤的内容',
	                                    onChange: this.globalFilterChange.bind(this) })
	                            ));
	                            break;
	                        case 'refresh':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-extra', key: 'refresh',
	                                    title: v.text || '刷新',
	                                    onClick: this.parent.refreshTable },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'retweet' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '刷新'
	                                )
	                            ));
	                            break;
	                        case 'fullScreen':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-extra', key: 'fullscreen',
	                                    title: !this.parent.state.fullScreen ? v.text || '全屏' : v.text || '退出全屏',
	                                    onClick: this.parent.toggleFullScreen },
	                                !this.parent.state.fullScreen ? _react2.default.createElement(_antd.Icon, { type: v.text || 'arrows-alt' }) : _react2.default.createElement(_antd.Icon, { type: v.text || 'shrink' }),
	                                showText && (!this.parent.state.fullScreen ? _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '全屏'
	                                ) : _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    '退出' + (v.text || '全屏')
	                                ))
	                            ));
	                            break;
	                        case 'export':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-extra', key: 'export',
	                                    title: v.text || '导出' },
	                                _react2.default.createElement(
	                                    _export2.default,
	                                    this.getExportConfig(),
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'download' }),
	                                    showText && _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '导出'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'switchTags':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-extra', key: 'switchTags',
	                                    title: v.text || '展示字段',
	                                    onClick: this.showSwitchTags.bind(this) },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'setting' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '展示字段'
	                                )
	                            ));
	                            break;
	                        case 'showAllTags':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { key: 'showAllTags',
	                                    title: v.text || '展示全部',
	                                    className: 'uf-header-extra ' + (this.parent.state.showAllTags ? 'active' : ''),
	                                    onClick: this.parent.toShowAllTags },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'eye-o' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '展示全部'
	                                )
	                            ));
	                            break;
	                        case 'setPageSize':
	                            result.push(_react2.default.createElement(
	                                _antd.Popconfirm,
	                                { placement: 'top', key: 'basic-setPageSize',
	                                    title: this.renderPageInput('basic'),
	                                    onConfirm: this.getPageSizeSetting.bind(this, 'basic'),
	                                    okText: 'Yes', cancelText: 'No' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'uf-header-extra',
	                                        title: v.text || '分页设置',
	                                        onClick: this.showSetPageSize.bind(this, 'basic') },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'switcher' }),
	                                    showText && _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '分页设置'
	                                    )
	                                )
	                            ));
	                            break;
	                        default:
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { key: v.name, className: 'uf-header-extra ' + (v.name || ''),
	                                    title: v.text,
	                                    onClick: v.onClick && v.onClick.bind(null, this.parent) },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'file-unknown' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || ''
	                                )
	                            ));
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return result;
	        }
	        // 下拉列表中的控件

	    }, {
	        key: 'getMenuWidghts',
	        value: function getMenuWidghts() {
	            var _this2 = this;

	            var arrMenus = this.title.menuControls;
	            var result = null;
	            var gearsList = [];
	            if (!arrMenus) {
	                return result;
	            }
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                var _loop = function _loop() {
	                    var v = _step2.value;

	                    // 全部转化为对象
	                    if (_utils.Utils.typeof(v, 'string')) {
	                        v = { name: v };
	                    }
	                    switch (v.name) {
	                        case 'refresh':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'refresh1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this2.parent.refreshTable();
	                                            _this2.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'retweet', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '刷新表格'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'fullScreen':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'fullScreen1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this2.parent.toggleFullScreen();
	                                            _this2.hideMenuDropdown();
	                                        } },
	                                    !_this2.parent.state.fullScreen ? _react2.default.createElement(_antd.Icon, { type: v.text || 'arrows-alt', className: 'menu-item-icon' }) : _react2.default.createElement(_antd.Icon, { type: v.text || 'shrink', className: 'menu-item-icon' }),
	                                    !_this2.parent.state.fullScreen ? _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        (v.text || '全屏') + '显示'
	                                    ) : _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        '退出' + (v.text || '全屏')
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'export':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'export1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: _this2.hideMenuDropdown.bind(_this2) },
	                                    _react2.default.createElement(
	                                        _export2.default,
	                                        _this2.getExportConfig(),
	                                        _react2.default.createElement(_antd.Icon, { type: v.icon || 'download', className: 'menu-item-icon' }),
	                                        _react2.default.createElement(
	                                            'span',
	                                            null,
	                                            v.text || '导出数据'
	                                        )
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'switchTags':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'switchTags1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this2.showSwitchTags();
	                                            _this2.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'setting', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '展示字段'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'showAllTags':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'showAllTags1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this2.parent.toShowAllTags();
	                                            _this2.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'eye-o', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '展示全部'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'setPageSize':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'basic-setPageSize1' },
	                                _react2.default.createElement(
	                                    _antd.Popconfirm,
	                                    { placement: 'left',
	                                        title: _this2.renderPageInput('menu'),
	                                        onConfirm: _this2.getPageSizeSetting.bind(_this2, 'menu'),
	                                        onCancel: _this2.hideMenuDropdown.bind(_this2),
	                                        okText: 'Yes', cancelText: 'No' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { onClick: _this2.showSetPageSize.bind(_this2, 'menu') },
	                                        _react2.default.createElement(_antd.Icon, { type: v.icon || 'switcher', className: 'menu-item-icon' }),
	                                        _react2.default.createElement(
	                                            'span',
	                                            null,
	                                            v.text || '分页设置'
	                                        )
	                                    )
	                                )
	                            ));
	                            break;
	                        default:
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: v.name, onClick: function onClick() {
	                                        var _v;

	                                        for (var _len = arguments.length, p = Array(_len), _key = 0; _key < _len; _key++) {
	                                            p[_key] = arguments[_key];
	                                        }

	                                        (_v = v).onClick.apply(_v, [_this2.parent].concat(p));
	                                        _this2.hideMenuDropdown();
	                                    } },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'file-unknown', className: 'menu-item-icon' }),
	                                _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || ''
	                                )
	                            ));
	                    }
	                };

	                for (var _iterator2 = arrMenus[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            if (gearsList.length > 0) {
	                result = _react2.default.createElement(
	                    _antd.Dropdown,
	                    { trigger: ['click'], key: 'uf-table-menu',
	                        overlay: _react2.default.createElement(
	                            _antd.Menu,
	                            { className: 'uf-table-menu' },
	                            gearsList
	                        ),
	                        onVisibleChange: this.switchMenuList.bind(this),
	                        placement: 'bottomRight',
	                        visible: this.state.showTableMenu },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'uf-header-extra menu ' + (this.state.showTableMenu ? 'active' : ''),
	                            title: '\u83DC\u5355' },
	                        this.state.showTableMenu ? _react2.default.createElement(_antd.Icon, { type: 'menu-unfold' }) : _react2.default.createElement(_antd.Icon, { type: 'menu-fold' }),
	                        this.title.showText && _react2.default.createElement(
	                            'span',
	                            null,
	                            '\u83DC\u5355'
	                        )
	                    )
	                );
	            }
	            return result;
	        }

	        /* 模糊搜索 **********************************************************************/

	        // 过滤输入框变化时

	    }, {
	        key: 'globalFilterChange',
	        value: function globalFilterChange(e) {
	            var _this3 = this;

	            var iVal = e.target.value;
	            this.globalFilterInput = iVal;
	            clearTimeout(this.filterTimer);
	            this.filterTimer = setTimeout(function () {
	                _this3.onFilterData();
	            }, 150);
	        }
	    }, {
	        key: 'onFilterData',
	        value: function onFilterData() {
	            // 过滤
	            var data = this.parent.state.completeData;
	            // @bugfix at 2018/01/31 15:38，展示模糊搜索内容时，分页条数及当前分页使用模糊搜索自己的；取消模糊搜索时还原之前的状态
	            // Table.js 中的 this.pagination 和 this.parant.__props.pagination 是同一个东西
	            var pagination = this.parent.__props.pagination;
	            var total = pagination && pagination.total;
	            var current = pagination && pagination.current;
	            // 对数据进行全局过滤
	            if (this.globalFilterInput.length !== 0) {
	                data = this.globalFilterData(this.globalFilterInput, data);
	                this.cacheTotal = this.cacheTotal || total;
	                this.cacheCurrent = this.cacheCurrent || current;
	                total = data.length;
	                current = 1;
	            } else {
	                total = this.cacheTotal;
	                current = this.cacheCurrent;
	                this.cacheTotal = null;
	                this.cacheCurrent = null;
	            }
	            var newProps = { data: data };
	            if (pagination) {
	                newProps.pagination = { total: total, current: current };
	            }
	            this.parent.__setProps(newProps);
	        }
	        // 全局搜索数据

	    }, {
	        key: 'globalFilterData',
	        value: function globalFilterData(iVal, content) {
	            var strVal = iVal.toLowerCase().replace(/(^\s*)|(\s*$)/g, '').replace(/\s+/g, ' ');
	            // 过滤使用的数据，如果是有传入的数据则进行过滤，没有则需要进行
	            if (strVal) {
	                var arrFilterData = [];
	                // 字段黑名单/白名单
	                var filterlist = this.globalFilterList;
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = content[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var oRow = _step3.value;

	                        var row = {};
	                        var data = [];
	                        // 按照展示的字段过滤，自定义render字段无效，问题比较大
	                        for (var i in oRow) {
	                            // 把数据的key也全部转换成纯小写
	                            row[i.toLowerCase()] = oRow[i];
	                            // 如果不在白名单里或者在黑名单里，则跳过此字段
	                            if (filterlist && filterlist['whitelist'] && filterlist['whitelist'].indexOf(i) === -1) {
	                                continue;
	                            } else if (filterlist && filterlist['blacklist'] && filterlist['blacklist'].indexOf(i) !== -1) {
	                                continue;
	                            }
	                            var value = oRow[i];
	                            if (_utils.Utils.typeof(value, 'string')) {
	                                data.push(this.handleString(value));
	                            } else if (_utils.Utils.typeof(value, 'object')) {
	                                data.push(this.parent._getKeyDataOfObject(value));
	                            } else {
	                                data.push(value.toString ? value.toString() : value);
	                            }
	                        }

	                        var str = data.join('\n').toLowerCase();
	                        // 输入值不是字符串，而是几个词，要拆分后分别查找
	                        var result = true;
	                        var keys = strVal.split(/\s+/);
	                        var _iteratorNormalCompletion4 = true;
	                        var _didIteratorError4 = false;
	                        var _iteratorError4 = undefined;

	                        try {
	                            for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                                var key = _step4.value;

	                                // update by liuzechun@baidu.com @2016-12-11
	                                var orResult = false;
	                                // 支持指定字段过滤(如 id:123)，先选出关键词对应的字段，再对字段内容进行检索

	                                var _key$split = key.split(':'),
	                                    _key$split2 = _slicedToArray(_key$split, 2),
	                                    kWord = _key$split2[0],
	                                    kVal = _key$split2[1];
	                                // kv为当前搜索的字段值，如果没有指定字段，则kv为全部字段拼成的字符串


	                                var kv = '';
	                                if (kVal) {
	                                    // 如果关键词字段直接为数据的key
	                                    if (row[kWord] !== undefined) {
	                                        kv = row[kWord] || '';
	                                        // 否则在配置的tag里匹配每个tag的中文名
	                                    } else {
	                                        var _iteratorNormalCompletion5 = true;
	                                        var _didIteratorError5 = false;
	                                        var _iteratorError5 = undefined;

	                                        try {
	                                            for (var _iterator5 = this.parent.columns[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                                                var item = _step5.value;

	                                                if (kWord === item.title.toLowerCase()) {
	                                                    kv = row[item.dataIndex.toLowerCase()];
	                                                }
	                                            }
	                                        } catch (err) {
	                                            _didIteratorError5 = true;
	                                            _iteratorError5 = err;
	                                        } finally {
	                                            try {
	                                                if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                                                    _iterator5.return();
	                                                }
	                                            } finally {
	                                                if (_didIteratorError5) {
	                                                    throw _iteratorError5;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    if (typeof kv !== 'string') {
	                                        kv = (typeof kv === 'undefined' ? 'undefined' : _typeof(kv)) === 'object' && kv.title || JSON.stringify(kv);
	                                    }
	                                    kv = (kv || '').toLowerCase();
	                                } else {
	                                    kv = str;
	                                    kVal = key;
	                                }
	                                // 支持使用|搜索，实现或的关系
	                                var _iteratorNormalCompletion6 = true;
	                                var _didIteratorError6 = false;
	                                var _iteratorError6 = undefined;

	                                try {
	                                    for (var _iterator6 = kVal.split(/\|+/)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                                        var k = _step6.value;

	                                        // 一旦有一个能匹配到，则结果true
	                                        (!k || kv.indexOf(k) !== -1) && (orResult = true);
	                                    }
	                                    // 如果都匹配不到，则此关键字无效，整条数据无效
	                                } catch (err) {
	                                    _didIteratorError6 = true;
	                                    _iteratorError6 = err;
	                                } finally {
	                                    try {
	                                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                                            _iterator6.return();
	                                        }
	                                    } finally {
	                                        if (_didIteratorError6) {
	                                            throw _iteratorError6;
	                                        }
	                                    }
	                                }

	                                !orResult && (result = false);
	                            }
	                        } catch (err) {
	                            _didIteratorError4 = true;
	                            _iteratorError4 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                                    _iterator4.return();
	                                }
	                            } finally {
	                                if (_didIteratorError4) {
	                                    throw _iteratorError4;
	                                }
	                            }
	                        }

	                        if (result) {
	                            arrFilterData.push(oRow);
	                        }
	                    }
	                    // return Utils.clone(arrFilterData);
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }

	                return arrFilterData;
	            }
	            // 清除已勾选内容
	            // this.parent.clearSelect();
	            return content;
	        }
	        // 若有html，则剥掉标签

	    }, {
	        key: 'handleString',
	        value: function handleString(string) {
	            var pattern1 = /<(\w+).*?>(.*?)<\/\1>/g; // 匹配是否有闭合标签
	            if (pattern1.test(string)) {
	                return string.replace(/<([\/]?\w+).*?>/g, ''); // 剥掉所有标签
	            } else {
	                return string;
	            }
	        }

	        /* 导出控件 **********************************************************************/

	        // 获取要下载导出数据的配置

	    }, {
	        key: 'getExportConfig',
	        value: function getExportConfig() {
	            var tableCfg = this.parent.__props;
	            var columns = this.parent.columns;
	            var headers = [];
	            for (var i in columns) {
	                // 只导出展示的字段
	                if (this.parent.state.showAllTags || columns[i].display !== false) {
	                    headers.push({
	                        key: columns[i].dataIndex || columns[i].key,
	                        title: columns[i].title
	                    });
	                }
	            }
	            /**
	             * 1. 没有url就是直接传递了content的数据
	             * 2. 有url但是是client分页-Export需要传递data,默认是client分页
	             * 3. 有url但是是server端分页-Export需要传递url配置
	             */
	            if (!tableCfg.source || this.parent.pagination && this.parent.pagination.pageType !== 'server') {
	                var data = this.parent.__props.data || [];
	                return {
	                    headers: headers,
	                    data: data,
	                    total: data.length
	                };
	            }
	            return {
	                headers: headers,
	                source: tableCfg.source,
	                params: tableCfg.params ? tableCfg.params : {},
	                total: this.parent.pagination && this.parent.pagination.total || 0
	            };
	        }

	        /* 展示字段设置 **********************************************************************/

	        // 显示’展示字段‘设置弹框

	    }, {
	        key: 'showSwitchTags',
	        value: function showSwitchTags() {
	            this.setState({ showSetTagsModal: true });
	        }
	        // 自定义展示某些列

	    }, {
	        key: 'setTableColumns',
	        value: function setTableColumns() {
	            // 根据this.columnsCheckedValues中存储的用户的选择进行展示
	            var showColumns = this.columnsCheckedValues;
	            var allColumns = this.parent.columns;

	            var _loop2 = function _loop2(i) {
	                if (showColumns.some(function (v) {
	                    return allColumns[i].dataIndex === v;
	                })) {
	                    allColumns[i].display = true;
	                } else {
	                    allColumns[i].display = false;
	                }
	            };

	            for (var i in allColumns) {
	                _loop2(i);
	            }
	            this.setState({ showSetTagsModal: false });
	            this.parent.forceUpdate();
	        }
	    }, {
	        key: 'onSetColumnsCheckboxChange',
	        value: function onSetColumnsCheckboxChange(checkedValues) {
	            this.columnsCheckedValues = checkedValues;
	        }
	    }, {
	        key: 'cancleSetTableColumns',
	        value: function cancleSetTableColumns() {
	            this.setState({ showSetTagsModal: false });
	        }
	        // 生成弹框中的checkbox组，以选择展示哪些列

	    }, {
	        key: 'generateColumnsCheckboxGroup',
	        value: function generateColumnsCheckboxGroup() {
	            var options = [];
	            var defaultValue = [];
	            var allColumns = this.parent.columns;
	            for (var item in allColumns) {
	                var option = {
	                    label: allColumns[item].title,
	                    value: allColumns[item].dataIndex
	                };
	                options.push(option);
	                if (allColumns[item].display !== false) {
	                    defaultValue.push(allColumns[item].dataIndex);
	                }
	            }
	            if (options.length > 0) {
	                return _react2.default.createElement(CheckboxGroup, { options: options,
	                    defaultValue: defaultValue,
	                    onChange: this.onSetColumnsCheckboxChange.bind(this) });
	            }
	        }

	        /* 设置分页条数 **********************************************************************/

	    }, {
	        key: 'renderPageInput',
	        value: function renderPageInput(name) {
	            // return <Input placeholder="输入每页数据条数" refs={`pageSizeInput${name}`}
	            //     value={this.parent.pagination.pageSize}
	            //     onChange={this.changePageSize.bind(this)}/>;
	            return _react2.default.createElement(_antd.Input, { ref: 'pageSizeInput' + name,
	                placeholder: '\u8F93\u5165\u6BCF\u9875\u6570\u636E\u6761\u6570',
	                defaultValue: this.parent.pagination.pageSize });
	        }
	        // 展示每页展示条数

	    }, {
	        key: 'getPageSizeSetting',
	        value: function getPageSizeSetting(name) {
	            var value = this.refs['pageSizeInput' + name].refs.input.value;
	            var pageSize = parseInt(value, 10);
	            if (isNaN(pageSize)) {
	                pageSize = 10;
	            }
	            this.parent.pagination.pageSize = pageSize;
	            this.parent.forceUpdate();
	            this.setState({ showTableMenu: false });
	        }
	        // 展示分页设置输入框时，使得输入框获取焦点

	    }, {
	        key: 'showSetPageSize',
	        value: function showSetPageSize(name) {
	            var _this4 = this;

	            // 设定延迟的原因，this[`pageSizeInput${name}`]以提示框的形式渲染到页面
	            // 而此函数触发时还未渲染完毕，输入框无法获得焦点，输入框手动获取焦点会引起menu下拉列表关闭
	            setTimeout(function () {
	                var obj = _this4['pageSizeInput' + name];
	                obj && obj.focus();
	            }, 10);
	        }

	        /* menu 菜单 **********************************************************************/

	        // 展示头部隐藏菜单

	    }, {
	        key: 'switchMenuList',
	        value: function switchMenuList(visible) {
	            this.setState({ showTableMenu: visible });
	        }
	    }, {
	        key: 'showTableMenu',
	        value: function showTableMenu() {
	            this.setState({ showTableMenu: true });
	        }
	        // menu下拉列表隐藏

	    }, {
	        key: 'hideMenuDropdown',
	        value: function hideMenuDropdown() {
	            this.setState({ showTableMenu: false });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                this.titleGenerate(),
	                _react2.default.createElement(
	                    _antd.Modal,
	                    { title: '\u5C55\u793A\u5B57\u6BB5', className: 'uf-table-modal',
	                        visible: this.state.showSetTagsModal,
	                        onOk: this.setTableColumns.bind(this),
	                        onCancel: this.cancleSetTableColumns.bind(this) },
	                    this.generateColumnsCheckboxGroup()
	                )
	            );
	        }
	    }]);

	    return Title;
	}(_base.BaseComponent);

	exports.default = Title;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(128).default;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _moment = __webpack_require__(82);

	var _moment2 = _interopRequireDefault(_moment);

	var _antd = __webpack_require__(4);

	var _ueditor = __webpack_require__(129);

	var _ueditor2 = _interopRequireDefault(_ueditor);

	__webpack_require__(133);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 可配置表单
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var uuid = 0;

	var OriginForm = function (_BaseComponent) {
	    _inherits(OriginForm, _BaseComponent);

	    function OriginForm(props) {
	        _classCallCheck(this, OriginForm);

	        // 过滤掉Form.create传入的form属性
	        var _this = _possibleConstructorReturn(this, (OriginForm.__proto__ || Object.getPrototypeOf(OriginForm)).call(this, props));

	        _this._filter.push('form');
	        _this._openApi.push('getValues', 'resetValues', 'clearValues');
	        _this.__init();
	        _this.state = {
	            loading: false
	        };
	        // this.props.form; Antd.Form封装的函数
	        _this.form = props.form;
	        _this.config = null;
	        // 用于存储子Form的引用（因为无法直接拿到refs）
	        _this.formRef = {};
	        // 用于存储表单元素的引用
	        _this.itemRef = {};
	        _this.defaultValues = {};
	        // 用于记录当前form是否变换过（原来单个form通过复制新增等变为了多个）
	        // this.isArrayForm = false;
	        _this.init();
	        _this.itemsCache = {};
	        return _this;
	    }

	    _createClass(OriginForm, [{
	        key: 'init',
	        value: function init(nextProps) {
	            // 过滤掉Form.create传入的form属性
	            var props = this.__props;
	            if (nextProps) {
	                props = _utils.Utils.merge({}, props, nextProps);
	            }
	            props = _utils.Utils.filter(props, 'form');
	            this.config = props;
	            this.formItemLayout = this.getLayout(props.layout);
	            // 使之成为受控组件，实现Form嵌套
	            if (props.formData && !_utils.Utils.equals(this.defaultValues, props.formData)) {
	                this.setDefaultValues(props.formData);
	                nextProps && this.initValues();
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 把this抛出，供外部调用，因为使用refs找不到包装前的ReactForm对象
	            this.props.wrappedComponentRef && this.props.wrappedComponentRef(this);
	            this.initValues();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.init(nextProps);
	            }
	        }
	        // 获取初始值，并格式化

	    }, {
	        key: 'setDefaultValues',
	        value: function setDefaultValues(data) {
	            if (!data) {
	                this.defaultValues = {};
	            } else {
	                // if (!this.isArrayForm && data instanceof Array) {
	                //     this.isArrayForm = true;
	                // }
	                this.defaultValues = data;
	            }
	        }
	        // 把数据格式化成需要的格式
	        // 调用 setFieldsValue 时，如果多传了字段，会报 warning，所以这里只返回可用的表单项的值
	        // Warning: Cannot use `setFieldsValue` until you use `getFieldDecorator` or `getFieldProps` to register it.

	    }, {
	        key: '_encodeValues',
	        value: function _encodeValues(values) {
	            var result = {};
	            for (var i in values) {
	                var item = this.itemsCache[i];
	                if (item && item.display !== false && item.type !== 'button') {
	                    result[i] = values[i];
	                    // item 为时间类型的表单，需要格式化成moment类型
	                    if (['date-picker', 'month-picker', 'range-picker', 'time-picker'].indexOf(item.type) > -1) {
	                        if (!(result[i] instanceof _moment2.default)) {
	                            result[i] = _utils.Utils.moment(result[i], item.format);
	                        }
	                    }
	                    // 数字类型表单
	                    if (item.type === 'number') {
	                        result[i] = +result[i];
	                    }
	                }
	            }
	            return result;
	        }
	        // 把数据格式化成正常的格式

	    }, {
	        key: '_formatValues',
	        value: function _formatValues(values) {
	            var result = {};
	            for (var i in values) {
	                var item = this.itemsCache[i];
	                if (item && item.type !== 'button') {
	                    // datepicker等返回的是moment对象，返回前先格式化成字符串
	                    if (values[i] instanceof _moment2.default) {
	                        if (this.itemsCache[i] && this.itemsCache[i].format) {
	                            result[i] = values[i].format(this.itemsCache[i].format);
	                        }
	                    } else {
	                        result[i] = values[i];
	                    }
	                }
	            }
	            return result;
	        }

	        /* 外部调用函数 **********************************************************************/

	    }, {
	        key: 'getValues',
	        value: function getValues() {
	            var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            // 校验数据
	            if (validate && this.validateFields()) {
	                return;
	            }
	            var values = this.form.getFieldsValue();
	            values = this._formatValues(values);
	            if (this.config.beforeSubmit) {
	                values = this.config.beforeSubmit(values);
	            }
	            return values;
	        }
	    }, {
	        key: 'resetValues',
	        value: function resetValues(o) {
	            this.initValues(o);
	        }
	        // 清除表单。有别于重置

	    }, {
	        key: 'clearValues',
	        value: function clearValues() {
	            var values = {};
	            for (var i in this.itemsCache) {
	                values[i] = undefined;
	            }
	            values = this._encodeValues(values);
	            this.form.setFieldsValue(values);
	        }

	        /* 组件内部逻辑 **********************************************************************/

	        // 上传文件回调

	    }, {
	        key: 'normFile',
	        value: function normFile(e) {
	            if (Array.isArray(e)) {
	                return e;
	            }
	            return e && e.fileList;
	        }
	        // 校验数据

	    }, {
	        key: 'validateFields',
	        value: function validateFields() {
	            var haveErr = false;
	            this.form.validateFields(function (err, values) {
	                err && (haveErr = true);
	            });
	            // 校验子form
	            var childForms = this.formRef;
	            if (childForms) {
	                for (var i in childForms) {
	                    if (childForms[i].validateFields()) {
	                        haveErr = true;
	                    }
	                }
	            }
	            return haveErr;
	        }
	        // 根据传入的 formData 设置初始值
	        // TODO: 新数据传入，要重设全部字段？

	    }, {
	        key: 'initValues',
	        value: function initValues(values) {
	            values = values || this.defaultValues;
	            values = this._encodeValues(values);
	            if (values && !_utils.Utils.empty(values)) {
	                // 设置初始值前对传入的 formData 格式化
	                if (this.config.beforeSetValues) {
	                    values = this.config.beforeSetValues(values);
	                }
	                this.form.setFieldsValue(values);
	                // 如果设置了联动属性，均要触发onChange事件
	                for (var i in values) {
	                    var item = this.itemsCache[i];
	                    if (item && item.display !== false) {
	                        this.onChange(item, values[i]);
	                    }
	                }
	            } else {
	                this.form.resetFields();
	            }
	        }
	        // 实现联动功能

	    }, {
	        key: 'onChange',
	        value: function onChange(item, val, string) {
	            if (string) {
	                val = string;
	            } else if (val && val.target) {
	                if (val.target.value) {
	                    val = val.target.value;
	                } else if (val.target.checked) {
	                    val = val.target.checked;
	                }
	            }
	            // 实现联动
	            if (item.join) {
	                for (var i in item.join) {
	                    var target = this.itemsCache[i];
	                    if (target) {
	                        for (var j in item.join[i]) {
	                            var result = void 0;
	                            switch (j) {
	                                case 'value':
	                                    var oValue = this.itemRef[i] && this.itemRef[i].getValue();
	                                    result = item.join[i][j](val, oValue, target);
	                                    // this.form.setFields({[i]: {value: result, errors: []}});
	                                    this.form.setFieldsValue(_defineProperty({}, i, result));
	                                    break;
	                                case 'display':
	                                default:
	                                    result = item.join[i][j](val, target[j], target);
	                                    target[j] = result;
	                                    break;
	                            }
	                        }
	                    }
	                }
	                this.forceUpdate();
	            }
	        }
	        // 根据布局参数生成布局配置

	    }, {
	        key: 'getLayout',
	        value: function getLayout(layout) {
	            return {
	                labelCol: { span: layout.labelCol },
	                wrapperCol: { span: layout.wrapperCol }
	            };
	        }
	        // 生成单个表单项
	        // key 为表单name后缀，表单项循环时需要使用

	    }, {
	        key: 'getFormItem',
	        value: function getFormItem(oitem) {
	            var _this2 = this;

	            var okey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	            if (oitem.type === 'empty') {
	                return;
	            }
	            if (!oitem.name) {
	                // 这里只有第一次进入而且没name的时候才会进到这里，后面重新render回跳过这儿
	                oitem = this.__getConfigTpl(oitem);
	            }
	            if (!oitem.name) {
	                // button类型可以不写name，这里生成一个随机的
	                if (oitem.type === 'button') {
	                    oitem.name = _utils.Utils.uniqueId();
	                } else {
	                    return;
	                }
	            }
	            okey = okey !== null ? '-' + okey : '';
	            var name = oitem.name;
	            var key = oitem.name + okey;
	            // 把表单项额外存起来，方便后面各种联动的控制（需要改配置里的参数）
	            if (this.itemsCache[key]) {
	                oitem = this.itemsCache[key];
	            } else {
	                // items中的表单项可能使用了模板，需提前处理。因为部分属性form也需要使用
	                oitem = this.__getConfigTpl(oitem);
	                this.itemsCache[key] = oitem;
	            }
	            if (oitem.display === false) {
	                return;
	            }
	            var getFieldDecorator = this.form.getFieldDecorator;
	            var itemLayout = void 0;
	            // 每个表单的布局可以独立控制
	            if (oitem.layout) {
	                itemLayout = this.getLayout(oitem.layout);
	            } else {
	                itemLayout = this.config.layout.type === 'horizontal' ? this.formItemLayout : null;
	            }
	            var item = Object.assign({ rules: [{}] }, oitem);
	            // 兼容只定义一个rules的情况，即如下形式：rules: {required: true}
	            if (_utils.Utils.typeof(item.rules, 'object')) {
	                item.rules = [item.rules];
	            }
	            // 如果rules外单独设置了required属性，则以此值为准
	            if (item.required !== undefined) {
	                item.rules[0]['required'] = item.required;
	            }
	            // 过滤掉一些字段后，剩余的就是组件本身需要的参数
	            var itemProps = _utils.Utils.filter(item, ['label', 'default', 'help', 'extra', 'rules', 'join', 'regionConfig']);
	            // 额外配置的禁止更改的字段，设置disabled
	            if ((this.config.forbidden || []).indexOf(itemProps.name) > -1) {
	                itemProps.disabled = true;
	            }
	            // 可以统一控制输入框等的大小
	            if (this.config.size) {
	                itemProps.size = itemProps.size || this.config.size;
	            }
	            // 触发Change时实现联动功能, TODO
	            itemProps.onChange = this.onChange.bind(this, item);
	            // 存储ref
	            itemProps.ref = function (inst) {
	                _this2.itemRef[key] = inst;
	            };
	            var itemContent = void 0;
	            var otherOptions = {};
	            switch (item.type) {
	                case 'group':
	                case 'form':
	                    // 实现分组，本质上是form嵌套
	                    // parent属性用来传递一些父Form的函数
	                    itemProps.wrappedComponentRef = function (inst) {
	                        _this2.formRef[key] = inst;
	                    };
	                    delete itemProps.ref;
	                    itemLayout = { labelCol: { span: 0 }, wrapperCol: { span: 24 } };
	                    otherOptions = {
	                        valuePropName: 'formData'
	                    };
	                    item.default = item.default || {};
	                    item.rules[0]['type'] = item.rules[0]['type'] || 'object';
	                    break;
	                case 'input':
	                    // 输入框增加回车事件监听
	                    if (itemProps.onPressEnter === undefined) {
	                        itemProps.onPressEnter = this.handleSubmit.bind(this);
	                    }
	                    break;
	                case 'select':
	                    item.rules[0]['message'] = item.rules[0]['message'] || '\u8BF7\u9009\u62E9' + (item.label || '');
	                    // 默认选中第一个
	                    if (!item.default && item.defaultFirst) {
	                        item.default = _utils.Utils.getFirstOption(item.options);
	                    }
	                    // 限制使用clear按钮
	                    if (item.rules[0]['required']) {
	                        itemProps.allowClear = false;
	                    }
	                    break;
	                case 'number':
	                    // 数字输入框
	                    item.rules[0]['type'] = item.rules[0]['type'] || 'integer';
	                    // 验证前先把数据强制转换成数字
	                    item.rules[0]['transform'] = item.rules[0]['transform'] || function (v) {
	                        return v !== '' ? +v : '';
	                    };
	                    break;
	                case 'checkbox':
	                case 'switch':
	                    itemProps.content = itemProps.content || itemProps.placeholder;
	                    otherOptions = {
	                        valuePropName: 'checked'
	                    };
	                    item.rules[0]['type'] = item.rules[0]['type'] || 'boolean';
	                    break;
	                case 'checkbox-group':
	                    // 复选框组
	                    item.rules[0]['type'] = item.rules[0]['type'] || 'array';
	                    break;
	                case 'ueditor':
	                    // ueditor 输入框
	                    itemProps = { config: itemProps };
	                    otherOptions = {
	                        valuePropName: 'data'
	                    };
	                    break;
	                case 'cascader':
	                    // 级联选择
	                    itemProps = Object.assign({
	                        showSearch: true
	                    }, itemProps);
	                    item.rules[0]['type'] = item.rules[0]['type'] || 'array';
	                    item.rules[0]['message'] = item.rules[0]['message'] || '\u8BF7\u9009\u62E9' + (item.label || '');
	                    // 限制使用clear按钮
	                    if (item.rules[0]['required']) {
	                        itemProps.allowClear = false;
	                    }
	                    break;
	                case 'upload':
	                    // 文件上传
	                    var isDisabled = {};
	                    // 可根据limit属性限制上传文件个数
	                    var limit = itemProps.limit;
	                    if (limit) {
	                        var list = this.form.getFieldValue(key) || [];
	                        isDisabled = { disabled: list.length >= limit };
	                    }
	                    itemContent = _react2.default.createElement(
	                        Upload,
	                        _extends({}, itemProps, isDisabled),
	                        _react2.default.createElement(
	                            _antd.Button,
	                            null,
	                            _react2.default.createElement(_antd.Icon, { type: 'upload' }),
	                            ' ',
	                            itemProps.placeholder || '上传文件'
	                        )
	                    );
	                    otherOptions = {
	                        valuePropName: 'fileList',
	                        getValueFromEvent: this.normFile.bind(this)
	                    };
	                    break;
	                case 'date-picker':
	                case 'month-picker':
	                case 'range-picker':
	                case 'time-picker':
	                    // 日期时间选择
	                    item.rules[0]['type'] = item.rules[0]['type'] || 'object';
	                    if (item.default) {
	                        item.default = _utils.Utils.moment(item.default);
	                    }
	                    // 限制使用clear按钮
	                    if (item.rules[0]['required']) {
	                        itemProps.allowClear = false;
	                    }
	                    break;
	                case 'button':
	                    // 带有各种功能的按钮
	                    itemProps.content = itemProps.content || item.label;
	                    return this.getButtonItem(itemProps, okey);
	                    break;
	                default:
	                    break;
	            }
	            // 通用的默认错误提示信息
	            if (item.rules[0]['required']) {
	                item.rules[0]['message'] = item.rules[0]['message'] || (item.label || '') + '\u4E0D\u80FD\u4E3A\u7A7A';
	            }
	            // 保存默认值，以form渲染完成后执行initValues
	            if (item.default) {
	                this.defaultValues[item.name] = item.default;
	            }
	            var fieldProps = {
	                key: key,
	                label: !item.help ? item.label : _react2.default.createElement(
	                    'span',
	                    null,
	                    item.label,
	                    '\xA0',
	                    _react2.default.createElement(
	                        _antd.Tooltip,
	                        { title: item.help },
	                        _react2.default.createElement(_antd.Icon, { type: 'question-circle-o' })
	                    )
	                ),
	                extra: item.extra
	            };
	            return _react2.default.createElement(
	                _antd.Form.Item,
	                _extends({}, fieldProps, itemLayout),
	                getFieldDecorator(key, Object.assign({
	                    initialValue: item.default,
	                    rules: item.rules
	                }, otherOptions, item.regionConfig))(
	                // 作为子组件解析
	                this.__analysis(itemProps))
	            );
	        }
	    }, {
	        key: 'handleSubmit',
	        value: function handleSubmit(e, callback) {
	            var _this3 = this;

	            // 否则阻止提交按钮默认事件
	            e && e.preventDefault();
	            // 如果没有传入callback且没有props.onSubmit回调函数，则submit没有被捕获，不阻止提交（方便后面增加 action 扩展提交功能）
	            if (!callback && !this.__props.onSubmit) {
	                return true;
	            }
	            var values = this.getValues();
	            if (values) {
	                var submit = callback || this.__props.onSubmit;
	                var result = submit(values, this);
	                // 如果回调函数返回了promise实例，则展示按钮上的loading效果，防止多次点击
	                if (result instanceof Promise) {
	                    this.setState({ loading: true });
	                    result.then(function (resolve) {
	                        return _this3.setState({ loading: false });
	                    }).catch(function (reject) {
	                        return _this3.setState({ loading: false });
	                    });
	                }
	            }
	        }
	        // submit按钮不进行处理，转移到 handleSubmit 函数上处理，在 handleSubmit 函数上判断是否需要阻止提交按钮默认事件

	    }, {
	        key: 'submitClick',
	        value: function submitClick(callback, e) {
	            this.handleSubmit(e, callback);
	        }
	    }, {
	        key: 'resetClick',
	        value: function resetClick(callback) {
	            this.form.resetFields();
	            callback && callback(this);
	        }
	    }, {
	        key: 'clearClick',
	        value: function clearClick(callback) {
	            this.clearValues();
	            callback && callback(this);
	        }
	        // 自定义按钮点击事件，返回表单数据

	    }, {
	        key: 'customClick',
	        value: function customClick(callback) {
	            var values = this.getValues(false);
	            callback && callback(values, this);
	        }
	        // 处理数据

	    }, {
	        key: 'handleValues',
	        value: function handleValues() {}
	        // 新增按钮

	    }, {
	        key: 'addClick',
	        value: function addClick(callback) {
	            var form = this.form;
	            var keys = form.getFieldValue('__keys');
	            var nextKeys = keys.concat(++uuid);
	            form.setFieldsValue({ '__keys': nextKeys });

	            // 处理已有数据
	            this.handleValues();

	            callback && callback(this);
	        }
	        // 复制新增

	    }, {
	        key: 'copyClick',
	        value: function copyClick(callback) {
	            callback && callback(this);
	        }
	        // 删除

	    }, {
	        key: 'deleteClick',
	        value: function deleteClick(callback, key) {
	            // if (this.props.parent && !this.isArrayForm) {
	            //     this.props.parent.deleteClick(callback, key);
	            //     return;
	            // }

	            var form = this.form;
	            var keys = form.getFieldValue('__keys');
	            if (keys.length === 1) {
	                return;
	            }
	            form.setFieldsValue({ '__keys': keys.filter(function (k) {
	                    return k !== +key;
	                }) });

	            // delete this.itemsCache
	            for (var i in this.itemsCache) {
	                if (_utils.Utils.isLast('-' + key, i)) {
	                    delete this.itemsCache[i];
	                }
	            }
	            // delete data

	            callback && callback(this, key);
	        }
	        // 其他

	    }, {
	        key: 'othersClick',
	        value: function othersClick(callback) {
	            callback && callback(this);
	        }
	        // 获取表单项中的 button 类型的按钮

	    }, {
	        key: 'getButtonItem',
	        value: function getButtonItem(item, key) {
	            var handleClick = void 0;
	            var icon = void 0;
	            switch (item.action) {
	                // case 'add':
	                //     handleClick = this.addClick.bind(this, item.onClick)
	                //     break;
	                // case 'copy':
	                //     handleClick = this.copyClick.bind(this, item.onClick)
	                //     break;
	                // case 'delete':
	                //     handleClick = this.deleteClick.bind(this, item.onClick, key)
	                //     break;
	                case 'clear':
	                    icon = 'delete';
	                    handleClick = this.clearClick.bind(this, item.onClick, key);
	                    break;
	                case 'reset':
	                    icon = 'reload';
	                    handleClick = this.resetClick.bind(this, item.onClick, key);
	                    break;
	                case 'submit':
	                    icon = 'search';
	                    handleClick = this.handleSubmit.bind(this, null, item.onClick, key);
	                    break;
	                default:
	                    handleClick = this.othersClick.bind(this, item.onClick);
	                    break;
	            }
	            var props = Object.assign({
	                key: item.name,
	                type: item.mode,
	                icon: icon,
	                style: { marginLeft: '8px' },
	                onClick: handleClick
	            }, item);
	            return this.__analysis(props);
	        }
	        // 处理表单组

	    }, {
	        key: 'generateFormItemsGroup',
	        value: function generateFormItemsGroup(gitem, key) {
	            if (!gitem.length) {
	                return;
	            }
	            var result = [];
	            // this.config.layout.column;
	            var layout = { span: 24 / gitem.length };
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = gitem[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var item = _step.value;

	                    var formItem = void 0;
	                    if (item instanceof Array) {
	                        formItem = _react2.default.createElement(
	                            _antd.Row,
	                            null,
	                            this.generateFormItemsGroup(item, key)
	                        );
	                    } else {
	                        formItem = this.getFormItem(item, key);
	                        item.type === 'button' && (layout = null);
	                    }
	                    result.push(!!layout ? _react2.default.createElement(
	                        _antd.Col,
	                        _extends({ key: item.name || _utils.Utils.hash(item) }, layout),
	                        formItem
	                    ) : formItem);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return result;
	        }
	        // 生成表单项列表

	    }, {
	        key: 'generateFormItems',
	        value: function generateFormItems(items, key) {
	            var result = [];
	            var index = 0;
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var item = _step2.value;

	                    if (item instanceof Array) {
	                        result.push(_react2.default.createElement(
	                            _antd.Row,
	                            { key: 'items-' + index },
	                            this.generateFormItemsGroup(item, key)
	                        ));
	                    } else {
	                        result.push(this.getFormItem(item, key));
	                    }
	                    index++;
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return result;
	        }
	        // 生成表单内容

	    }, {
	        key: 'generateItems',
	        value: function generateItems() {
	            var _this4 = this;

	            var items = this.config.items;
	            if (this.config.layout.column) {
	                var merge = [];
	                items.map(function (v, i) {
	                    var index = Math.floor(i / _this4.config.layout.column);
	                    merge[index] = merge[index] || [];
	                    merge[index].push(v);
	                });
	                items = merge;
	            }
	            return this.generateFormItems(items);
	            // const {getFieldDecorator, getFieldValue} = this.form;
	            // // 创建一个隐含的表单项来存储需要展示几个form
	            // getFieldDecorator('__keys', { initialValue: [0] });
	            // const keys = getFieldValue('__keys');
	            // let items = this.config.items;
	            // let result;
	            // if (keys.length > 1) {
	            //     result = keys.map(v=>{
	            //         return this.generateFormItems(items, v)
	            //     });
	            // } else {
	            //     result = this.generateFormItems(items)
	            // }
	            // return result;
	        }
	        // 解析 Button 的配置，格式化成统一格式

	    }, {
	        key: 'analysisButtonConfig',
	        value: function analysisButtonConfig() {
	            var buttonsCfg = this.config.buttons;
	            if (!buttonsCfg) {
	                return;
	            }
	            var formatCfg = {
	                layout: {
	                    type: 'center'
	                }
	            };
	            if (buttonsCfg instanceof Array) {
	                formatCfg.items = buttonsCfg;
	            } else {
	                if (!!buttonsCfg.layout) {
	                    if (typeof buttonsCfg.layout === 'string') {
	                        formatCfg.layout.type = buttonsCfg.layout;
	                    } else {
	                        formatCfg.layout = buttonsCfg.layout;
	                    }
	                }
	                formatCfg.items = buttonsCfg.items;
	            }
	            return formatCfg;
	        }
	        // 生成按钮

	    }, {
	        key: 'generateButton',
	        value: function generateButton() {
	            var _this5 = this;

	            var buttonsCfg = this.analysisButtonConfig();
	            if (!buttonsCfg) {
	                return;
	            }
	            return _react2.default.createElement(
	                _antd.Row,
	                { type: 'flex', justify: buttonsCfg.layout.type },
	                _react2.default.createElement(
	                    _antd.Col,
	                    buttonsCfg.layout,
	                    _react2.default.createElement(
	                        _antd.Form.Item,
	                        { key: 'buttons' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'form-buttons' },
	                            buttonsCfg.items.map(function (item) {
	                                switch (item.action) {
	                                    case 'submit':
	                                        if (item.icon === undefined) {
	                                            item.icon = 'search';
	                                        }
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: 'submit' }, item, {
	                                                loading: _this5.state.loading,
	                                                onClick: _this5.submitClick.bind(_this5, item.onClick) }),
	                                            item.value
	                                        );
	                                        break;
	                                    case 'reset':
	                                        if (item.icon === undefined) {
	                                            item.icon = 'reload';
	                                        }
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: 'reset' }, item, {
	                                                onClick: _this5.resetClick.bind(_this5, item.onClick) }),
	                                            item.value
	                                        );
	                                        break;
	                                    case 'clear':
	                                        if (item.icon === undefined) {
	                                            item.icon = 'delete';
	                                        }
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: 'clear' }, item, {
	                                                onClick: _this5.clearClick.bind(_this5, item.onClick) }),
	                                            item.value
	                                        );
	                                        break;
	                                    default:
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: item.value }, item, {
	                                                onClick: _this5.customClick.bind(_this5, item.onClick) }),
	                                            item.value
	                                        );
	                                        break;
	                                }
	                            })
	                        )
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var className = 'uf-form ';
	            if (this.config.layout.type === 'inline') {
	                className += 'uf-form-inline ';
	            }
	            if (this.config.size) {
	                className += 'uf-form-' + this.config.size + ' ';
	            }
	            return _react2.default.createElement(
	                'div',
	                { className: className + (this.config.className || ''), style: this.__props.style },
	                this.config.header && (
	                // header 可以是字符串，也可以是一个组件配置
	                _utils.Utils.typeof(this.config.header, 'string') ? _react2.default.createElement(
	                    'div',
	                    { className: 'form-header' },
	                    _react2.default.createElement(
	                        'h5',
	                        null,
	                        this.config.header
	                    ),
	                    _react2.default.createElement('hr', null)
	                ) : _react2.default.createElement(
	                    'div',
	                    { className: 'form-header' },
	                    this.__analysis(this.config.header)
	                )),
	                _react2.default.createElement(
	                    _antd.Form,
	                    { layout: this.config.layout.type, onSubmit: this.handleSubmit.bind(this) },
	                    this.generateItems(),
	                    this.generateButton()
	                )
	            );
	        }
	    }]);

	    return OriginForm;
	}(_base.BaseComponent);

	var ReactForm = _antd.Form.create({
	    onValuesChange: function onValuesChange(props, values) {
	        // Should provide an event to pass values to Form.
	        if (_typeof(props.formData) === 'object') {
	            var key = Object.keys(values)[0];
	            if (!_utils.Utils.equals(props.formData[key], values[key])) {
	                props.onChange && props.onChange(Object.assign({}, props.formData, values));
	            }
	        } else {
	            props.onChange && props.onChange(values);
	        }
	    }
	}
	// mapPropsToFields(props) {
	//     return props;
	// }
	)(OriginForm);

	// Update at 2017/10/26，使组件类型统一，在组件外增加一层壳子
	// Form.create生成的组件是非BaseComponent类型的，需要外面再包一层壳子。
	// 注意壳子只是用来声明组件类型的，不需要对参数进行任何处理，所以无需调用 __init() 函数

	var NewForm = function (_BaseComponent2) {
	    _inherits(NewForm, _BaseComponent2);

	    function NewForm() {
	        _classCallCheck(this, NewForm);

	        return _possibleConstructorReturn(this, (NewForm.__proto__ || Object.getPrototypeOf(NewForm)).apply(this, arguments));
	    }

	    _createClass(NewForm, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(ReactForm, this.props);
	        }
	    }]);

	    return NewForm;
	}(_base.BaseComponent);

	exports.default = NewForm;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(130);

	module.exports = __webpack_require__(132).default;

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 131 */,
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _cache = __webpack_require__(94);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Ueditor封装
	重写了上传图片组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	// import {BaseComponent} from 'src/base';


	var Ueditor = function (_React$PureComponent) {
	    _inherits(Ueditor, _React$PureComponent);

	    function Ueditor(props) {
	        _classCallCheck(this, Ueditor);

	        var _this = _possibleConstructorReturn(this, (Ueditor.__proto__ || Object.getPrototypeOf(Ueditor)).call(this, props));

	        _this.name = props.name;
	        // 保证每次实例化都有一个唯一的id
	        _this.ueditorId = (props.name || 'create_editor') + '_' + Date.now();
	        _this.data = props.data;
	        return _this;
	    }

	    _createClass(Ueditor, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // Should be a controlled component.
	            if ('data' in nextProps) {
	                if (this.data !== nextProps.data) {
	                    this.data = nextProps.data;
	                    this.ueSetData(nextProps.data);
	                }
	            }
	        }
	    }, {
	        key: 'ueSetData',
	        value: function ueSetData(value) {
	            var _this2 = this;

	            // 临时解决方案。ueditor内不是用iframe实现，iframe加载需要时间，所以直接调用setContent会报错
	            // 这里重试5次，间隔300ms
	            var count = 1;
	            var setData = function setData() {
	                if (_this2.ue.body || count > 5) {
	                    _this2.ue.setContent(value);
	                } else {
	                    setTimeout(setData, 300);
	                }
	                count++;
	            };
	            setData();
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this3 = this;

	            // 初始化
	            var config = {
	                autoHeightEnabled: true,
	                autoFloatEnabled: true,
	                elementPathEnabled: false,
	                wordCount: false,
	                fontsize: [12, 14, 16, 18, 20, 24],
	                toolbars: [['source', '|', 'undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikethrough', '|', 'paragraph', 'fontfamily', 'fontsize', '|', 'superscript', 'subscript', '|', 'forecolor', 'backcolor', '|', 'removeformat', '|', 'insertorderedlist', 'insertunorderedlist', 'inserttable', '|', 'selectall', 'cleardoc', '|', 'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'link', 'unlink', '|', 'map', '|', 'horizontal', 'print', 'preview', 'fullscreen', 'drafts', 'formula', '|', 'cusUpload']]
	            };
	            // 简版，适合给普通用户使用
	            if (this.props.simple) {
	                config['toolbars'] = [['undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikethrough', '|', 'fontsize', 'forecolor', 'removeformat', '|', 'insertorderedlist', 'insertunorderedlist', 'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'link', 'fullscreen', 'cusUpload']];
	            }
	            Object.assign(config, this.props);
	            this.ue = UE.getEditor(this.ueditorId, config);
	            // 同步数据
	            this.ue.addListener('contentChange', function () {
	                clearTimeout(_this3.timer);
	                _this3.timer = setTimeout(function () {
	                    var newValue = _this3.ue.getContent();
	                    _this3.triggerChange(newValue);
	                }, 150);
	            });
	            this._transmitComponent();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            // 需要销毁，否则再次渲染本组件，ueditor渲染不出来
	            this.ue.destroy();
	            this._unsetTransmitComponent();
	        }
	        // 共享组件

	    }, {
	        key: '_transmitComponent',
	        value: function _transmitComponent() {
	            if (!!this.name) {
	                _cache.ComponentsCache.set(this.name, this.ue);
	            }
	        }
	        // 解除共享

	    }, {
	        key: '_unsetTransmitComponent',
	        value: function _unsetTransmitComponent() {
	            if (!!this.name) {
	                _cache.ComponentsCache.del(this.name);
	            }
	        }
	    }, {
	        key: 'triggerChange',
	        value: function triggerChange(changedValue) {
	            if (this.data !== changedValue) {
	                this.data = changedValue;
	                // Should provide an event to pass value to Form.
	                this.props.onChange && this.props.onChange(changedValue);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var style = Object.assign({ width: '100%', height: '220px', lineHeight: 'initial' }, this.props.style);
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement('script', { type: 'text/plain', id: this.ueditorId, style: style })
	            );
	        }
	    }]);

	    return Ueditor;
	}(_react2.default.PureComponent);

	exports.default = Ueditor;

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 134 */,
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(136).default;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(4);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	__webpack_require__(137);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file ReactModal 适用于弹出层快速提交表单
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	


	var NewModal = function (_BaseComponent) {
	    _inherits(NewModal, _BaseComponent);

	    function NewModal(props) {
	        _classCallCheck(this, NewModal);

	        // 开放给用户使用的 Api，需处理下
	        var _this = _possibleConstructorReturn(this, (NewModal.__proto__ || Object.getPrototypeOf(NewModal)).call(this, props));

	        _this._openApi.push('show', 'close');
	        // 增加一些默认的事件处理函数
	        _this.__props = Object.assign({
	            onCancel: _this._defaultCancelHandler.bind(_this),
	            // 提交数据使用 BaseCompsonent 的 action 系列参数实现
	            actionType: 'ajax',
	            actionTrigger: 'onSubmit'
	        }, _this.__props);
	        _this.__init();
	        return _this;
	    }

	    _createClass(NewModal, [{
	        key: '__init',
	        value: function __init() {
	            var _get2,
	                _this2 = this;

	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            (_get2 = _get(NewModal.prototype.__proto__ || Object.getPrototypeOf(NewModal.prototype), '__init', this)).call.apply(_get2, [this].concat(params));
	            // 需额外处理的属性
	            // footer的按钮点击时增加一些默认处理逻辑
	            if (this.__props.footer) {
	                var buttons = this.__props.footer;
	                if (_utils.Utils.typeof(buttons, 'object')) {
	                    buttons = [buttons];
	                }
	                buttons = buttons.map(function (item) {
	                    return _this2._handleButton(item);
	                });
	                this.__props.footerContent = this.__analysis(buttons);
	            }
	            // 如果有form属性，说明是form弹框，做额外处理
	            if (this.__props.form) {
	                // form配置
	                var formConf = Object.assign({
	                    type: 'form',
	                    wrappedComponentRef: function wrappedComponentRef(inst) {
	                        _this2.formRef = inst;
	                    }
	                }, this.__props.form);
	                // 兼容 formData 置于不同位置
	                formConf.formData = formConf.formData || this.__props.params;
	                // 可以写其他内容在content中，置于form之上
	                this.__props.formContent = this.__analysis(formConf);
	            }
	        }

	        /********** 外部调用函数 *************************************************/
	        // 展示弹框

	    }, {
	        key: 'show',
	        value: function show(data) {
	            var _this3 = this;

	            var newProps = { visible: true };
	            // 保存传入的值
	            if (data) {
	                newProps.params = data;
	            }
	            // 重新执行 message 函数
	            if (_utils.Utils.typeof(this.__props.message, 'function')) {
	                newProps.messageContent = this.__analysis(this.__props.message(data));
	            }
	            this.__setProps(newProps, function () {
	                // 如果是form弹框，填充form内容为data或重置
	                _this3.formRef && _this3.formRef.resetValues(data);
	            });
	        }
	        // 关闭弹框

	    }, {
	        key: 'close',
	        value: function close() {
	            var _this4 = this;

	            this.__setProps({ visible: false }, function () {
	                // 如果是form弹框，重置form内容
	                _this4.formRef && _this4.formRef.resetValues();
	            });
	        }

	        /********** 内部调用函数 *************************************************/
	        // 默认点击取消时的处理逻辑

	    }, {
	        key: '_defaultCancelHandler',
	        value: function _defaultCancelHandler() {
	            this.close();
	        }
	        // 获取参数函数，可能会在新子组件中重写

	    }, {
	        key: '_getParams',
	        value: function _getParams() {
	            // 如果是form弹框，返回form内容
	            if (this.formRef) {
	                var values = this.formRef.getValues();
	                if (values) {
	                    return Object.assign({}, this.__props.params, values);
	                }
	                // 如果验证失败，返回null，阻止提交数据
	                return null;
	                // 否则返回params
	            } else {
	                return this.__props.params || {};
	            }
	        }
	        // onSubmit 以此函数为入口

	    }, {
	        key: '_onSubmit',
	        value: function _onSubmit() {
	            var _props,
	                _this5 = this;

	            var params = this._getParams();
	            if (!params) {
	                return;
	            }
	            // 由于复用 BaseComponent 通用发送数据逻辑，从Form中获取到的数据直接放到actionParams中
	            this.__filtered.actionParams = params;

	            for (var _len2 = arguments.length, op = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                op[_key2] = arguments[_key2];
	            }

	            var result = this.__props.onSubmit && (_props = this.__props).onSubmit.apply(_props, [params].concat(op));
	            // 如果回调函数返回了promise实例，则展示按钮上的loading效果，防止多次点击
	            if (result instanceof Promise) {
	                this.__setProps({ confirmLoading: true });
	            }
	            // 不管是否为Promise，成功与失败逻辑如下
	            this.__compatePromise(result, function (success) {
	                var finish = _this5._onSuccess(result);
	                _this5.__compatePromise(finish, function (success) {
	                    _this5.__setProps({ confirmLoading: false });
	                    _this5.close();
	                });
	            }, function (error) {
	                _this5.__setProps({ confirmLoading: false });
	            });
	        }
	    }, {
	        key: '_onSuccess',
	        value: function _onSuccess() {
	            var _props2;

	            return this.__props.onSuccess && (_props2 = this.__props).onSuccess.apply(_props2, arguments);
	        }
	        // 处理 footer 按钮

	    }, {
	        key: '_handleButton',
	        value: function _handleButton(item) {
	            var result = _utils.Utils.copy(item);
	            delete result.action;
	            switch (item.action) {
	                case 'submit':
	                    // action === 'submit' 的按钮和默认的确认按钮等价（onClick === onSubmit）
	                    this.__props.onSubmit = item.onClick;
	                    result.onClick = this._onSubmit.bind(this);
	                    break;
	                case 'cancel':
	                    // action === 'cancel' 的按钮和默认的取消按钮等价（onClick === onCancel)
	                    if (result.onClick) {
	                        this.__props.onCancel = item.onClick;
	                    } else {
	                        result.onClick = this.__props.onCancel;
	                    }
	                    break;
	                default:
	                    break;
	            }
	            return result;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // footer是在组件中解析的，解析后放置在footerContent中
	            var selfProps = {
	                onOk: this._onSubmit.bind(this)
	            };
	            if (this.__props.footerContent) {
	                selfProps.footer = this.__props.footerContent;
	            }
	            // Modal中展示的内容书序是：message > content > form
	            return _react2.default.createElement(
	                _antd.Modal,
	                _extends({}, _utils.Utils.filter(this.__props, 'children'), selfProps),
	                this.__props.messageContent,
	                this.__props.children,
	                this.__props.formContent
	            );
	        }
	    }]);

	    return NewModal;
	}(_base.BaseComponent);

	/**** Modal静态类调用函数 *************************************************************************/

	// 可随时随地用来创建新的弹框，且创建完成后返回destroy函数用于销毁弹框


	NewModal.create = function (config) {
	    config.type = 'modal';
	    config.visible = config.visible || true;
	    // 增加关闭弹窗删除dom节点逻辑
	    return _tools2.default._append(config, null, 'onCancel');
	};

	/**** Modal自带快捷调用函数 *************************************************************************/

	// 统一处理config（某些属性需要二次解析）
	function showMessage(type, config) {
	    var _arr = ['title', 'content'];

	    for (var _i = 0; _i < _arr.length; _i++) {
	        var v = _arr[_i];
	        if (config[v] && !_utils.Utils.typeof(config[v], 'string')) {
	            config[v] = _tools2.default.render(config[v]);
	        }
	    }
	    return _antd.Modal[type](config);
	}

	NewModal.info = showMessage.bind(null, 'info');
	NewModal.success = showMessage.bind(null, 'success');
	NewModal.error = showMessage.bind(null, 'error');
	NewModal.warning = showMessage.bind(null, 'warning');
	NewModal.confirm = showMessage.bind(null, 'confirm');

	exports.default = NewModal;

/***/ }),
/* 137 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 138 */,
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(140).default;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(4);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _export = __webpack_require__(113);

	var _export2 = _interopRequireDefault(_export);

	var _ReactInput = __webpack_require__(141);

	var _ReactInput2 = _interopRequireDefault(_ReactInput);

	var _ReactModal = __webpack_require__(142);

	var _ReactModal2 = _interopRequireDefault(_ReactModal);

	var _TrRow = __webpack_require__(146);

	var _TrRow2 = _interopRequireDefault(_TrRow);

	var _ThRow = __webpack_require__(147);

	var _ThRow2 = _interopRequireDefault(_ThRow);

	var _Confirm = __webpack_require__(149);

	var _Confirm2 = _interopRequireDefault(_Confirm);

	__webpack_require__(150);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 简易表格组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author luyongfang@baidu.com
	
	/* eslint-disable fecs-camelcase */


	var pagerInfo = function pagerInfo(total) {
	    return _react2.default.createElement(
	        'span',
	        null,
	        '共' + total + '条数据'
	    );
	};

	var Table = function (_BaseComponent) {
	    _inherits(Table, _BaseComponent);

	    // 以下是函数定义
	    function Table(props) {
	        _classCallCheck(this, Table);

	        var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

	        _this.__init();
	        _this.initTable();
	        return _this;
	    }

	    // 适用于同一个Table可能展示不同的数据
	    // 比如服务器-网络 他们的Tags是不同的，但第一次调用constructor后就没有地方更新了


	    _createClass(Table, [{
	        key: 'initTable',
	        value: function initTable(nextProps) {
	            var objProps = nextProps ? nextProps : this.props;
	            var tableCfg = objProps;
	            var cacheSize = tableCfg.name ? localStorage.getItem(tableCfg.name) : null;

	            // 把所有配置放到this上，方便后续使用
	            this.tableCfg = tableCfg || {};
	            this.cfg = Object.assign({}, {
	                checkBox: false,
	                tableClass: 'table table-striped'
	            }, tableCfg.cfg, true);
	            this.pager = tableCfg.pager ? Object.assign({}, {
	                pageSize: cacheSize || 15,
	                pageType: 'client'
	            }, tableCfg.pager, true) : false;
	            this.pager.showCount && (this.pager.showTotal = pagerInfo);
	            this.display = tableCfg.display || {};
	            this.key = tableCfg.dataIndex || 'id';
	            // 显示哪些字段
	            !nextProps && (this.showTags = tableCfg.tags);

	            // 存储当前tablet选中的数据,key为id, value为行数据
	            this.selectedData = {};
	            // 把content数组转换成根据id一一映射的map
	            this.contentMap = {};
	            // 行选中状态
	            this.rowState = {};
	            // 存储当前编辑的table数据
	            this.editData = {};
	            // 仅针对props传递content数据时才使用,为了判断再接收到新的props时是否进行更新的判断,url方式不适用
	            this.tableDatas = [];
	            var arrData = [];
	            var data = [];
	            var content = [];
	            if (!tableCfg.url) {
	                content = objProps.data ? objProps.data : [];
	                this.generateRowId(content);
	                if (this.pager) {
	                    data = content.slice(0, this.pager.pageSize);
	                } else {
	                    data = content;
	                }
	                arrData = _utils.Utils.clone(content);
	            }
	            this.tableDatas = _utils.Utils.clone(arrData);
	            var retract = false;
	            var display = tableCfg.display;
	            display && display.retract && (retract = display.retract);
	            var state = {
	                // 所有请求回来的数据或者传递过来的数据
	                content: arrData,
	                // 一共多少条数据
	                count: arrData.length,
	                // 一共多少条数据 - 过滤时保存原所有数据总数
	                allCount: arrData.length,
	                // 当前页的数据
	                currPageData: _utils.Utils.clone(data),
	                // 当前页
	                currentPage: 1,
	                // 使用PureComponent，用于必要时强制刷新组件
	                // flag: 0,
	                // 当前是否处在filter的状态
	                filter: false,
	                // 是否选择全部行
	                checkAll: false,
	                // loading的spin提示及提示信息
	                spinning: false,
	                spinTip: '',
	                // table表头右侧设置按钮的下拉框是否展示
	                showTableMenu: false,
	                // 是否允许表格编辑
	                editTable: false,
	                // 全屏展示与否
	                fullScreen: false,
	                // 是否展示全部字段
	                showAllTags: false,
	                // 是否收起Table
	                retract: retract
	            };
	            // 请求序号，当执行新请求时，之前的未返回数据的请求则废弃，通过index值是否相等判断
	            this.requerstIndex = 0;
	            // update at 2016/11/03 by liuzechun@baidu.com
	            if (!!nextProps) {
	                this.setState(state);
	                // 重置Table后要手动触发componentDidMount函数中的逻辑来加载数据
	                this.componentDidMount();
	            } else {
	                this.state = state;
	            }
	            // 导出数据的配置
	            this.exportConfig = this.getExportConfig();
	            // return this.state;
	        }
	    }, {
	        key: 'forceRefresh',
	        value: function forceRefresh() {
	            // this.setState({flag: Date.now()});
	            this.forceUpdate();
	        }
	        // 刷新数据时调用 - 包括直接传入数据和通过url获取数据
	        // 数据变更时都需要调用此函数，以刷新导出组件的数据或查询条件

	    }, {
	        key: 'onRefreshData',
	        value: function onRefreshData() {
	            this.clearSelect();
	            // 刷新导出组件配置
	            this.exportConfig = this.getExportConfig();
	            this.defaultCheckAll();
	            this.forceRefresh();
	        }
	        // 默认全部选中

	    }, {
	        key: 'defaultCheckAll',
	        value: function defaultCheckAll() {
	            this.cfg.checkAll && this.cfg.checkBox && this.checkAll(true);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this2 = this;

	            // 就算props没有改变，当父组件重新渲染时，也会进这里，所以需要在这里判断是否需要重新渲染组件
	            // 如果table的tableCfg是动态的则需要重新设置tableCfg和showTags
	            if (!_utils.Utils.equals(this.props, nextProps)) {
	                this.initTable(nextProps);
	            }
	            // 针对传数据进来的方式
	            var currentTableDatas = _utils.Utils.clone(nextProps.data);
	            if (currentTableDatas && !_utils.Utils.equals(currentTableDatas, this.tableDatas)) {
	                var content = this.generateRowId(nextProps.data);
	                var data = void 0;
	                if (this.pager) {
	                    data = content.slice(0, this.pager.pageSize);
	                } else {
	                    data = content;
	                }
	                this.setState({
	                    content: _utils.Utils.clone(content),
	                    currPageData: _utils.Utils.clone(data),
	                    count: content.length,
	                    allCount: content.length,
	                    checkAll: false
	                }, function () {
	                    // 重置分页
	                    _this2.setState({ currentPage: 1 });
	                    _this2.onRefreshData();
	                });
	                this.tableDatas = _utils.Utils.clone(currentTableDatas);
	            }
	            // 针对通过url向后台请求数据时，当params变化时才会刷新
	            if (this.tableCfg.url) {
	                if (!_utils.Utils.equals(this.props.params, nextProps.params)) {
	                    // 清空过滤控件
	                    this.refs.filter && this.refs.filter.setVal('');
	                    this.getData(null, null, nextProps);
	                }
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.tableCfg.url) {
	                this.getData(null, this.props.params);
	            } else {
	                this.defaultCheckAll();
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.clearSelect();
	        }
	        // 获取要下载导出数据的配置

	    }, {
	        key: 'getExportConfig',
	        value: function getExportConfig() {
	            var tableCfg = this.tableCfg;
	            var objTags = this.showTags;
	            // let objHeaders = {};
	            var objHeaders = [];
	            // let arrKeys = [];
	            // let typeDef = Object.prototype.toString;
	            for (var key in objTags) {
	                if (key === '_operation' || key === 'operation') {
	                    continue;
	                }
	                objHeaders.push({
	                    key: key,
	                    title: _utils.Utils.typeof(objTags[key], 'string') ? objTags[key] : objTags[key]['title']
	                });
	            }
	            /**
	             * 1. 没有url就是直接传递了content的数据
	             * 2. 有url但是是client分页-Export需要传递data,默认是client分页
	             * 3. 有url但是是server端分页-Export需要传递url配置
	             */
	            if (!tableCfg.url || this.pager.pageType !== 'server') {
	                return {
	                    headers: objHeaders,
	                    data: this.state && this.state.content ? this.state.content : this.props.data || [],
	                    total: this.state.count
	                };
	            }
	            return {
	                headers: objHeaders,
	                source: tableCfg.url,
	                params: this.props.params ? this.props.params : {},
	                total: this.state.count
	            };
	        }
	        // 拖动表头更改列排序

	    }, {
	        key: 'changeColumnOrder',
	        value: function changeColumnOrder(srcField, dstField) {
	            var arrKeys = Object.keys(this.tableCfg.tags);
	            var srcIndex = arrKeys.indexOf(srcField);
	            var dstIndex = arrKeys.indexOf(dstField);
	            var arrNewKeys = [];
	            var len = arrKeys.length;
	            if (srcIndex < dstIndex) {
	                arrNewKeys = arrKeys.slice(0, srcIndex).concat(arrKeys.slice(srcIndex + 1, dstIndex + 1)).concat(arrKeys[srcIndex]).concat(arrKeys.slice(dstIndex + 1, len));
	            } else {
	                arrNewKeys = arrKeys.slice(0, dstIndex).concat(arrKeys[srcIndex]).concat(arrKeys.slice(dstIndex, srcIndex)).concat(arrKeys.slice(srcIndex + 1, len));
	            }
	            // 根据最新的字段顺序进行调整
	            var newTags = {};
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arrNewKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    newTags[v] = this.tableCfg.tags[v];
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            this.showTags = newTags;
	            this.tableCfg['tags'] = newTags;
	            this.forceRefresh();
	        }
	        // 设置显示字段
	        // @param {Object}  oriTags 初始的tags配置
	        // @param {Object} showTags 要展示的tags，回传的参数

	    }, {
	        key: 'setShowTags',
	        value: function setShowTags(oriTags, showTags) {
	            var typeDef = Object.prototype.toString;
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = Object.keys(oriTags)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var val = _step2.value;

	                    if (showTags[val]) {
	                        oriTags[val] && typeDef.call(oriTags[val]) === '[object Object]' && (oriTags[val]['display'] = true);
	                    } else if (typeDef.call(oriTags[val]) === '[object String]') {
	                        var title = oriTags[val];
	                        oriTags[val]['title'] = title;
	                        oriTags[val]['display'] = false;
	                    } else {
	                        oriTags[val]['display'] = false;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            this.showTags = oriTags;
	            this.refs.switchmodal.setState({ visible: false });
	            this.setState({ switchTags: false });
	            this.forceRefresh();
	        }

	        // 对于后端数据中没有id的生成随机的id用于存储选择了哪些数据
	        // @param {Array} arrDatas 如果返回的行数据中没有id，自动给加上唯一的ID，用于设置选择了哪些数据

	    }, {
	        key: 'generateRowId',
	        value: function generateRowId(arrDatas) {
	            var i = 0;
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = arrDatas[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var obj = _step3.value;

	                    if (!obj[this.key] && obj[this.key] !== 0) {
	                        obj[this.key] = _utils.Utils.uniqueId();
	                    }
	                    this.contentMap[obj[this.key]] = obj;
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            return arrDatas;
	        }

	        // 页码变化

	    }, {
	        key: 'handlePageChange',
	        value: function handlePageChange(currentPage) {
	            // 切换分页时是否保留已勾选的行，默认清除
	            !this.cfg.retain && this.clearSelect();
	            this.setState({ currentPage: currentPage });
	            // 更新数据
	            this.changeData(currentPage);
	            this.props.onPageChange && this.props.onPageChange(currentPage);
	            this.forceRefresh();
	        }
	        // 切换分页时，获取分页数据

	    }, {
	        key: 'changeData',
	        value: function changeData(currentPage) {
	            // currentPage 从1开始
	            if (this.pager.pageType === 'server') {
	                this.getData(currentPage);
	            } else {
	                var startPos = (currentPage - 1) * this.pager.pageSize;
	                var endPos = currentPage * this.pager.pageSize;
	                var curData = [];
	                // this.state.content是对全量的,如果是过来出来的数据分页怎么办
	                if (this.state.filter) {
	                    curData = this.state.displayConent.slice(startPos, endPos);
	                } else {
	                    curData = this.state.content.slice(startPos, endPos);
	                }
	                this.setState({ currPageData: _utils.Utils.clone(curData) });
	                this.isCheckAll(curData);
	                this.forceRefresh();
	            }
	        }

	        // 异步获取数据
	        // 方式请求接口的方法
	        // @param {number} pageNum 请求第几页非必须
	        // @param {Object} params 对象非必须
	        // @param {Object} nextProps 非必须

	    }, {
	        key: 'getData',
	        value: function getData(pageNum, params, nextProps) {
	            // 第一次render 没有nextProps
	            var tableCfg = this.tableCfg;
	            var dataParams = {};
	            // let requestParams = params ? params : (nextProps ? nextProps.params : null);
	            var requestParams = params ? params : nextProps ? nextProps.params : this.props.params;
	            if (this.pager.pageType === 'server') {
	                dataParams = Object.assign({}, requestParams, {
	                    page: pageNum ? pageNum : 1,
	                    pageNum: pageNum ? pageNum : 1,
	                    size: this.pager.pageSize,
	                    pageSize: this.pager.pageSize,
	                    pageType: 'server'
	                });
	            } else {
	                dataParams = Object.assign({}, requestParams, {
	                    pageType: 'client'
	                });
	            }
	            var self = this;
	            if (tableCfg.url) {
	                this.setState({ spinning: true, spinTip: '正在请求数据，请稍等~', size: 'large' });
	                // 当前请求的标号
	                var index = ++this.requerstIndex;
	                this.__ajax({
	                    url: tableCfg.url,
	                    data: dataParams,
	                    type: 'json',
	                    method: tableCfg.method && tableCfg.method === 'post' ? 'POST' : 'GET',
	                    success: function success(res) {
	                        // 如果在此之后又有其他请求，则放弃当前处理
	                        if (index !== self.requerstIndex) {
	                            return;
	                        }
	                        if (res.status * 1 === 0) {
	                            self.generateRowId(res.data);
	                            var data = res.data.slice(0, self.pager.pageSize);
	                            var tempExConfig = {};
	                            // 如果有select下拉框可以编辑，且后端返回下拉框数据，则要修改配置里的下拉框的option
	                            for (var v in tableCfg.tags) {
	                                var tag = tableCfg.tags[v];
	                                if (res[v] && tag.editCfg && tag.editCfg.elemType && tag.editCfg.elemType === 'select' && tag.editCfg.edit === true) {
	                                    tag.editCfg['options'] = res[v];
	                                }
	                            }
	                            var temp = {
	                                content: _utils.Utils.clone(res.data),
	                                currPageData: _utils.Utils.clone(data),
	                                // exportConfig: exportConfig,
	                                tableCfg: tableCfg,
	                                count: res.count || res.total,
	                                allCount: res.count || res.total,
	                                checkAll: false,
	                                spinning: false,
	                                spinTip: ''
	                            };
	                            self.setState(temp, function () {
	                                self.onRefreshData();
	                            });
	                        } else if (res.status * 1 === 1) {
	                            var modalCon = {
	                                title: '提示：',
	                                type: 'warning',
	                                msg: res.msg
	                            };
	                            self.setState({ spinning: false, spinTip: '' });
	                            self.createModalCon();
	                            var divCon = document.getElementById('modalDiv');
	                            _reactDom2.default.render(_react2.default.createElement(_ReactModal2.default, { modalCon: modalCon,
	                                handleModalClick: self.clearModalCon.bind(self),
	                                handleCancel: self.clearModalCon.bind(self) }), divCon);
	                        }
	                    },
	                    error: function error(jqXHR, textStatus, errorThrown) {
	                        // 如果在此之后又有其他请求，则放弃当前处理
	                        if (index !== self.requerstIndex) {
	                            return;
	                        }
	                        var modalCon = {
	                            title: '出错：',
	                            type: 'warning',
	                            msg: '请求出错-返回状态码' + textStatus + 'error: ' + errorThrown
	                        };
	                        self.setState({ spinning: false, spinTip: '' });
	                        self.createModalCon();
	                        var divCon = document.getElementById('modalDiv');
	                        _reactDom2.default.render(_react2.default.createElement(_ReactModal2.default, { modalCon: modalCon,
	                            handleModalClick: self.clearModalCon.bind(self),
	                            handleCancel: self.clearModalCon.bind(self) }), divCon);
	                    }
	                });
	            }
	        }
	    }, {
	        key: 'getSelectedData',
	        value: function getSelectedData() {
	            var tmpArr = [];
	            for (var key in this.selectedData) {
	                tmpArr.push(this.selectedData[key]);
	            }
	            return tmpArr;
	        }
	        // 清除已勾选内容

	    }, {
	        key: 'clearSelect',
	        value: function clearSelect() {
	            this.selectedData = {};
	            this.rowState = {};
	            // 通知父组件清除已报错勾选内容
	            this.props.onCheckRow && this.props.onCheckRow({});
	        }
	    }, {
	        key: 'getSelectedIds',
	        value: function getSelectedIds() {
	            var arrIds = [];
	            for (var dex in this.selectedData) {
	                if (this.selectedData.hasOwnProperty(dex)) {
	                    arrIds.push(dex);
	                }
	            }
	            return arrIds;
	        }
	    }, {
	        key: 'sendEditData',
	        value: function sendEditData(item, params) {
	            var self = this;
	            var temp = {};
	            for (var dex in item.config) {
	                if (item.config.hasOwnProperty(dex)) {
	                    var name = item.config[dex]['name'];
	                    temp[name] = params[name];
	                }
	            }
	            temp[this.key] = params[this.key];
	            var ele = document.getElementById('modalDiv');
	            ele && ele.remove();
	            this.__ajax({
	                url: item.url,
	                data: temp,
	                type: 'json',
	                method: 'get',
	                success: function success(res) {
	                    if (res.status * 1 === 0) {
	                        // 类似成功的提示不需要展示头和尾部e
	                        self.refreshTable();
	                    } else {
	                        var modalCon = {
	                            title: '提示：',
	                            type: 'warning',
	                            msg: res.msg
	                        };
	                        self.createModalCon();
	                        _reactDom2.default.render(_react2.default.createElement(_ReactModal2.default, { modalCon: modalCon,
	                            handleModalClick: self.clearModalCon.bind(self),
	                            handleCancel: self.clearModalCon.bind(self) }), document.getElementById('modalDiv'));
	                    }
	                },
	                error: function error(res) {
	                    var modalCon = {
	                        title: '出错：',
	                        type: 'warning',
	                        msg: '发送请求时出现错误，请尝试重新发送请求'
	                    };
	                    self.createModalCon();
	                    _reactDom2.default.render(_react2.default.createElement(_ReactModal2.default, { modalCon: modalCon,
	                        handleModalClick: self.clearModalCon.bind(self),
	                        handleCancel: self.clearModalCon.bind(self) }), document.getElementById('modalDiv'));
	                }
	            });
	        }
	    }, {
	        key: 'createModalCon',
	        value: function createModalCon() {
	            var ele = document.getElementById('modalDiv');
	            if (!ele) {
	                ele = document.createElement('div');
	                ele.setAttribute('id', 'modalDiv');
	                document.body.append(ele);
	            }
	        }
	    }, {
	        key: 'clearModalCon',
	        value: function clearModalCon() {
	            var ele = document.getElementById('modalDiv');
	            ele && ele.remove();
	        }
	    }, {
	        key: 'handleEdit',
	        value: function handleEdit(data, tag, val, event) {
	            // 单个字段的编辑用Input，多个select时序提供map或者url
	            var modalCon = {
	                type: 'form'
	            };
	            var editCfg = this.tableCfg.detailCfg.editCfg;
	            var config = editCfg.filed[tag];
	            config['type'] = 'input';
	            config['name'] = tag;
	            config['defaultVal'] = val;
	            var item = {
	                url: editCfg.url,
	                config: [config]
	            };
	            this.createModalCon();
	            _reactDom2.default.render(_react2.default.createElement(_ReactModal2.default, { modalCon: modalCon, item: item, data: data,
	                handleModalClick: this.sendEditData.bind(this),
	                handleCancel: this.clearModalCon.bind(this) }), document.getElementById('modalDiv'));
	        }
	    }, {
	        key: 'checkRow',
	        value: function checkRow(id) {
	            var checked = !this.rowState[id];
	            this.rowState[id] = checked;
	            // 可以吧selectedData干掉，只存id
	            if (checked) {
	                this.selectedData[id] = this.contentMap[id];
	            } else {
	                delete this.selectedData[id];
	            }
	            // onCheckRow为勾选行变化时触发的函数，可返回勾选的全部数据
	            this.props.onCheckRow && this.props.onCheckRow(this.selectedData);
	            this.isCheckAll(this.state.currPageData);
	            this.forceRefresh();
	        }
	        // 判断是否全部选中了，全部选中需要更新选中按钮，thGenerator也需要单独拿出来

	    }, {
	        key: 'isCheckAll',
	        value: function isCheckAll(curData) {
	            var rowState = this.rowState;
	            var pageData = curData;
	            var result = true;
	            for (var i = 0, len = pageData.length; i < len; i++) {
	                if (!rowState.hasOwnProperty(pageData[i][this.key]) || rowState[pageData[i][this.key]] === false) {
	                    result = false;
	                    break;
	                }
	            }
	            this.setState({ checkAll: result });
	        }
	    }, {
	        key: 'checkAll',
	        value: function checkAll() {
	            var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            // 只能是当前页的数据
	            var rowState = [];
	            var arrDatas = this.state.currPageData;
	            // 可以全选，把disabled的数据行过滤掉
	            for (var i = 0, len = arrDatas.length; i < len; i++) {
	                if (!arrDatas[i]['disabled']) {
	                    if (val) {
	                        this.selectedData[arrDatas[i][this.key]] = arrDatas[i];
	                    } else {
	                        delete this.selectedData[arrDatas[i][this.key]];
	                    }
	                    this.rowState[arrDatas[i][this.key]] = val;
	                }
	            }

	            this.props.onCheckRow && this.props.onCheckRow(this.selectedData);
	            this.setState({
	                checkAll: val
	            });
	            this.forceRefresh();
	        }

	        /**
	         *  编辑之后存一份数据未editData,当取消编辑之后editData要清空
	         *  @param {number} trDataId 没一行唯一的一个ID
	         *  @param {Object} trNewData 编辑之后的行数据
	         */

	    }, {
	        key: 'setEditTableData',
	        value: function setEditTableData(trDataId, trNewData) {
	            this.editData[trNewData[this.key]] = trNewData;
	        }

	        /**
	         * 取消编辑
	         * 暂时只包含全部取消
	         * 当前行的取消先不做，当前行需要还原原来的数据，而重新渲染table其他行的时候需要综合数据渲染太麻烦of course可以做
	         * @param {number} trDataId 当前行的id
	         */

	    }, {
	        key: 'cancelEdit',
	        value: function cancelEdit(trDataId) {
	            if (trDataId) {
	                delete this.editData[trDataId];
	            } else {
	                this.editData = {};
	                this.setState({ editTable: false });
	            }
	        }

	        /**
	         *  表头保存按钮的动作
	         *  0. 比较的是editData中的数据
	         *  1. 需要比较前后的数据是否发生了变化，如果没有则需要提示
	         *  2. 如果发生了变化则需要弹出提示框，点击确定后进行提交
	         *  获取到编辑之后的数据，回传到上层进行处理
	         *  处理保存数据
	         *  当有数据变化的时候才去confirm提交数据
	         */

	    }, {
	        key: 'confirmSaveEdit',
	        value: function confirmSaveEdit() {
	            var isDataChanged = JSON.stringify(this.editData);
	            if (isDataChanged === '{}') {
	                _antd.message.warning('编辑的数据没有发生任何变化');
	            } else {
	                this.setState({ editTable: false });
	                this.props.saveEdit && this.props.saveEdit(this.editData);
	            }
	        }
	        // tr上的单击事件
	        // event为与触发的tr上事件相关的一个对象

	    }, {
	        key: 'handleTrClick',
	        value: function handleTrClick(row, index, id, event) {
	            // 只有展示勾选框的Table才会执行checkRow函数
	            this.cfg.checkBox && this.cfg.rowCheck && this.checkRow(id);
	            this.props.onTrClick && this.props.onTrClick(row, index, event);
	        }
	        // tr上的双击事件

	    }, {
	        key: 'handleTrDoubleClick',
	        value: function handleTrDoubleClick(row, index, event) {
	            // 去掉上一次双击的行的active状态
	            this.activeTr && this.activeTr.removeActiveStatus();
	            this.activeTr = this.refs['tr' + index];
	            this.props.onTrDoubleClick && this.props.onTrDoubleClick(row, index, event);
	        }
	        // tr上的鼠标移入事件

	    }, {
	        key: 'handleTrHover',
	        value: function handleTrHover(row, index, event) {
	            this.props.onTrHover && this.props.onTrHover(row, index, event);
	        }
	        // tr上的鼠标移出事件

	    }, {
	        key: 'handleTrLeave',
	        value: function handleTrLeave(row, index, event) {
	            this.props.onTrLeave && this.props.onTrLeave(row, index, event);
	        }
	        // 整理数据，实现分组合并

	    }, {
	        key: 'sortData',
	        value: function sortData(content) {
	            var _this3 = this;

	            var tableCfg = this.tableCfg;
	            var gTags = [];
	            // 获得有效的分组字段
	            for (var i in tableCfg.tags) {
	                // 分组字段必须在前面，且中间不能有不分组字段
	                if (tableCfg.tagsGroup.indexOf(i) !== -1) {
	                    gTags.push(i);
	                } else {
	                    break;
	                }
	            }
	            var tmpContent = content;
	            gTags.map(function (tag, index) {
	                tmpContent = _this3.sortArrInArr(tmpContent, tag);
	            });
	            return this.getArrInObj(tmpContent);
	        }
	        // 遍历数组，把数据根data中tag对应的值分类装入不同的以tag值为键的对象中
	        // 这里主要实现了数据的重新排序分组

	    }, {
	        key: 'sortArrInArr',
	        value: function sortArrInArr(data, tag) {
	            var content = {};
	            if (data instanceof Array) {
	                var _iteratorNormalCompletion4 = true;
	                var _didIteratorError4 = false;
	                var _iteratorError4 = undefined;

	                try {
	                    for (var _iterator4 = data[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                        var v = _step4.value;

	                        !(v[tag] in content) && (content[v[tag]] = []);
	                        content[v[tag]].push(v);
	                    }
	                } catch (err) {
	                    _didIteratorError4 = true;
	                    _iteratorError4 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                            _iterator4.return();
	                        }
	                    } finally {
	                        if (_didIteratorError4) {
	                            throw _iteratorError4;
	                        }
	                    }
	                }
	            } else {
	                for (var i in data) {
	                    content[i] = this.sortArrInArr(data[i], tag);
	                }
	            }
	            return content;
	        }
	        // 递归遍历对象，转化为数组，并记录对象层级数据
	        // 这里实现了把重新排序的数据重新组合成正常的格式，并记录需要合并的行的行数及每行需要隐藏的列

	    }, {
	        key: 'getArrInObj',
	        value: function getArrInObj(data) {
	            var isRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            var content = [];
	            var rowSpan = [];
	            var hideDepth = [];
	            if (data instanceof Array) {
	                var _iteratorNormalCompletion5 = true;
	                var _didIteratorError5 = false;
	                var _iteratorError5 = undefined;

	                try {
	                    for (var _iterator5 = data[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                        var v = _step5.value;

	                        content.push(v);
	                        hideDepth.push(0);
	                        rowSpan.push([0]);
	                    }
	                } catch (err) {
	                    _didIteratorError5 = true;
	                    _iteratorError5 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                            _iterator5.return();
	                        }
	                    } finally {
	                        if (_didIteratorError5) {
	                            throw _iteratorError5;
	                        }
	                    }
	                }

	                rowSpan[0] = [data.length];
	            } else {
	                for (var i in data) {
	                    var _getArrInObj = this.getArrInObj(data[i], false),
	                        _getArrInObj2 = _slicedToArray(_getArrInObj, 3),
	                        result = _getArrInObj2[0],
	                        rsp = _getArrInObj2[1],
	                        dep = _getArrInObj2[2];

	                    content = content.concat(result);
	                    rowSpan = rowSpan.concat(rsp);
	                    for (var d in dep) {
	                        var val = +d === 0 ? dep[d] : dep[d] + 1;
	                        hideDepth.push(val);
	                    }
	                }
	                !isRoot && rowSpan[0].unshift(rowSpan.length);
	            }
	            return [content, rowSpan, hideDepth];
	        }
	    }, {
	        key: 'trGenerator',
	        value: function trGenerator() {
	            var _this4 = this;

	            var selectedIds = this.getSelectedIds();
	            if (_utils.Utils.empty(this.state.currPageData)) {
	                return null;
	            }
	            var tableCfg = this.tableCfg;
	            var cfg = this.cfg;
	            if (this.state.currPageData) {
	                var content = this.state.currPageData;
	                var isGroup = false;
	                var rowSpan = [];
	                var hideDepth = [];
	                // 分组功能
	                if (tableCfg && tableCfg.tagsGroup) {
	                    isGroup = true;

	                    var _sortData = this.sortData(content);

	                    var _sortData2 = _slicedToArray(_sortData, 3);

	                    content = _sortData2[0];
	                    rowSpan = _sortData2[1];
	                    hideDepth = _sortData2[2];
	                }
	                var trList = [];
	                var rows = content.map(function (row, index) {
	                    var TrRows = [];
	                    // 有disabled行时也可以全选
	                    // let checked = this.state.checkAll || !!this.rowState[row[this.key]];
	                    var checked = !!_this4.rowState[row[_this4.key]];
	                    TrRows.push(_react2.default.createElement(_TrRow2.default, { ref: 'tr' + index, obj: row, checked: checked,
	                        key: row[_this4.key], id: row[_this4.key], primaryKey: _this4.key,
	                        rowSpan: rowSpan[index], hideDepth: hideDepth[index],
	                        tableCfg: tableCfg,
	                        expandAll: _this4.state.expandAll, lineEdit: _this4.state.editTable,
	                        showTags: _this4.showTags, handleEdit: _this4.handleEdit.bind(_this4),
	                        checkRow: _this4.checkRow.bind(_this4, row[_this4.key]),
	                        setEditTableData: _this4.setEditTableData.bind(_this4),
	                        onHover: _this4.handleTrHover.bind(_this4, row, index),
	                        onLeave: _this4.handleTrLeave.bind(_this4, row, index),
	                        onClick: _this4.handleTrClick.bind(_this4, row, index, row[_this4.key]),
	                        onDoubleClick: _this4.handleTrDoubleClick.bind(_this4, row, index),
	                        expandExtraInfo: _this4.expandExtraInfo.bind(_this4) }));
	                    if (cfg && cfg.expand) {
	                        var tmpHtml = row[cfg.expand]; // data['html']
	                        var extraHTML = _this4.createMarkup(tmpHtml);
	                        var tdLen = 100;
	                        !row['ump-expand'] && (row['ump-expand'] = false);
	                        var up = _this4.state.expandAll || row['ump-expand'] ? {} : { display: 'none' };
	                        TrRows.push(_react2.default.createElement('tr', null)); // 添加额外的tr标签以使由expand产生的额外tr标签不会影响实际内容tr的奇偶数
	                        TrRows.push(_react2.default.createElement(
	                            'tr',
	                            { style: up, key: 'trexpand' + row[_this4.key], ref: 'expandtr' + row[_this4.key] },
	                            _react2.default.createElement('td', { colSpan: tdLen, dangerouslySetInnerHTML: _this4.createMarkup(tmpHtml) })
	                        ));
	                    }
	                    return TrRows;
	                });
	                return rows;
	            }
	            return null;
	        }
	    }, {
	        key: 'expandExtraInfo',
	        value: function expandExtraInfo(refK, isDown) {
	            if (isDown) {
	                this.refs[refK].style.display = '';
	            } else {
	                this.refs[refK].style.display = 'none';
	            }
	        }
	    }, {
	        key: 'expandAllExtra',
	        value: function expandAllExtra() {
	            this.setState({ expandAll: !this.state.expandAll });
	        }
	    }, {
	        key: 'createMarkup',
	        value: function createMarkup(htmlString) {
	            return {
	                __html: htmlString
	            };
	        }
	        // 从一个对象中获取需要用于过滤的关键字

	    }, {
	        key: 'getKeyDataOfObject',
	        value: function getKeyDataOfObject(obj) {
	            var val = '';
	            // 如果传入的是一个数组，则递归的遍历这个数组，拿出数组中各个对象的关键字
	            if (obj instanceof Array) {
	                var tArr = [];
	                var _iteratorNormalCompletion6 = true;
	                var _didIteratorError6 = false;
	                var _iteratorError6 = undefined;

	                try {
	                    for (var _iterator6 = obj[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                        var t = _step6.value;

	                        tArr.push(this.getKeyDataOfObject(t));
	                    }
	                } catch (err) {
	                    _didIteratorError6 = true;
	                    _iteratorError6 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                            _iterator6.return();
	                        }
	                    } finally {
	                        if (_didIteratorError6) {
	                            throw _iteratorError6;
	                        }
	                    }
	                }

	                val = tArr.join('\n');
	            } else if (obj instanceof Object) {
	                // 如果字段是个对象，则优先获取Title字段，否则获取该对象的第一个字段
	                if (obj.hasOwnProperty('title')) {
	                    val = obj['title'];
	                } else {
	                    for (var v in obj) {
	                        val = obj[v];
	                        break;
	                    }
	                }
	            } else if (obj) {
	                val = obj.toString ? obj.toString() : obj;
	            }
	            return val;
	        }
	        // 若有html，则剥掉标签

	    }, {
	        key: 'handleString',
	        value: function handleString(string) {
	            var pattern1 = /<(\w+).*?>(.*?)<\/\1>/g; // 匹配是否有闭合标签
	            if (pattern1.test(string)) {
	                return string.replace(/<([\/]?\w+).*?>/g, ''); // 剥掉所有标签
	            } else {
	                return string;
	            }
	        }
	        // 过滤输入框变化时

	    }, {
	        key: 'filterChange',
	        value: function filterChange(e) {
	            var _this5 = this;

	            var iVal = e.target.value;
	            clearTimeout(this.filterTimer);
	            this.filterTimer = setTimeout(function () {
	                _this5.dealFilterData(iVal);
	            }, 150);
	        }
	        // 过滤数据

	    }, {
	        key: 'dealFilterData',
	        value: function dealFilterData(iVal) {
	            var strVal = iVal.toLowerCase().replace(/(^\s*)|(\s*$)/g, '').replace(/\s+/g, ' ');
	            // 过滤当前页
	            var content = this.state.content;
	            if (strVal) {
	                var arrFilterData = [];
	                // 字段黑名单/白名单
	                var filterlist = this.display.filter;
	                var _iteratorNormalCompletion7 = true;
	                var _didIteratorError7 = false;
	                var _iteratorError7 = undefined;

	                try {
	                    for (var _iterator7 = content[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	                        var row = _step7.value;

	                        var data = [];
	                        // 按照展示的字段过滤，自定义render字段无效，问题比较大
	                        for (var i in row) {
	                            // 如果不在白名单里或者在黑名单里，则跳过此字段
	                            if (filterlist && filterlist['whitelist'] && filterlist['whitelist'].indexOf(i) === -1) {
	                                continue;
	                            } else if (filterlist && filterlist['blacklist'] && filterlist['blacklist'].indexOf(i) !== -1) {
	                                continue;
	                            }
	                            var value = row[i];
	                            if (typeof value === 'string') {
	                                data.push(this.handleString(value));
	                            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	                                data.push(this.getKeyDataOfObject(value));
	                            } else {
	                                data.push(value.toString ? value.toString() : value);
	                            }
	                        }

	                        var str = data.join('\n').toLowerCase();
	                        // 输入值不是字符串，而是几个词，要拆分后分别查找
	                        var result = true;
	                        var keys = strVal.split(/\s+/);
	                        var _iteratorNormalCompletion8 = true;
	                        var _didIteratorError8 = false;
	                        var _iteratorError8 = undefined;

	                        try {
	                            for (var _iterator8 = keys[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                                var key = _step8.value;

	                                // update by liuzechun@baidu.com @2016-12-11
	                                var orResult = false;
	                                // 支持指定字段过滤(如 id:123)，先选出关键词对应的字段，再对字段内容进行检索

	                                var _key$split = key.split(':'),
	                                    _key$split2 = _slicedToArray(_key$split, 2),
	                                    kWord = _key$split2[0],
	                                    kVal = _key$split2[1];
	                                // kv为当前搜索的字段值，如果没有指定字段，则kv为全部字段拼成的字符串


	                                var kv = '';
	                                if (kVal) {
	                                    // 如果关键词字段直接为数据的key
	                                    if (row[kWord]) {
	                                        kv = row[kWord];
	                                    } else {
	                                        // 否则在配置的tag里匹配每个tag的中文名
	                                        for (var _i in this.showTags) {
	                                            if (typeof this.showTags[_i] === 'string' && kWord === this.showTags[_i].toLowerCase() || _typeof(this.showTags[_i]) === 'object' && kWord === this.showTags[_i].title.toLowerCase()) {
	                                                kv = row[_i];
	                                            }
	                                        }
	                                    }
	                                    if (typeof kv !== 'string') {
	                                        kv = (typeof kv === 'undefined' ? 'undefined' : _typeof(kv)) === 'object' && kv.title || JSON.stringify(kv);
	                                    }
	                                    kv = (kv || '').toLowerCase();
	                                } else {
	                                    kv = str;
	                                    kVal = key;
	                                }
	                                // 支持使用|搜索，实现或的关系
	                                var _iteratorNormalCompletion9 = true;
	                                var _didIteratorError9 = false;
	                                var _iteratorError9 = undefined;

	                                try {
	                                    for (var _iterator9 = kVal.split(/\|+/)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	                                        var k = _step9.value;

	                                        // 一旦有一个能匹配到，则结果true
	                                        (!k || kv.indexOf(k) !== -1) && (orResult = true);
	                                    }
	                                    // 如果都匹配不到，则此关键字无效，整条数据无效
	                                } catch (err) {
	                                    _didIteratorError9 = true;
	                                    _iteratorError9 = err;
	                                } finally {
	                                    try {
	                                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                                            _iterator9.return();
	                                        }
	                                    } finally {
	                                        if (_didIteratorError9) {
	                                            throw _iteratorError9;
	                                        }
	                                    }
	                                }

	                                !orResult && (result = false);
	                            }
	                        } catch (err) {
	                            _didIteratorError8 = true;
	                            _iteratorError8 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                                    _iterator8.return();
	                                }
	                            } finally {
	                                if (_didIteratorError8) {
	                                    throw _iteratorError8;
	                                }
	                            }
	                        }

	                        if (result) {
	                            arrFilterData.push(row);
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError7 = true;
	                    _iteratorError7 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                            _iterator7.return();
	                        }
	                    } finally {
	                        if (_didIteratorError7) {
	                            throw _iteratorError7;
	                        }
	                    }
	                }

	                var curData = arrFilterData.slice(0, this.pager.pageSize);
	                var count = arrFilterData.length;
	                this.setState({
	                    currentPage: 1,
	                    currPageData: _utils.Utils.clone(curData),
	                    count: count,
	                    filter: true,
	                    displayConent: _utils.Utils.clone(arrFilterData)
	                });
	            } else if (this.pager.pageType === 'server') {
	                // 服务器端分页的content都是当前页的数据
	                this.setState({
	                    currentPage: 1,
	                    currPageData: _utils.Utils.clone(this.state.content),
	                    count: this.state.allCount,
	                    filter: false
	                });
	            } else {
	                // 前端分页, content是返回的所有数据，当前页的数据需要截取
	                var _curData = this.state.content.slice(0, this.pager.pageSize);
	                this.setState({
	                    currentPage: 1,
	                    currPageData: _utils.Utils.clone(_curData),
	                    count: this.state.allCount,
	                    filter: false
	                });
	            }
	            // 清除已勾选内容
	            this.clearSelect();
	        }
	    }, {
	        key: 'switchTags',
	        value: function switchTags(obj) {
	            // 多个checkbox的如何获取
	            // this.setState({switchTags: true});
	            this.refs.switchmodal.setState({ visible: true });
	        }
	        // 展示全部列

	    }, {
	        key: 'showAllTags',
	        value: function showAllTags() {
	            if (this.state.showAllTags === false) {
	                var tmpTags = this.showTags;
	                var memoryShowTags = {};
	                for (var i in tmpTags) {
	                    if (typeof tmpTags[i] === 'string') {
	                        memoryShowTags[i] = tmpTags[i];
	                        tmpTags[i] = {
	                            title: tmpTags[i],
	                            display: true
	                        };
	                    } else {
	                        memoryShowTags[i] = Object.assign({}, tmpTags[i], true);
	                        tmpTags[i]['display'] = true;
	                    }
	                }
	                this.memoryShowTags = memoryShowTags;
	            } else {
	                this.showTags = this.memoryShowTags;
	            }
	            this.setState({ showAllTags: !this.state.showAllTags });
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            this.refreshTable();
	        }
	    }, {
	        key: 'refreshTable',
	        value: function refreshTable() {
	            if (this.tableCfg.url) {
	                this.getData();
	            } else {
	                this.props.refresh && this.props.refresh();
	            }
	            // 清空过滤控件
	            this.clearFilter();
	            // 重置分页
	            this.setState({ currentPage: 1 });
	        }
	        // 清空过滤控件

	    }, {
	        key: 'clearFilter',
	        value: function clearFilter() {
	            this.refs.filter && this.refs.filter.setVal('');
	            this.setState({ filter: false, filterContent: [] });
	        }
	    }, {
	        key: 'setPageSize',
	        value: function setPageSize(itemParams, NULL, item) {
	            var size = itemParams.size;
	            if (!isNaN(size * 1) && size) {
	                this.pager.pageSize = +size;
	                var name = this.tableCfg.name;
	                name && localStorage.setItem(name, size);
	            }
	            if (this.tableCfg.url) {
	                this.refreshTable();
	            } else {
	                var data = this.state.content.slice(0, this.pager.pageSize);
	                this.setState({
	                    currPageData: _utils.Utils.clone(data)
	                });
	            }
	            this.clearModalCon();
	        }
	    }, {
	        key: 'showSetPageSize',
	        value: function showSetPageSize() {
	            var self = this;
	            var modalCon = {
	                title: '设置分页：',
	                type: 'form'
	            };
	            var item = {
	                config: [{
	                    type: 'input',
	                    label: '分页行数',
	                    name: 'size'
	                }]
	            };
	            self.createModalCon();
	            var divCon = document.getElementById('modalDiv');
	            _reactDom2.default.render(_react2.default.createElement(_ReactModal2.default, { modalCon: modalCon, item: item,
	                handleModalClick: self.setPageSize.bind(self),
	                handleCancel: self.clearModalCon.bind(self) }), divCon);
	        }

	        /**
	         * 点击编辑按钮需要重新渲染表格且需要讲之前编辑的数据清除
	         */

	    }, {
	        key: 'editTable',
	        value: function editTable() {
	            this.editData = {};
	            this.setState({ editTable: !this.state.editTable });
	        }
	    }, {
	        key: 'switchMenuList',
	        value: function switchMenuList() {
	            /**
	             * 由于li单击时有冒泡的原理，ul上捕获之后会再出发，因为li上不需要再加入事件设置显示与否
	             */
	            this.setState({ showTableMenu: !this.state.showTableMenu });
	        }
	    }, {
	        key: 'toggleFullScreen',
	        value: function toggleFullScreen() {
	            this.setState({ fullScreen: !this.state.fullScreen });
	        }
	        /*收起table列表，只展示表头*/

	    }, {
	        key: 'toggleRetract',
	        value: function toggleRetract() {
	            this.setState({ retract: !this.state.retract });
	        }
	    }, {
	        key: 'tableHeadGenerator',
	        value: function tableHeadGenerator() {
	            var _this6 = this;

	            var title = this.tableCfg.title || '';
	            var display = this.display;
	            var result = [];
	            /* 表头标题 */
	            if (title) {
	                var icon = 'fa fa-caret-' + (this.state.retract === false ? 'down' : 'right');
	                result.push(typeof display.retract !== 'undefined' ? _react2.default.createElement(
	                    'div',
	                    { key: 'table-title', className: 'umpui-header', onClick: this.toggleRetract.bind(this) },
	                    _react2.default.createElement('i', { className: icon }),
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        title
	                    )
	                ) : _react2.default.createElement(
	                    'div',
	                    { key: 'table-title', className: 'umpui-header' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        title
	                    )
	                ));
	            }
	            /* 以下为一些控件的生成，全部保存在divList里 */
	            var divList = [];
	            /* display.basic里面的控件视为基本操作控件 */
	            var custom = display.custom;
	            var arrBasic = display.basic;
	            // 为了美观，如果有自定义的控件，把控件放到过滤框之后，其他控件之前
	            if (custom && custom.basic) {
	                var _iteratorNormalCompletion10 = true;
	                var _didIteratorError10 = false;
	                var _iteratorError10 = undefined;

	                try {
	                    var _loop = function _loop() {
	                        var v = _step10.value;

	                        divList.push(_react2.default.createElement(
	                            'div',
	                            { key: v.name, className: 'umpui-header-extra ' + (v.name || ''),
	                                onClick: function onClick() {
	                                    return v.onClick(_this6);
	                                } },
	                            _react2.default.createElement('i', { className: v.icon }),
	                            _react2.default.createElement(
	                                'span',
	                                null,
	                                v.text
	                            )
	                        ));
	                    };

	                    for (var _iterator10 = custom.basic[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	                        _loop();
	                    }
	                } catch (err) {
	                    _didIteratorError10 = true;
	                    _iteratorError10 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
	                            _iterator10.return();
	                        }
	                    } finally {
	                        if (_didIteratorError10) {
	                            throw _iteratorError10;
	                        }
	                    }
	                }
	            }
	            if (arrBasic) {
	                var basic = this.getBasicWidghts();
	                var _iteratorNormalCompletion11 = true;
	                var _didIteratorError11 = false;
	                var _iteratorError11 = undefined;

	                try {
	                    for (var _iterator11 = arrBasic[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	                        var _v = _step11.value;

	                        // 为了美观，如果有自定义的控件，把控件放到过滤框之后，其他控件之前
	                        if (_v === 'filter') {
	                            basic[_v] && divList.unshift(basic[_v]);
	                        } else {
	                            basic[_v] && divList.push(basic[_v]);
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError11 = true;
	                    _iteratorError11 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion11 && _iterator11.return) {
	                            _iterator11.return();
	                        }
	                    } finally {
	                        if (_didIteratorError11) {
	                            throw _iteratorError11;
	                        }
	                    }
	                }
	            }
	            /* display.menus视为不常用的一些控件，为了节省空间，把这些不常用的控件，放在一个下拉列表里 */
	            var gearsList = [];
	            var arrMenus = display.menus;
	            if (arrMenus) {
	                var menus = this.getMenuWidghts();
	                var _iteratorNormalCompletion12 = true;
	                var _didIteratorError12 = false;
	                var _iteratorError12 = undefined;

	                try {
	                    for (var _iterator12 = arrMenus[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
	                        var _v2 = _step12.value;

	                        menus[_v2] && gearsList.push(menus[_v2]);
	                    }
	                } catch (err) {
	                    _didIteratorError12 = true;
	                    _iteratorError12 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion12 && _iterator12.return) {
	                            _iterator12.return();
	                        }
	                    } finally {
	                        if (_didIteratorError12) {
	                            throw _iteratorError12;
	                        }
	                    }
	                }
	            }
	            if (custom && custom.menus) {
	                var _iteratorNormalCompletion13 = true;
	                var _didIteratorError13 = false;
	                var _iteratorError13 = undefined;

	                try {
	                    var _loop2 = function _loop2() {
	                        var v = _step13.value;

	                        gearsList.push(_react2.default.createElement(
	                            'li',
	                            { key: v.name, onClick: function onClick() {
	                                    return v.onClick(_this6);
	                                } },
	                            _react2.default.createElement('i', { className: v.icon }),
	                            _react2.default.createElement(
	                                'span',
	                                null,
	                                v.text
	                            )
	                        ));
	                    };

	                    for (var _iterator13 = custom.menus[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	                        _loop2();
	                    }
	                } catch (err) {
	                    _didIteratorError13 = true;
	                    _iteratorError13 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion13 && _iterator13.return) {
	                            _iterator13.return();
	                        }
	                    } finally {
	                        if (_didIteratorError13) {
	                            throw _iteratorError13;
	                        }
	                    }
	                }
	            }
	            if (gearsList.length > 0) {
	                divList.push(_react2.default.createElement(
	                    'div',
	                    { key: 'umpui-table-menu',
	                        className: 'umpui-header-extra menu ' + (this.state.showTableMenu ? 'active' : ''),
	                        onClick: this.switchMenuList.bind(this) },
	                    _react2.default.createElement('i', { className: 'fa fa-list' }),
	                    this.display.showText && _react2.default.createElement(
	                        'span',
	                        null,
	                        '\u83DC\u5355'
	                    ),
	                    _react2.default.createElement(
	                        'ul',
	                        null,
	                        gearsList
	                    )
	                ));
	            }
	            result.push(_react2.default.createElement(
	                'div',
	                { key: 'table-extra', className: 'umpui-header-extra-con' },
	                divList
	            ));
	            return result;
	        }
	    }, {
	        key: 'getBasicWidghts',
	        value: function getBasicWidghts() {
	            var obj = {};
	            var showText = this.display.showText;
	            var props = {
	                name: 'filter',
	                placeholder: '要过滤的内容',
	                onChange: this.filterChange.bind(this)
	            };
	            obj['filter'] = _react2.default.createElement(
	                'div',
	                { className: 'umpui-header-extra filter no-hover', key: 'umpui-header-extra' },
	                _react2.default.createElement('i', { className: 'fa fa-filter' }),
	                _react2.default.createElement(_ReactInput2.default, _extends({}, props, { ref: 'filter' }))
	            );
	            var arrList = [];
	            if (this.state.editTable) {
	                arrList.push(_react2.default.createElement(
	                    'ul',
	                    { className: 'umpui-edit-cs' },
	                    _react2.default.createElement(
	                        'li',
	                        { onClick: this.cancelEdit.bind(this, null), key: 'cancelEdit' },
	                        _react2.default.createElement('i', { className: 'fa fa-undo' }),
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'umpui-span-left' },
	                            '\u53D6\u6D88'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        { key: '\'saveEdit\'' },
	                        _react2.default.createElement(
	                            _antd.Popconfirm,
	                            { title: '\u786E\u5B9A\u4FEE\u6539\u5417?',
	                                onConfirm: this.confirmSaveEdit.bind(this),
	                                onCancel: this.cancelEdit.bind(this) },
	                            _react2.default.createElement(
	                                'span',
	                                null,
	                                _react2.default.createElement('i', { className: 'fa fa-floppy-o' }),
	                                _react2.default.createElement(
	                                    'span',
	                                    { className: 'umpui-span-left' },
	                                    '\u4FDD\u5B58'
	                                )
	                            )
	                        )
	                    )
	                ));
	            } else {
	                arrList.push(_react2.default.createElement(
	                    'div',
	                    { className: 'umpui-edit', onClick: this.editTable.bind(this), key: 'editTable' },
	                    _react2.default.createElement('i', { className: 'fa fa-pencil-square-o' }),
	                    showText && _react2.default.createElement(
	                        'span',
	                        null,
	                        '\u7F16\u8F91'
	                    )
	                ));
	            }
	            obj['editTable'] = _react2.default.createElement(
	                'div',
	                { className: 'umpui-header-extra', key: 'umpui-table-edit' },
	                arrList
	            );
	            obj['refresh'] = _react2.default.createElement(
	                'div',
	                { className: 'umpui-header-extra', key: 'refresh',
	                    onClick: this.refreshTable.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-refresh', title: '\u5237\u65B0' }),
	                showText && _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5237\u65B0'
	                )
	            );
	            if (!this.state.fullScreen) {
	                obj['fullScreen'] = _react2.default.createElement(
	                    'div',
	                    { className: 'umpui-header-extra', key: 'fullscreen',
	                        onClick: this.toggleFullScreen.bind(this) },
	                    _react2.default.createElement('i', { className: 'fa fa-arrows-alt' }),
	                    showText && _react2.default.createElement(
	                        'span',
	                        null,
	                        '\u5168\u5C4F'
	                    )
	                );
	            } else {
	                obj['fullScreen'] = _react2.default.createElement(
	                    'div',
	                    { className: 'umpui-header-extra', key: 'exitfullscreen',
	                        onClick: this.toggleFullScreen.bind(this) },
	                    _react2.default.createElement('i', { className: 'fa fa-compress' }),
	                    showText && _react2.default.createElement(
	                        'span',
	                        null,
	                        '\u9000\u51FA\u5168\u5C4F'
	                    )
	                );
	            }
	            obj['export'] = _react2.default.createElement(
	                'div',
	                { className: 'umpui-header-extra', key: 'export' },
	                _react2.default.createElement(
	                    _export2.default,
	                    this.exportConfig,
	                    _react2.default.createElement('i', { className: 'fa fa-download' }),
	                    showText && _react2.default.createElement(
	                        'span',
	                        null,
	                        '\u5BFC\u51FA'
	                    )
	                )
	            );
	            obj['switchTags'] = _react2.default.createElement(
	                'div',
	                { className: 'umpui-header-extra', key: 'switchTags',
	                    onClick: this.switchTags.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-cogs', title: '\u663E\u793A\u5217' }),
	                showText && _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5C55\u793A\u5217'
	                )
	            );
	            obj['showAllTags'] = _react2.default.createElement(
	                'div',
	                { key: 'showAllTags',
	                    className: 'umpui-header-extra ' + (this.state.showAllTags ? 'active' : ''),
	                    onClick: this.showAllTags.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-eye', title: '\u5C55\u793A\u5168\u90E8\u5217' }),
	                showText && _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5C55\u793A\u5168\u90E8\u5217'
	                )
	            );
	            obj['setPageSize'] = _react2.default.createElement(
	                'div',
	                { className: 'umpui-header-extra', key: 'switchTags',
	                    onClick: this.showSetPageSize.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-cogs', title: '\u5206\u9875\u8BBE\u7F6E' }),
	                showText && _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5206\u9875\u8BBE\u7F6E'
	                )
	            );
	            return obj;
	        }
	    }, {
	        key: 'getMenuWidghts',
	        value: function getMenuWidghts() {
	            var obj = {};
	            obj['fullScreen'] = _react2.default.createElement(
	                'li',
	                { key: 'fullScreen1', onClick: this.toggleFullScreen.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-arrows-alt' }),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5168\u5C4F\u663E\u793A'
	                )
	            );
	            obj['switchTags'] = _react2.default.createElement(
	                'li',
	                { key: 'switchTags1', onClick: this.switchTags.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-cog' }),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5C55\u793A\u5B57\u6BB5'
	                )
	            );
	            obj['export'] = _react2.default.createElement(
	                'li',
	                { key: 'export1' },
	                _react2.default.createElement(
	                    _export2.default,
	                    this.exportConfig,
	                    _react2.default.createElement('i', { className: 'fa fa-download' }),
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        '\u5BFC\u51FA\u6570\u636E'
	                    )
	                )
	            );
	            obj['setPageSize'] = _react2.default.createElement(
	                'li',
	                { key: 'setPageSize1', onClick: this.showSetPageSize.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-cogs' }),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5206\u9875\u8BBE\u7F6E'
	                )
	            );
	            obj['refresh'] = _react2.default.createElement(
	                'li',
	                { key: 'refresh1', onClick: this.refreshTable.bind(this) },
	                _react2.default.createElement('i', { className: 'fa fa-refresh' }),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    '\u5237\u65B0\u8868\u683C'
	                )
	            );
	            return obj;
	        }
	    }, {
	        key: 'sortColumn',
	        value: function sortColumn(sortType, field) {
	            var column = this.tableCfg.tags[field];
	            // 默认排序是大小
	            if (column['sort'] === true) {
	                var allData = this.state.content.sort(function (lineOne, lineTwo) {
	                    var asc = lineOne[field] < lineTwo[field] ? -1 : lineOne[field] > lineTwo[field] ? 1 : 0;
	                    return sortType ? asc : -asc;
	                });
	                var currPageData = allData.slice(0, this.pager.pageSize);
	                this.setState({
	                    content: allData,
	                    currPageData: currPageData
	                });
	                this.forceRefresh();
	            } else if (typeof column['sort'] === 'function') {
	                var _allData = this.state.content.sort(function (lineOne, lineTwo) {
	                    var sortVal = column['sort'](lineOne, lineTwo);
	                    return sortType ? sortVal : -sortVal;
	                });
	                var _currPageData = _allData.slice(0, this.pager.pageSize);
	                this.setState({
	                    content: _allData,
	                    currPageData: _currPageData
	                });
	                this.forceRefresh();
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'umpui-table panel ' + (this.tableCfg.className ? this.tableCfg.className : '') + (this.state.fullScreen ? ' umpui-fullscreen' : '') + (this.state.retract ? ' retract' : '') },
	                _react2.default.createElement(_ReactModal2.default, { ref: 'switchmodal', modalCon: { title: '展示字段：', type: 'checkbox' }, visible: false,
	                    item: this.showTags, handleModalClick: this.setShowTags.bind(this) }),
	                this.cfg.header !== false && _react2.default.createElement(
	                    'div',
	                    { className: 'panel-heading' },
	                    this.tableHeadGenerator()
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'panel-body' },
	                    _react2.default.createElement(
	                        _antd.Spin,
	                        { spinning: this.state.spinning, tip: this.state.spinTip },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'table-responsive' },
	                            _react2.default.createElement(
	                                'table',
	                                { className: this.cfg.tableClass },
	                                _react2.default.createElement(_ThRow2.default, { tableCfg: this.tableCfg, checked: this.state.checkAll,
	                                    showTags: this.showTags, checkAll: this.checkAll.bind(this),
	                                    expandAll: this.state.expandAll,
	                                    expandAllExtra: this.expandAllExtra.bind(this),
	                                    sortColumn: this.sortColumn.bind(this),
	                                    changeColumnOrder: this.changeColumnOrder.bind(this) }),
	                                _react2.default.createElement(
	                                    'tbody',
	                                    null,
	                                    this.trGenerator()
	                                )
	                            )
	                        )
	                    ),
	                    this.pager && _react2.default.createElement(_antd.Pagination, _extends({}, this.pager, { current: this.state.currentPage,
	                        total: this.state.count,
	                        onChange: this.handlePageChange.bind(this) }))
	                )
	            );
	        }
	    }]);

	    return Table;
	}(_base.BaseComponent);

	exports.default = Table;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Input组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author luyongfang
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var ReactInput = function (_React$Component) {
	    _inherits(ReactInput, _React$Component);

	    function ReactInput(props) {
	        _classCallCheck(this, ReactInput);

	        var _this = _possibleConstructorReturn(this, (ReactInput.__proto__ || Object.getPrototypeOf(ReactInput)).call(this, props));

	        _this.state = {
	            val: props.defaultValue ? props.defaultValue : ''
	        };
	        return _this;
	    }

	    _createClass(ReactInput, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (typeof nextProps.value !== 'undefined') {
	                this.setState({ val: nextProps.value });
	            }
	        }
	    }, {
	        key: 'setVal',
	        value: function setVal(val) {
	            this.setState({ val: val });
	        }
	    }, {
	        key: 'getValue',
	        value: function getValue() {
	            return this.state.val;
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(e) {
	            e.stopPropagation();
	            var iVal = e.target.value;
	            /*if (this.props.type !== 'textarea') {
	                iVal =  this.refs[this.props.name].value;
	            } else {
	                iVal =  e.target.value;
	            }*/
	            this.setState({ val: iVal });
	            this.props.handleChange && this.props.handleChange(iVal);
	        }
	        /*render() {
	            // let val = this.props.defaultValue !== undefined ? this.props.defaultValue : '';
	            let className = 'form-control input-sm datatable_input_col_search';
	            return this.props.type !== 'textarea'
	                ? <input name={this.props.name} value={this.state.val} type={this.props.type}
	                    ref={this.props.name} maxLength={this.props.maxlength} onChange={this.handleChange.bind(this)}
	                    placeholder={this.props.placeholder} className={className}
	                   />
	                : <Input name={this.props.name} type={this.props.type} autosize={{minRows: 3}}
	                    ref={this.props.name} maxLength={this.props.maxlength}
	                    value={this.state.val} onChange={this.handleChange.bind(this)}
	                    placeholder={this.props.placeholder}/>;
	        }*/
	        // 想更换成antd的Input,影响到的地方比较多，后面再做调整

	    }, {
	        key: 'render',
	        value: function render() {
	            var val = this.props.defaultValue !== undefined ? this.props.defaultValue : '';
	            var className = 'form-control input-sm datatable_input_col_search';
	            return _react2.default.createElement(_antd.Input, { className: className, name: this.props.name, type: this.props.type,
	                ref: this.props.name, maxLength: this.props.maxlength,
	                value: this.state.val, onChange: this.handleChange.bind(this),
	                placeholder: this.props.placeholder });
	        }
	    }]);

	    return ReactInput;
	}(_react2.default.Component);

	exports.default = ReactInput;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(4);

	var _ReactInput = __webpack_require__(141);

	var _ReactInput2 = _interopRequireDefault(_ReactInput);

	__webpack_require__(143);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file ReactModal-Form表单  适用于弹出层的表单
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author luyongfang@baidu.com
	


	var Immutable = __webpack_require__(145);
	var Option = _antd.Select.Option;

	var ReactModal = function (_React$Component) {
	    _inherits(ReactModal, _React$Component);

	    function ReactModal(props) {
	        _classCallCheck(this, ReactModal);

	        var _this = _possibleConstructorReturn(this, (ReactModal.__proto__ || Object.getPrototypeOf(ReactModal)).call(this, props));

	        _this.state = {
	            errMsg: [],
	            visible: typeof props.visible === 'undefined' ? true : props.visible,
	            height: '100%'
	        };
	        _this.params = {};
	        return _this;
	    }

	    _createClass(ReactModal, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {}
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.props = null;
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 当传递了新的props时，将现在存储的参数清空
	            if (!Immutable.is(Immutable.fromJS(this.props.item), Immutable.fromJS(nextProps.item))) {
	                this.params = {};
	            }
	            if (nextProps.visible !== this.state.visible) {
	                this.setState({ visible: nextProps.visible });
	            }
	        }
	    }, {
	        key: 'validateValues',
	        value: function validateValues(dex, val) {
	            var item = this.props.item;
	            if (item && Array.isArray(item.config) && item.config[dex] && !item.config[dex]['isEmpty'] && val === '') {
	                return item.config[dex]['label'] + '不能为空';
	            }
	            return false;
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(ref, dex, val, dataString) {
	            if (dex === 'checkbox') {
	                this.params[ref]['display'] = val.target.checked;
	                this.forceUpdate();
	            } else {
	                var sVal = !dataString ? val : dataString;
	                var strMsg = this.validateValues(dex, sVal);
	                strMsg && (this.state.errMsg[ref] = strMsg);
	                !strMsg && this.state.errMsg[ref] && delete this.state.errMsg[ref];
	                this.params[ref] = sVal;
	            }
	        }
	    }, {
	        key: 'getFormValues',
	        value: function getFormValues() {
	            if (this.props.modalCon.type === 'checkbox') {
	                var ckObj = {};
	                for (var key in this.params) {
	                    ckObj[key] = this.params[key]['display'];
	                }
	                return ckObj;
	            }
	            return this.params;
	        }
	    }, {
	        key: 'formClick',
	        value: function formClick(event) {
	            event.stopPropagation();
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(actionType) {
	            var params = this.params;
	            var oriParams = {};
	            var ckObj = null;
	            if (actionType === 'confirm') {
	                var arrMsg = [];
	                for (var k in this.state.errMsg) {
	                    if (this.state.errMsg.hasOwnProperty(k)) {
	                        arrMsg.push(this.state.errMsg[k]);
	                    }
	                }
	                if (arrMsg.length > 0) {
	                    return true;
	                }
	                if (this.props.modalCon.type === 'checkbox') {
	                    ckObj = {};
	                    for (var key in params) {
	                        ckObj[key] = params[key]['display'];
	                    }
	                }
	                // 将原来的item和现在进行融合
	                if (this.props.data) {
	                    this.params = Object.assign({}, this.props.data, ckObj ? ckObj : this.params, true);
	                }
	                this.props.handleModalClick && this.props.handleModalClick(this.params, ckObj ? ckObj : this.props.data, this.props.item);
	                this.setState({ visible: false, errMsg: [] });
	            } else {
	                this.props.handleCancel && this.props.handleCancel(this.props.item);
	                this.setState({ visible: false, errMsg: [] });
	            }
	        }
	    }, {
	        key: 'generateModal',
	        value: function generateModal() {
	            var self = this;
	            switch (this.props.modalCon.type) {
	                case 'tip':
	                case 'warning':
	                    return _react2.default.createElement(
	                        'div',
	                        { className: 'umpui-tip' },
	                        this.props.modalCon.msg
	                    );
	                    break;
	                case 'form':
	                    var liList = [];
	                    this.props.item.config.forEach(function (item, dex) {
	                        var refKey = 'modal_' + item.name;
	                        var defaultValue = item.defaultValue;
	                        // 设置默认值
	                        self.handleChange(item.name, dex, defaultValue);
	                        switch (item.type) {
	                            case 'select':
	                                var opList = [];
	                                for (var i = 0; i < item.map.length; i++) {
	                                    opList.push(_react2.default.createElement(
	                                        Option,
	                                        { key: 'option' + i, value: item.map[i]['value'] },
	                                        item.map[i]['label']
	                                    ));
	                                }
	                                liList.push(_react2.default.createElement(
	                                    'li',
	                                    { key: 'modal' + dex, type: 'select', 'data-dex': dex },
	                                    _react2.default.createElement(
	                                        'label',
	                                        null,
	                                        item.label
	                                    ),
	                                    _react2.default.createElement(
	                                        _antd.Select,
	                                        { optionFilterProp: 'children', notFoundContent: '\u65E0\u6CD5\u627E\u5230',
	                                            ref: item.name, name: item.name, defaultValue: defaultValue,
	                                            onChange: self.handleChange.bind(self, item.name, dex) },
	                                        opList
	                                    )
	                                ));
	                                break;
	                            case 'input':
	                                liList.push(_react2.default.createElement(
	                                    'li',
	                                    { key: 'modal' + dex, type: 'input', 'data-dex': dex },
	                                    _react2.default.createElement(
	                                        'label',
	                                        null,
	                                        item.label
	                                    ),
	                                    _react2.default.createElement(_ReactInput2.default, { ref: item.name, name: item.name, defaultValue: defaultValue,
	                                        value: item.defaultVal, placeholder: item.desc,
	                                        handleChange: self.handleChange.bind(self, item.name, dex) })
	                                ));
	                                break;
	                            case 'datetime':
	                                liList.push(_react2.default.createElement(
	                                    'li',
	                                    { key: 'modal' + dex, type: 'datetime', 'data-dex': dex },
	                                    _react2.default.createElement(
	                                        'label',
	                                        null,
	                                        item.label
	                                    ),
	                                    _react2.default.createElement(_antd.DatePicker, { showTime: true, format: 'yyyy-MM-dd HH:mm:ss', name: item.name,
	                                        ref: item.name, placeholder: '\u8BF7\u9009\u62E9\u65F6\u95F4',
	                                        onChange: self.handleChange.bind(self, item.name, dex) })
	                                ));
	                                break;
	                            default:
	                                break;
	                        }
	                    });
	                    return _react2.default.createElement(
	                        'div',
	                        null,
	                        this.props.modalCon.msg ? _react2.default.createElement(
	                            'div',
	                            { className: 'umpui-tip' },
	                            this.props.modalCon.msg
	                        ) : '',
	                        _react2.default.createElement(
	                            'ul',
	                            { className: 'umpui-formlist', onClick: this.formClick.bind(this) },
	                            liList
	                        )
	                    );
	                    break;
	                case 'checkbox':
	                    // item是tags,其他传递也这样传递,k => v v is string or object,if object no display must be pass false
	                    var liList2 = [];
	                    var typeDef = Object.prototype.toString;
	                    for (var key in this.props.item) {
	                        var value = this.props.item[key];
	                        !self.params[key] && (self.params[key] = {});
	                        var isObject = typeDef.call(value) === '[object Object]';
	                        // 先判断props是否传递了display, 如果传递了则取值display否则，默认为true
	                        var checked = isObject && value.display !== undefined ? value.display : true;
	                        // 如果是新传递item，则self.params为{}, 会采用props传递的，如果没有更新item, 则采用params中的display
	                        checked = self.params[key]['display'] !== undefined ? self.params[key]['display'] : checked;
	                        var fieldParams = {
	                            title: isObject ? value.title : value,
	                            display: checked
	                        };
	                        Object.assign(self.params[key], isObject ? value : {}, fieldParams);
	                        var label = isObject ? value.title : value;
	                        liList2.push(_react2.default.createElement(
	                            'li',
	                            { key: 'modal' + key },
	                            _react2.default.createElement(
	                                _antd.Checkbox,
	                                { ref: key, key: key, defaultChecked: checked,
	                                    onChange: self.handleChange.bind(self, key, 'checkbox') },
	                                label
	                            )
	                        ));
	                    }
	                    // let dire = this.props.modalCon.direction;
	                    // let clsName = dire && dire === 'horizontal' ? 'umpui-horizontal umpui-ckList'
	                    //     : 'umpui-vertical umpui-ckList';
	                    return _react2.default.createElement(
	                        'div',
	                        null,
	                        this.props.modalCon.msg ? _react2.default.createElement(
	                            'div',
	                            { className: 'umpui-tip' },
	                            this.props.modalCon.msg
	                        ) : '',
	                        _react2.default.createElement(
	                            'ul',
	                            { className: 'umpui-ckList' },
	                            liList2
	                        )
	                    );
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'generateBtn',
	        value: function generateBtn() {
	            var btnList = [];
	            var self = this;
	            var footerCfg = this.props.footer;
	            if (footerCfg) {
	                if (footerCfg.ok) {
	                    var text = footerCfg.ok.text || '确定';
	                    var cfg = Object.assign({}, {
	                        type: 'primary',
	                        onClick: this.handleClick.bind(self, 'confirm')
	                    }, footerCfg.ok);
	                    btnList.push(_react2.default.createElement(
	                        _antd.Button,
	                        _extends({ key: 'onOk' }, cfg),
	                        text
	                    ));
	                }
	                if (footerCfg.cancel) {
	                    var _text = footerCfg.cancel.text || '取消';
	                    var _cfg = Object.assign({}, {
	                        type: 'default',
	                        onClick: this.handleClick.bind(self, 'cancel')
	                    }, footerCfg.cancel);
	                    btnList.push(_react2.default.createElement(
	                        _antd.Button,
	                        _extends({ key: 'onCancel' }, _cfg),
	                        _text
	                    ));
	                }
	            } else {
	                switch (this.props.modalCon.type) {
	                    case 'warning':
	                        btnList.push(_react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary', key: 'onOk',
	                                onClick: this.handleClick.bind(self, 'cancel') },
	                            '\u786E\u5B9A'
	                        ));
	                        break;
	                    default:
	                        btnList.push(_react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary', key: 'onOk',
	                                onClick: this.handleClick.bind(self, 'confirm') },
	                            '\u786E\u5B9A'
	                        ));
	                        btnList.push(_react2.default.createElement(
	                            _antd.Button,
	                            { type: 'default', key: 'onCancel',
	                                onClick: this.handleClick.bind(self, 'cancel') },
	                            '\u53D6\u6D88'
	                        ));
	                        break;
	                }
	            }
	            return btnList;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var title = this.props.modalCon && this.props.modalCon.title;
	            return _react2.default.createElement(
	                _antd.Modal,
	                { title: title || 'Modal', visible: this.state.visible,
	                    okText: '\u786E\u5B9A', cancelText: '\u53D6\u6D88',
	                    onOk: this.handleClick.bind(this, 'confirm'),
	                    onCancel: this.handleClick.bind(this, 'cancel'),
	                    footer: this.generateBtn() },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'umpui-modal' },
	                    this.generateModal()
	                )
	            );
	        }
	    }]);

	    return ReactModal;
	}(_react2.default.Component);

	exports.default = ReactModal;

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 144 */,
/* 145 */
/***/ (function(module, exports) {

	module.exports = window.DLL.Immutable;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(3);

	var _antd = __webpack_require__(4);

	var _utils = __webpack_require__(79);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	/**
	 * @file 简易表格组件
	 * @author luyongfang@baidu.com
	 * */
	/* eslint-disable fecs-camelcase */


	var CheckboxGroup = _antd.Checkbox.Group;
	var RadioGroup = _antd.Radio.Group;
	var Option = _antd.Select.Option;

	var TrRow = function (_React$Component) {
	    _inherits(TrRow, _React$Component);

	    function TrRow(props) {
	        _classCallCheck(this, TrRow);

	        var _this = _possibleConstructorReturn(this, (TrRow.__proto__ || Object.getPrototypeOf(TrRow)).call(this, props));

	        _this.key = _this.props.primaryKey;
	        _this.state = {
	            // checked: this.props.checked,
	            lineData: _this.props.obj,
	            isDown: _this.props.expandAll || false,
	            active: false
	        };
	        return _this;
	    }

	    _createClass(TrRow, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (!_utils.Utils.equals(nextProps.obj, this.props.obj)) {
	                this.key = nextProps.primaryKey;
	                this.setState({
	                    lineData: nextProps.obj
	                });
	            }
	        }
	    }, {
	        key: 'checkIt',
	        value: function checkIt(e) {
	            e = e || window.event;
	            // e.stopPropagation();
	            // e.preventDefault();
	            this.props.checkRow && this.props.checkRow();
	            return;
	        }

	        /**
	         * 因为是多行编辑，所以编辑之后的数据应该统一在table上存储
	         * 同时需要记录编辑的是哪行
	         * 编辑之后的数据，都是保存的value而不是展示的label等
	         * stopPropagation 防止冒泡到tr上触发checkbox的选择事件
	         * @param {string} field 编辑的是哪个字段
	         * @param {string} fieldValue 编辑之后的字段值
	         * @param {Object} e event对象
	         */

	    }, {
	        key: 'setLineData',
	        value: function setLineData(field, fieldValue, e) {
	            e = e || window.event;
	            e.stopPropagation();
	            e.preventDefault();
	            var objNewData = {};
	            objNewData[field] = fieldValue;
	            var objNewLineData = Object.assign({}, this.state.lineData, objNewData);
	            this.props.setEditTableData && this.props.setEditTableData(this.props.id, objNewLineData);
	            this.setState({ lineData: objNewLineData });
	        }

	        /**
	         * radio/inpu没有直接获取事件之后的值，需要通过e获取，封装一层
	         * @param {string} field  要编辑的字段
	         * @param {Object} e Event对象
	         */

	    }, {
	        key: 'setEditData',
	        value: function setEditData(field, e) {
	            e = e || window.event;
	            e.stopPropagation();
	            e.preventDefault();
	            var value = e.target.value;
	            this.setLineData(field, value);
	        }
	        // 从一个对象中获取需要展示的关键字

	    }, {
	        key: 'getKeyDataOfObject',
	        value: function getKeyDataOfObject(obj) {
	            var val = '-';
	            // 如果传入的是一个数组，则递归的遍历这个数组，拿出数组中各个对象的关键字
	            if (obj instanceof Array) {
	                var tArr = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var t = _step.value;

	                        tArr.push(this.getKeyDataOfObject(t));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                val = tArr.join(', ');
	            } else if (obj instanceof Object) {
	                // 如果字段是个对象，则优先获取Title字段，否则将该对象转化为json字符串
	                if (obj.hasOwnProperty('title')) {
	                    val = obj['title'];
	                } else {
	                    val = JSON.stringify(obj);
	                }
	            } else if (obj) {
	                val = obj.toString ? obj.toString() : obj;
	            }
	            return val;
	        }
	    }, {
	        key: 'generatorRow',
	        value: function generatorRow() {
	            var tdList = [];
	            var self = this;
	            var data = self.state.lineData;
	            // rowspan，合并行属性
	            var rowSpan = this.props.rowSpan || 0;
	            var hideDepth = this.props.hideDepth || 0;
	            // 当前行是灰色的,不可以进行编辑
	            var disabled = data['disabled'] ? data['disabled'] : false;
	            // 标签计数器
	            var index = 0;
	            for (var k in self.props.showTags) {
	                // 由于有合并行，所以根据hideDepth跳过前面几列的展示
	                if (hideDepth > index && ++index) {
	                    continue;
	                }
	                // 给td加上rowSpan以合并行
	                var rowspan = {};
	                if (index - hideDepth >= 0) {
	                    rowSpan[index] && (rowspan = { rowSpan: rowSpan[index] });
	                    index++;
	                }
	                var v = self.props.showTags[k];
	                // let tdData = data[k] || '--';
	                var tdData = data[k] !== null && typeof data[k] !== 'undefined' && data[k] !== '' ? data[k] : '-';
	                // 给 td 上添加自定义的 style 和 className
	                var className = '';
	                var style = {};
	                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object') {
	                    if (v.className) {
	                        if (typeof v.className === 'function') {
	                            className += v.className(tdData, data);
	                        } else if (typeof v.className === 'string') {
	                            className += v.className;
	                        }
	                    }
	                    if (v.style) {
	                        if (typeof v.style === 'function') {
	                            Object.assign(style, v.style(tdData, data));
	                        } else if (_typeof(v.style) === 'object') {
	                            Object.assign(style, v.style);
	                        }
	                    }
	                }
	                style = {
	                    className: className,
	                    style: style
	                };
	                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v.display === false) {
	                    continue;
	                } else if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v['type']) {
	                    var elliClass = v['ellipsis'] ? ' ellipsis' : '';
	                    style.className += elliClass;
	                    switch (v.type) {
	                        case 'duration':
	                            var timeDiff = (+new Date() - +new Date(Date.parse(tdData.replace(/-/g, '/')))) / 1000;
	                            var dayTime = Math.floor(timeDiff / (24 * 3600));
	                            var hourTime = Math.floor(timeDiff % (24 * 3600) / 3600);
	                            var minuteTime = Math.floor(timeDiff % (24 * 3600) % 3600 / 60);
	                            var secTime = Math.floor(timeDiff % (24 * 3600) % 3600 % 60);
	                            var timeArr = [];

	                            dayTime > 0 && timeArr.push(dayTime + '天');
	                            hourTime > 0 && timeArr.push(hourTime + '时');
	                            minuteTime > 0 && timeArr.push(minuteTime + '分');

	                            dayTime === 0 && hourTime === 0 && minuteTime === 0 && secTime > 0 && timeArr.push(secTime + '秒');
	                            tdData = timeArr.join('');
	                            (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v['render'] !== undefined && (tdData = v.render(data[k], data));
	                            tdList.push(_react2.default.createElement(
	                                'td',
	                                _extends({}, style, rowspan, { key: k, 'data-key': k }),
	                                tdData
	                            ));
	                            break;
	                        /*case 'edit':
	                            let tdDiv = <td {...rowspan} key={k} data-key={k} ref={k}
	                                    onClick={self.props.handleEdit.bind(null, data, k, data[k])}>
	                                    <span className="fa fa-pencil"></span>{data[k] ? data[k] : ''}</td>;
	                            if (elliClass) {
	                                tdDiv = <Popover content={data[k]}>{tdDiv}</Popover>;
	                            }
	                            tdList.push(tdDiv);
	                            break;*/
	                        case 'JSON':
	                            var json = JSON.stringify(tdData, null, 2);
	                            var html = self.syntaxHighlight(json);
	                            var content = self.createMarkup(html);
	                            tdList.push(_react2.default.createElement(
	                                'td',
	                                _extends({}, style, rowspan, { key: k, 'data-key': k }),
	                                _react2.default.createElement(
	                                    _antd.Popover,
	                                    { content: _react2.default.createElement('pre', { className: 'json', dangerouslySetInnerHTML: content }) },
	                                    _react2.default.createElement('pre', { className: 'json', dangerouslySetInnerHTML: content })
	                                )
	                            ));
	                            break;
	                        case 'html':
	                            tdList.push(_react2.default.createElement('td', _extends({}, style, rowspan, { key: k, 'data-key': k,
	                                dangerouslySetInnerHTML: self.createMarkup(tdData) })));
	                            break;
	                        // 默认不能不输出啊，页面会乱掉的
	                        default:
	                            tdList.push(_react2.default.createElement(
	                                'td',
	                                _extends({}, style, rowspan, { key: k, 'data-key': k }),
	                                this.getKeyDataOfObject(tdData)
	                            ));
	                            break;
	                    }
	                } else {

	                    var _elliClass = (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v['ellipsis'] ? ' ellipsis' : '';
	                    style.className += _elliClass;
	                    (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v['render'] !== undefined && (tdData = v.render(data[k], data));
	                    /**
	                     * 1. 是否可编辑edit: true/false
	                     * 2. 当前编辑字段的类型: text/radio/checkbox/select
	                     * 3. text => input
	                     *    radio => 只有1个 boolean选择是或者否
	                     *    radioGroup => group组选择
	                     *    checkbox => 可能有多个选择-配置map[]
	                     *    select => 提供map
	                     * 4. tr处在disabled的状态下是不可以进行编辑的,且展示的字段是中文不能够是值
	                     *    这里的编辑配置只适合数据比较少的情况，前端可以配置的
	                     *    对于编辑项的配置比较复杂的情况不适合，如下拉框好长好长的需要从后端获取的
	                     *    对于从后端获取的option的这种情况可以在ajax请求后更改tableCfg重新渲染获得-待做感觉不太好
	                     */
	                    var arrEdit = [];
	                    var newTdData = null;
	                    if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v['editCfg'] && v['editCfg']['edit']) {
	                        switch (v.editCfg['elemType']) {
	                            case 'text':
	                                if (disabled || !this.props.lineEdit) {
	                                    newTdData = tdData;
	                                    break;
	                                }
	                                arrEdit.push(_react2.default.createElement(_antd.Input, { defaultValue: tdData,
	                                    onChange: this.setEditData.bind(this, k) }));
	                                break;
	                            case 'radio':
	                                if (disabled || !this.props.lineEdit) {
	                                    newTdData = tdData;
	                                    break;
	                                }
	                                var arrValues = ['是', 1, false, '1'];
	                                var arrAgainstValues = ['否', 0, true, '0'];
	                                var checked = false;
	                                var bSwitchVal = -1;
	                                var iDex = arrValues.indexOf(tdData);
	                                if (iDex !== -1) {
	                                    checked = true;
	                                    bSwitchVal = arrAgainstValues[iDex];
	                                } else {
	                                    iDex = arrAgainstValues.indexOf(tdData);
	                                    bSwitchVal = arrValues[iDex];
	                                }
	                                arrEdit.push(_react2.default.createElement(_antd.Radio, { defaultChecked: checked, checked: checked,
	                                    onClick: this.setLineData.bind(this, k, bSwitchVal) }));
	                                break;
	                            case 'checkbox':
	                                /**
	                                 * defaultValue对应options中的label字段
	                                 * checkbox可以多选，就说明值可以是多个，这里多个值用逗号进行分割
	                                 */
	                                var arrOptions = v['editCfg']['options'];
	                                var arrData = tdData.split(',');
	                                var arrDefv = [];
	                                var arrDefL = [];
	                                var _iteratorNormalCompletion2 = true;
	                                var _didIteratorError2 = false;
	                                var _iteratorError2 = undefined;

	                                try {
	                                    for (var _iterator2 = arrOptions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                                        var option = _step2.value;

	                                        if (arrData.indexOf(option['value'].trim()) !== -1) {
	                                            arrDefv.push(option['value']);
	                                            arrDefL.push(option['label']);
	                                        }
	                                    }
	                                } catch (err) {
	                                    _didIteratorError2 = true;
	                                    _iteratorError2 = err;
	                                } finally {
	                                    try {
	                                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                            _iterator2.return();
	                                        }
	                                    } finally {
	                                        if (_didIteratorError2) {
	                                            throw _iteratorError2;
	                                        }
	                                    }
	                                }

	                                if (disabled || !this.props.lineEdit) {
	                                    newTdData = arrDefL.join(',');
	                                    break;
	                                }
	                                arrEdit.push(_react2.default.createElement(CheckboxGroup, { options: arrOptions, defaultValue: arrDefv,
	                                    onClick: this.setLineData.bind(this, k) }));
	                                break;
	                            case 'radioGroup':
	                                /**
	                                 * radioGroup只能选择一个, 大于等于2个可选项的情况
	                                 * 后端返回的data中的值是value而不是展示的label
	                                 */
	                                var arrGOptions = v['editCfg']['options'];
	                                var tdLabel = null;
	                                var arrRadioList = [];
	                                var _iteratorNormalCompletion3 = true;
	                                var _didIteratorError3 = false;
	                                var _iteratorError3 = undefined;

	                                try {
	                                    for (var _iterator3 = arrGOptions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                                        var _option = _step3.value;

	                                        var strKey = _option['value'] + data[this.key];
	                                        tdData === _option['value'] && (tdLabel = _option['label']);
	                                        arrRadioList.push(_react2.default.createElement(
	                                            _antd.Radio,
	                                            { key: strKey, value: _option['value'] },
	                                            _option['label']
	                                        ));
	                                    }
	                                } catch (err) {
	                                    _didIteratorError3 = true;
	                                    _iteratorError3 = err;
	                                } finally {
	                                    try {
	                                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                                            _iterator3.return();
	                                        }
	                                    } finally {
	                                        if (_didIteratorError3) {
	                                            throw _iteratorError3;
	                                        }
	                                    }
	                                }

	                                if (disabled || !this.props.lineEdit) {
	                                    newTdData = tdLabel;
	                                    break;
	                                }
	                                arrEdit.push(_react2.default.createElement(
	                                    RadioGroup,
	                                    { value: tdData,
	                                        onChange: this.setEditData.bind(this, k) },
	                                    arrRadioList
	                                ));
	                                break;
	                            case 'select':
	                                /**
	                                 * select列表
	                                 */
	                                var objOptions = v['editCfg']['options'];
	                                var selList = [];
	                                if (disabled || !this.props.lineEdit) {
	                                    newTdData = objOptions[tdData];
	                                    break;
	                                }
	                                for (var i in objOptions) {
	                                    if (objOptions.hasOwnProperty(i)) {
	                                        selList.push(_react2.default.createElement(
	                                            Option,
	                                            { key: 'option' + i, value: i },
	                                            objOptions[i]
	                                        ));
	                                    }
	                                }
	                                arrEdit.push(_react2.default.createElement(
	                                    _antd.Select,
	                                    { defaultValue: tdData,
	                                        onChange: this.setLineData.bind(this, k) },
	                                    selList
	                                ));
	                                break;
	                            default:
	                                break;
	                        }
	                    }
	                    var tdDiv = _react2.default.createElement(
	                        'td',
	                        _extends({}, style, rowspan, { key: k, ref: k,
	                            'data-key': k }),
	                        arrEdit.length > 0 ? arrEdit : newTdData ? newTdData : tdData
	                    );
	                    // 气泡卡片
	                    if (_elliClass) {
	                        tdDiv = _react2.default.createElement(
	                            _antd.Popover,
	                            { key: k, content: data[k] },
	                            tdDiv
	                        );
	                    }
	                    tdList.push(tdDiv);
	                }
	            }
	            var operationSpan = [];
	            var tableCfg = self.props.tableCfg;
	            var cfg = tableCfg.cfg || {};
	            if (cfg.checkBox) {
	                operationSpan.push(_react2.default.createElement(
	                    'span',
	                    { key: 'trcheckbox' },
	                    _react2.default.createElement(_antd.Checkbox, { checked: self.props.checked, onChange: this.checkIt.bind(this), disabled: disabled })
	                ));
	            }
	            if (cfg.expand) {
	                var foldUp = 'fa fa-caret-right';
	                var foldDown = 'fa fa-caret-down';
	                var strClaName = this.state.isDown || this.props.expandAll ? foldDown : foldUp;
	                operationSpan.push(_react2.default.createElement('span', { key: 'trexpand', 'data-key': data[this.key], className: strClaName,
	                    onClick: self.expandExtraInfo.bind(self, 'expandtr' + data[this.key]) }));
	            }
	            if (hideDepth === 0 && operationSpan.length > 0) {
	                var tipEle = void 0;
	                if (cfg.tips) {
	                    var tips = this.props.obj[cfg.tips];
	                    // 如果数据没有tips字段，则不添加气泡。这样用户就可指定某些行展示气泡，而某些不展示
	                    tipEle = tips && _react2.default.createElement(
	                        _antd.Popover,
	                        { content: tips },
	                        _react2.default.createElement(
	                            'span',
	                            { key: 'trtips', 'data-key': data[this.key] },
	                            operationSpan
	                        )
	                    );
	                }
	                tdList.unshift(_react2.default.createElement(
	                    'td',
	                    { key: 'extra' + data[this.key], className: 'extra' },
	                    tipEle || operationSpan
	                ));
	            }
	            return tdList;
	        }
	    }, {
	        key: 'expandExtraInfo',
	        value: function expandExtraInfo(refK, e) {
	            e = e || window.event;
	            e.stopPropagation();
	            e.preventDefault();
	            this.props.expandExtraInfo(refK, !this.state.isDown);
	            this.setState({ isDown: !this.state.isDown });
	        }
	    }, {
	        key: 'syntaxHighlight',
	        value: function syntaxHighlight(json) {
	            if (typeof json !== 'string') {
	                json = JSON.stringify(json, undefined, 2);
	            }
	            var self = this;
	            json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');
	            return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
	                var cls = 'number';
	                if (/^"/.test(match)) {
	                    if (/:$/.test(match)) {
	                        cls = 'key';
	                    } else {
	                        try {
	                            var type = JSON.parse(match);
	                            if (_typeof(JSON.parse(type)) === 'object') {
	                                return self.syntaxHighlight(JSON.parse(type));
	                            } else {
	                                cls = 'string';
	                            }
	                        } catch (e) {
	                            cls = 'string';
	                        }
	                    }
	                } else if (/true|false/.test(match)) {
	                    cls = 'boolean';
	                } else if (/null/.test(match)) {
	                    cls = 'null';
	                }
	                return '<span class="' + cls + '">' + match + '</span>';
	            });
	        }
	    }, {
	        key: 'createMarkup',
	        value: function createMarkup(htmlString) {
	            return {
	                __html: htmlString
	            };
	        }
	    }, {
	        key: 'removeActiveStatus',
	        value: function removeActiveStatus() {
	            this.setState({ active: false });
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(event) {
	            var data = this.state.lineData;
	            // 当前行是灰色的,不可以进行编辑
	            var disabled = data['disabled'] ? data['disabled'] : false;
	            if (!disabled) {
	                // this.props.onClick(this.props.id, !this.props.checked, this.props.obj, event);
	                this.props.onClick && this.props.onClick(event);
	            }
	        }
	    }, {
	        key: 'doubleClick',
	        value: function doubleClick(event) {
	            var data = this.state.lineData;
	            // 当前行是灰色的,不可以进行编辑
	            var disabled = data['disabled'] ? data['disabled'] : false;
	            if (!disabled) {
	                this.props.onDoubleClick && this.props.onDoubleClick(event);
	                this.setState({ active: true });
	            }
	        }
	    }, {
	        key: 'handleHover',
	        value: function handleHover(event) {
	            this.props.onHover && this.props.onHover(event);
	        }
	    }, {
	        key: 'handleLeave',
	        value: function handleLeave(event) {
	            this.props.onLeave && this.props.onLeave(event);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var rowsCfg = this.props.tableCfg.rows || {};
	            var disabled = this.props.obj['disabled'] ? this.props.obj['disabled'] : false;
	            // let className = this.state.active ? 'actived' : '';
	            // className += this.props.checked ? ' selected' : '';
	            // let style = disabled ? {background: '#e4e5e7'} : {};
	            // 支持自定义tr的class和style（可以是function或者string）
	            var className = '';
	            var style = {};
	            if (rowsCfg.className) {
	                if (typeof rowsCfg.className === 'function') {
	                    className += rowsCfg.className(this.props.obj);
	                } else if (typeof rowsCfg.className === 'string') {
	                    className += rowsCfg.className;
	                }
	            }
	            if (rowsCfg.style) {
	                if (typeof rowsCfg.style === 'function') {
	                    Object.assign(style, rowsCfg.style(this.props.obj));
	                } else if (_typeof(rowsCfg.style) === 'object') {
	                    Object.assign(style, rowsCfg.style);
	                }
	            }
	            className += this.state.active ? ' actived' : '';
	            className += this.props.checked ? ' selected' : '';
	            Object.assign(style, disabled ? { background: '#e4e5e7' } : {});
	            return _react2.default.createElement(
	                'tr',
	                { ref: 'tr', style: style,
	                    className: className,
	                    onMouseEnter: this.handleHover.bind(this),
	                    onMouseLeave: this.handleLeave.bind(this),
	                    onClick: this.handleClick.bind(this),
	                    onDoubleClick: this.doubleClick.bind(this) },
	                this.generatorRow()
	            );
	        }
	    }]);

	    return TrRow;
	}(_react2.default.Component);

	exports.default = TrRow;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(3);

	var _antd = __webpack_require__(4);

	var _UDnD = __webpack_require__(148);

	var _UDnD2 = _interopRequireDefault(_UDnD);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	/**
	 * @file 简易表格组件
	 * @author liuzechun@baidu.com
	 * */
	/* eslint-disable fecs-camelcase */


	var styles = {
	    block: {
	        maxWidth: 250
	    },
	    checkbox: {
	        marginBottom: 16
	    }
	};

	var ThRow = function (_React$Component) {
	    _inherits(ThRow, _React$Component);

	    function ThRow(props) {
	        _classCallCheck(this, ThRow);

	        var _this = _possibleConstructorReturn(this, (ThRow.__proto__ || Object.getPrototypeOf(ThRow)).call(this, props));

	        _this.state = {
	            checked: _this.props.checked,
	            // 排序的是哪个字段，排序的规则
	            sortField: _this.props.sortField ? _this.props.sortField : '',
	            sort: _this.props.sort ? _this.props.sort : ''
	        };
	        return _this;
	    }

	    _createClass(ThRow, [{
	        key: 'checkAll',
	        value: function checkAll() {
	            this.props.checkAll(!this.props.checked);
	            this.setState({ checked: !this.state.checked });
	            return;
	        }
	    }, {
	        key: 'sortClick',
	        value: function sortClick(sortField) {
	            // sortType为true 代表是ASC排序
	            var sortType = this.state.sortField === sortField ? !this.state.sort : true;
	            this.setState({ sort: sortType, sortField: sortField });
	            this.props.sortColumn && this.props.sortColumn(sortType, sortField);
	        }
	    }, {
	        key: 'handleDragDrop',
	        value: function handleDragDrop(srcData, dropData, e) {
	            e = e || window.event;
	            // 防止传播到th的click的事件上
	            e.stopPropagation();
	            this.props.changeColumnOrder(srcData['data-field'], dropData['data-field']);
	        }
	    }, {
	        key: 'generatorRow',
	        value: function generatorRow() {
	            var thList = [];
	            for (var key in this.props.showTags) {
	                var dndProps = {
	                    'data-field': key,
	                    'handleDragDrop': this.handleDragDrop.bind(this)
	                };
	                var value = this.props.showTags[key];
	                if (key === 'operation' && (value.display || value.display == null)) {
	                    thList.push(_react2.default.createElement(
	                        'th',
	                        { key: key },
	                        '\u64CD\u4F5C'
	                    ));
	                } else if (key === 'cusOperation' && (value.display || value.display == null)) {
	                    thList.push(_react2.default.createElement(
	                        'th',
	                        { key: key },
	                        value['title']
	                    ));
	                } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && (value.display || value.display == null)) {
	                    var spanSort = [];
	                    var sortAscCss = 'fa fa-sort-asc ' + (this.state.sort && key === this.state.sortField ? 'umpui-asc' : '');
	                    var sortDescCss = 'fa fa-sort-desc ' + (!this.state.sort && key === this.state.sortField ? 'umpui-desc' : '');
	                    if (value.sort) {
	                        spanSort.push(_react2.default.createElement('span', { className: sortAscCss, key: 'sortasc' }));
	                        spanSort.push(_react2.default.createElement('span', { className: sortDescCss, key: 'sortdesc' }));
	                        thList.push(_react2.default.createElement(
	                            'th',
	                            { key: key, onClick: this.sortClick.bind(this, key) },
	                            _react2.default.createElement(
	                                _UDnD2.default,
	                                dndProps,
	                                value['title'],
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'umpui-sortcon' },
	                                    spanSort
	                                )
	                            )
	                        ));
	                    } else {
	                        thList.push(_react2.default.createElement(
	                            'th',
	                            { key: key },
	                            _react2.default.createElement(
	                                _UDnD2.default,
	                                dndProps,
	                                value['title']
	                            )
	                        ));
	                    }
	                } else if (typeof value === 'string') {
	                    thList.push(_react2.default.createElement(
	                        'th',
	                        { key: key },
	                        _react2.default.createElement(
	                            _UDnD2.default,
	                            dndProps,
	                            value
	                        )
	                    ));
	                }
	            }
	            var operationArr = [];
	            if (this.props.tableCfg.cfg && this.props.tableCfg.cfg.checkBox) {
	                operationArr.push(_react2.default.createElement(
	                    'span',
	                    { key: 'thcheckbox' },
	                    _react2.default.createElement(_antd.Checkbox, { checked: this.props.checked, onChange: this.checkAll.bind(this) })
	                ));
	            }
	            if (this.props.tableCfg.cfg && this.props.tableCfg.cfg.expand) {
	                var foldUp = 'fa fa-caret-right';
	                var foldDown = 'fa fa-caret-down';
	                var strClaName = this.props.expandAll ? foldDown : foldUp;
	                operationArr.push(_react2.default.createElement('span', { key: 'thexpand', 'data-key': 'expandAll',
	                    className: strClaName, onClick: this.props.expandAllExtra }));
	            }
	            if (operationArr.length > 0) {
	                thList.unshift(_react2.default.createElement(
	                    'th',
	                    { key: 'operations', className: 'extra' },
	                    operationArr
	                ));
	            }
	            return thList;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var thList = this.generatorRow();
	            return _react2.default.createElement(
	                'thead',
	                null,
	                _react2.default.createElement(
	                    'tr',
	                    null,
	                    thList
	                )
	            );
	        }
	    }]);

	    return ThRow;
	}(_react2.default.Component);

	exports.default = ThRow;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(92);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file UDnD 拖拽组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @desc 实现基本的拖拽功能，可以给要拖拽的组件传递数据
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author luyongffang@baidu.com
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var UDnD = function (_BaseComponent) {
	    _inherits(UDnD, _BaseComponent);

	    function UDnD(props) {
	        _classCallCheck(this, UDnD);

	        return _possibleConstructorReturn(this, (UDnD.__proto__ || Object.getPrototypeOf(UDnD)).call(this, props));
	    }

	    _createClass(UDnD, [{
	        key: 'getSrcData',
	        value: function getSrcData(event) {
	            var srcData = {};
	            var arrTypes = event.dataTransfer.types;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arrTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    srcData[v] = event.dataTransfer.getData(v);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return srcData;
	        }
	    }, {
	        key: 'dragStart',
	        value: function dragStart(event) {
	            event = event || window.event;
	            event.dataTransfer.effectAllowed = 'copyMove';
	            for (var k in this.props) {
	                if (k.indexOf('-') !== -1) {
	                    event.dataTransfer.setData(k, this.props[k]);
	                }
	            }
	        }
	    }, {
	        key: 'dragOver',
	        value: function dragOver(event) {
	            event = event || window.event;
	            event.preventDefault();
	        }
	    }, {
	        key: 'dragDrop',
	        value: function dragDrop(event) {
	            event = event || window.event;
	            event.stopPropagation();
	            var objDatas = {};
	            var namedNodeMap = event.target.attributes;
	            for (var k in namedNodeMap) {
	                var nodeName = namedNodeMap[k].nodeName;
	                if (nodeName && nodeName.indexOf('-') !== -1) {
	                    objDatas[nodeName] = namedNodeMap[k].nodeValue;
	                }
	            }
	            var srcData = this.getSrcData(event);
	            this.props.handleDragDrop && this.props.handleDragDrop(srcData, objDatas);
	        }
	    }, {
	        key: 'dragEnd',
	        value: function dragEnd(event) {
	            console.log('drag end');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var props = this.__filterProps(this.props, 'handleDragDrop');
	            return _react2.default.createElement(
	                'div',
	                _extends({ draggable: 'true' }, props, { onDragStart: this.dragStart.bind(this),
	                    onDrop: this.dragDrop.bind(this), onDragEnd: this.dragEnd.bind(this),
	                    onDragOver: this.dragOver.bind(this) }),
	                this.props.children
	            );
	        }
	    }]);

	    return UDnD;
	}(_base.BaseComponent);

	exports.default = UDnD;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 发起更新故障报修
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author luyongfang@baidu.com
	


	var Confirm = function (_React$Component) {
	    _inherits(Confirm, _React$Component);

	    function Confirm(props) {
	        _classCallCheck(this, Confirm);

	        var _this = _possibleConstructorReturn(this, (Confirm.__proto__ || Object.getPrototypeOf(Confirm)).call(this, props));

	        _this.state = {
	            value: ''
	        };
	        return _this;
	    }

	    _createClass(Confirm, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {}
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({ value: e.target.value });
	        }
	    }, {
	        key: 'onConfirm',
	        value: function onConfirm() {
	            this.props.onConfirm(this.state.value);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var inputCfg = this.props.type === 'textarea' ? { type: 'textarea', autosize: { minRows: 2 }, style: { width: '220px' } } : { type: this.props.type };
	            return _react2.default.createElement(
	                _antd.Popconfirm,
	                { placement: 'topRight',
	                    okText: '\u786E \u8BA4', cancelText: '\u53D6 \u6D88',
	                    onConfirm: this.onConfirm.bind(this),
	                    title: _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            this.props.tips
	                        ),
	                        _react2.default.createElement(_antd.Input, _extends({ size: 'small', style: { width: '130px', marginTop: '6px' },
	                            value: this.state.value }, inputCfg, {
	                            onChange: this.onChange.bind(this) }))
	                    ) },
	                this.props.children
	            );
	        }
	    }]);

	    return Confirm;
	}(_react2.default.Component);

	exports.default = Confirm;

/***/ }),
/* 150 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 151 */,
/* 152 */
/***/ (function(module, exports) {

	module.exports = window.DLL.moment_zh_cn;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
	file 适配器，把组件配置转换为统一规范格式
	author liuzechun
	


	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _Antd = __webpack_require__(91);

	var _Antd2 = _interopRequireDefault(_Antd);

	var _loader = __webpack_require__(154);

	var _loader2 = _interopRequireDefault(_loader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 不属于config的参数，适配用户配置的参数时使用
	var KeyWord = ['name', 'type', 'content', 'childrenHolder'];

	exports.default = {
	    get: function get(item) {
	        // 每个组件都要有key。同步设置在用户传入的config上，使key一旦设置即不再变化
	        item.key = item.key || item.name || _utils.Utils.uniqueId();

	        var Item = _loader2.default.get(item);
	        var props = _utils.Utils.filter(item, KeyWord);
	        // 把 content 转化成 children。
	        // update at 2017/10/25,如果没有content,则使用原来的children
	        // update at 2018/01/11,如果只有原来有值，才执行赋值操作
	        if (item.content || props.children) {
	            props.children = item.content || props.children;
	        }
	        // 格式化 class 和 style
	        props = this.formatCS(props);
	        // 如果是基于BaseComponent的组件内部要用到的属性处理
	        if (_utils.Utils.isExtendsOf(Item, _base.BaseComponent)) {
	            props['__type'] = item.type;
	            props['__key'] = props['key'];
	            // 如果有name的话，把组件放到缓存池里
	            if (item.name) {
	                props['__cache'] = item.name;
	            }
	            // 由于 type 关键字把原antd等的 type 覆盖掉了，配置里用 mode 字段代替
	            // 实例化组件时，还要把 type 还原
	            if (_utils.Utils.isExtendsOf(Item, _Antd2.default)) {
	                if (props.mode) {
	                    props.type = props.mode;
	                }
	            }
	            // 非 BaseComponent 组件 _root 等属性无效
	        } else {
	            props.name = item.name;
	            delete props._root;
	            delete props._factory;
	        }

	        return props;
	    },

	    // 供 BaseComponent 使用，在 set 之前
	    beforeSet: function beforeSet(component, options) {
	        this.formatCS(options);
	        // 实例化组件时，还要把 type 还原
	        if (component instanceof _Antd2.default) {
	            if (options.mode) {
	                options.type = options.mode;
	            }
	        }
	        return options;
	    },

	    // 把 class、style 转换为 react 需要的 className、style对象
	    formatCS: function formatCS(props) {
	        if (props.class) {
	            props.className += ' ' + props.class;
	            delete props.class;
	        }
	        if (props.style && _utils.Utils.typeof(props.style, 'string')) {
	            props.style = this.toCamalObj(props.style);
	        }
	        return props;
	    },

	    // 把 字符串style 转换为 react 需要的对象
	    toCamalObj: function toCamalObj(style) {
	        var arr = style.split(';');
	        var obj = {};
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;

	                var _v$split = v.split(':'),
	                    _v$split2 = _slicedToArray(_v$split, 2),
	                    key = _v$split2[0],
	                    value = _v$split2[1];
	                // 可以再优化下


	                var newKey = key.split('-').map(function (i) {
	                    return i.replace(/^\w/g, function (v) {
	                        return v.toUpperCase();
	                    });
	                }).join('').replace(/^\w/g, function (v) {
	                    return v.toLowerCase();
	                });
	                obj[newKey] = value;
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return obj;
	    }
	};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	var _model = __webpack_require__(155);

	var _model2 = _interopRequireDefault(_model);

	var _dom = __webpack_require__(156);

	var _dom2 = _interopRequireDefault(_dom);

	var _src = __webpack_require__(74);

	var UF = _interopRequireWildcard(_src);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @file 载入组件，供 Factory 获取
	 *      根据配置的 type，转换成对应组件并返回
	 * @author liuzechun@baidu.com
	 */
	var FilterProps = _base.BaseConf.FilterProps;
	exports.default = {
	    component: Object.assign(UF),

	    // 添加组件
	    add: function add(components) {
	        Object.assign(this.component, components);
	    },


	    // 根据 type 获取组件
	    get: function get(item) {
	        var type = item.type;
	        var name = _utils.Utils.toPascal(type);
	        var result = this.component[name];
	        if (!result) {
	            // 检查是否为React原生元素
	            if (_react2.default.DOM.hasOwnProperty(type)) {
	                // 1、如果有name，说明用户想要操作组件；
	                // 2、如果使用了数据绑定：使用Dom组件进行封装，实现组件缓存和刷新
	                // 3、如果配置了具有特殊功能的属性
	                // 否则用原生的增强性能
	                if (item.name || _model2.default.if(item) || _utils.Utils.isIntersection(FilterProps, Object.keys(item))) {
	                    result = _dom2.default;
	                } else {
	                    result = type;
	                }
	            } else {
	                this.error(type);
	            }
	        }
	        return result;
	    },


	    // 打印错误信息
	    error: function error(type) {
	        console.error('Uncaught TypeError: type \'' + type + '\' is invalid.');
	    }
	};

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(79);

	var _cache = __webpack_require__(94);

	// 使用model表达式格式 ${xxx}
	/**
	 * @file 数据/页面绑定 处理模块
	 * @author liuzechun
	 */
	var Expre = /\${(\S+?)}/g;
	// const Expre = /\${(\S+?)}/;

	exports.default = {

	    // 给用户使用
	    set: function set(model, data) {
	        // 更新data的数据
	        _cache.ModelCache.setData(model, data);
	        // 更新完数据后刷新相关联的组件
	        var connections = _cache.ModelCache.getConnections(model);
	        for (var i in connections) {
	            // 获取缓存中的组件
	            var comp = _cache.ComponentsCache.get(i);
	            if (!!comp) {
	                var item = connections[i];
	                var options = {};
	                for (var j in item) {
	                    // 从ModelCache中取出当前对应值把模板内容替换掉
	                    options[j] = this.replaceModel(item[j]);
	                }
	                // 调用组件的set函数刷新组件全部受影响的属性
	                comp.set(options);
	            }
	        }
	        // console.log(ModelCache);
	    },
	    get: function get(model) {
	        return _cache.ModelCache.getData(model);
	    },


	    /* 程序内部调用 *************************************************************/

	    // 替换模板中的内容
	    replaceModel: function replaceModel(item) {
	        return item.replace(Expre, function (p1, model) {
	            return _cache.ModelCache.getData(model);
	        });
	    },


	    // 设置组件及属性和数据的关联关系
	    setCache: function setCache(cacheName, options) {
	        var _this = this;

	        // let currComp = ComponentsCache.get(cacheName);
	        var models = _cache.ModelCache.getModel();

	        var _loop = function _loop(i) {
	            var item = options[i];
	            if (_this.is(item)) {
	                // match会返回全部匹配到的数组
	                item.match(Expre).map(function (v) {
	                    var model = v.slice(2, -1);
	                    if (!models[model]) {
	                        models[model] = {};
	                    }
	                    if (!models[model][cacheName]) {
	                        models[model][cacheName] = {};
	                    }
	                    if (!models[model][cacheName][i]) {
	                        models[model][cacheName][i] = item;
	                    }
	                });
	                // 顺便把模板替换掉（初始化）
	                options[i] = _this.replaceModel(item);
	            }
	        };

	        for (var i in options) {
	            _loop(i);
	        }
	        return options;
	    },


	    // 把数据插入到模板中，返回新的字符串
	    insert: function insert(tml, data) {
	        return tml.replace();
	    },


	    // 判断是否关联model数据
	    if: function _if(item) {
	        for (var i in item) {
	            // 只要有一条数据是使用了model，则为true
	            if (this.is(item[i])) {
	                return true;
	            }
	        }
	        return false;
	    },


	    // 判断一个值是否使用model
	    is: function is(value) {
	        return _utils.Utils.typeof(value, 'string') && value.search(Expre) >= 0;
	    }
	};

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(157).default;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(92);

	var _utils = __webpack_require__(79);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 需要操作的原生dom继承 BaseComponent
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-17 04:11:07
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Dom = function (_BaseComponent) {
	    _inherits(Dom, _BaseComponent);

	    function Dom(props) {
	        _classCallCheck(this, Dom);

	        var _this = _possibleConstructorReturn(this, (Dom.__proto__ || Object.getPrototypeOf(Dom)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Dom, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(this.props.__type, this.__props);
	        }
	    }]);

	    return Dom;
	}(_base.BaseComponent);

	exports.default = Dom;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(79);

	var _cache = __webpack_require__(94);

	/**
	 * @file 权限控制模块
	 * @author liuzechun
	 */

	exports.default = {
	    check: function check(item) {
	        var authorityList = _cache.Config.get('authority');
	        var result = true;
	        if (!_utils.Utils.typeof(item.authority, 'undefined')) {
	            result = !!authorityList[item.authority];
	        }
	        return result;
	    }
	};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(79);

	var _cache = __webpack_require__(94);

	var _loader = __webpack_require__(154);

	var _loader2 = _interopRequireDefault(_loader);

	var _adaptor = __webpack_require__(153);

	var _adaptor2 = _interopRequireDefault(_adaptor);

	var _authority = __webpack_require__(158);

	var _authority2 = _interopRequireDefault(_authority);

	var _validator = __webpack_require__(160);

	var _validator2 = _interopRequireDefault(_validator);

	var _whitelist = __webpack_require__(161);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	var _requirejs = __webpack_require__(162);

	var _requirejs2 = _interopRequireDefault(_requirejs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 解析配置，生成页面
	主要负责调度各个解析工具，并生成组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	// import Html from './html.js';


	var Factory = function (_PureComponent) {
	    _inherits(Factory, _PureComponent);

	    function Factory(props) {
	        _classCallCheck(this, Factory);

	        var _this = _possibleConstructorReturn(this, (Factory.__proto__ || Object.getPrototypeOf(Factory)).call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    _createClass(Factory, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 如果配置变化，清空保存的解析结果，重新解析
	            if (!_utils.Utils.equals(this.props, nextProps)) {
	                this._cacheContent = null;
	            }
	        }

	        // 解析组件配置，生成组件

	    }, {
	        key: 'generateItem',
	        value: function generateItem(item) {
	            // 如果模块是一个函数，先执行函数得到返回的配置
	            if (_utils.Utils.typeof(item, 'function')) {
	                item = item();
	                if (_utils.Utils.typeof(item, 'array')) {
	                    return this.generateElement(item);
	                }
	            }
	            // 如果是字符串直接返回
	            if (!_utils.Utils.typeof(item, 'object')) {
	                return item;
	            }
	            // 如果没有定义type，且有configTpl配置模板，则从模板中取出type
	            if (!item.type && item.configTpl) {
	                var tpl = _cache.Config.get('components.' + item.configTpl);
	                if (tpl) {
	                    if (_utils.Utils.typeof(tpl, 'function')) {
	                        tpl = tpl();
	                    }
	                    item.type = tpl.type;
	                }
	            }
	            // 校验是否有 type 属性，如果没有会报错
	            if (!_validator2.default.check(item, 'type', 'string')) {
	                return item;
	            }
	            // 校验权限，没权限的元素返回 null
	            if (!_authority2.default.check(item)) {
	                return null;
	            }

	            // 如果是 html 类型，使用 html 模板解析器来解析，然后直接返回
	            // TODO: 把模板解析器也做成一个组件
	            if (item.type === 'html') {
	                // return new Html(item.content);
	                // 直接使用InnerHTML，以节省性能
	                // return <section className={'uf-html ' + (item.className || '')} style={item.style}
	                //     dangerouslySetInnerHTML={{__html: item.content}}></section>;
	                // 按照正常流程走
	                item.type = 'section';
	                item.className = 'uf-html ' + (item.className || '');
	                item.dangerouslySetInnerHTML = { __html: item.content };
	                delete item.content;
	            }
	            // 从loader中获取到相应的组件
	            var Item = _loader2.default.get(item);
	            if (!Item) {
	                return;
	            }

	            // 把 factory 的 this 传给每个组件方便组件内部进行配置解析和使用外部的props等
	            item._factory = this;

	            var props = this.handleProps(item);

	            return _react2.default.createElement(Item, props);
	        }

	        // 处理用户配置的参数，并生成组件需要使用的 props

	    }, {
	        key: 'handleProps',
	        value: function handleProps(item) {
	            // 通过适配器把参数转换成标准格式，剔除掉一些无用属性等
	            var props = _adaptor2.default.get(item);
	            // 判断其他需要额外进一步解析的属性并进行解析
	            props = this.analysisAgain(props, item.type);
	            // 处理children属性
	            props = this.handleChildren(props, item.childrenHolder);
	            return props;
	        }

	        // 在组件配置中，childrenHolder属性指定把子页面放在父组件的哪个位置

	    }, {
	        key: 'handleChildren',
	        value: function handleChildren(props, hasChildrenHolder) {
	            // 此处把通过路由传入的子组件放在当前配置树的定义了 childrenHolder 的节点下作为组件的子组件
	            // this.props.children 是通过路由传入的子组件
	            if (hasChildrenHolder && this.props.children) {
	                if (!props.children) {
	                    props.children = this.props.children;
	                } else {
	                    // 已经存在children的情况下，把children合并。兼容处理
	                    !_utils.Utils.typeof(props.children, 'array') && (props.children = [props.children]);
	                    props.children.push(this.props.children);
	                }
	            }
	            return props;
	        }

	        // 拆分多个config，分离成组件的配置

	    }, {
	        key: 'generateElement',
	        value: function generateElement(config) {
	            // 如果是字符串直接返回
	            if (_utils.Utils.typeof(config, 'string')) {
	                return config;
	            }
	            var result = void 0;
	            if (_utils.Utils.typeof(config, 'array')) {
	                result = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = config[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var item = _step.value;

	                        result.push(this.generateElement(item));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            } else {
	                result = this.generateItem(config);
	            }
	            return result;
	        }

	        // 有些属性可以是ReactNode，也就是也可以配置成一个组件，所以需要再次把这些属性解析为组件

	    }, {
	        key: 'analysisAgain',
	        value: function analysisAgain(props, type) {
	            var list = _whitelist2.default.get(props, type);
	            if (list) {
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                    for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                        var v = _step2.value;

	                        props[v] = this.generateElement(props[v]);
	                    }
	                } catch (err) {
	                    _didIteratorError2 = true;
	                    _iteratorError2 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                            _iterator2.return();
	                        }
	                    } finally {
	                        if (_didIteratorError2) {
	                            throw _iteratorError2;
	                        }
	                    }
	                }
	            }
	            return props;
	        }

	        // 获取模块配置。
	        // 如果模块为异步模块，则做异步处理

	    }, {
	        key: 'getConfig',
	        value: function getConfig() {
	            var _this2 = this;

	            var config = this.state.config || this.props.config;
	            if (_utils.Utils.typeof(config, 'string')) {
	                (0, _requirejs2.default)([config], function (foo) {
	                    // 删除缓存，保证配置刷新
	                    _this2._cacheContent = null;
	                    _this2.setState({ config: foo });
	                });
	                var showLoading = _cache.Config.get('modules.showLoading');
	                if (_utils.Utils.typeof(showLoading, 'array')) {
	                    // config 此时为模块名称
	                    showLoading = showLoading.indexOf(config) !== -1;
	                }
	                config = {
	                    type: 'loading',
	                    loading: !!showLoading
	                };
	            }
	            return config;
	        }
	    }, {
	        key: 'getContent',
	        value: function getContent() {
	            this._cacheContent = this._cacheContent || this.generateElement(this.getConfig());
	            return this._cacheContent;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // 如果是配置是数组则需要在外层增加一个div标签，非数组的情况下可以把多余的div去掉
	            var result = this.getContent();
	            return _utils.Utils.typeof(result, 'array') ? _react2.default.createElement(
	                'div',
	                null,
	                result
	            ) : result;
	        }
	    }]);

	    return Factory;
	}(_react.PureComponent);

	exports.default = Factory;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(79);

	exports.default = {
	    // 检查对象上的某个(些)属性是否符合指定类型
	    // 属性可以是单个字符串或数组
	    check: function check(item, name, type) {
	        type = type || 'undefined';
	        // 如果不是数组，转换为数组
	        if (_utils.Utils.typeof(name, 'string')) {
	            name = [name];
	        }
	        if (_utils.Utils.typeof(item, 'object')) {
	            var flag = true;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = name[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    if (!_utils.Utils.typeof(item[name], type)) {
	                        this.error(item, name, type);
	                        flag = false;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return flag;
	        }
	        return false;
	    },

	    // 打印错误信息
	    error: function error(item, name, type) {
	        console.error('Uncaught TypeError: ' + name + ' is ' + ('' + (type ? 'not ' + type : 'undefined')) + (' in item\'s config "' + JSON.stringify(item) + '"'));
	    }
	}; /**
	    * @file 数据校验器
	    * @author liuzechun
	    */

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(79);

	var List = {
	    Breadcrumb: ['options'],
	    Input: ['addonBefore', 'addonAfter', 'prefix', 'suffix'],
	    Switch: ['checkedChildren', 'unCheckedChildren'],
	    Card: ['title', 'extra'],
	    Panel: ['header'],
	    Popover: ['title', 'body'],
	    Tooltip: ['title'],
	    Tabs: ['tabBarExtraContent'],
	    TabPane: ['tab'],
	    SubMenu: ['title'],
	    MenuItemGroup: ['title'],
	    Step: ['title', 'description', 'icon'],
	    Alert: ['closeText', 'message', 'description'],
	    Popconfirm: ['title'],
	    Dropdown: ['overlay'],
	    DropdownButton: ['overlay'],
	    Rate: ['character'],
	    Timeline: ['pending'],
	    TimelineItem: ['dot'],
	    Sider: ['trigger'],
	    Modal: ['title'],
	    Notification: ['message', 'description', 'btn', 'icon'],
	    Message: ['content']
	}; /**
	    * @file 属性需进一步解析的组件属性名单
	    * @author liuzechun
	    */

	exports.default = {

	    // 返回需要二次解析的属性
	    get: function get(props, type) {
	        var name = _utils.Utils.toPascal(type);
	        // 把 children 属性加入到全部组件中
	        var list = (List[name] || []).concat('children');
	        var result = [];
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;

	                // 如果在白名单中的属性值是直接的对象或数组（未解析的配置）或函数（执行结果为配置），则返回
	                if (!!props[v] && _utils.Utils.directInstanceof(props[v], [Object, Array, Function])) {
	                    result.push(v);
	                }
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return result.length > 0 ? result : false;
	    }
	};

/***/ }),
/* 162 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * @file reuqirejs 2.3.5 
	 *      为了方便统一管理，拷贝了一份requirejs的代码，并在最后把requirejs export出去
	 * vim: et:ts=4:sw=4:sts=4
	 * @license RequireJS 2.3.5 Copyright jQuery Foundation and other contributors.
	 * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE
	 */
	//Not using strict: uneven strict support in browsers, #392, and causes
	//problems with requirejs.exec()/transpiler plugins that may not be strict.
	/*jslint regexp: true, nomen: true, sloppy: true */
	/*global window, navigator, document, importScripts, setTimeout, opera */

	var requirejs, _require, define;
	(function (global, setTimeout) {
	    var req,
	        s,
	        head,
	        baseElement,
	        dataMain,
	        src,
	        interactiveScript,
	        currentlyAddingScript,
	        mainScript,
	        subPath,
	        version = '2.3.5',
	        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
	        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
	        jsSuffixRegExp = /\.js$/,
	        currDirRegExp = /^\.\//,
	        op = Object.prototype,
	        ostring = op.toString,
	        hasOwn = op.hasOwnProperty,
	        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
	        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',

	    //PS3 indicates loaded and complete, but need to wait for complete
	    //specifically. Sequence is 'loading', 'loaded', execution,
	    // then 'complete'. The UA check is unfortunate, but not sure how
	    //to feature test w/o causing perf issues.
	    readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ? /^complete$/ : /^(complete|loaded)$/,
	        defContextName = '_',

	    //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
	    isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
	        contexts = {},
	        cfg = {},
	        globalDefQueue = [],
	        useInteractive = false;

	    //Could match something like ')//comment', do not lose the prefix to comment.
	    function commentReplace(match, singlePrefix) {
	        return singlePrefix || '';
	    }

	    function isFunction(it) {
	        return ostring.call(it) === '[object Function]';
	    }

	    function isArray(it) {
	        return ostring.call(it) === '[object Array]';
	    }

	    /**
	     * Helper function for iterating over an array. If the func returns
	     * a true value, it will break out of the loop.
	     */
	    function each(ary, func) {
	        if (ary) {
	            var i;
	            for (i = 0; i < ary.length; i += 1) {
	                if (ary[i] && func(ary[i], i, ary)) {
	                    break;
	                }
	            }
	        }
	    }

	    /**
	     * Helper function for iterating over an array backwards. If the func
	     * returns a true value, it will break out of the loop.
	     */
	    function eachReverse(ary, func) {
	        if (ary) {
	            var i;
	            for (i = ary.length - 1; i > -1; i -= 1) {
	                if (ary[i] && func(ary[i], i, ary)) {
	                    break;
	                }
	            }
	        }
	    }

	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }

	    function getOwn(obj, prop) {
	        return hasProp(obj, prop) && obj[prop];
	    }

	    /**
	     * Cycles over properties in an object and calls a function for each
	     * property value. If the function returns a truthy value, then the
	     * iteration is stopped.
	     */
	    function eachProp(obj, func) {
	        var prop;
	        for (prop in obj) {
	            if (hasProp(obj, prop)) {
	                if (func(obj[prop], prop)) {
	                    break;
	                }
	            }
	        }
	    }

	    /**
	     * Simple function to mix in properties from source into target,
	     * but only if target does not already have a property of the same name.
	     */
	    function mixin(target, source, force, deepStringMixin) {
	        if (source) {
	            eachProp(source, function (value, prop) {
	                if (force || !hasProp(target, prop)) {
	                    if (deepStringMixin && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value && !isArray(value) && !isFunction(value) && !(value instanceof RegExp)) {

	                        if (!target[prop]) {
	                            target[prop] = {};
	                        }
	                        mixin(target[prop], value, force, deepStringMixin);
	                    } else {
	                        target[prop] = value;
	                    }
	                }
	            });
	        }
	        return target;
	    }

	    //Similar to Function.prototype.bind, but the 'this' object is specified
	    //first, since it is easier to read/figure out what 'this' will be.
	    function bind(obj, fn) {
	        return function () {
	            return fn.apply(obj, arguments);
	        };
	    }

	    function scripts() {
	        return document.getElementsByTagName('script');
	    }

	    function defaultOnError(err) {
	        throw err;
	    }

	    //Allow getting a global that is expressed in
	    //dot notation, like 'a.b.c'.
	    function getGlobal(value) {
	        if (!value) {
	            return value;
	        }
	        var g = global;
	        each(value.split('.'), function (part) {
	            g = g[part];
	        });
	        return g;
	    }

	    /**
	     * Constructs an error with a pointer to an URL with more information.
	     * @param {String} id the error ID that maps to an ID on a web page.
	     * @param {String} message human readable error.
	     * @param {Error} [err] the original error, if there is one.
	     *
	     * @returns {Error}
	     */
	    function makeError(id, msg, err, requireModules) {
	        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
	        e.requireType = id;
	        e.requireModules = requireModules;
	        if (err) {
	            e.originalError = err;
	        }
	        return e;
	    }

	    if (typeof define !== 'undefined') {
	        //If a define is already in play via another AMD loader,
	        //do not overwrite.
	        return;
	    }

	    if (typeof requirejs !== 'undefined') {
	        if (isFunction(requirejs)) {
	            //Do not overwrite an existing requirejs instance.
	            return;
	        }
	        cfg = requirejs;
	        requirejs = undefined;
	    }

	    //Allow for a require config object
	    if (typeof _require !== 'undefined' && !isFunction(_require)) {
	        //assume it is a config object.
	        cfg = _require;
	        _require = undefined;
	    }

	    function newContext(contextName) {
	        var inCheckLoaded,
	            Module,
	            context,
	            handlers,
	            checkLoadedTimeoutId,
	            _config = {
	            //Defaults. Do not set a default for map
	            //config to speed up normalize(), which
	            //will run faster if there is no default.
	            waitSeconds: 7,
	            baseUrl: './',
	            paths: {},
	            bundles: {},
	            pkgs: {},
	            shim: {},
	            config: {}
	        },
	            registry = {},

	        //registry of just enabled modules, to speed
	        //cycle breaking code when lots of modules
	        //are registered, but not activated.
	        enabledRegistry = {},
	            undefEvents = {},
	            defQueue = [],
	            _defined = {},
	            urlFetched = {},
	            bundlesMap = {},
	            requireCounter = 1,
	            unnormalizedCounter = 1;

	        /**
	         * Trims the . and .. from an array of path segments.
	         * It will keep a leading path segment if a .. will become
	         * the first path segment, to help with module name lookups,
	         * which act like paths, but can be remapped. But the end result,
	         * all paths that use this function should look normalized.
	         * NOTE: this method MODIFIES the input array.
	         * @param {Array} ary the array of path segments.
	         */
	        function trimDots(ary) {
	            var i, part;
	            for (i = 0; i < ary.length; i++) {
	                part = ary[i];
	                if (part === '.') {
	                    ary.splice(i, 1);
	                    i -= 1;
	                } else if (part === '..') {
	                    // If at the start, or previous value is still ..,
	                    // keep them so that when converted to a path it may
	                    // still work when converted to a path, even though
	                    // as an ID it is less than ideal. In larger point
	                    // releases, may be better to just kick out an error.
	                    if (i === 0 || i === 1 && ary[2] === '..' || ary[i - 1] === '..') {
	                        continue;
	                    } else if (i > 0) {
	                        ary.splice(i - 1, 2);
	                        i -= 2;
	                    }
	                }
	            }
	        }

	        /**
	         * Given a relative module name, like ./something, normalize it to
	         * a real name that can be mapped to a path.
	         * @param {String} name the relative name
	         * @param {String} baseName a real name that the name arg is relative
	         * to.
	         * @param {Boolean} applyMap apply the map config to the value. Should
	         * only be done if this normalization is for a dependency ID.
	         * @returns {String} normalized name
	         */
	        function normalize(name, baseName, applyMap) {
	            var pkgMain,
	                mapValue,
	                nameParts,
	                i,
	                j,
	                nameSegment,
	                lastIndex,
	                foundMap,
	                foundI,
	                foundStarMap,
	                starI,
	                normalizedBaseParts,
	                baseParts = baseName && baseName.split('/'),
	                map = _config.map,
	                starMap = map && map['*'];

	            //Adjust any relative paths.
	            if (name) {
	                name = name.split('/');
	                lastIndex = name.length - 1;

	                // If wanting node ID compatibility, strip .js from end
	                // of IDs. Have to do this here, and not in nameToUrl
	                // because node allows either .js or non .js to map
	                // to same file.
	                if (_config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }

	                // Starts with a '.' so need the baseName
	                if (name[0].charAt(0) === '.' && baseParts) {
	                    //Convert baseName to array, and lop off the last part,
	                    //so that . matches that 'directory' and not name of the baseName's
	                    //module. For instance, baseName of 'one/two/three', maps to
	                    //'one/two/three.js', but we want the directory, 'one/two' for
	                    //this normalization.
	                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
	                    name = normalizedBaseParts.concat(name);
	                }

	                trimDots(name);
	                name = name.join('/');
	            }

	            //Apply map config if available.
	            if (applyMap && map && (baseParts || starMap)) {
	                nameParts = name.split('/');

	                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
	                    nameSegment = nameParts.slice(0, i).join('/');

	                    if (baseParts) {
	                        //Find the longest baseName segment match in the config.
	                        //So, do joins on the biggest to smallest lengths of baseParts.
	                        for (j = baseParts.length; j > 0; j -= 1) {
	                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

	                            //baseName segment has config, find if it has one for
	                            //this name.
	                            if (mapValue) {
	                                mapValue = getOwn(mapValue, nameSegment);
	                                if (mapValue) {
	                                    //Match, update name to the new value.
	                                    foundMap = mapValue;
	                                    foundI = i;
	                                    break outerLoop;
	                                }
	                            }
	                        }
	                    }

	                    //Check for a star map match, but just hold on to it,
	                    //if there is a shorter segment match later in a matching
	                    //config, then favor over this star map.
	                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
	                        foundStarMap = getOwn(starMap, nameSegment);
	                        starI = i;
	                    }
	                }

	                if (!foundMap && foundStarMap) {
	                    foundMap = foundStarMap;
	                    foundI = starI;
	                }

	                if (foundMap) {
	                    nameParts.splice(0, foundI, foundMap);
	                    name = nameParts.join('/');
	                }
	            }

	            // If the name points to a package's name, use
	            // the package main instead.
	            pkgMain = getOwn(_config.pkgs, name);

	            return pkgMain ? pkgMain : name;
	        }

	        function removeScript(name) {
	            if (isBrowser) {
	                each(scripts(), function (scriptNode) {
	                    if (scriptNode.getAttribute('data-requiremodule') === name && scriptNode.getAttribute('data-requirecontext') === context.contextName) {
	                        scriptNode.parentNode.removeChild(scriptNode);
	                        return true;
	                    }
	                });
	            }
	        }

	        function hasPathFallback(id) {
	            var pathConfig = getOwn(_config.paths, id);
	            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
	                //Pop off the first array value, since it failed, and
	                //retry
	                pathConfig.shift();
	                context.require.undef(id);

	                //Custom require that does not do map translation, since
	                //ID is "absolute", already mapped/resolved.
	                context.makeRequire(null, {
	                    skipMap: true
	                })([id]);

	                return true;
	            }
	        }

	        //Turns a plugin!resource to [plugin, resource]
	        //with the plugin being undefined if the name
	        //did not have a plugin prefix.
	        function splitPrefix(name) {
	            var prefix,
	                index = name ? name.indexOf('!') : -1;
	            if (index > -1) {
	                prefix = name.substring(0, index);
	                name = name.substring(index + 1, name.length);
	            }
	            return [prefix, name];
	        }

	        /**
	         * Creates a module mapping that includes plugin prefix, module
	         * name, and path. If parentModuleMap is provided it will
	         * also normalize the name via require.normalize()
	         *
	         * @param {String} name the module name
	         * @param {String} [parentModuleMap] parent module map
	         * for the module name, used to resolve relative names.
	         * @param {Boolean} isNormalized: is the ID already normalized.
	         * This is true if this call is done for a define() module ID.
	         * @param {Boolean} applyMap: apply the map config to the ID.
	         * Should only be true if this map is for a dependency.
	         *
	         * @returns {Object}
	         */
	        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
	            var url,
	                pluginModule,
	                suffix,
	                nameParts,
	                prefix = null,
	                parentName = parentModuleMap ? parentModuleMap.name : null,
	                originalName = name,
	                isDefine = true,
	                normalizedName = '';

	            //If no name, then it means it is a require call, generate an
	            //internal name.
	            if (!name) {
	                isDefine = false;
	                name = '_@r' + (requireCounter += 1);
	            }

	            nameParts = splitPrefix(name);
	            prefix = nameParts[0];
	            name = nameParts[1];

	            if (prefix) {
	                prefix = normalize(prefix, parentName, applyMap);
	                pluginModule = getOwn(_defined, prefix);
	            }

	            //Account for relative paths if there is a base name.
	            if (name) {
	                if (prefix) {
	                    if (isNormalized) {
	                        normalizedName = name;
	                    } else if (pluginModule && pluginModule.normalize) {
	                        //Plugin is loaded, use its normalize method.
	                        normalizedName = pluginModule.normalize(name, function (name) {
	                            return normalize(name, parentName, applyMap);
	                        });
	                    } else {
	                        // If nested plugin references, then do not try to
	                        // normalize, as it will not normalize correctly. This
	                        // places a restriction on resourceIds, and the longer
	                        // term solution is not to normalize until plugins are
	                        // loaded and all normalizations to allow for async
	                        // loading of a loader plugin. But for now, fixes the
	                        // common uses. Details in #1131
	                        normalizedName = name.indexOf('!') === -1 ? normalize(name, parentName, applyMap) : name;
	                    }
	                } else {
	                    //A regular module.
	                    normalizedName = normalize(name, parentName, applyMap);

	                    //Normalized name may be a plugin ID due to map config
	                    //application in normalize. The map config values must
	                    //already be normalized, so do not need to redo that part.
	                    nameParts = splitPrefix(normalizedName);
	                    prefix = nameParts[0];
	                    normalizedName = nameParts[1];
	                    isNormalized = true;

	                    url = context.nameToUrl(normalizedName);
	                }
	            }

	            //If the id is a plugin id that cannot be determined if it needs
	            //normalization, stamp it with a unique ID so two matching relative
	            //ids that may conflict can be separate.
	            suffix = prefix && !pluginModule && !isNormalized ? '_unnormalized' + (unnormalizedCounter += 1) : '';

	            return {
	                prefix: prefix,
	                name: normalizedName,
	                parentMap: parentModuleMap,
	                unnormalized: !!suffix,
	                url: url,
	                originalName: originalName,
	                isDefine: isDefine,
	                id: (prefix ? prefix + '!' + normalizedName : normalizedName) + suffix
	            };
	        }

	        function getModule(depMap) {
	            var id = depMap.id,
	                mod = getOwn(registry, id);

	            if (!mod) {
	                mod = registry[id] = new context.Module(depMap);
	            }

	            return mod;
	        }

	        function on(depMap, name, fn) {
	            var id = depMap.id,
	                mod = getOwn(registry, id);

	            if (hasProp(_defined, id) && (!mod || mod.defineEmitComplete)) {
	                if (name === 'defined') {
	                    fn(_defined[id]);
	                }
	            } else {
	                mod = getModule(depMap);
	                if (mod.error && name === 'error') {
	                    fn(mod.error);
	                } else {
	                    mod.on(name, fn);
	                }
	            }
	        }

	        function onError(err, errback) {
	            var ids = err.requireModules,
	                notified = false;

	            if (errback) {
	                errback(err);
	            } else {
	                each(ids, function (id) {
	                    var mod = getOwn(registry, id);
	                    if (mod) {
	                        //Set error on module, so it skips timeout checks.
	                        mod.error = err;
	                        if (mod.events.error) {
	                            notified = true;
	                            mod.emit('error', err);
	                        }
	                    }
	                });

	                if (!notified) {
	                    req.onError(err);
	                }
	            }
	        }

	        /**
	         * Internal method to transfer globalQueue items to this context's
	         * defQueue.
	         */
	        function takeGlobalQueue() {
	            //Push all the globalDefQueue items into the context's defQueue
	            if (globalDefQueue.length) {
	                each(globalDefQueue, function (queueItem) {
	                    var id = queueItem[0];
	                    if (typeof id === 'string') {
	                        context.defQueueMap[id] = true;
	                    }
	                    defQueue.push(queueItem);
	                });
	                globalDefQueue = [];
	            }
	        }

	        handlers = {
	            'require': function require(mod) {
	                if (mod.require) {
	                    return mod.require;
	                } else {
	                    return mod.require = context.makeRequire(mod.map);
	                }
	            },
	            'exports': function exports(mod) {
	                mod.usingExports = true;
	                if (mod.map.isDefine) {
	                    if (mod.exports) {
	                        return _defined[mod.map.id] = mod.exports;
	                    } else {
	                        return mod.exports = _defined[mod.map.id] = {};
	                    }
	                }
	            },
	            'module': function module(mod) {
	                if (mod.module) {
	                    return mod.module;
	                } else {
	                    return mod.module = {
	                        id: mod.map.id,
	                        uri: mod.map.url,
	                        config: function config() {
	                            return getOwn(_config.config, mod.map.id) || {};
	                        },
	                        exports: mod.exports || (mod.exports = {})
	                    };
	                }
	            }
	        };

	        function cleanRegistry(id) {
	            //Clean up machinery used for waiting modules.
	            delete registry[id];
	            delete enabledRegistry[id];
	        }

	        function breakCycle(mod, traced, processed) {
	            var id = mod.map.id;

	            if (mod.error) {
	                mod.emit('error', mod.error);
	            } else {
	                traced[id] = true;
	                each(mod.depMaps, function (depMap, i) {
	                    var depId = depMap.id,
	                        dep = getOwn(registry, depId);

	                    //Only force things that have not completed
	                    //being defined, so still in the registry,
	                    //and only if it has not been matched up
	                    //in the module already.
	                    if (dep && !mod.depMatched[i] && !processed[depId]) {
	                        if (getOwn(traced, depId)) {
	                            mod.defineDep(i, _defined[depId]);
	                            mod.check(); //pass false?
	                        } else {
	                            breakCycle(dep, traced, processed);
	                        }
	                    }
	                });
	                processed[id] = true;
	            }
	        }

	        function checkLoaded() {
	            var err,
	                usingPathFallback,
	                waitInterval = _config.waitSeconds * 1000,

	            //It is possible to disable the wait interval by using waitSeconds of 0.
	            expired = waitInterval && context.startTime + waitInterval < new Date().getTime(),
	                noLoads = [],
	                reqCalls = [],
	                stillLoading = false,
	                needCycleCheck = true;

	            //Do not bother if this call was a result of a cycle break.
	            if (inCheckLoaded) {
	                return;
	            }

	            inCheckLoaded = true;

	            //Figure out the state of all the modules.
	            eachProp(enabledRegistry, function (mod) {
	                var map = mod.map,
	                    modId = map.id;

	                //Skip things that are not enabled or in error state.
	                if (!mod.enabled) {
	                    return;
	                }

	                if (!map.isDefine) {
	                    reqCalls.push(mod);
	                }

	                if (!mod.error) {
	                    //If the module should be executed, and it has not
	                    //been inited and time is up, remember it.
	                    if (!mod.inited && expired) {
	                        if (hasPathFallback(modId)) {
	                            usingPathFallback = true;
	                            stillLoading = true;
	                        } else {
	                            noLoads.push(modId);
	                            removeScript(modId);
	                        }
	                    } else if (!mod.inited && mod.fetched && map.isDefine) {
	                        stillLoading = true;
	                        if (!map.prefix) {
	                            //No reason to keep looking for unfinished
	                            //loading. If the only stillLoading is a
	                            //plugin resource though, keep going,
	                            //because it may be that a plugin resource
	                            //is waiting on a non-plugin cycle.
	                            return needCycleCheck = false;
	                        }
	                    }
	                }
	            });

	            if (expired && noLoads.length) {
	                //If wait time expired, throw error of unloaded modules.
	                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
	                err.contextName = context.contextName;
	                return onError(err);
	            }

	            //Not expired, check for a cycle.
	            if (needCycleCheck) {
	                each(reqCalls, function (mod) {
	                    breakCycle(mod, {}, {});
	                });
	            }

	            //If still waiting on loads, and the waiting load is something
	            //other than a plugin resource, or there are still outstanding
	            //scripts, then just try back later.
	            if ((!expired || usingPathFallback) && stillLoading) {
	                //Something is still waiting to load. Wait for it, but only
	                //if a timeout is not already in effect.
	                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
	                    checkLoadedTimeoutId = setTimeout(function () {
	                        checkLoadedTimeoutId = 0;
	                        checkLoaded();
	                    }, 50);
	                }
	            }

	            inCheckLoaded = false;
	        }

	        Module = function Module(map) {
	            this.events = getOwn(undefEvents, map.id) || {};
	            this.map = map;
	            this.shim = getOwn(_config.shim, map.id);
	            this.depExports = [];
	            this.depMaps = [];
	            this.depMatched = [];
	            this.pluginMaps = {};
	            this.depCount = 0;

	            /* this.exports this.factory
	               this.depMaps = [],
	               this.enabled, this.fetched
	            */
	        };

	        Module.prototype = {
	            init: function init(depMaps, factory, errback, options) {
	                options = options || {};

	                //Do not do more inits if already done. Can happen if there
	                //are multiple define calls for the same module. That is not
	                //a normal, common case, but it is also not unexpected.
	                if (this.inited) {
	                    return;
	                }

	                this.factory = factory;

	                if (errback) {
	                    //Register for errors on this module.
	                    this.on('error', errback);
	                } else if (this.events.error) {
	                    //If no errback already, but there are error listeners
	                    //on this module, set up an errback to pass to the deps.
	                    errback = bind(this, function (err) {
	                        this.emit('error', err);
	                    });
	                }

	                //Do a copy of the dependency array, so that
	                //source inputs are not modified. For example
	                //"shim" deps are passed in here directly, and
	                //doing a direct modification of the depMaps array
	                //would affect that config.
	                this.depMaps = depMaps && depMaps.slice(0);

	                this.errback = errback;

	                //Indicate this module has be initialized
	                this.inited = true;

	                this.ignore = options.ignore;

	                //Could have option to init this module in enabled mode,
	                //or could have been previously marked as enabled. However,
	                //the dependencies are not known until init is called. So
	                //if enabled previously, now trigger dependencies as enabled.
	                if (options.enabled || this.enabled) {
	                    //Enable this module and dependencies.
	                    //Will call this.check()
	                    this.enable();
	                } else {
	                    this.check();
	                }
	            },

	            defineDep: function defineDep(i, depExports) {
	                //Because of cycles, defined callback for a given
	                //export can be called more than once.
	                if (!this.depMatched[i]) {
	                    this.depMatched[i] = true;
	                    this.depCount -= 1;
	                    this.depExports[i] = depExports;
	                }
	            },

	            fetch: function fetch() {
	                if (this.fetched) {
	                    return;
	                }
	                this.fetched = true;

	                context.startTime = new Date().getTime();

	                var map = this.map;

	                //If the manager is for a plugin managed resource,
	                //ask the plugin to load it now.
	                if (this.shim) {
	                    context.makeRequire(this.map, {
	                        enableBuildCallback: true
	                    })(this.shim.deps || [], bind(this, function () {
	                        return map.prefix ? this.callPlugin() : this.load();
	                    }));
	                } else {
	                    //Regular dependency.
	                    return map.prefix ? this.callPlugin() : this.load();
	                }
	            },

	            load: function load() {
	                var url = this.map.url;

	                //Regular dependency.
	                if (!urlFetched[url]) {
	                    urlFetched[url] = true;
	                    context.load(this.map.id, url);
	                }
	            },

	            /**
	             * Checks if the module is ready to define itself, and if so,
	             * define it.
	             */
	            check: function check() {
	                if (!this.enabled || this.enabling) {
	                    return;
	                }

	                var err,
	                    cjsModule,
	                    id = this.map.id,
	                    depExports = this.depExports,
	                    exports = this.exports,
	                    factory = this.factory;

	                if (!this.inited) {
	                    // Only fetch if not already in the defQueue.
	                    if (!hasProp(context.defQueueMap, id)) {
	                        this.fetch();
	                    }
	                } else if (this.error) {
	                    this.emit('error', this.error);
	                } else if (!this.defining) {
	                    //The factory could trigger another require call
	                    //that would result in checking this module to
	                    //define itself again. If already in the process
	                    //of doing that, skip this work.
	                    this.defining = true;

	                    if (this.depCount < 1 && !this.defined) {
	                        if (isFunction(factory)) {
	                            //If there is an error listener, favor passing
	                            //to that instead of throwing an error. However,
	                            //only do it for define()'d  modules. require
	                            //errbacks should not be called for failures in
	                            //their callbacks (#699). However if a global
	                            //onError is set, use that.
	                            if (this.events.error && this.map.isDefine || req.onError !== defaultOnError) {
	                                try {
	                                    exports = context.execCb(id, factory, depExports, exports);
	                                } catch (e) {
	                                    err = e;
	                                }
	                            } else {
	                                exports = context.execCb(id, factory, depExports, exports);
	                            }

	                            // Favor return value over exports. If node/cjs in play,
	                            // then will not have a return value anyway. Favor
	                            // module.exports assignment over exports object.
	                            if (this.map.isDefine && exports === undefined) {
	                                cjsModule = this.module;
	                                if (cjsModule) {
	                                    exports = cjsModule.exports;
	                                } else if (this.usingExports) {
	                                    //exports already set the defined value.
	                                    exports = this.exports;
	                                }
	                            }

	                            if (err) {
	                                err.requireMap = this.map;
	                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
	                                err.requireType = this.map.isDefine ? 'define' : 'require';
	                                return onError(this.error = err);
	                            }
	                        } else {
	                            //Just a literal value
	                            exports = factory;
	                        }

	                        this.exports = exports;

	                        if (this.map.isDefine && !this.ignore) {
	                            _defined[id] = exports;

	                            if (req.onResourceLoad) {
	                                var resLoadMaps = [];
	                                each(this.depMaps, function (depMap) {
	                                    resLoadMaps.push(depMap.normalizedMap || depMap);
	                                });
	                                req.onResourceLoad(context, this.map, resLoadMaps);
	                            }
	                        }

	                        //Clean up
	                        cleanRegistry(id);

	                        this.defined = true;
	                    }

	                    //Finished the define stage. Allow calling check again
	                    //to allow define notifications below in the case of a
	                    //cycle.
	                    this.defining = false;

	                    if (this.defined && !this.defineEmitted) {
	                        this.defineEmitted = true;
	                        this.emit('defined', this.exports);
	                        this.defineEmitComplete = true;
	                    }
	                }
	            },

	            callPlugin: function callPlugin() {
	                var map = this.map,
	                    id = map.id,

	                //Map already normalized the prefix.
	                pluginMap = makeModuleMap(map.prefix);

	                //Mark this as a dependency for this plugin, so it
	                //can be traced for cycles.
	                this.depMaps.push(pluginMap);

	                on(pluginMap, 'defined', bind(this, function (plugin) {
	                    var load,
	                        normalizedMap,
	                        normalizedMod,
	                        bundleId = getOwn(bundlesMap, this.map.id),
	                        name = this.map.name,
	                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
	                        localRequire = context.makeRequire(map.parentMap, {
	                        enableBuildCallback: true
	                    });

	                    //If current map is not normalized, wait for that
	                    //normalized name to load instead of continuing.
	                    if (this.map.unnormalized) {
	                        //Normalize the ID if the plugin allows it.
	                        if (plugin.normalize) {
	                            name = plugin.normalize(name, function (name) {
	                                return normalize(name, parentName, true);
	                            }) || '';
	                        }

	                        //prefix and name should already be normalized, no need
	                        //for applying map config again either.
	                        normalizedMap = makeModuleMap(map.prefix + '!' + name, this.map.parentMap, true);
	                        on(normalizedMap, 'defined', bind(this, function (value) {
	                            this.map.normalizedMap = normalizedMap;
	                            this.init([], function () {
	                                return value;
	                            }, null, {
	                                enabled: true,
	                                ignore: true
	                            });
	                        }));

	                        normalizedMod = getOwn(registry, normalizedMap.id);
	                        if (normalizedMod) {
	                            //Mark this as a dependency for this plugin, so it
	                            //can be traced for cycles.
	                            this.depMaps.push(normalizedMap);

	                            if (this.events.error) {
	                                normalizedMod.on('error', bind(this, function (err) {
	                                    this.emit('error', err);
	                                }));
	                            }
	                            normalizedMod.enable();
	                        }

	                        return;
	                    }

	                    //If a paths config, then just load that file instead to
	                    //resolve the plugin, as it is built into that paths layer.
	                    if (bundleId) {
	                        this.map.url = context.nameToUrl(bundleId);
	                        this.load();
	                        return;
	                    }

	                    load = bind(this, function (value) {
	                        this.init([], function () {
	                            return value;
	                        }, null, {
	                            enabled: true
	                        });
	                    });

	                    load.error = bind(this, function (err) {
	                        this.inited = true;
	                        this.error = err;
	                        err.requireModules = [id];

	                        //Remove temp unnormalized modules for this module,
	                        //since they will never be resolved otherwise now.
	                        eachProp(registry, function (mod) {
	                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
	                                cleanRegistry(mod.map.id);
	                            }
	                        });

	                        onError(err);
	                    });

	                    //Allow plugins to load other code without having to know the
	                    //context or how to 'complete' the load.
	                    load.fromText = bind(this, function (text, textAlt) {
	                        /*jslint evil: true */
	                        var moduleName = map.name,
	                            moduleMap = makeModuleMap(moduleName),
	                            hasInteractive = useInteractive;

	                        //As of 2.1.0, support just passing the text, to reinforce
	                        //fromText only being called once per resource. Still
	                        //support old style of passing moduleName but discard
	                        //that moduleName in favor of the internal ref.
	                        if (textAlt) {
	                            text = textAlt;
	                        }

	                        //Turn off interactive script matching for IE for any define
	                        //calls in the text, then turn it back on at the end.
	                        if (hasInteractive) {
	                            useInteractive = false;
	                        }

	                        //Prime the system by creating a module instance for
	                        //it.
	                        getModule(moduleMap);

	                        //Transfer any config to this other module.
	                        if (hasProp(_config.config, id)) {
	                            _config.config[moduleName] = _config.config[id];
	                        }

	                        try {
	                            req.exec(text);
	                        } catch (e) {
	                            return onError(makeError('fromtexteval', 'fromText eval for ' + id + ' failed: ' + e, e, [id]));
	                        }

	                        if (hasInteractive) {
	                            useInteractive = true;
	                        }

	                        //Mark this as a dependency for the plugin
	                        //resource
	                        this.depMaps.push(moduleMap);

	                        //Support anonymous modules.
	                        context.completeLoad(moduleName);

	                        //Bind the value of that module to the value for this
	                        //resource ID.
	                        localRequire([moduleName], load);
	                    });

	                    //Use parentName here since the plugin's name is not reliable,
	                    //could be some weird string with no path that actually wants to
	                    //reference the parentName's path.
	                    plugin.load(map.name, localRequire, load, _config);
	                }));

	                context.enable(pluginMap, this);
	                this.pluginMaps[pluginMap.id] = pluginMap;
	            },

	            enable: function enable() {
	                enabledRegistry[this.map.id] = this;
	                this.enabled = true;

	                //Set flag mentioning that the module is enabling,
	                //so that immediate calls to the defined callbacks
	                //for dependencies do not trigger inadvertent load
	                //with the depCount still being zero.
	                this.enabling = true;

	                //Enable each dependency
	                each(this.depMaps, bind(this, function (depMap, i) {
	                    var id, mod, handler;

	                    if (typeof depMap === 'string') {
	                        //Dependency needs to be converted to a depMap
	                        //and wired up to this module.
	                        depMap = makeModuleMap(depMap, this.map.isDefine ? this.map : this.map.parentMap, false, !this.skipMap);
	                        this.depMaps[i] = depMap;

	                        handler = getOwn(handlers, depMap.id);

	                        if (handler) {
	                            this.depExports[i] = handler(this);
	                            return;
	                        }

	                        this.depCount += 1;

	                        on(depMap, 'defined', bind(this, function (depExports) {
	                            if (this.undefed) {
	                                return;
	                            }
	                            this.defineDep(i, depExports);
	                            this.check();
	                        }));

	                        if (this.errback) {
	                            on(depMap, 'error', bind(this, this.errback));
	                        } else if (this.events.error) {
	                            // No direct errback on this module, but something
	                            // else is listening for errors, so be sure to
	                            // propagate the error correctly.
	                            on(depMap, 'error', bind(this, function (err) {
	                                this.emit('error', err);
	                            }));
	                        }
	                    }

	                    id = depMap.id;
	                    mod = registry[id];

	                    //Skip special modules like 'require', 'exports', 'module'
	                    //Also, don't call enable if it is already enabled,
	                    //important in circular dependency cases.
	                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
	                        context.enable(depMap, this);
	                    }
	                }));

	                //Enable each plugin that is used in
	                //a dependency
	                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
	                    var mod = getOwn(registry, pluginMap.id);
	                    if (mod && !mod.enabled) {
	                        context.enable(pluginMap, this);
	                    }
	                }));

	                this.enabling = false;

	                this.check();
	            },

	            on: function on(name, cb) {
	                var cbs = this.events[name];
	                if (!cbs) {
	                    cbs = this.events[name] = [];
	                }
	                cbs.push(cb);
	            },

	            emit: function emit(name, evt) {
	                each(this.events[name], function (cb) {
	                    cb(evt);
	                });
	                if (name === 'error') {
	                    //Now that the error handler was triggered, remove
	                    //the listeners, since this broken Module instance
	                    //can stay around for a while in the registry.
	                    delete this.events[name];
	                }
	            }
	        };

	        function callGetModule(args) {
	            //Skip modules already defined.
	            if (!hasProp(_defined, args[0])) {
	                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
	            }
	        }

	        function removeListener(node, func, name, ieName) {
	            //Favor detachEvent because of IE9
	            //issue, see attachEvent/addEventListener comment elsewhere
	            //in this file.
	            if (node.detachEvent && !isOpera) {
	                //Probably IE. If not it will throw an error, which will be
	                //useful to know.
	                if (ieName) {
	                    node.detachEvent(ieName, func);
	                }
	            } else {
	                node.removeEventListener(name, func, false);
	            }
	        }

	        /**
	         * Given an event from a script node, get the requirejs info from it,
	         * and then removes the event listeners on the node.
	         * @param {Event} evt
	         * @returns {Object}
	         */
	        function getScriptData(evt) {
	            //Using currentTarget instead of target for Firefox 2.0's sake. Not
	            //all old browsers will be supported, but this one was easy enough
	            //to support and still makes sense.
	            var node = evt.currentTarget || evt.srcElement;

	            //Remove the listeners once here.
	            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
	            removeListener(node, context.onScriptError, 'error');

	            return {
	                node: node,
	                id: node && node.getAttribute('data-requiremodule')
	            };
	        }

	        function intakeDefines() {
	            var args;

	            //Any defined modules in the global queue, intake them now.
	            takeGlobalQueue();

	            //Make sure any remaining defQueue items get properly processed.
	            while (defQueue.length) {
	                args = defQueue.shift();
	                if (args[0] === null) {
	                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
	                } else {
	                    //args are id, deps, factory. Should be normalized by the
	                    //define() function.
	                    callGetModule(args);
	                }
	            }
	            context.defQueueMap = {};
	        }

	        context = {
	            config: _config,
	            contextName: contextName,
	            registry: registry,
	            defined: _defined,
	            urlFetched: urlFetched,
	            defQueue: defQueue,
	            defQueueMap: {},
	            Module: Module,
	            makeModuleMap: makeModuleMap,
	            nextTick: req.nextTick,
	            onError: onError,

	            /**
	             * Set a configuration for the context.
	             * @param {Object} cfg config object to integrate.
	             */
	            configure: function configure(cfg) {
	                //Make sure the baseUrl ends in a slash.
	                if (cfg.baseUrl) {
	                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
	                        cfg.baseUrl += '/';
	                    }
	                }

	                // Convert old style urlArgs string to a function.
	                if (typeof cfg.urlArgs === 'string') {
	                    var urlArgs = cfg.urlArgs;
	                    cfg.urlArgs = function (id, url) {
	                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
	                    };
	                }

	                //Save off the paths since they require special processing,
	                //they are additive.
	                var shim = _config.shim,
	                    objs = {
	                    paths: true,
	                    bundles: true,
	                    config: true,
	                    map: true
	                };

	                eachProp(cfg, function (value, prop) {
	                    if (objs[prop]) {
	                        if (!_config[prop]) {
	                            _config[prop] = {};
	                        }
	                        mixin(_config[prop], value, true, true);
	                    } else {
	                        _config[prop] = value;
	                    }
	                });

	                //Reverse map the bundles
	                if (cfg.bundles) {
	                    eachProp(cfg.bundles, function (value, prop) {
	                        each(value, function (v) {
	                            if (v !== prop) {
	                                bundlesMap[v] = prop;
	                            }
	                        });
	                    });
	                }

	                //Merge shim
	                if (cfg.shim) {
	                    eachProp(cfg.shim, function (value, id) {
	                        //Normalize the structure
	                        if (isArray(value)) {
	                            value = {
	                                deps: value
	                            };
	                        }
	                        if ((value.exports || value.init) && !value.exportsFn) {
	                            value.exportsFn = context.makeShimExports(value);
	                        }
	                        shim[id] = value;
	                    });
	                    _config.shim = shim;
	                }

	                //Adjust packages if necessary.
	                if (cfg.packages) {
	                    each(cfg.packages, function (pkgObj) {
	                        var location, name;

	                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;

	                        name = pkgObj.name;
	                        location = pkgObj.location;
	                        if (location) {
	                            _config.paths[name] = pkgObj.location;
	                        }

	                        //Save pointer to main module ID for pkg name.
	                        //Remove leading dot in main, so main paths are normalized,
	                        //and remove any trailing .js, since different package
	                        //envs have different conventions: some use a module name,
	                        //some use a file name.
	                        _config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main').replace(currDirRegExp, '').replace(jsSuffixRegExp, '');
	                    });
	                }

	                //If there are any "waiting to execute" modules in the registry,
	                //update the maps for them, since their info, like URLs to load,
	                //may have changed.
	                eachProp(registry, function (mod, id) {
	                    //If module already has init called, since it is too
	                    //late to modify them, and ignore unnormalized ones
	                    //since they are transient.
	                    if (!mod.inited && !mod.map.unnormalized) {
	                        mod.map = makeModuleMap(id, null, true);
	                    }
	                });

	                //If a deps array or a config callback is specified, then call
	                //require with those args. This is useful when require is defined as a
	                //config object before require.js is loaded.
	                if (cfg.deps || cfg.callback) {
	                    context.require(cfg.deps || [], cfg.callback);
	                }
	            },

	            makeShimExports: function makeShimExports(value) {
	                function fn() {
	                    var ret;
	                    if (value.init) {
	                        ret = value.init.apply(global, arguments);
	                    }
	                    return ret || value.exports && getGlobal(value.exports);
	                }
	                return fn;
	            },

	            makeRequire: function makeRequire(relMap, options) {
	                options = options || {};

	                function localRequire(deps, callback, errback) {
	                    var id, map, requireMod;

	                    if (options.enableBuildCallback && callback && isFunction(callback)) {
	                        callback.__requireJsBuild = true;
	                    }

	                    if (typeof deps === 'string') {
	                        if (isFunction(callback)) {
	                            //Invalid call
	                            return onError(makeError('requireargs', 'Invalid require call'), errback);
	                        }

	                        //If require|exports|module are requested, get the
	                        //value for them from the special handlers. Caveat:
	                        //this only works while module is being defined.
	                        if (relMap && hasProp(handlers, deps)) {
	                            return handlers[deps](registry[relMap.id]);
	                        }

	                        //Synchronous access to one module. If require.get is
	                        //available (as in the Node adapter), prefer that.
	                        if (req.get) {
	                            return req.get(context, deps, relMap, localRequire);
	                        }

	                        //Normalize module name, if it contains . or ..
	                        map = makeModuleMap(deps, relMap, false, true);
	                        id = map.id;

	                        if (!hasProp(_defined, id)) {
	                            return onError(makeError('notloaded', 'Module name "' + id + '" has not been loaded yet for context: ' + contextName + (relMap ? '' : '. Use require([])')));
	                        }
	                        return _defined[id];
	                    }

	                    //Grab defines waiting in the global queue.
	                    intakeDefines();

	                    //Mark all the dependencies as needing to be loaded.
	                    context.nextTick(function () {
	                        //Some defines could have been added since the
	                        //require call, collect them.
	                        intakeDefines();

	                        requireMod = getModule(makeModuleMap(null, relMap));

	                        //Store if map config should be applied to this require
	                        //call for dependencies.
	                        requireMod.skipMap = options.skipMap;

	                        requireMod.init(deps, callback, errback, {
	                            enabled: true
	                        });

	                        checkLoaded();
	                    });

	                    return localRequire;
	                }

	                mixin(localRequire, {
	                    isBrowser: isBrowser,

	                    /**
	                     * Converts a module name + .extension into an URL path.
	                     * *Requires* the use of a module name. It does not support using
	                     * plain URLs like nameToUrl.
	                     */
	                    toUrl: function toUrl(moduleNamePlusExt) {
	                        var ext,
	                            index = moduleNamePlusExt.lastIndexOf('.'),
	                            segment = moduleNamePlusExt.split('/')[0],
	                            isRelative = segment === '.' || segment === '..';

	                        //Have a file extension alias, and it is not the
	                        //dots from a relative path.
	                        if (index !== -1 && (!isRelative || index > 1)) {
	                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
	                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
	                        }

	                        return context.nameToUrl(normalize(moduleNamePlusExt, relMap && relMap.id, true), ext, true);
	                    },

	                    defined: function defined(id) {
	                        return hasProp(_defined, makeModuleMap(id, relMap, false, true).id);
	                    },

	                    specified: function specified(id) {
	                        id = makeModuleMap(id, relMap, false, true).id;
	                        return hasProp(_defined, id) || hasProp(registry, id);
	                    }
	                });

	                //Only allow undef on top level require calls
	                if (!relMap) {
	                    localRequire.undef = function (id) {
	                        //Bind any waiting define() calls to this context,
	                        //fix for #408
	                        takeGlobalQueue();

	                        var map = makeModuleMap(id, relMap, true),
	                            mod = getOwn(registry, id);

	                        mod.undefed = true;
	                        removeScript(id);

	                        delete _defined[id];
	                        delete urlFetched[map.url];
	                        delete undefEvents[id];

	                        //Clean queued defines too. Go backwards
	                        //in array so that the splices do not
	                        //mess up the iteration.
	                        eachReverse(defQueue, function (args, i) {
	                            if (args[0] === id) {
	                                defQueue.splice(i, 1);
	                            }
	                        });
	                        delete context.defQueueMap[id];

	                        if (mod) {
	                            //Hold on to listeners in case the
	                            //module will be attempted to be reloaded
	                            //using a different config.
	                            if (mod.events.defined) {
	                                undefEvents[id] = mod.events;
	                            }

	                            cleanRegistry(id);
	                        }
	                    };
	                }

	                return localRequire;
	            },

	            /**
	             * Called to enable a module if it is still in the registry
	             * awaiting enablement. A second arg, parent, the parent module,
	             * is passed in for context, when this method is overridden by
	             * the optimizer. Not shown here to keep code compact.
	             */
	            enable: function enable(depMap) {
	                var mod = getOwn(registry, depMap.id);
	                if (mod) {
	                    getModule(depMap).enable();
	                }
	            },

	            /**
	             * Internal method used by environment adapters to complete a load event.
	             * A load event could be a script load or just a load pass from a synchronous
	             * load call.
	             * @param {String} moduleName the name of the module to potentially complete.
	             */
	            completeLoad: function completeLoad(moduleName) {
	                var found,
	                    args,
	                    mod,
	                    shim = getOwn(_config.shim, moduleName) || {},
	                    shExports = shim.exports;

	                takeGlobalQueue();

	                while (defQueue.length) {
	                    args = defQueue.shift();
	                    if (args[0] === null) {
	                        args[0] = moduleName;
	                        //If already found an anonymous module and bound it
	                        //to this name, then this is some other anon module
	                        //waiting for its completeLoad to fire.
	                        if (found) {
	                            break;
	                        }
	                        found = true;
	                    } else if (args[0] === moduleName) {
	                        //Found matching define call for this script!
	                        found = true;
	                    }

	                    callGetModule(args);
	                }
	                context.defQueueMap = {};

	                //Do this after the cycle of callGetModule in case the result
	                //of those calls/init calls changes the registry.
	                mod = getOwn(registry, moduleName);

	                if (!found && !hasProp(_defined, moduleName) && mod && !mod.inited) {
	                    if (_config.enforceDefine && (!shExports || !getGlobal(shExports))) {
	                        if (hasPathFallback(moduleName)) {
	                            return;
	                        } else {
	                            return onError(makeError('nodefine', 'No define call for ' + moduleName, null, [moduleName]));
	                        }
	                    } else {
	                        //A script that does not call define(), so just simulate
	                        //the call for it.
	                        callGetModule([moduleName, shim.deps || [], shim.exportsFn]);
	                    }
	                }

	                checkLoaded();
	            },

	            /**
	             * Converts a module name to a file path. Supports cases where
	             * moduleName may actually be just an URL.
	             * Note that it **does not** call normalize on the moduleName,
	             * it is assumed to have already been normalized. This is an
	             * internal API, not a public one. Use toUrl for the public API.
	             */
	            nameToUrl: function nameToUrl(moduleName, ext, skipExt) {
	                var paths,
	                    syms,
	                    i,
	                    parentModule,
	                    url,
	                    parentPath,
	                    bundleId,
	                    pkgMain = getOwn(_config.pkgs, moduleName);

	                if (pkgMain) {
	                    moduleName = pkgMain;
	                }

	                bundleId = getOwn(bundlesMap, moduleName);

	                if (bundleId) {
	                    return context.nameToUrl(bundleId, ext, skipExt);
	                }

	                //If a colon is in the URL, it indicates a protocol is used and it is just
	                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
	                //or ends with .js, then assume the user meant to use an url and not a module id.
	                //The slash is important for protocol-less URLs as well as full paths.
	                if (req.jsExtRegExp.test(moduleName)) {
	                    //Just a plain path, not module name lookup, so just return it.
	                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
	                    //an extension, this method probably needs to be reworked.
	                    url = moduleName + (ext || '');
	                } else {
	                    //A module that needs to be converted to a path.
	                    paths = _config.paths;

	                    syms = moduleName.split('/');
	                    //For each module name segment, see if there is a path
	                    //registered for it. Start with most specific name
	                    //and work up from it.
	                    for (i = syms.length; i > 0; i -= 1) {
	                        parentModule = syms.slice(0, i).join('/');

	                        parentPath = getOwn(paths, parentModule);
	                        if (parentPath) {
	                            //If an array, it means there are a few choices,
	                            //Choose the one that is desired
	                            if (isArray(parentPath)) {
	                                parentPath = parentPath[0];
	                            }
	                            syms.splice(0, i, parentPath);
	                            break;
	                        }
	                    }

	                    //Join the path parts together, then figure out if baseUrl is needed.
	                    url = syms.join('/');
	                    url += ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? '' : '.js');
	                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : _config.baseUrl) + url;
	                }

	                return _config.urlArgs && !/^blob\:/.test(url) ? url + _config.urlArgs(moduleName, url) : url;
	            },

	            //Delegates to req.load. Broken out as a separate function to
	            //allow overriding in the optimizer.
	            load: function load(id, url) {
	                req.load(context, id, url);
	            },

	            /**
	             * Executes a module callback function. Broken out as a separate function
	             * solely to allow the build system to sequence the files in the built
	             * layer in the right sequence.
	             *
	             * @private
	             */
	            execCb: function execCb(name, callback, args, exports) {
	                return callback.apply(exports, args);
	            },

	            /**
	             * callback for script loads, used to check status of loading.
	             *
	             * @param {Event} evt the event from the browser for the script
	             * that was loaded.
	             */
	            onScriptLoad: function onScriptLoad(evt) {
	                //Using currentTarget instead of target for Firefox 2.0's sake. Not
	                //all old browsers will be supported, but this one was easy enough
	                //to support and still makes sense.
	                if (evt.type === 'load' || readyRegExp.test((evt.currentTarget || evt.srcElement).readyState)) {
	                    //Reset interactive script so a script node is not held onto for
	                    //to long.
	                    interactiveScript = null;

	                    //Pull out the name of the module and the context.
	                    var data = getScriptData(evt);
	                    context.completeLoad(data.id);
	                }
	            },

	            /**
	             * Callback for script errors.
	             */
	            onScriptError: function onScriptError(evt) {
	                var data = getScriptData(evt);
	                if (!hasPathFallback(data.id)) {
	                    var parents = [];
	                    eachProp(registry, function (value, key) {
	                        if (key.indexOf('_@r') !== 0) {
	                            each(value.depMaps, function (depMap) {
	                                if (depMap.id === data.id) {
	                                    parents.push(key);
	                                    return true;
	                                }
	                            });
	                        }
	                    });
	                    return onError(makeError('scripterror', 'Script error for "' + data.id + (parents.length ? '", needed by: ' + parents.join(', ') : '"'), evt, [data.id]));
	                }
	            }
	        };

	        context.require = context.makeRequire();
	        return context;
	    }

	    /**
	     * Main entry point.
	     *
	     * If the only argument to require is a string, then the module that
	     * is represented by that string is fetched for the appropriate context.
	     *
	     * If the first argument is an array, then it will be treated as an array
	     * of dependency string names to fetch. An optional function callback can
	     * be specified to execute when all of those dependencies are available.
	     *
	     * Make a local req variable to help Caja compliance (it assumes things
	     * on a require that are not standardized), and to give a short
	     * name for minification/local scope use.
	     */
	    req = requirejs = function requirejs(deps, callback, errback, optional) {

	        //Find the right context, use default
	        var context,
	            config,
	            contextName = defContextName;

	        // Determine if have config object in the call.
	        if (!isArray(deps) && typeof deps !== 'string') {
	            // deps is a config object
	            config = deps;
	            if (isArray(callback)) {
	                // Adjust args if there are dependencies
	                deps = callback;
	                callback = errback;
	                errback = optional;
	            } else {
	                deps = [];
	            }
	        }

	        if (config && config.context) {
	            contextName = config.context;
	        }

	        context = getOwn(contexts, contextName);
	        if (!context) {
	            context = contexts[contextName] = req.s.newContext(contextName);
	        }

	        if (config) {
	            context.configure(config);
	        }

	        return context.require(deps, callback, errback);
	    };

	    /**
	     * Support require.config() to make it easier to cooperate with other
	     * AMD loaders on globally agreed names.
	     */
	    req.config = function (config) {
	        return req(config);
	    };

	    /**
	     * Execute something after the current tick
	     * of the event loop. Override for other envs
	     * that have a better solution than setTimeout.
	     * @param  {Function} fn function to execute later.
	     */
	    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
	        setTimeout(fn, 4);
	    } : function (fn) {
	        fn();
	    };

	    /**
	     * Export require as a global, but only if it does not already exist.
	     */
	    if (!_require) {
	        _require = req;
	    }

	    req.version = version;

	    //Used to filter out dependencies that are already paths.
	    req.jsExtRegExp = /^\/|:|\?|\.js$/;
	    req.isBrowser = isBrowser;
	    s = req.s = {
	        contexts: contexts,
	        newContext: newContext
	    };

	    //Create default context.
	    req({});

	    //Exports some context-sensitive methods on global require.
	    each(['toUrl', 'undef', 'defined', 'specified'], function (prop) {
	        //Reference from contexts instead of early binding to default context,
	        //so that during builds, the latest instance of the default context
	        //with its config gets used.
	        req[prop] = function () {
	            var ctx = contexts[defContextName];
	            return ctx.require[prop].apply(ctx, arguments);
	        };
	    });

	    if (isBrowser) {
	        head = s.head = document.getElementsByTagName('head')[0];
	        //If BASE tag is in play, using appendChild is a problem for IE6.
	        //When that browser dies, this can be removed. Details in this jQuery bug:
	        //http://dev.jquery.com/ticket/2709
	        baseElement = document.getElementsByTagName('base')[0];
	        if (baseElement) {
	            head = s.head = baseElement.parentNode;
	        }
	    }

	    /**
	     * Any errors that require explicitly generates will be passed to this
	     * function. Intercept/override it if you want custom error handling.
	     * @param {Error} err the error object.
	     */
	    req.onError = defaultOnError;

	    /**
	     * Creates the node for the load command. Only used in browser envs.
	     */
	    req.createNode = function (config, moduleName, url) {
	        var node = config.xhtml ? document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') : document.createElement('script');
	        node.type = config.scriptType || 'text/javascript';
	        node.charset = 'utf-8';
	        node.async = true;
	        return node;
	    };

	    /**
	     * Does the request to load a module for the browser case.
	     * Make this a separate function to allow other environments
	     * to override it.
	     *
	     * @param {Object} context the require context to find state.
	     * @param {String} moduleName the name of the module.
	     * @param {Object} url the URL to the module.
	     */
	    req.load = function (context, moduleName, url) {
	        var config = context && context.config || {},
	            node;
	        if (isBrowser) {
	            //In the browser so use a script tag
	            node = req.createNode(config, moduleName, url);

	            node.setAttribute('data-requirecontext', context.contextName);
	            node.setAttribute('data-requiremodule', moduleName);

	            //Set up load listener. Test attachEvent first because IE9 has
	            //a subtle issue in its addEventListener and script onload firings
	            //that do not match the behavior of all other browsers with
	            //addEventListener support, which fire the onload event for a
	            //script right after the script execution. See:
	            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
	            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
	            //script execution mode.
	            if (node.attachEvent &&
	            //Check if node.attachEvent is artificially added by custom script or
	            //natively supported by browser
	            //read https://github.com/requirejs/requirejs/issues/187
	            //if we can NOT find [native code] then it must NOT natively supported.
	            //in IE8, node.attachEvent does not have toString()
	            //Note the test for "[native code" with no closing brace, see:
	            //https://github.com/requirejs/requirejs/issues/273
	            !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) && !isOpera) {
	                //Probably IE. IE (at least 6-8) do not fire
	                //script onload right after executing the script, so
	                //we cannot tie the anonymous define call to a name.
	                //However, IE reports the script as being in 'interactive'
	                //readyState at the time of the define call.
	                useInteractive = true;

	                node.attachEvent('onreadystatechange', context.onScriptLoad);
	                //It would be great to add an error handler here to catch
	                //404s in IE9+. However, onreadystatechange will fire before
	                //the error handler, so that does not help. If addEventListener
	                //is used, then IE will fire error before load, but we cannot
	                //use that pathway given the connect.microsoft.com issue
	                //mentioned above about not doing the 'script execute,
	                //then fire the script load event listener before execute
	                //next script' that other browsers do.
	                //Best hope: IE10 fixes the issues,
	                //and then destroys all installs of IE 6-9.
	                //node.attachEvent('onerror', context.onScriptError);
	            } else {
	                node.addEventListener('load', context.onScriptLoad, false);
	                node.addEventListener('error', context.onScriptError, false);
	            }
	            node.src = url;

	            //Calling onNodeCreated after all properties on the node have been
	            //set, but before it is placed in the DOM.
	            if (config.onNodeCreated) {
	                config.onNodeCreated(node, config, moduleName, url);
	            }

	            //For some cache cases in IE 6-8, the script executes before the end
	            //of the appendChild execution, so to tie an anonymous define
	            //call to the module name (which is stored on the node), hold on
	            //to a reference to this node, but clear after the DOM insertion.
	            currentlyAddingScript = node;
	            if (baseElement) {
	                head.insertBefore(node, baseElement);
	            } else {
	                head.appendChild(node);
	            }
	            currentlyAddingScript = null;

	            return node;
	        } else if (isWebWorker) {
	            try {
	                //In a web worker, use importScripts. This is not a very
	                //efficient use of importScripts, importScripts will block until
	                //its script is downloaded and evaluated. However, if web workers
	                //are in play, the expectation is that a build has been done so
	                //that only one script needs to be loaded anyway. This may need
	                //to be reevaluated if other use cases become common.

	                // Post a task to the event loop to work around a bug in WebKit
	                // where the worker gets garbage-collected after calling
	                // importScripts(): https://webkit.org/b/153317
	                setTimeout(function () {}, 0);
	                importScripts(url);

	                //Account for anonymous modules
	                context.completeLoad(moduleName);
	            } catch (e) {
	                context.onError(makeError('importscripts', 'importScripts failed for ' + moduleName + ' at ' + url, e, [moduleName]));
	            }
	        }
	    };

	    function getInteractiveScript() {
	        if (interactiveScript && interactiveScript.readyState === 'interactive') {
	            return interactiveScript;
	        }

	        eachReverse(scripts(), function (script) {
	            if (script.readyState === 'interactive') {
	                return interactiveScript = script;
	            }
	        });
	        return interactiveScript;
	    }

	    //Look for a data-main script attribute, which could also adjust the baseUrl.
	    if (isBrowser && !cfg.skipDataMain) {
	        //Figure out baseUrl. Get it from the script tag with require.js in it.
	        eachReverse(scripts(), function (script) {
	            //Set the 'head' where we can append children by
	            //using the script's parent.
	            if (!head) {
	                head = script.parentNode;
	            }

	            //Look for a data-main attribute to set main script for the page
	            //to load. If it is there, the path to data main becomes the
	            //baseUrl, if it is not already set.
	            dataMain = script.getAttribute('data-main');
	            if (dataMain) {
	                //Preserve dataMain in case it is a path (i.e. contains '?')
	                mainScript = dataMain;

	                //Set final baseUrl if there is not already an explicit one,
	                //but only do so if the data-main value is not a loader plugin
	                //module ID.
	                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
	                    //Pull off the directory of data-main for use as the
	                    //baseUrl.
	                    src = mainScript.split('/');
	                    mainScript = src.pop();
	                    subPath = src.length ? src.join('/') + '/' : './';

	                    cfg.baseUrl = subPath;
	                }

	                //Strip off any trailing .js since mainScript is now
	                //like a module name.
	                mainScript = mainScript.replace(jsSuffixRegExp, '');

	                //If mainScript is still a path, fall back to dataMain
	                if (req.jsExtRegExp.test(mainScript)) {
	                    mainScript = dataMain;
	                }

	                //Put the data-main script in the files to load.
	                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

	                return true;
	            }
	        });
	    }

	    /**
	     * The function that handles definitions of modules. Differs from
	     * require() in that a string for the module should be the first argument,
	     * and the function to execute after dependencies are loaded should
	     * return a value to define the module corresponding to the first argument's
	     * name.
	     */
	    define = function define(name, deps, callback) {
	        var node, context;

	        //Allow for anonymous modules
	        if (typeof name !== 'string') {
	            //Adjust args appropriately
	            callback = deps;
	            deps = name;
	            name = null;
	        }

	        //This module may not have dependencies
	        if (!isArray(deps)) {
	            callback = deps;
	            deps = null;
	        }

	        //If no name, and callback is a function, then figure out if it a
	        //CommonJS thing with dependencies.
	        if (!deps && isFunction(callback)) {
	            deps = [];
	            //Remove comments from the callback string,
	            //look for require calls, and pull them into the dependencies,
	            //but only if there are function args.
	            if (callback.length) {
	                callback.toString().replace(commentRegExp, commentReplace).replace(cjsRequireRegExp, function (match, dep) {
	                    deps.push(dep);
	                });

	                //May be a CommonJS thing even without require calls, but still
	                //could use exports, and module. Avoid doing exports and module
	                //work though if it just needs require.
	                //REQUIRES the function to expect the CommonJS variables in the
	                //order listed below.
	                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
	            }
	        }

	        //If in IE 6-8 and hit an anonymous define() call, do the interactive
	        //work.
	        if (useInteractive) {
	            node = currentlyAddingScript || getInteractiveScript();
	            if (node) {
	                if (!name) {
	                    name = node.getAttribute('data-requiremodule');
	                }
	                context = contexts[node.getAttribute('data-requirecontext')];
	            }
	        }

	        //Always save off evaluating the def call until the script onload handler.
	        //This allows multiple modules to be in a file without prematurely
	        //tracing dependencies, and allows for anonymous module support,
	        //where the module name is not known until the script onload event
	        //occurs. If no context, use the global queue, and get it processed
	        //in the onscript load callback.
	        if (context) {
	            context.defQueue.push([name, deps, callback]);
	            context.defQueueMap[name] = true;
	        } else {
	            globalDefQueue.push([name, deps, callback]);
	        }
	    };

	    define.amd = {
	        jQuery: true
	    };

	    /**
	     * Executes the text. Normally just uses eval, but can be modified
	     * to use a better, environment-specific call. Only used for transpiling
	     * loader plugins, not for plain JS modules.
	     * @param {String} text the text to execute/evaluate.
	     */
	    req.exec = function (text) {
	        /*jslint evil: true */
	        return eval(text);
	    };

	    //Set up with config info.
	    req(cfg);
	})(undefined, typeof setTimeout === 'undefined' ? undefined : setTimeout);

	// 把 define 也一起暴露出去
	requirejs.define = define;

	// define 函数需放在 window 上给JSONP回调函数使用
	window['define'] = window['define'] || define;

	exports.default = requirejs;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	    uf: {},
	    count: 0,
	    success: function success() {
	        --this.count;
	        if (this.count === 0) {
	            // 全部执行完成后执行再执行init初始化页面
	            this.uf._reInit();
	        }
	    },
	    error: function error(err) {
	        _antd.notification.error({
	            top: 24,
	            message: '执行出错，已阻止页面加载',
	            duration: 0,
	            description: JSON.stringify(err)
	        });
	    },
	    handle: function handle(arr, uf) {
	        this.waiting = true;
	        this.uf = uf;
	        this.count = arr.length;
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var func = _step.value;

	                func(this.success.bind(this), this.error.bind(this));
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }
	    }
	}; /**
	    * @file 执行阻塞页面加载的函数（init之前执行的函数，多为调用api）
	    * @author liuzechun
	    * Created Date: 2017-12-18 07:48:32
	    */

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var InstallApp = function (_BaseDoc) {
	    _inherits(InstallApp, _BaseDoc);

	    function InstallApp(props) {
	        _classCallCheck(this, InstallApp);

	        var _this = _possibleConstructorReturn(this, (InstallApp.__proto__ || Object.getPrototypeOf(InstallApp)).call(this, props));

	        _this.doc = 'install.md';
	        _this.__init();
	        return _this;
	    }

	    return InstallApp;
	}(_BaseDoc3.default);

	exports.default = InstallApp;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Join = function (_BaseDoc) {
	    _inherits(Join, _BaseDoc);

	    function Join(props) {
	        _classCallCheck(this, Join);

	        var _this = _possibleConstructorReturn(this, (Join.__proto__ || Object.getPrototypeOf(Join)).call(this, props));

	        _this.doc = 'configure-join.md';
	        _this.__init();
	        return _this;
	    }

	    return Join;
	}(_BaseDoc3.default);

	exports.default = Join;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Info = function (_BaseDoc) {
	    _inherits(Info, _BaseDoc);

	    function Info(props) {
	        _classCallCheck(this, Info);

	        var _this = _possibleConstructorReturn(this, (Info.__proto__ || Object.getPrototypeOf(Info)).call(this, props));

	        _this.doc = 'configure-api.md';
	        _this.__init();
	        return _this;
	    }

	    return Info;
	}(_BaseDoc3.default);

	exports.default = Info;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本结构',
	    description: '典型的页面布局。',
	    config: [{
	        type: 'layout',
	        content: [{
	            type: 'header',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Header'
	        }, {
	            type: 'content',
	            style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	            content: 'Content'
	        }, {
	            type: 'footer',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Footer'
	        }]
	    }, {
	        type: 'layout',
	        style: { marginTop: 30 },
	        content: [{
	            type: 'header',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Header'
	        }, {
	            type: 'content',
	            content: {
	                type: 'layout',
	                content: [{
	                    type: 'sider',
	                    style: { background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px' },
	                    content: 'Sider'
	                }, {
	                    type: 'content',
	                    style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	                    content: 'Content'
	                }]
	            }
	        }, {
	            type: 'footer',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Footer'
	        }]
	    }, {
	        type: 'layout',
	        style: { marginTop: 30 },
	        content: [{
	            type: 'header',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Header'
	        }, {
	            type: 'content',
	            content: {
	                type: 'layout',
	                content: [{
	                    type: 'content',
	                    style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	                    content: 'Content'
	                }, {
	                    type: 'sider',
	                    style: { background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px' },
	                    content: 'Sider'
	                }]
	            }
	        }, {
	            type: 'footer',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Footer'
	        }]
	    }, {
	        type: 'layout',
	        style: { marginTop: 30 },
	        content: [{
	            type: 'sider',
	            style: { background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px' },
	            content: 'Sider'
	        }, {
	            type: 'content',
	            content: {
	                type: 'layout',
	                content: [{
	                    type: 'header',
	                    style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	                    content: 'Header'
	                }, {
	                    type: 'content',
	                    style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	                    content: 'Content'
	                }, {
	                    type: 'footer',
	                    style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	                    content: 'Footer'
	                }]
	            }
	        }]
	    }]
	};

	var demo2 = {
	    title: '上中下布局',
	    description: '最基本的『上-中-下』布局。一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。',
	    config: {
	        type: 'layout',
	        content: [{
	            type: 'header',
	            content: [{ type: 'div', className: 'logo' }, {
	                type: 'menu',
	                theme: 'dark',
	                mode: 'horizontal',
	                defaultSelectedKeys: ['2'],
	                style: { lineHeight: '64px' },
	                items: [{
	                    key: '1',
	                    title: 'nav 1'
	                }, {
	                    key: '2',
	                    title: 'nav 2'
	                }, {
	                    key: '3',
	                    title: 'nav 3'
	                }]
	            }]
	        }, {
	            type: 'content',
	            style: { padding: '0 50px' },
	            content: [{
	                type: 'breadcrumb',
	                style: { margin: '12px 0' }
	            }, {
	                type: 'div',
	                style: { background: '#fff', padding: 24, minHeight: 280 },
	                content: 'Content'
	            }]
	        }, {
	            type: 'footer',
	            style: { textAlign: 'center' },
	            content: 'UF ©2017 Created by Liuzechun'
	        }]
	    }
	};

	var demo3 = {
	    title: '顶部-侧边布局-通栏',
	    description: '同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。',
	    config: {
	        type: 'layout',
	        content: [{
	            type: 'header',
	            content: [{ type: 'div', className: 'logo' }, {
	                type: 'menu',
	                theme: 'dark',
	                mode: 'horizontal',
	                defaultSelectedKeys: ['2'],
	                style: { lineHeight: '64px' },
	                items: [{
	                    key: '1',
	                    title: 'nav 1'
	                }, {
	                    key: '2',
	                    title: 'nav 2'
	                }, {
	                    key: '3',
	                    title: 'nav 3'
	                }]
	            }]
	        }, {
	            type: 'layout',
	            content: [{
	                type: 'sider',
	                width: 200,
	                style: { background: '#fff' },
	                content: {
	                    type: 'menu',
	                    mode: 'inline',
	                    selectedKeys: ['1'],
	                    defaultOpenKeys: ['sub1'],
	                    style: { height: '100%', borderRight: 0 },
	                    items: [{
	                        key: 'sub1',
	                        icon: 'user',
	                        title: 'subnav 1',
	                        childItems: [{ key: '1', title: 'option 1' }, { key: '2', title: 'option 2' }, { key: '3', title: 'option 3' }]
	                    }, {
	                        key: 'sub2',
	                        icon: 'laptop',
	                        title: 'subnav 2',
	                        childItems: [{ key: '4', title: 'option 4' }, { key: '5', title: 'option 5' }, { key: '6', title: 'option 6' }]
	                    }, {
	                        key: 'sub3',
	                        icon: 'notification',
	                        title: 'subnav 3',
	                        childItems: [{ key: '7', title: 'option 7' }, { key: '8', title: 'option 8' }, { key: '9', title: 'option 9' }]
	                    }]
	                }
	            }, {
	                type: 'content',
	                style: { padding: '0 24px 24px' },
	                content: [{
	                    type: 'breadcrumb',
	                    style: { margin: '12px 0' }
	                }, {
	                    type: 'div',
	                    style: { background: '#fff', padding: 24, minHeight: 280 },
	                    content: 'Content'
	                }]
	            }]
	        }]
	    }
	};

	var demo4 = {
	    title: '顶部-侧边布局',
	    description: '拥有顶部导航及侧边栏的页面，多用于展示类网站。',
	    config: {
	        type: 'layout',
	        content: [{
	            type: 'header',
	            content: [{ type: 'div', className: 'logo' }, {
	                type: 'menu',
	                theme: 'dark',
	                mode: 'horizontal',
	                defaultSelectedKeys: ['2'],
	                style: { lineHeight: '64px' },
	                items: [{
	                    key: '1',
	                    title: 'nav 1'
	                }, {
	                    key: '2',
	                    title: 'nav 2'
	                }, {
	                    key: '3',
	                    title: 'nav 3'
	                }]
	            }]
	        }, {
	            type: 'content',
	            style: { padding: '0 50px' },
	            content: [{
	                type: 'breadcrumb',
	                style: { margin: '12px 0' }
	            }, {
	                type: 'layout',
	                content: [{
	                    type: 'sider',
	                    width: 200,
	                    style: { background: '#fff' },
	                    content: {
	                        type: 'menu',
	                        mode: 'inline',
	                        selectedKeys: ['1'],
	                        defaultOpenKeys: ['sub1'],
	                        style: { height: '100%', borderRight: 0 },
	                        items: [{
	                            key: 'sub1',
	                            icon: 'user',
	                            title: 'subnav 1',
	                            childItems: [{ key: '1', title: 'option 1' }, { key: '2', title: 'option 2' }, { key: '3', title: 'option 3' }]
	                        }, {
	                            key: 'sub2',
	                            icon: 'laptop',
	                            title: 'subnav 2',
	                            childItems: [{ key: '4', title: 'option 4' }, { key: '5', title: 'option 5' }, { key: '6', title: 'option 6' }]
	                        }, {
	                            key: 'sub3',
	                            icon: 'notification',
	                            title: 'subnav 3',
	                            childItems: [{ key: '7', title: 'option 7' }, { key: '8', title: 'option 8' }, { key: '9', title: 'option 9' }]
	                        }]
	                    }
	                }, {
	                    type: 'content',
	                    style: { padding: '0 24px 24px' },
	                    content: [{
	                        type: 'div',
	                        style: { background: '#fff', padding: 24, minHeight: 280 },
	                        content: 'Content'
	                    }]
	                }]
	            }]
	        }]
	    }
	};

	var LayoutApp = function (_BaseDoc) {
	    _inherits(LayoutApp, _BaseDoc);

	    function LayoutApp(props) {
	        _classCallCheck(this, LayoutApp);

	        var _this = _possibleConstructorReturn(this, (LayoutApp.__proto__ || Object.getPrototypeOf(LayoutApp)).call(this, props));

	        _this.doc = 'antd-layout.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(LayoutApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return LayoutApp;
	}(_BaseDoc3.default);

	exports.default = LayoutApp;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Data = JSON.parse('{"endSheet":[{"id":"49","title":"test工单统计","type":"服务报障","relate_service":"9","content":"<p><strong>test工单统计</strong></p>","creator":"liuzhibin02","status":"处理完成","priority":"普通","create_time":"2017-06-22 11:04:25","proposer":"","upvote":0,"ostatus":"2","handle_person":"liuzhibin02"},{"id":"46","title":"等发达","type":"服务报障","relate_service":"9","content":"<p>d&#39;f&#39;d&#39;f</p>","creator":"liuzhibin02","status":"处理完成","priority":"普通","create_time":"2017-06-20 16:29:46","proposer":"","upvote":1,"ostatus":"2","handle_person":"liuzhibin02"},{"id":"36","title":"ddd","type":"服务报障","relate_service":"9","content":"","creator":"liuzhibin02","status":"处理完成","priority":"普通","create_time":"2017-06-17 00:10:20","proposer":"","upvote":0,"ostatus":"2","handle_person":"liuzhibin02"},{"id":"31","title":"M1机房交换机故障网络抖动严重业务及时迁移和切走","type":"服务报障","relate_service":"14","content":"1、外网网络抖动，严重影响用户使用。请及时切走业务。2、外网网络抖动，严重影响用户使用。请及时切走业务。3、外网网络抖动，严重影响用户使用。请及时切走业务。4、外网网络抖动，严重影响用户使用。请及时切走业务。5、外网网络抖动，严重影响用户使用。请及时切走业务。6、外网网络抖动，严重影响用户使用。7、请及时切走业务。外网网络抖动，严重影响用户使用。8、请及时切走业务。","creator":"liuzhibin02","status":"处理完成","priority":"普通","create_time":"2017-06-16 16:44:45","proposer":"","upvote":1,"ostatus":"2","handle_person":"lingjing"},{"id":"1","title":"test001","type":"服务报障","relate_service":"13","content":"ccc","creator":"liuzhibin02","status":"处理完成","priority":"普通","create_time":"2017-06-13 10:19:18","proposer":"","upvote":1,"ostatus":"2","handle_person":"lingjing"}],"processSheet":[{"id":"45","title":"ates","type":"服务报障","relate_service":"9","content":"<p>fdaf</p>","creator":"liuzhibin02","status":"进行中","priority":"普通","create_time":"2017-06-20 16:27:38","proposer":"","upvote":0,"ostatus":"1","handle_person":"liuzhibin02"},{"id":"28","title":"eeee","type":"服务咨询","relate_service":"9","content":"eeeeeeeee","creator":"liuzhibin02","status":"进行中","priority":"普通","create_time":"2017-06-16 14:57:10","proposer":"","upvote":0,"ostatus":"1","handle_person":"liuzhibin02"},{"id":"27","title":"eeee","type":"服务咨询","relate_service":"9","content":"eeeeeeeee","creator":"liuzhibin02","status":"进行中","priority":"普通","create_time":"2017-06-16 14:55:17","proposer":"","upvote":0,"ostatus":"1","handle_person":"liuzhibin02"},{"id":"26","title":"eeee","type":"服务咨询","relate_service":"9","content":"eeeeeeeee","creator":"liuzhibin02","status":"未处理","priority":"普通","create_time":"2017-06-16 14:54:59","proposer":"","upvote":0,"ostatus":"0","handle_person":"lingjing"},{"id":"25","title":"eeee","type":"服务咨询","relate_service":"9","content":"eeeeeeeee","creator":"liuzhibin02","status":"未处理","priority":"普通","create_time":"2017-06-16 14:50:47","proposer":"","upvote":0,"ostatus":"0","handle_person":"[无]"},{"id":"24","title":"eeee","type":"服务咨询","relate_service":"9","content":"eeeeeeeee","creator":"liuzhibin02","status":"未处理","priority":"普通","create_time":"2017-06-16 14:49:25","proposer":"","upvote":0,"ostatus":"0","handle_person":"[无]"},{"id":"23","title":"【BGW】TC机房网络故障","type":"服务报障","relate_service":"12","content":"网络设备异常。运营商电路切断。导致异常。请求紧急处理","creator":"liuzhibin02","status":"未处理","priority":"紧急","create_time":"2017-06-16 14:41:51","proposer":"","upvote":0,"ostatus":"0","handle_person":"[无]"},{"id":"15","title":"a","type":"服务报障","relate_service":"40","content":"a","creator":"liuzhibin02","status":"进行中","priority":"普通","create_time":"2017-06-14 13:35:22","proposer":"","upvote":0,"ostatus":"1","handle_person":"[无]"},{"id":"2","title":"test001","type":"服务咨询","relate_service":"13","content":"cccfff","creator":"liuzhibin02","status":"进行中","priority":"普通","create_time":"0000-00-00 00:00:00","proposer":"","upvote":1,"ostatus":"1","handle_person":"zhanghenghua"}]}');

	var demo1 = {
	    title: '网络服务台 - 我的工单页面',
	    config: {
	        type: 'div',
	        style: { padding: '20px', background: '#f7f7f7' },
	        content: {
	            type: 'layout',
	            content: [{
	                type: 'sider',
	                name: 'my-sider',
	                style: { background: '#333744' },
	                content: [{
	                    type: 'div',
	                    style: { padding: 12 },
	                    content: [{
	                        type: 'icon',
	                        mode: 'customer-service',
	                        style: { color: '#fff', fontSize: '22px' }
	                    }]
	                }, {
	                    type: 'menu',
	                    mode: 'inline',
	                    theme: 'dark',
	                    defaultOpenKeys: ['worksheet', 'setting'],
	                    selectedKeys: ['mine'],
	                    items: [{
	                        key: 'worksheet',
	                        title: '工单',
	                        childItems: [{
	                            key: 'create',
	                            title: '创建工单'
	                        }, {
	                            key: 'mine',
	                            title: '我的工单'
	                        }]
	                    }, {
	                        key: 'setting',
	                        title: '系统管理',
	                        childItems: [{
	                            key: 'home',
	                            title: '首页配置'
	                        }, {
	                            key: 'service',
	                            title: '服务目录配置'
	                        }, {
	                            key: 'help',
	                            title: '帮助中心配置'
	                        }]
	                    }]
	                }]
	            }, {
	                type: 'layout',
	                content: [{
	                    type: 'header',
	                    style: { background: '#fff', padding: 0, height: '48px', lineHeight: '48px' },
	                    content: [{
	                        type: 'icon',
	                        mode: 'menu-fold',
	                        style: { fontSize: '18px', lineHeight: '48px', marginLeft: '10px' },
	                        onClick: function onClick(v) {
	                            return (0, _tools2.default)('my-sider').set({
	                                collapsed: !(0, _tools2.default)('my-sider').get('collapsed')
	                            });
	                        }
	                    }, {
	                        type: 'menu',
	                        style: { float: 'right' },
	                        mode: 'horizontal',
	                        items: [{
	                            icon: 'schedule',
	                            title: '工单'
	                        }, {
	                            icon: 'trophy',
	                            title: '控制台'
	                        }, {
	                            icon: 'contacts',
	                            title: 'lingjing'
	                        }]
	                    }]
	                }, {
	                    type: 'breadcrumb',
	                    items: [{ path: 'index', breadcrumbName: 'Home' }, { path: 'worksheet', breadcrumbName: '我的工单' }]
	                }, {
	                    type: 'content',
	                    style: { padding: '20px', background: '#fff' },
	                    content: [{
	                        type: 'div',
	                        style: { marginBottom: '10px' },
	                        content: {
	                            type: 'radio',
	                            name: 'my-radio-button',
	                            showAsButton: true,
	                            value: 'pendding',
	                            size: 'large',
	                            options: [{ label: '待处理工单', value: 'pendding' }, { label: '已完成工单', value: 'finished' }],
	                            onChange: function onChange(e) {
	                                var status = e.target.value;
	                                (0, _tools2.default)('my-loading').set({ loading: true });
	                                (0, _tools2.default)('my-table').set({ title: status === 'pendding' ? '待处理工单' : '已完成工单' });
	                                setTimeout(function () {
	                                    (0, _tools2.default)('my-loading').set({ loading: false });
	                                    (0, _tools2.default)('my-table').set({
	                                        data: status === 'pendding' ? Data.processSheet : Data.endSheet
	                                    });
	                                }, 1500);
	                            }
	                        }
	                    }, {
	                        type: 'loading',
	                        name: 'my-loading',
	                        content: {
	                            type: 'table2',
	                            title: '待处理工单',
	                            name: 'my-table',
	                            tags: {
	                                id: '工单编号',
	                                title: '标题',
	                                type: '类型',
	                                creator: '创建人',
	                                proposer: '提出人',
	                                create_time: '提交时间',
	                                status: '状态',
	                                handle_person: '接手人'
	                            },
	                            pager: {
	                                pageSize: 8,
	                                showQuickJumper: true,
	                                showCount: true
	                            },
	                            cfg: { checkBox: false },
	                            display: {
	                                basic: ['filter', 'refresh', 'setPageSize'],
	                                showText: false
	                            },
	                            data: Data.processSheet
	                        }
	                    }]
	                }]
	            }]
	        }
	    }
	};

	var demo2 = {
	    title: '带路由的页面',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/card'
	    }
	};

	var Page = function (_BaseDoc) {
	    _inherits(Page, _BaseDoc);

	    function Page(props) {
	        _classCallCheck(this, Page);

	        var _this = _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).call(this, props));

	        _this.doc = 'configure-page.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Page, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return Page;
	}(_BaseDoc3.default);

	exports.default = Page;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Others = function (_BaseDoc) {
	    _inherits(Others, _BaseDoc);

	    function Others(props) {
	        _classCallCheck(this, Others);

	        var _this = _possibleConstructorReturn(this, (Others.__proto__ || Object.getPrototypeOf(Others)).call(this, props));

	        _this.doc = 'configure-others.md';
	        _this.__init();
	        return _this;
	    }

	    return Others;
	}(_BaseDoc3.default);

	exports.default = Others;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 快速上手
	


	var demo1 = {
	    title: '包含多个页面的项目',
	    description: '因为内容较多，此处是引入了一个子页面。原页面可见[此链接](docs/demo/router.php#/)',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/'
	    }
	};

	var Install = function (_BaseDoc) {
	    _inherits(Install, _BaseDoc);

	    function Install(props) {
	        _classCallCheck(this, Install);

	        var _this = _possibleConstructorReturn(this, (Install.__proto__ || Object.getPrototypeOf(Install)).call(this, props));

	        _this.doc = 'develop-install.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Install, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return Install;
	}(_BaseDoc3.default);

	exports.default = Install;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置函数 UF.config 说明
	


	var Config = function (_BaseDoc) {
	    _inherits(Config, _BaseDoc);

	    function Config(props) {
	        _classCallCheck(this, Config);

	        var _this = _possibleConstructorReturn(this, (Config.__proto__ || Object.getPrototypeOf(Config)).call(this, props));

	        _this.doc = 'develop-config.md';
	        _this.__init();
	        return _this;
	    }

	    return Config;
	}(_BaseDoc3.default);

	exports.default = Config;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 模块开发说明
	


	var Modules = function (_BaseDoc) {
	    _inherits(Modules, _BaseDoc);

	    function Modules(props) {
	        _classCallCheck(this, Modules);

	        var _this = _possibleConstructorReturn(this, (Modules.__proto__ || Object.getPrototypeOf(Modules)).call(this, props));

	        _this.doc = 'develop-modules.md';
	        _this.__init();
	        return _this;
	    }

	    return Modules;
	}(_BaseDoc3.default);

	exports.default = Modules;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 其他说明
	


	var Others = function (_BaseDoc) {
	    _inherits(Others, _BaseDoc);

	    function Others(props) {
	        _classCallCheck(this, Others);

	        var _this = _possibleConstructorReturn(this, (Others.__proto__ || Object.getPrototypeOf(Others)).call(this, props));

	        _this.doc = 'develop-others.md';
	        _this.__init();
	        return _this;
	    }

	    return Others;
	}(_BaseDoc3.default);

	exports.default = Others;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第二种开发模式
	


	var Build = function (_BaseDoc) {
	    _inherits(Build, _BaseDoc);

	    function Build(props) {
	        _classCallCheck(this, Build);

	        var _this = _possibleConstructorReturn(this, (Build.__proto__ || Object.getPrototypeOf(Build)).call(this, props));

	        _this.doc = 'develop-build.md';
	        _this.__init();
	        return _this;
	    }

	    return Build;
	}(_BaseDoc3.default);

	exports.default = Build;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var UpdateLogApp = function (_BaseDoc) {
	    _inherits(UpdateLogApp, _BaseDoc);

	    function UpdateLogApp(props) {
	        _classCallCheck(this, UpdateLogApp);

	        var _this = _possibleConstructorReturn(this, (UpdateLogApp.__proto__ || Object.getPrototypeOf(UpdateLogApp)).call(this, props));

	        _this.doc = 'update-log.md';
	        _this.className = 'log';
	        _this.__init();
	        return _this;
	    }

	    return UpdateLogApp;
	}(_BaseDoc3.default);

	exports.default = UpdateLogApp;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(177);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	// 以下均为模拟数据，在实际应用中可根据情况获取
	var commonHeaders = [{ key: 'id', title: 'ID' }, { key: 'hostname', title: '主机名' }, { key: 'sn', title: 'SN' }, { key: 'status', title: '状态' }, { key: 'model_id', title: '型号' }, { key: 'rack', title: '机架位' }];
	var config1 = {
	    type: 'export',
	    // 导出数据接口的url（一般可直接使用分页接口）
	    source: 'docs/php/download.php',
	    // 表格中要显示的字段，以及字段对应的表头
	    // headers: {'id': 'ID', 'hostname': '主机名', 'sn': 'SN', 'status': '状态', 'model_id': '型号', 'rack': '机架位'},
	    headers: commonHeaders,
	    params: {
	        isExport: true,
	        container_id: 484,
	        zone: 'china',
	        type: 'server'
	    },
	    content: {
	        type: 'button',
	        mode: 'primary',
	        style: 'margin-right: 6px',
	        content: '默认导出'
	        // 当前表格所有数据的总条数
	        // total: 720
	    } };
	var config2 = {
	    type: 'export',
	    source: 'docs/php/download.php',
	    headers: commonHeaders,
	    params: {
	        isExport: true,
	        container_id: 484,
	        zone: 'china',
	        type: 'server'
	    },
	    total: 720,
	    fileName: '异步导出CSV文件demo',
	    fileFormat: '.csv',
	    message: {
	        page1: ['请注意，程序会自动根据分页大小依次向服务端请求数据，全部请求完毕后生成CSV下载。不要将分页大小设置的过大，以免服务器端查询数据超时。'],
	        page2: ['如果下载的文件用Excel或者其他文本编辑器打开提示文件格式与扩展名不一致，请选择“是”，直接用打开即可。', '为防止常规单元格式下excel的自动转化，所有字段均转化为文本！']
	    },
	    content: {
	        type: 'button',
	        mode: 'primary',
	        style: 'margin-right: 6px',
	        content: '提示导出_CSV格式'
	    }
	};
	var config3 = {
	    type: 'export',
	    headers: commonHeaders,
	    data: [{ 'id': '1924', 'hostname': 'tc-click-log1-off.tc', 'sn': '686N32X',
	        'status': '14', 'model_id': '15', 'rack': 'TC706-03-11-4机架位',
	        'container_id': '488', 'rms_product_id': '174'
	    }],
	    content: {
	        type: 'button',
	        mode: 'primary',
	        style: 'margin-right: 6px',
	        content: '同步导出'
	    }
	};

	var demo1 = {
	    title: '三种常用用法',
	    description: '**默认导出：**比较简洁的导出界面，通过接口获取数据。**提示导出：**可以定义一些提示信息，比如说明导出内容，也是异步的数据。**同步导出：**直接把前端已有数据导出成文件，多用于前端分页的表格中。',
	    config: [config1, config2, config3]
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	module.exports = "### 功能说明  \n* 通过一定格式的配置以及数据格式，可以将数据导出为.xls以及.csv文件\n* 配置`headers`用于文件中表头的展示以及数据的一一对应\n* 配置`source`，`params`，`total`可通过后端异步导出数据\n* 配置`fileName`，`fileFormat`分别实现导出的文件名称及文件格式类型\n\n## 组件&参数\n\n### # export\n\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| data | 要导出的全部数据列表，需要按照一定的格式书写 | Array |  | 若传入此属性，则按同步导出处理，直接把data中的数据导出到文件中 |\n| headers | 导出文件中要显示的字段，以及字段对应的表头，值为数组，数组的每个元素为一个对象，见下方详细说明 | Array |  | 必须 |\n| source | 导出数据接口（一般可直接使用分页接口，接口格式见下面）(如果总数已知且确定的话total可选) | String |  | 如果传入此属性，则认为是异步导出 |\n| params | 需要传递给后台的参数，如一些搜索及高级查询的过滤条件等（同`Table`组件的params参数） | Object |  |  |\n| total | 当前表格所有数据的总条数 (因为在导出前就会使用，所以最好传入，否则在开始前将不会计算所需请求次数，异步请求接口数据必须传递total或count值) | Number |  |  |\n| message | 如上面示例的'提示导出'组件，可自定义下面的提示信息：包含两个属性 `page1`、`page2`，属性值都是数组，详见`提示导出CSV文件`demo | Object |  |  |\n| fileName | 自定义导出的文件名 | String | 导出时间+'导出文件' |  |\n| fileFormat | 选择导出的文件名，目前只支持.xls文件和.csv文件，故值为'.xls'或'.csv' | String | '.xls' | . |\n\n#### *headers*\n> 数组的每个元素都为一个对象，每个对象具有两个属性`key`，`title`，`key`属性的属性值为数据中的字段名，`title`属性的属性值为表头的列名\n\n```javascript\nheaders: [\n    {\n        key: 'name',\n        title: '姓名'\n    },\n    {\n        key: 'age',\n        title: '年龄'\n    },\n    {...}\n]\n```\n\n#### 异步导出接口数据格式\n```json\nsuccess:\n{\n    status:0,\n    data:[{…},…],\n    total/count: 720\n}\nerror:\n{\n    status: 1,\n    msg: 'error'\n}\n```\n"

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _markdown = __webpack_require__(179);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化表单组件
	

	// import Form from 'src/form';


	var Step1 = {
	    type: 'form',
	    name: 'my-form1',
	    // header: {
	    //     type: 'icon',
	    //     mode: 'search'
	    // },
	    // title: '新增专线 - 第1步',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 16
	    },
	    items: [[
	    /* {
	        type: 'input',
	        label: '专线SN',
	        name: 'line_sn',
	        rules: [{required: true, message: '主线SN不能为空'}],
	        placeholder: 'sn20134567'
	    }, */
	    {
	        type: 'date-picker',
	        label: '专线SN',
	        name: 'line_sn',
	        // rules: [{required: true, message: '主线SN不能为空'}],
	        // placeholder: 'sn20134567'
	        format: ''
	    }, {
	        type: 'select',
	        label: '机房',
	        name: 'idc_id',
	        rules: [{ required: true, message: '机房不能为空' }],
	        source: 'docs/php/data.php',
	        sourceHandler: function sourceHandler(data) {
	            return data.map(function (v) {
	                return { value: v.name, label: v.name };
	            });
	        }
	    }], [{
	        type: 'input',
	        label: '所属机构',
	        name: 'organization',
	        rules: [{ required: true, message: '所属机构不能为空' }],
	        placeholder: '招商银行-百度钱包'
	    }, {
	        type: 'select',
	        label: '运营商',
	        allowClear: true,
	        name: 'operator',
	        default: '1',
	        options: [{
	            value: '1',
	            label: '移动'
	        }, {
	            value: '2',
	            label: '联通'
	        }]
	    }], [{
	        type: 'radio',
	        label: '主备线',
	        name: 'standby',
	        default: '0',
	        options: [{
	            value: '0',
	            label: '主线'
	        }, {
	            value: '1',
	            label: '备线'
	        }]
	    }, {
	        type: 'select',
	        label: '接入方式',
	        name: 'access_type',
	        default: '0',
	        join: {
	            bandwith: { display: function display(v) {
	                    return !!+v;
	                } },
	            line_type: { display: function display(v) {
	                    return !!+v;
	                } },
	            port_type: { display: function display(v) {
	                    return !!+v;
	                } },
	            is_converge: { display: function display(v) {
	                    return !!+v;
	                } }
	        },
	        options: [{
	            value: '0',
	            label: 'VPN'
	        }, {
	            value: '1',
	            label: '专线'
	        }]
	    }], [{
	        type: 'input',
	        label: '产品',
	        name: 'product',
	        rules: [{ required: true, message: '产品不能为空' }],
	        placeholder: '百度钱包'
	    }, {
	        type: 'input',
	        label: '专线带宽',
	        name: 'bandwith',
	        rules: [{ required: true, message: '专线带宽不能为空' }],
	        display: false,
	        placeholder: 10,
	        addonAfter: 'M'
	    }], [{
	        type: 'select',
	        label: '专线类型',
	        name: 'line_type',
	        display: false,
	        default: '0',
	        options: [{
	            value: '0',
	            label: 'MSTP'
	        }, {
	            value: '1',
	            label: 'SDH-E1'
	        }]
	    }, {
	        type: 'select',
	        label: '接口类型',
	        name: 'port_type',
	        display: false,
	        default: '0',
	        options: [{
	            value: '0',
	            label: 'RJ45-电口'
	        }, {
	            value: '1',
	            label: '光口'
	        }]
	    }], [{
	        type: 'radio',
	        label: '是否汇聚',
	        name: 'is_converge',
	        display: false,
	        default: '0',
	        join: {
	            vlan_no: { display: function display(v) {
	                    return !!+v;
	                } }
	        },
	        options: [{
	            value: '0',
	            label: '是'
	        }, {
	            value: '1',
	            label: '否'
	        }]
	    }, {
	        type: 'input',
	        label: 'vlan编号',
	        name: 'vlan_no',
	        display: false,
	        placeholder: '20'
	    }], [{
	        type: 'select',
	        label: '模板',
	        name: 'template',
	        default: '1',
	        options: [{
	            value: '1',
	            label: '线下模板test'
	        }]
	    }, {
	        type: 'input',
	        label: '地址',
	        name: 'address',
	        rules: [{ required: true, message: '地址不能为空' }]
	    }], [{
	        type: 'input',
	        label: '百度侧IP',
	        name: 'baidu_ip',
	        rules: [{ required: true, message: '百度侧IP不能为空' }]
	    }, {
	        type: 'input',
	        label: '对端IP',
	        name: 'point_ip',
	        rules: [{ required: true, message: '对端IP不能为空' }]
	    }]],
	    buttons: {
	        layout: 'center',
	        items: [{
	            action: 'reset',
	            type: '',
	            value: '清除',
	            // size: 'large',
	            icon: 'delete',
	            // disabled: 'disabled',
	            onClick: function onClick(data) {
	                console.log(data);
	            }
	        }, {
	            action: 'submit',
	            type: 'primary',
	            value: '提交',
	            // size: 'large',
	            icon: 'search',
	            onClick: function onClick(data) {
	                // 使用promise，可以触发按钮的Loading，防止多次点击
	                return new Promise(function (resolve, reject) {
	                    setTimeout(function () {
	                        console.log(data);
	                        reject();
	                    }, 1000);
	                });
	            }
	        }, {
	            action: 'test',
	            type: '',
	            value: '自定义',
	            // size: 'large',
	            icon: 'copy',
	            onClick: function onClick(data) {
	                console.log('自定义按钮');
	            }
	        }]
	    }
	};
	var Step21 = {
	    type: 'form',
	    // title: '新增专线 - 第2步（1）',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    },
	    items: [{
	        type: 'group',
	        name: 'endpoint',
	        header: '对端人员信息',
	        items: [[{
	            type: 'input',
	            label: '姓名',
	            name: 'endpoint_users_name',
	            rules: [{ required: true, message: '姓名不能为空' }],
	            placeholder: '张三'
	        }, {
	            type: 'input',
	            label: '电话',
	            name: 'endpoint_phone',
	            placeholder: '131xxxx5555'
	        }, [{
	            type: 'button',
	            label: '新增',
	            action: 'add',
	            name: 'add',
	            mode: 'primary',
	            onClick: function onClick(form) {
	                console.log(form.getFieldsValue());
	            }
	        }, {
	            type: 'button',
	            label: '删除',
	            action: 'delete',
	            name: 'delete',
	            mode: 'danger'
	        }, {
	            type: 'button',
	            label: '获取数据',
	            action: 'get',
	            name: 'get',
	            onClick: function onClick(form) {
	                console.log(form.getFieldsValue());
	            }
	        }]]]
	    }, {
	        type: 'group',
	        name: 'line_user',
	        header: '业务人员信息',
	        items: [[{
	            type: 'input',
	            label: '姓名',
	            name: 'line_users_name',
	            placeholder: '王xx'
	        }, {
	            type: 'input',
	            label: '电话',
	            name: 'line_users_phone',
	            placeholder: '131xxxx3333'
	        }, {
	            type: 'input',
	            label: '邮件组',
	            name: 'line_users_email',
	            placeholder: '20'
	        }], [{
	            type: 'input',
	            label: '产品',
	            name: 'line_users_remark',
	            placeholder: '备注产品信息'
	        }, {
	            type: 'select',
	            label: '职位',
	            name: 'role',
	            default: '0',
	            options: [{
	                value: '0',
	                label: 'RD'
	            }, {
	                value: '1',
	                label: 'QA'
	            }]
	        }, {
	            type: 'empty'
	        }]]
	    }],
	    buttons: [{
	        action: 'test',
	        type: '',
	        value: '获取数据',
	        size: 'large',
	        // icon: 'copy',
	        onClick: function onClick(d) {
	            return console.log(d);
	        }
	    }]
	};
	var Step22 = {
	    title: '新增专线 - 第2步（2）',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    },
	    items: [[{
	        type: 'select',
	        label: '传输设备',
	        name: 'transmission_equ',
	        default: '1',
	        options: [{
	            value: '',
	            label: 'fuff-int.baidu.com'
	        }, {
	            value: '2',
	            label: 'DB'
	        }]
	    }, {
	        type: 'input',
	        label: '专线SN',
	        name: 'line_sn',
	        rules: [{ required: true, message: '主线SN不能为空' }],
	        placeholder: 'sn20134567'
	    }]]
	};
	var Step23 = {
	    type: 'form',
	    title: '新增专线 - 第2步（1）',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    },
	    items: [[{
	        type: 'input',
	        label: '姓名',
	        name: 'endpoint_users_name',
	        rules: [{ required: true, message: '姓名不能为空' }],
	        placeholder: '张三'
	    }, {
	        type: 'input',
	        label: '电话',
	        name: 'endpoint_phone',
	        placeholder: '131xxxx5555'
	    }, [{
	        type: 'button',
	        label: '新增',
	        action: 'add',
	        name: 'add',
	        mode: 'primary',
	        onClick: function onClick(form) {
	            console.log(form.getFieldsValue());
	        }
	    }, {
	        type: 'button',
	        label: '删除',
	        action: 'delete',
	        name: 'delete',
	        mode: 'danger'
	    }, {
	        type: 'button',
	        label: '获取数据',
	        action: 'get',
	        name: 'get',
	        onClick: function onClick(form) {
	            console.log(form.getFieldsValue());
	        }
	    }]]],
	    buttons: [{
	        action: 'test',
	        type: '',
	        value: '获取数据',
	        size: 'large',
	        onClick: function onClick(d) {
	            return console.log(d);
	        }
	    }]
	};
	var data21 = {
	    endpoint: {
	        endpoint_users_name: '张三',
	        endpoint_phone: '1234567890'
	    },
	    line_user: {
	        line_users_name: '赵四',
	        line_users_phone: '1234567'
	    }
	};
	var data22 = [{
	    endpoint: {
	        endpoint_users_name: '张三',
	        endpoint_phone: '1234567890'
	    },
	    line_user: {
	        line_users_name: '赵四',
	        line_users_phone: '1234567'
	    }
	}, {
	    endpoint: {
	        endpoint_users_name: '王老五',
	        endpoint_phone: '1234567890'
	    },
	    line_user: {
	        line_users_name: '张老四',
	        line_users_phone: '1234567'
	    }
	}];
	var data23 = {
	    endpoint_users_name: '张三',
	    endpoint_phone: '1234567890'
	};

	var demo1 = {
	    title: '基础功能',
	    description: '带有数据验证、字段联动等的表单',
	    config: Step1
	};
	var demo2 = {
	    title: '带新增、复制功能',
	    description: '可以新增/复制某一组form的表单项，新生成一行',
	    config: Step21
	};

	var FormApp = function (_BaseDoc) {
	    _inherits(FormApp, _BaseDoc);

	    function FormApp(props) {
	        _classCallCheck(this, FormApp);

	        var _this = _possibleConstructorReturn(this, (FormApp.__proto__ || Object.getPrototypeOf(FormApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(FormApp, [{
	        key: 'onSubmit',
	        value: function onSubmit(value) {
	            console.log(value);
	        }
	        // 页面的其他内容已经在 BaseDoc 里实现，这里只需要写demo需要的代码即可
	        // 如果没有展示demo，render可不写，见antd组件文档

	    }, {
	        key: 'render',
	        value: function render() {
	            // return <Form ref="testForm" {...Step21} data={[{data21}]} onSubmit={this.onSubmit.bind(this)}/>;
	            // return <Form ref="testForm" {...Step23} data={data23} onSubmit={this.onSubmit.bind(this)}/>;
	            // return <Form ref="testForm" {...Step1} onSubmit={this.onSubmit.bind(this)}/>;
	            // return this.__getDemoSingle(demo2);
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return FormApp;
	}(_BaseDoc3.default);

	exports.default = FormApp;

/***/ }),
/* 179 */
/***/ (function(module, exports) {

	module.exports = "## 功能介绍\n * 灵活可配置的表单\n * 支持多种表单类型：单选框、复选框、输入框、数字输入框、下拉选择框、级联下拉框、上传按钮等常用元素。\n * 支持多种排列方式\n * 灵活的校验规则\n * 可配置底部按钮\n\n> **声明：** 本组件底层使用的是 `Antd.Form`，所以疑惑的地方可以结合 [Antd文档](http://antd.uf.baidu.com/components/form-cn/) 使用\n\n## 组件&配置\n\n### # form\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n--------|-----|------|--------|----\nheader | form 标题 | string &#124; `config` |  | \nclassName | 增加 form 整体的 class 名称 | string |  | \nlayout | 表单布局，支持三种常见布局，见`# layout` | object | |\nsize | 控件大小。可选 `large` `default` `small` | string | `large` |\nitems | 表单项的详细配置参数，首先是一个数组，数组里面每一项可以是对象，也可以是数组。如果是数组的话，则启动了『分组』功能，数组作为一个整体放在一行；如果为一个对象，见`# item` | object[]/array[] |  | 必须\nbuttons | 表单的按钮配置，见`# buttons` | object[] | |\nformData | form 表单的默认值对象，和`items`里面配置的值对应的数据会设置成form的默认值，其他值会在点击提交时随表单数据一起返回，常用于“编辑”功能 | object | |\nbeforeSubmit | 点击提交按钮时，校验完成后传出数据前对数据进行处理，一般用于对表单数据进行格式化 | function(data){} | |\nbeforeSetValues | 传入数据后，在给表单设置默认数据前，对数据进行格式化，一般用于“编辑功能”，传入的数据不符合表单要求格式时（比如checkbox要的是数组，但是传入的是字符串，就可以用这个函数先处理数据然后在传给Form） | function(data){} | |\nonSubmit | 点击提交时，数据校验成功时的回调函数（会被`type='submit'`的按钮的 onClick 参数覆盖） | function(data){} | |\nwrappedComponentRef | 获取Form表单的引用和其他组件不太相同，不能直接在refs上获取到，所以需要通过回调函数获得，`this.formRef`即为form组件的引用，用法如下 | wrappedComponentRef={inst=>this.formRef = inst} | |\n\n\n#### *layout*\n\n参数名称 | 说明 | 类型 | 默认值\n----- | --- | ---------| ---\ntype | 表单布局，有三种： 水平:`horizontal` 垂直:`vertical` 内联:`inline` | string | `horizontal` \ncolumn | 分成多列布局（不是特别好用，推荐使用分组功能，见`item`） | number | 1\nlabelCol | 仅 type 为`horizontal`时有效。使用24栅格系统布局，表单项中label所占栅格的值 | number | 6\nwrapperCol | 仅 type 为`horizontal`时有效。表单项中表单域所占栅格的值 | number |14\n\n\n#### *item*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\ntype | 即为输入类型组件的`type`。**除`type`外，可以使用一切输入型组件的参数** | string | | 必须\nname | 表单域名称，key，提交时以此名称为键 | string | | 必须\nlabel | 表单域左侧的label | string | | 必须\ndefault | 默认值，注意表单域需要的值是字符串还是数组（例如checkbox-group需要array）| | |\nhelp | 额外提示信息，会在label后面增加一个问号，鼠标移上去时提示 | string | |\nextra | 额外提示信息，会显示在表单域之后或下方 | string | |\nrequired | 是否必选 | boolean | `false` \nrules | 除是否必选外，其他验证规则，表单在提交时会根据验证规则对数据进行校验，只有全部通过才会调用提交的回调函数。此处虽然是个对象数组或者对象数组。具体配置见 `item.rules` | object &#124; object[] | |\nregionConfig | 表单域本身的配置，『极少用』。一般只有自定义组件且特殊情况下需要配置此值，具体参数见`# item.regionConfig` | object | |\n\n\n> **注意：** 使用自定义组件时\n> * 提供受控属性 value 或其它与 valuePropName 的值同名的属性。\n> * 提供 onChange 事件或 trigger 的值同名的事件。\n> * 不能是函数式组件\n\n\n#### *buttons*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\nlayout | 按钮的布局。可选值：`center`、`left`、`right` | string | center |\nitems | 按钮项。值为一个按钮配置数组，单个按钮配置见`buttons.item` | config[] | |\n\n##### *buttons.item*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\naction | 可选值：`submit`、`reset`、`other`，其中 submit 和 reset 为特殊值，有内置的处理函数。submit会首先对数据进行校验，校验通过了才会触发回调函数；reset会先把表单重置，然后调用函数 | string | other | 必须\nvalue | 按钮上显示的内容 | string | | 必须\ntype | 按钮类型：`primary` `ghost` `default` | string | default |\nsize | 按钮大小：`large` `small` `default` | string | default |\nicon | 按钮图标，如 `delete`、`search` 等，详见`Icon`组件 | string | |\nonClick | 点击按钮时的回调函数，除`type=reset`，其他情况下函数都有一个参数，返回表单所有的数据。（注意，`type='submit'`时，onClick函数会覆盖`基本配置`里的onSubmit函数） | function(data) {} | |\n\n> 还有一些其他的配置，更多的配置见`Button`组件，此处调用的是Button组件，所以button组件的所有配置都可以在这里使用\n\n#### *item.rules*\n\n表单域中组件的校验规则\n\n参数  | 说明  | 类型 | 默认值 \n-----|------|------|------\nmessage | 校验文案 | string |\ntype | 内建校验类型，[可选项](https://github.com/yiminghe/async-validator#type) | string | 'string'\nrequired | 是否必选，如果在rules外设置了required，则以外面的required值为准 | boolean | `false` \nwhitespace | 必选时，空格是否会被视为错误 | boolean | `false`  \nlen | 字段长度 | number | \nmin | 最小长度 | number |\nmax | 最大长度 | number |\nenum | 枚举类型 | string |\npattern | 正则表达式校验 | RegExp |\ntransform | 校验前转换字段值 | function(value) => transformedValue:any |\nvalidator | 自定义校验（注意，[callback 必须被调用](https://github.com/ant-design/ant-design/issues/5155)） | function(rule, value, callback) |\n\n#### *item.regionConfig*\n表单域本身配置\n\n参数      | 说明                                     | 类型 | 默认值\n-----------|-----------------------------------------|-----|-------\nvaluePropName | 子节点的受控属性，如 `Switch` 的是 'checked' | string | 'value'\ntrigger | 收集子节点的值的时机 | string | 'onChange'\ngetValueFromEvent | 可以把 onChange 的参数转化为控件的值 | function(..args) | [reference](https://github.com/react-component/form#optiongetvaluefromevent)\nvalidateTrigger | 校验子节点值的时机 | string\\string[] | 'onChange'\nvalidateFirst | 当某一规则校验不通过时，是否停止剩下的规则的校验\t | boolean | false\nexclusive | 是否和其他控件互斥，特别用于 Radio 单选控件 | boolean | false\nnormalize | 转换默认的 value 给控件. [一个选择全部的例子](https://codepen.io/afc163/pen/JJVXzG?editors=001) | function(value, prevValue, allValues): any | \n\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-form').getValues()`。\n\n函数名称 | 说明 | 参数 |  默认值\n---- | ---- | ----- | ----- \ngetValues | 获取全部表单的值，默认先校验再返回。该函数支持传入一个参数，如果想跳过校验，则传入参数`false` | getValues([boolean]) |\nresetValues | 重置全部表单的值。支持传入一个对象，把表单重置为对象里面对应的值 | resetValues([object]) |\n\n\n## 更多用法\n可以把各种组件的更高级用法的例子截图贴在这里\n[!图片](/path/to/img.jpg \"Title\")\n"

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _markdown = __webpack_require__(181);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '简单的弹框用法。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: '点击弹出',
	        onClick: function onClick() {
	            return (0, _tools2.default)('my-modal').show();
	        }
	    }, {
	        type: 'modal',
	        name: 'my-modal',
	        visible: false,
	        title: '基本弹框',
	        content: {
	            type: 'html',
	            content: '<p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p>'
	        }
	    }]
	};
	var demo2 = {
	    title: '弹框表单',
	    description: '点击确定时会自动把表单数据提交到api。调用弹框的`show`方法时传入数据，数据会自动填充到表单中。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: '新增弹框',
	        actionType: 'call',
	        actionTarget: 'my-modal2.show'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '编辑弹框',
	        // actionType: 'call',
	        // actionTarget: 'my-modal2.show',
	        // actionParams: {line_sn: 'sn20134567', idc_id: 'TC'}
	        onClick: function onClick() {
	            return (0, _tools2.default)('my-modal2').show({ line_sn: 'sn20134567', idc_id: 'TC', other: 'other data' });
	        }
	    }, {
	        type: 'modal',
	        name: 'my-modal2',
	        visible: false,
	        title: '新增/编辑弹框',
	        width: 700,
	        api: 'docs/php/submit.php',
	        form: {
	            items: [{
	                type: 'input',
	                label: '专线SN',
	                name: 'line_sn',
	                rules: [{ required: true, message: '主线SN不能为空' }],
	                placeholder: 'sn20134567'
	            }, {
	                type: 'select',
	                label: '机房',
	                name: 'idc_id',
	                rules: [{ required: true, message: '机房不能为空' }],
	                source: 'docs/php/data.php',
	                sourceHandler: function sourceHandler(data) {
	                    return data.map(function (v) {
	                        return { value: v.name, label: v.name };
	                    });
	                }
	            }]

	        }
	    }]
	};
	var demo3 = {
	    title: '确认信息弹框',
	    description: '比如删除数据是，提示是否要删除xxx数据。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: '删除提示',
	        onClick: function onClick() {
	            return (0, _tools2.default)('my-modal3').show({ id: 123, other: 'other data' });
	        }
	    }, {
	        type: 'modal',
	        name: 'my-modal3',
	        visible: false,
	        title: '删除数据：',
	        api: 'docs/php/submit.php',
	        message: function message(data) {
	            return {
	                type: 'p',
	                content: '确定要删除以下选中数据吗？' + data.id
	            };
	        }
	    }]
	};
	var demo4 = {
	    title: '确认对话框',
	    description: '使用 `confirm()` 可以快捷地弹出确认框。',
	    config: [{
	        type: 'button',
	        content: 'Confirm',
	        onClick: function onClick() {
	            _tools2.default.Modal.confirm({
	                title: '你确定要删除此项内容吗？',
	                content: 'ID: 123...',
	                onOk: function onOk() {
	                    console.log('ok');
	                },
	                onCancel: function onCancel() {
	                    console.log('cancel');
	                }
	            });
	        }
	    }]
	};
	var demo5 = {
	    title: '信息提示',
	    description: '各种类型的信息提示，只提供一个按钮用于关闭。',
	    config: [{
	        type: 'button',
	        content: 'Info',
	        onClick: function onClick() {
	            _tools2.default.Modal.info({
	                title: '这是一个信息提示。',
	                content: {
	                    type: 'html',
	                    content: '<div><p>some messages...some messages...</p><p>some messages...some messages...</p></div>'
	                },
	                onOk: function onOk() {
	                    console.log('ok');
	                }
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Success',
	        onClick: function onClick() {
	            _tools2.default.Modal.success({
	                title: '这是一个成功提示。',
	                content: 'some messages...some messages...'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Error',
	        onClick: function onClick() {
	            _tools2.default.Modal.error({
	                title: '这是一个错误提示。',
	                content: 'some messages...some messages...'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Warning',
	        onClick: function onClick() {
	            var ref = _tools2.default.Modal.warning({
	                title: '这是一个警告提示。',
	                content: '2s后自动关闭...'
	            });
	            setTimeout(function () {
	                ref.destroy();
	            }, 2000);
	        }
	    }]
	};

	var ModalApp = function (_BaseDoc) {
	    _inherits(ModalApp, _BaseDoc);

	    function ModalApp(props) {
	        _classCallCheck(this, ModalApp);

	        var _this = _possibleConstructorReturn(this, (ModalApp.__proto__ || Object.getPrototypeOf(ModalApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ModalApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return ModalApp;
	}(_BaseDoc3.default);

	exports.default = ModalApp;

/***/ }),
/* 181 */
/***/ (function(module, exports) {

	module.exports = "对话框。\n\n## 何时使用\n\n需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 `Modal` 在当前页面正中打开一个浮层，承载相应的操作。\n\n另外当需要一个简洁的确认框询问用户时，可以使用精心封装好的 `UF.Modal.confirm()` 等方法。\n\n## 组件&配置\n\n### # modal\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|-------------\nvisible    | 对话框是否可见 | boolean          | 无          \ncontent | 弹框中间的内容 | string&#124;`config`  | 无          \nconfirmLoading | 确定按钮 loading | boolean    | 无          \ntitle      | 标题           | string&#124;`config` | 无          \nclosable   | 是否显示右上角的关闭按钮 | boolean    | true       \nonSubmit       | 点击确定回调       | function(e)     | 无          \nonCancel   | 点击遮罩层或右上角叉或取消按钮的回调  | function(e)  | 无        \nwidth      | 宽度           | string&#124;number | 520          \nfooter     | 底部内容，当不需要默认底部按钮时，可以设为 `footer={null}` | `config`&#124;`config[]` | 确定取消按钮\nokText     | 确认按钮文字    | string           | 确定      \nokType     | 确认按钮类型    | string           | primary      \ncancelText | 取消按钮文字    | string           | 取消      \ncancelType | 取消按钮类型    | string           | default      \nmaskClosable | 点击蒙层是否允许关闭 | boolean   | true      \nstyle | 可用于设置浮层的样式，调整浮层位置等 | object   | -\nwrapClassName | 对话框外层容器的类名 | string   | -\nafterClose | Modal 完全关闭后的回调 | function | 无\ngetContainer | 指定 Modal 挂载的 HTML 节点 | (instance): HTMLElement | () => document.body\nzIndex | 设置弹出层的 `z-index` 值，即层叠高度 | number | 1000\n\n> tips: `footer`属性一般为一个配置或配置数组，其中没项可以有一个额外的`action`属性，指定按钮的特定功能，可选值有'submit'、'cancel'，分别对应提交功能（onSubmit）和取消功能（onCancel）\n\n#### modal 高级功能 (额外参数)\n\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|------\nform    | 弹框中的表单配置。会做一些联动处理（如点击确认按钮时自动提交数据），常用于弹出层快速提交表单。注意：form 的配置中无需再写form的 type 和 name 属性 | `config` | \napi    | 提交数据的接口 | string | \nmethod | api请求类型 | string | 'get'\nparams | api请求初始参数。1、提交数据时，会获取params中的值；2、form会填充params中的值为默认值 | object | \nparamsHandler | api请求发送前处理参数的函数。直接从form等获取到的参数可能不符合接口格式，可以用此函数处理参数 | function(params) {return params;} | \nmessage | 弹框中的动态内容。content为静态内容，message为一个函数，会传入params参数，函数返回一个组件配置。常用于确认框，提示内容为和数据相关的动态信息。 | function(params) {return `config`;} | \n\n> 最终弹框中展示的内容最多包含三部分，即：content、form、message三个属性对应的内容。从上到下展示顺序依次为：message > content > form\n\n以上有两种常用场景。  \n1、“新增/编辑”表单弹框（见示例：弹框表单）  \n2、“删除”确认弹框（见示例：确认信息弹框）\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-modal').show()`。\n\n参数       | 说明           | 参数    \n-----------|----------------|-----------\nshow      | 展示弹框。可以同时传入新的params，以刷新弹框中的 form、message 中的内容。用于form弹框场景和message确认框场景 |  show([params])  \nclose    | 关闭弹框           |   close()  \n\n\n### UF.Modal.method()\n\n包括：\n\n- `UF.Modal.info`\n- `UF.Modal.success`\n- `UF.Modal.error`\n- `UF.Modal.warning`\n- `UF.Modal.confirm`\n\n以上均为一个函数，参数为 object，具体属性如下：\n\n参数       | 说明           | 类型             | 默认值       \n-----------|----------------|------------------|--------------\ntitle      | 标题           | string&#124;`config` | 无           \ncontent    | 内容           | string&#124;`config` | 无           \nonOk       | 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭      | function         | 无           \nonCancel   | 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭       | function         | 无           \nwidth      | 宽度           | string&#124;number | 416           \niconType   | 图标 Icon 类型    | string | question-circle \nokText     | 确认按钮文字    | string           | 确定       \ncancelText | 取消按钮文字    | string           | 取消       \nmaskClosable | 点击蒙层是否允许关闭 | Boolean   | `false`    \n\n以上函数调用后，会返回一个引用，可以通过该引用关闭弹窗。\n\n```javascript\nvar ref = UF.Modal.info({...});\nref.destroy();\n```\n\n"

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _markdown = __webpack_require__(183);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var dataSource = [{
	    key: '1',
	    name: '胡彦斌',
	    age: 32,
	    address: '西湖区湖底公园1号',
	    sex: '男',
	    json: {
	        a: 1,
	        b: 2
	    },
	    html: '<i>表格</i>',
	    duration: '2017-05-21 00:00:00',
	    customRender: '1'
	}, {
	    key: '2',
	    name: '胡彦祖',
	    age: 42,
	    address: '西湖区湖底公园2号',
	    sex: 'femal',
	    json: [{
	        a: 1,
	        b: 2
	    }, {
	        a: 3,
	        b: 4
	    }],
	    html: '<i>表格</i>',
	    duration: '2017-05-21 00:00:00',
	    customRender: '2'
	}, {
	    key: '3',
	    name: '胡彦祖彦斌',
	    age: 52,
	    address: '东湖区湖底公园3号东湖区湖底公园3号东湖区湖底公园3号',
	    sex: '女',
	    json: { a: '哈哈', b: 2 },
	    html: '<i>表格</i>',
	    duration: '2017-05-21 00:00:00',
	    customRender: '3'
	}, {
	    key: '4',
	    name: '胡彦祖彦斌',
	    age: 62,
	    address: '东湖区湖底公园3号东湖区湖底公园3号东湖区湖底公园3号',
	    sex: '女',
	    json: { a: '哈哈', b: 2 },
	    html: '<i>表格</i>',
	    duration: '2017-05-21 00:00:00',
	    customRender: '4'
	}];

	var columns = [{
	    title: '姓名',
	    dataIndex: 'name',
	    key: 'name',
	    filterConfig: {
	        filterType: 'checkbox',
	        filters: ['斌', '祖']
	    }
	}, {
	    title: '性别',
	    dataIndex: 'sex',
	    key: 'sex',
	    filterConfig: {
	        filterType: 'checkbox'
	    },
	    display: false
	}, {
	    title: '年龄',
	    dataIndex: 'age',
	    key: 'age',
	    filterConfig: {
	        filterType: 'input'
	    }
	}, {
	    title: '住址',
	    dataIndex: 'address',
	    key: 'address',
	    filterConfig: {
	        filterType: 'input'
	    },
	    ellipsis: true
	}, {
	    title: 'JSON字段',
	    dataIndex: 'json',
	    key: 'json',
	    textType: 'json'
	}, {
	    title: 'html字段',
	    dataIndex: 'html',
	    key: 'html',
	    textType: 'html'
	}, {
	    title: '时间段',
	    dataIndex: 'duration',
	    key: 'duration',
	    textType: 'duration',
	    render: function render(text, record, index) {
	        return {
	            type: 'span',
	            style: {
	                color: '#0aea0a'
	            },
	            content: text
	        };
	    }
	}, {
	    title: '自定义render',
	    dataIndex: 'customRender',
	    key: 'customRender',
	    render: function render(text, record, index) {
	        return {
	            type: 'span',
	            style: {
	                color: '#0aea0a'
	            },
	            content: text
	        };
	    }
	}];

	var demo1 = {
	    title: '基本用法',
	    description: '简单的表格，最后一列是各种操作。',
	    config: [{
	        type: 'button',
	        content: '为table组件set数据',
	        onClick: function onClick() {
	            (0, _tools2.default)('newtable1').set({
	                rowSelection: {
	                    selectedRowKeys: ['4']
	                },
	                data: [dataSource[3]]
	            });
	        }
	    }, {
	        type: 'table',
	        name: 'newtable1',
	        rowKey: 'key',
	        columns: columns,
	        rowSelection: {
	            type: 'checkbox',
	            selections: true,
	            selectedRowKeys: ['3'],
	            // 指定满足某些条件时复选框不可选
	            disabledRow: function disabledRow(record) {
	                return record.name === '胡彦祖' || record.age === 32;
	            }
	        },
	        // pagination: {
	        //     // pageSize: 3
	        //     showSizeChanger: true,
	        //     pageSizeOptions: ['1', '2', '3', '4']
	        // },
	        // pagination: false,
	        title: {
	            text: 'Table前端分页表格测试',
	            basicControls: [{
	                name: 'filter',
	                blacklist: ['json']
	            }, 'setPageSize', {
	                name: 'selctAll',
	                icon: 'like-o',
	                text: '自定义全选',
	                onClick: function onClick(table) {
	                    return table.selectAll();
	                }

	            }, 'export', 'switchTags', 'refresh', 'fullScreen', 'showAllTags'],
	            menuControls: ['export', 'switchTags', 'refresh', 'fullScreen', {
	                name: 'selctAll2',
	                icon: 'like',
	                text: '自定义全选',
	                onClick: function onClick(table) {
	                    return table.selectAll();
	                }
	            }, 'showAllTags', 'setPageSize'],
	            showText: false
	        },
	        bordered: true,
	        data: dataSource
	        // source: 'docs/php/download.php',
	        // params: {
	        //     "isExport": true,
	        //     "container_id": 484,
	        //     "zone": "china",
	        //     "type": "server"
	        // },
	        // method: 'get'
	    }]

	};
	var columns2 = [{
	    title: 'ID',
	    dataIndex: 'id',
	    key: 'id',
	    filterConfig: {
	        filterType: 'checkbox'
	    }
	}, {
	    title: '机房',
	    dataIndex: 'name',
	    key: 'name'
	}, {
	    title: '地区',
	    dataIndex: 'region',
	    key: 'region'
	}, {
	    title: '描述',
	    dataIndex: 'description',
	    key: 'description'
	}];
	var demo2 = {
	    title: '后端获取数据',
	    description: '采用后端获取数据及分页等',
	    config: [{
	        type: 'table',
	        name: 'newtable',
	        columns: columns2,
	        title: {
	            text: 'Table后端分页表格',
	            basicControls: ['filter', 'setPageSize', {
	                name: 'selctAll',
	                icon: 'like-o',
	                text: '自定义全选',
	                onClick: function onClick(table) {
	                    return table.selectAll();
	                }

	            }, 'export', 'switchTags', 'refresh', 'fullScreen', 'showAllTags'],
	            menuControls: ['refresh', 'fullScreen', {
	                name: 'selctAll2',
	                icon: 'like',
	                text: '自定义全选',
	                onClick: function onClick(table) {
	                    return table.selectAll();
	                }
	            }, 'setPageSize']
	        },
	        source: 'docs/php/data.php',
	        params: {
	            "isExport": true,
	            "container_id": 484,
	            "zone": "china",
	            "type": "server"
	        },
	        method: 'get',
	        rowKey: 'id',
	        pagination: {
	            pageType: 'server'
	        },
	        rowSelection: {
	            selections: true
	        }
	    }]
	};

	var TableApp = function (_BaseDoc) {
	    _inherits(TableApp, _BaseDoc);

	    function TableApp(props) {
	        _classCallCheck(this, TableApp);

	        var _this = _possibleConstructorReturn(this, (TableApp.__proto__ || Object.getPrototypeOf(TableApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TableApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2);
	        }
	    }]);

	    return TableApp;
	}(_BaseDoc3.default);

	exports.default = TableApp;

/***/ }),
/* 183 */
/***/ (function(module, exports) {

	module.exports = "展示行列数据。\n\n## 何时使用\n\n- 当有大量结构化的数据需要展现时；\n- 当需要对数据进行排序、搜索、分页、自定义操作等复杂行为时。\n\n## 组件&配置\n\n### # table\n\n| 参数           | 说明                     | 类型             | 默认值   |\n|---------------|--------------------------|-----------------|---------|\n| rowSelection  | 列表项是否可选择，具体见下面配置`rowSelection` | object  | null  |\n| pagination    | 分页器，具体见下方配置`pagination`，设为 false 时不展示和进行分页 | object &#124; `false` |   |\n| size          | 正常或紧凑型表格，`default`、`middle` or `small`  | string | default |\n| data    | 数据数组，见下面示例 `data` | any[] |            |\n| columns       | 表格列的配置描述，具体项见下表`columns` | ColumnProps[] | - |\n| rowKey        | 表格行 key 的取值，每一行需唯一。可以是字符串或一个函数 | string &#124; row=>row.id | 'id' |\n| rowClassName  | 表格行的类名      | Function(record, index):string | - |\n| expandedRowRender  | 额外的展开行 | Function | - |\n| defaultExpandedRowKeys | 默认展开的行 | string[] | - |\n| expandedRowKeys | 展开的行，控制属性 | string[] | - |\n| defaultExpandAllRows | 初始时，是否展开所有行 | boolean | false |\n| loading       | 页面是否加载中 | boolean&#124;[`config`](#/Feedback/Loading) | false |\n| locale        | 默认文案设置，目前包括排序、过滤、空数据文案 | object | `{filterTitle: '筛选', filterConfirm: '确定', filterReset: '重置', emptyText: '暂无数据'}` |\n| indentSize    | 展示树形数据时，每层缩进的宽度，以 px 为单位 | number   | 15 |\n| bordered  | 是否展示外边框和列边框 | boolean | false      |\n| showHeader  | 是否显示表头 | boolean          | true      |\n| footer | 表格尾部         | Function(currentPageData)   | |\n| title  | 表格标题栏配置,可配置题目及表格控件，见下方`title`     | string&#124;object   | - |\n| scroll | 横向或纵向支持滚动，也可用于指定滚动区域的宽高度：`{{ x: true, y: 300 }}` | object   | -  |\n| onChange      | 分页、排序、筛选变化时触发 | Function(pagination, filters, sorter) |  |\n| source        | 获取数据接口，如果传入此字段，则表格数据通过url获取  | string  | - |\n| sourceHandler | 获取数据后，使用 sourceHandler 对数据进行预处理，以兼容各种数据结构 | string  | - |\n| method | 获取数据的方式。可选 `get` `post` | String | `get` | \n| params | 通过source向后端请求时传的参数（一般用于外部搜索) | Object |  | \n| autoLoadSource | 是否组件渲染完成后自动加载数据（配置 source 属性后有效） | boolean | true | \n| crud | 表格的扩展功能，增加简单的配置即可拥有常用的增删改查等功能。详见：[`Table Crud 表格扩展`](#/Custom/TableCrud) | Object |  | \n| onExpand      | 点击展开图标时触发 | Function(expanded, record) | |\n| onExpandedRowsChange | 展开的行变化时触发 | Function(expandedRows) | |\n| onRowClick    | 点击行时触发 | Function(record, index, event)   | - |\n| onRowDoubleClick| 双击行时触发 | Function(record, index, event)   | - |\n| onRowMouseEnter | 鼠标移入行时触发 | Function(record, index, event)   | - |\n| onRowMouseLeave | 鼠标移出行时触发 | Function(record, index, event)   | - |\n\n#### *column*\n\n列描述数据对象，是 `columns` 中的一项。\n\n| 参数       | 说明                       | 类型            |  默认值  |\n|-----------|----------------------------|-----------------|---------|\n| title      | 列头显示文字               | string &#124; `config` | - |\n| key        | React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性 | string          | - |\n| dataIndex  | 列数据在数据项中对应的 key，支持 `a.b.c` 的嵌套写法。其中`_operation`为一特殊值，可见`column._operation` | string | - |\n| width      | 列宽度 | string&#124;number | -  |\n| className  | 列的 className             | string          |  -      |\n| fixed      | 列是否固定，可选 `true`(等效于 left) `'left'` `'right'` | boolean&#124;string | false |\n| render     | 生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return里面可以设置表格 行/列合并, 返回值必须是一个UF组建配置Object格式 | Function(text, record, index) {} | - |\n| filterConfig    | 表头的筛选设置，详见下方`columns.filterConfig`           | Object           | - |\n| sorter     | 排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)，需要服务端排序可设为 true | Function&#124;boolean | - |\n| sortOrder | 排序的受控属性，外界可用此控制列的排序，可设置为 `'ascend'` `'descend'` `false` | boolean&#124;string | - |\n| colSpan    | 表头列合并,设置为 0 时，不渲染 | number      |         |\n| onFilter   | 本地模式下，确定筛选的运行函数 | Function    | - |\n| onCellClick | 单元格点击回调 | Function(record, event) | - |\n| textType | 字段表现形式。可选 `html` `json` `duration` `default`。其中：`html`-一段html，直接展示在页面上；`json`-会经过一些样式上的处理之后展示到页面上；`duration`-传入的是日期时间串(2016-12-28 10:00:00),返回据现在(1天14小时) | String | `default` |\n| ellipsis | 文字过长截断，鼠标移上去时，展示一个气泡, 如示例中的爱好字段 | Boolean | false |\n\n#### *column.filterConfig*\n| 参数       | 说明                       | 类型            |  默认值  |\n|-----------|----------------------------|-----------------|---------|\n| filterType      | 筛选形式，共三种`checkbox`, `radio`, `input`               | string | - |\n| filters      | 当筛选形式为`checkbox`或`radio`时，该字段用于指定通过哪些值作为筛选条件               | string[] | 默认为所有可能出现的值 |\n\n#### *column._operation*\n\n当 `dataIndex` 为 _operation 时，指定此列为操作列，其render函数返回值为操作按钮配置数组，且操作按钮配置中可以使用`action`属性和crud配置做关联，以实现表格中对单行的编辑、删除等功能。crud配置详见：[`Table Crud 表格扩展`](#/Custom/TableCrud) \n\n例如：\n\n```javascript\ncolumns: [\n    ...\n    {\n        title: '操作',\n        dataIndex: '_operation',\n        width: 100,\n        render: ()=>([\n            {type: 'a', content: '日志', action: 'showLog'},\n            {type: 'a', content: '编辑', action: 'edit'},\n            {type: 'a', content: '删除', action: 'delete'}\n        ])\n    }\n]\n```\n\n\n#### *rowSelection*\n\n选择功能的配置。\n\n| 参数              | 说明                     | 类型             |  默认值   |\n|------------------|--------------------------|-----------------|---------------------|\n| type | 多选/单选，`checkbox` or `radio` | string | `checkbox`  |\n| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | string[] | []  |\n| disabledRow | 选择框的不可选的条件，返回值应该为一个Boolean类型的值        | Function(record) |  -   |\n| selections | 自定义选择项，见下面配置 `selection`, 设为 `true` 时使用默认选择项 | object[]&#124;boolean | true |\n| hideDefaultSelections | 去掉『全选』『反选』两个默认选项 | boolean | false |\n| onChange | 选中项发生变化的时的回调 | Function(selectedRowKeys, selectedRows) | -   |\n| onSelect | 用户手动选择/取消选择某列的回调         | Function(record, selected, selectedRows) |   -   |\n| onSelectAll | 用户手动选择/取消选择当前页所有列的回调    | Function(selected, selectedRows, changeRows) |   -   |\n| onSelectInvert | 用户手动选择反选当前页的回调 | Function(selectedRows) | - |\n\n#### *selection*\n\n| 参数              | 说明                     | 类型             |  默认值   |\n|------------------|--------------------------|-----------------|---------------------|\n| key | React 需要的 key，建议设置 | string | -  |\n| text | 选择项显示的文字 | string &#124; `UF.init({...})` | -  |\n| onSelect | 选择项点击回调 | Function(changeableRowKeys) | -   |\n\n#### *pagination*\n\n| 参数             | 说明                               | 类型          | 默认值                   |\n|------------------|------------------------------------|---------------|--------------------------|\n| current          | 当前页数                           | number        | -                   |\n| pageType         | 分页类型：前端分页时值为`client`, 后端分页值为`server`,为后端分页时每切换一页会去后端取数据，当采用后端分页时除了传递指定的params外，还会传递`page` `size` `pageType`三个字段，`page`为要获取的第几页 `size`为获取数据条数 `pageType`为分页方式   | string | client |\n| pageSize         | 每页条数   | number | 10 |\n| onChange         | 页码改变的回调，参数是改变后的页码及每页条数 | Function(page, pageSize)      |                      |\n| showSizeChanger  | 是否可以改变 pageSize              | boolean        | false                    |\n| pageSizeOptions  | 指定每页可以显示多少条             | string[] | ['10', '20', '30', '40'] |\n| onShowSizeChange | pageSize 变化的回调                | Function(current, size)      |                      |\n| showQuickJumper  | 是否可以快速跳转至某页             | boolean         | false                    |\n| size             | 当为「small」时，是小尺寸分页      | string        |                       |\n| simple           | 当添加该属性时，显示为简单分页     | boolean        |                      |\n| total            | 数据总数      | number        |                       |\n| showTotal        | 用于显示数据总量和当前数据顺序     | Function(total, range) |            |\n\n\n#### *title*\n\n| 参数              | 说明                     | 类型             |  默认值   |\n|------------------|--------------------------|-----------------|---------------------|\n| text | 表格标题 | string&#124;`config` | -  |\n| basicControls | 基础控件，直接展示在表格表头上方。例：`basic: ['filter', 'export']`，所有可选控件见下表；也可以是`自定义控件`。参数为一个数组，数组中每一项可以是字符串，也可以是对象，对象的可选属性见`控件属性` | array | -  |\n| menuControls | 非常用控件，为了节省空间，把这些控件统一放在一个菜单里，可选控件见下表 | array | -   |\n| showText | 是否显示控件图标后面的说明文字 | Boolean | true  |\n\n##### *所有可选基础控件说明*\n\n控件 | 说明 | 位置 | 是否必填\n---- | ---- | ----- | -----\nfilter |  过滤功能 | 只能用于basic中 |\nexport |  导出数据 |  |\nswitchTags |  选择要展示的列 |  |\nrefresh |  刷新表格按钮 |  |\nfullScreen |  全屏展示 |  |\nshowAllTags |  展示全部列功能 |  |\nsetPageSize |  设置分页条数 |  |\n\n使用基础控件，可以直接使用字符串形式（控件名），如果想更改控件的默认展示效果，可改用对象的方式，参数和自定义控件类似。`name`即为组件名称，`icon`和`text`可自定义。\n\n##### *控件属性*\n\n为一个对象，包含以下几部分：  \n\n| 参数 | 说明 | 类型 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| name | 控件名称。可以为上表中的基础控件名称，如果不在上表中，则认为是自定义控件 | String | 是 |\n| icon | 按钮图标，如：'like-o'，详见 [这里](#/General/Icon) | String |  |\n| text | 按钮文字 | String |  |\n| onClick | 点击按钮时的回调函数，回调函数会返回一个参数，参数为 table 组件的引用 | function(table){} | `自定义组件`必填 |\n| blacklist | `filter`控件默认检索全部字段，可以设置一个白名单来声明只检索哪些字段。参数为待检索的字段名列表 | array | 仅`filter`控件有效 |\n| whitelist | `filter`控件可以设置一个黑名单，作用和上面刚好相反 | array | 仅`filter`控件有效 |\n\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-table').refresh()`。\n\n参数 | 说明 | 参数\n---- | ---- | ---- \nrefresh | 刷新表格数据，会展示loading等 | refresh()\nloadData | 手动触发表格获取数据 | loadData()\nshowCrud | 展示crud属性中配置的增删改查等弹框。第一个参数为要调用的是crud中配置的哪个弹框，即配置的key；之后的参数为相应弹框需要的额外参数，例如编辑弹框需要把需要编辑的数据传入等  | showAdd(action, otherParams)\n\n#### *data*\n表格的数据数组格式如下：\n```javascript\n[{\n    key: '1',\n    name: '胡彦斌',\n    age: 32,\n    address: '西湖区湖底公园1号'\n}, {\n    key: '2',\n    name: '胡彦祖',\n    age: 42,\n    address: '西湖区湖底公园2号'\n}, {\n    key: '3',\n    name: '胡彦祖',\n    age: 52,\n    address: '西湖区湖底公园3号'\n}]\n```\n**注意：**  \n\n在 Table 中，`data` 和 `columns` 里的数据值都需要指定 `key` 值。对于 `data` 默认将每列数据的 `key` 属性作为唯一的标识。\n\n如果你的数据没有这个属性，务必使用 `rowKey` 来指定数据列的主键。若没有指定，控制台会出现以下的提示，表格组件也会出现各类奇怪的错误。\n\n"

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _crud = __webpack_require__(185);

	var _crud2 = _interopRequireDefault(_crud);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var columns1 = [{
	    title: 'ID',
	    dataIndex: 'id',
	    key: 'id',
	    filterConfig: {
	        filterType: 'checkbox'
	    }
	}, {
	    title: '机房',
	    dataIndex: 'name',
	    key: 'name'
	}, {
	    title: '地区',
	    dataIndex: 'region',
	    key: 'region'
	}, {
	    title: '描述',
	    dataIndex: 'description',
	    key: 'description'
	}, {
	    title: '操作',
	    dataIndex: '_operation',
	    render: function render() {
	        return [{ type: 'a', content: '编辑', action: 'edit' }, { type: 'a', content: '删除', action: 'delete' }];
	    }
	}];
	var demo1 = {
	    title: 'Crud 扩展功能展示',
	    description: 'Table中提供了增删改查等功能的配置',
	    config: [{
	        type: 'table',
	        name: 'newtable',
	        columns: columns1,
	        title: {
	            text: 'Table Crud 功能展示',
	            basicControls: []
	        },
	        source: 'docs/php/data.php',
	        pagination: {
	            pageType: 'server'
	        },
	        crud: {
	            add: {
	                title: '新增部件:',
	                width: 800,
	                api: 'docs/php/submit.php',
	                method: 'post',
	                autoReload: true,
	                form: {
	                    layout: {
	                        type: 'horizontal',
	                        labelCol: 7,
	                        wrapperCol: 14
	                    },
	                    items: [{
	                        type: 'select',
	                        label: '机房',
	                        name: 'name',
	                        rules: [{ required: true, message: '机房不能为空' }],
	                        source: 'docs/php/data.php',
	                        sourceHandler: function sourceHandler(data) {
	                            return data.map(function (v) {
	                                return { value: v.name, label: v.name };
	                            });
	                        }
	                    }, { type: 'input', label: '地区', name: 'region', required: true }, { type: 'input', label: '描述', name: 'description', required: true }]
	                }
	            },
	            // 复用了 add 的配置
	            edit: {
	                title: '编辑部件:',
	                forbidden: 'name'
	            },
	            delete: {
	                title: '删除部件:',
	                api: 'docs/php/submit.php',
	                autoReload: true
	            },
	            batchAdd: {
	                title: '批量导入:',
	                width: 800,
	                api: 'docs/php/submit.php',
	                method: 'post',
	                autoReload: true,
	                okText: '导入',
	                content: {
	                    type: 'html',
	                    content: '提示信息。。。'
	                }
	            },
	            batchEdit: {
	                title: '批量更新:',
	                api: 'docs/php/submit.php',
	                autoReload: true,
	                // 需编辑的数据的字段列表
	                keys: 'id,name,region,description',
	                okText: '更新',
	                content: {
	                    type: 'html',
	                    content: '提示信息。。。'
	                }
	            },
	            batchDelete: {
	                title: '批量删除:',
	                api: 'docs/php/submit.php',
	                autoReload: true,
	                okText: '批量报废'
	            }
	        }
	    }]
	};

	var TableCrudApp = function (_BaseDoc) {
	    _inherits(TableCrudApp, _BaseDoc);

	    function TableCrudApp(props) {
	        _classCallCheck(this, TableCrudApp);

	        var _this = _possibleConstructorReturn(this, (TableCrudApp.__proto__ || Object.getPrototypeOf(TableCrudApp)).call(this, props));

	        _this.doc = _crud2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TableCrudApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return TableCrudApp;
	}(_BaseDoc3.default);

	exports.default = TableCrudApp;

/***/ }),
/* 185 */
/***/ (function(module, exports) {

	module.exports = "Table可以快速配置增删改查等功能。\n\n**注意：这还是`Table`组件，由于其`crud`属性内容比较多，这里拎出来单独描述。以下全部内容皆在`Table.crud`属性之下**\n\n功能大体分为如下几种：\n\n> * show: 纯展示型弹框或和数据相关的展示型弹框   \n> * add: 新增单条数据弹框\n> * edit: 编辑单条数据弹框\n> * delete: 删除单条数据弹框\n> * batchAdd: 批量导入数据弹框。用于批量新增数据\n> * batchEdit: 批量编辑表格中选中的数据\n> * batchDelete: 批量删除表格中选中的数据\n\n其中：如`show`,`edit`,`delete`可用于表格`column._operation`配置中。batch***可用于批量操作表格数据。\n\ncrud属性值为一对象，其中键为当前配置的`\"引用名称\"`，用于`_operation`中的`action`属性所指向的功能引用；或者`showCrud`函数调用crud功能时第一个参数指向的功能的引用。值为功能的具体配置，参数如下：\n\n## 配置属性列表\n\n参数           | 说明                     | 类型             | 默认值 | 是否必填\n--------------|--------------------------|-----------------|-------|-------\n| title      | 列头显示文字               | string &#124; `config` | - |\naction  | 功能的具体分类。不同分类具有不同默认功能，如不填，则认为action和引用名称相同。可选值有：'show'、'add'、'edit'、'delete'、'batchAdd'、'batchEdit'、'batchDelete'。 | string  | |\napi    | 提交数据的接口 | string | |\nform    | 弹框中的表单配置。会做一些联动处理（如点击确认按钮时自动提交数据），常用于弹出层快速提交表单。注意：form 的配置中无需再写form的 type 和 name 属性 | `config` | |\nmethod | api请求类型 | string | 'get'|\nparams | api请求初始参数。1、提交数据时，会获取params中的值；2、form会填充params中的值为默认值 | object | |\nparamsHandler | api请求发送前处理参数的函数。直接从form等获取到的参数可能不符合接口格式，可以用此函数处理参数 | function(params) {return params;} | |\nmessage | 弹框中的动态内容。content为静态内容，message为一个函数，会传入params参数，函数返回一个组件配置。常用于确认框，提示内容为和数据相关的动态信息。 | |function(params) {return `config`;} | \n\n常用参数如上，其他参数可参考：[Modal 弹框](#/Custom/Modal)\n"

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _tree = __webpack_require__(117);

	var _tree2 = _interopRequireDefault(_tree);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(187);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	var treeData = [{
	    name: '0-0',
	    key: '0-0',
	    isLeaf: false,
	    disableCheckbox: false,
	    disabled: false,
	    type: 'leval1', // 用途：指定展开到哪一层
	    children: [{
	        name: '0-0-0',
	        key: '0-0-0',
	        isLeaf: true,
	        // disableCheckbox: false, //此项可去，默认为false
	        disabled: true, // 不响应,  //此项也可去，默认为true
	        type: 'leval2'
	    }, {
	        name: '0-0-1',
	        key: '0-0-1',
	        // isLeaf: false,
	        disableCheckbox: false,
	        disabled: false,
	        type: 'leval2',
	        children: [{
	            name: '0-0-1-0',
	            key: '0-0-1-0',
	            disableCheckbox: true, // 复选框不可选，只针对checkbox配置中checkable: true有效
	            disabled: false,
	            type: 'leval3'
	            // isLeaf: true
	        }, {
	            name: '0-0-1-1',
	            key: '0-0-1-1',
	            disableCheckbox: false,
	            disabled: false,
	            type: 'leval3'
	            // isLeaf: true
	        }]
	    }]
	}, {
	    name: '0-1',
	    key: '0-1',
	    isLeaf: false,
	    disableCheckbox: false,
	    disabled: false,
	    type: 'leval1',
	    children: [{
	        // 此节点会触发异步请求，因为满足isLeaf: false,children: []，效果可与树形图展示1中0-1-0节点展开进行对比
	        name: '0-1-0',
	        key: '0-1-0',
	        // isLeaf: false,
	        type: 'leval2',
	        disableCheckbox: false,
	        disabled: false,
	        children: []
	    }]
	}];
	var treeConfig = {
	    type: 'tree',
	    style: {
	        // 必须为符合react语法的css样式
	        width: '300px',
	        paddingTop: '10px',
	        backgroundColor: '#fbfbfb'
	    },
	    expand: {
	        // 全部为可选项，可写可不写
	        defaultExpandAll: false, // 默认展开所有树节点，默认值为false
	        // defaultExpandedKeys: [], // 默认展开指定的树节点，默认值为[],数组不为空时屏蔽defaultExpandAll
	        // expandLeavals: ['leval1', 'leval2'], // 展开哪一层，由data数据中的type字段决定，此配置会屏蔽defaultExpandAll，defaultExpandedKeys
	        expandedKeys: ['0-0-1', '0-1'], // (受控）展开指定的树节点，默认值为[], 设定之后屏蔽defaultExpandAll，defaultExpandedKeys, expandToLeaval
	        autoExpandParent: true, // 是否自动展开父节点，默认值为true,ture->如果某节点是展开的则其父节点自动展开，false->某节点展开的，但是其父节点是收缩的，只有将父节点展开才能看到某节点的展开情况
	        onExpand: function onExpand(expandedKeys, e) {
	            console.log('onExpand:', expandedKeys);
	        }
	    },
	    checkbox: {
	        // 全部为可选项
	        checkable: true, // 显示多选框,默认为false
	        // checkedKeys: ['0-0-1-0', '0-1'], // 默认为空, 配置此项之后会屏蔽defaultCheckedKeys属性
	        checkStrictly: false, // 父子之间的选中是否受关联, 默认值为false：true->不关联，此时必须要设定checkedKeys，否则会报错,false->关联
	        defaultCheckedKeys: ['0-0-1-1'], // 默认选中选框，只有在不舍得checedKeys时有用
	        onCheck: function onCheck(checkedKeys, e) {
	            console.log('onCheck:', checkedKeys);
	        }
	    },
	    select: {
	        defaultSelectedKeys: ['0-1'], // 默认选中节点，默认为[]
	        // selectedKeys: [],// 受控选中节点，此配置项将屏蔽defaultSelectedKeys配置, 默认不配置
	        multiple: true, // 支持点选多个节点（节点本身)，默认值为false
	        onSelect: function onSelect(selectedKeys, e) {
	            console.log('onSelect', e);
	        }
	    },
	    search: {
	        enable: true, // 树搜索功能，默认值为false
	        onlyShowSearchResult: true // 仅展示搜索的结果, 默认为true
	    },
	    loadData: {
	        enable: true, // 开启异步请求功能，默认为false，只有为true时以下几项配置才有效
	        source: 'docs/php/tree-data.php', // 异步请求地址
	        params: ['key', 'type'] // 异步请求所需要的各种参数，这些参数要在数据中包含
	        // 请求回来的数据格式必须是
	        // {
	        //     status: 0/1, // 0成功，1失败(注意是number类型)
	        //     data: ['key'], // 请求回来的子节点数据
	        //     msg: '', // 请求结果文字表述
	        // }
	    },
	    widthResize: {
	        resizeAble: true, // 允许改变宽度
	        minWidth: '200px',
	        maxWidth: '500px'
	    },
	    data: treeData
	};
	var treeConfig2 = {
	    type: 'tree',
	    style: {
	        // 必须为符合react语法的css样式
	        width: '300px',
	        padding: '10px',
	        border: '1px dashed #eaeaea'
	    },
	    expand: {
	        // 全部为可选项，可写可不写
	        defaultExpandAll: false, // 默认展开所有树节点，默认值为false
	        // defaultExpandedKeys: [], // 默认展开指定的树节点，默认值为[],数组不为空时屏蔽defaultExpandAll
	        // expandLeavals:['leval1', 'leval2'], // 展开到哪一层，由data数据中的type字段决定，此配置会屏蔽defaultExpandAll，defaultExpandedKeys
	        expandedKeys: ['0-0-1', '0-1'], // (受控）展开指定的树节点，默认值为[], 设定之后屏蔽defaultExpandAll，defaultExpandedKeys, expandToLeaval
	        autoExpandParent: true, // 是否自动展开父节点，默认值为true,ture->如果某节点是展开的则其父节点自动展开，false->某节点展开的，但是其父节点是收缩的，只有将父节点展开才能看到某节点的展开情况
	        onExpand: function onExpand(expandedKeys, e) {
	            // console.log('onExpand:', expandedKeys);
	        }
	    },
	    select: {
	        defaultSelectedKeys: ['0-1'], // 默认选中节点，默认为[]
	        // selectedKeys: [],// 受控选中节点，此配置项将屏蔽defaultSelectedKeys配置, 默认不配置
	        onSelect: function onSelect(selectedKeys, e) {
	            // console.log('onSelect', selectedKeys);
	        }
	    },
	    showLine: true,
	    data: treeData
	};

	var demo1 = {
	    title: '具有搜索功能的树形图',
	    description: '此示例具有多选，复选框，搜索等功能',
	    config: treeConfig
	};
	var demo2 = {
	    title: '带有连接线的树',
	    description: '同级别树节点有连接线相连，并且展开关闭的图标会有所变化',
	    config: treeConfig2
	};

	var TreeApp = function (_BaseDoc) {
	    _inherits(TreeApp, _BaseDoc);

	    function TreeApp(props) {
	        _classCallCheck(this, TreeApp);

	        var _this = _possibleConstructorReturn(this, (TreeApp.__proto__ || Object.getPrototypeOf(TreeApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TreeApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return TreeApp;
	}(_BaseDoc3.default);

	exports.default = TreeApp;

/***/ }),
/* 187 */
/***/ (function(module, exports) {

	module.exports = "### 功能说明  \n* 配置`expand`实现节点展开控制\n* 配置`checkbox`实现复选框功能\n* 配置`search`实现搜索功能\n* 配置`select`实现点击选择功能\n* 配置`loadData`实现异步加载功能\n* 配置`widthResize`实现右边缘拖动加宽功能\n* 配置`showLine`实现带连接线的树\n* 若没有进行任何配置，则为树形图展示1中的样式\n\n## 配置参数\n\n### 基本参数\n\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| style | 树形图的样式配置，必须为符合`react`语法的`css`样式 | Object | - |  |\n| expand | 节点展开功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| checkbox | 复选框功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| search | 搜索功能 | Object | - |  |\n| select | 点选功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| loadData | 异步加载功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| widthResize | 右边缘拖动变宽功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| showLine | 是否展示连接线 | Boolean | false | . |\n| data | 外部传入数据，需要按照一定的格式书写 | Array |  | . |\n\n#### expand\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| defaultExpandAll | 默认展开所有树节点 | Boolean | false |  |\n| defaultExpandedKeys | 默认展开指定的树节点，数组不为空时屏蔽`defaultExpandAll` | Array | [] |  |\n| expandLeavals | 哪些类型节点进行展开，由data数据中的type字段决定，此配置会屏蔽`defaultExpandAll`，`defaultExpandedKeys` | Array | - |  |\n| expandedKeys | (受控）展开指定的树节点，设定之后屏蔽`defaultExpandAll`，`defaultExpandedKeys`, `expandLeavals` | Array | [] |  |\n| autoExpandParent | 是否自动展开父节点，ture->如果某节点是展开的则其父节点自动展开，false->某节点展开的，但是其父节点是收缩的，只有将父节点展开才能看到某节点的展开情况 | Boolean | true |  |\n| onExpand | 展开/收起节点时触发, `expandedKeys`, `e`为两个默认参数 | function(expandedKeys, e:{expanded: bool, node}) | - | . |\n\n#### checkbox\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| checkable | 节点前添加 `Checkbox` 复选框 | Boolean | false |  |\n| checkedKeys | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点`key`，则子节点自动选中；相应当子节点`key`都传入，父节点也自动选中。当设置`checkable = true`和`checkStrictly = true`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联 | Array | [] |  |\n| checkStrictly | 父子之间的选中是否受关联: `true`->不关联，此时必须要设定`checkedKeys`，否则会报错, `false`->关联 | Boolean | false |  |\n| defaultCheckedKeys | 默认选中选框，只有在不设定`checedKeys`时起作用 | Array | [] |  |\n| onCheck | 点击复选框触发, `checkedKeys`, `e`为两个默认参数 | function(checkedKeys, e:{checked: bool, checkedNodes, node, event}) | - | . |\n\n#### search\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| enable | 是否启用搜索功能 | Boolean | false |  |\n| onlyShowSearchResult | 是否只展示搜索的结果，为`true`时只展示包含搜索内容的节点，`false`时展示全部数据，但是只对包含搜索结果的父节点进行展开 | Boolean | true | . |\n\n#### select\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| defaultSelectedKeys | 默认选中节点 | Array | [] |  |\n| selectedKeys | （受控）设置选中的树节点，此配置项将屏蔽`defaultSelectedKeys`配置 | Array | [] |  |\n| multiple | 支持点选多个节点（节点本身) | Bealoon | false |  |\n| onSelect | 点击树节点触发，`selectedKeys`, `e`为两个默认参数 | function(selectedKeys, e:{selected: bool, selectedNodes, node, event}) | - | . |\n\n#### loadData\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| enable | 开启异步请求功能，只有为`true`时以下几项配置才有效 | Bealoon | false |  |\n| source | 异步请求地址 | String | - |  |\n| params | 异步请求所需要的各种参数，这些参数要在数据中包含 | Object | - | . |\n> 请求回来的数据格式必须是：`{ status: 0/1, data: [], msg: ''}`\n> `status`为0时，请求数据成功，1失败(注意是number类型);\n> `data`为请求回来的数据;\n> `msg`为请求结果文字表述。\n\n#### widthResize\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| resizeAble | 开启右边缘扩宽功能 | Bealoon | false |  |\n| minWidth | 树形图允许扩宽的最小宽度 | String | - |  |\n| maxWidth | 树形图允许扩宽的最大宽度 | String | - | . |\n\n### # 每一个节点的数据格式\n```json\n    [{\n        name: '0-0',            // 必须\n        key: '0-0',             // 必须\n        isLeaf: false,          // 非必须，但是当没有isLeaf且没有children属性时，被置为true\n        disableCheckbox: false, // 非必须，用于指定复选框是否可选\n        disabled: false,        // 非必须，用于指定此节点时候可点\n        type: 'leval1',         // 非必须，但是当指定展开哪些层时必须\n        children: [             // 子节点格式相同\n            ...\n        ]\n    },\n    ...]\n```\n### # url参数对应接口的格式\n```json\nsuccess:\n{\n    status:0,\n    data:[{…},…]\n}\nerror:\n{\n    status: 1,\n    msg: 'error'\n}\n```\n"

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(189);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '默认高度自动根据内容调整',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/',
	        height: 300
	        // mode: 'auto' // default
	        // mode: 'fixed'
	        // mode: 'max'
	    }
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 189 */
/***/ (function(module, exports) {

	module.exports = "iframe 的增强版。\n\n### 功能说明  \n* iframe加载子页面时自动展示loading状态\n* 文档加载完成后iframe的高度自动重新设定，支持三种模式\n\n\n## 组件&参数\n\n### # iframe\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\nsrc | 子页面的url。可以是全路径，也可以是相对路径 | string |  | 必填\nmode | 文档加载完成后iframe的高度自动重新设定，支持三种模式： `auto` - 自动调整，监听内部文档高度变化，不断调整iframe的高度（默认）；`max` - 总是展示最大高度，iframe会逐渐被撑大；`fixed` - 高度固定，需自行设定iframe的height（同iframe默认效果，容易出现滚动条） | string | 'auto' | \ndelay | 子页面高度变化时，延迟重新设定iframe高度，可防止高度闪烁 | number | 0 |\n\n其他属性同原生的 iframe，例如：`height`、`width`等\n\n#### 注意：\n使用`mode`属性时需要注意以下问题：\n\n* 跨域问题  \n要使用`mode`属性，默认会因跨域问题导致此属性无效。解决办法有两种：\n> * 需在当前页面和其子页面的 js 里同时增加一行代码设置为同一个域：`document.domain = 'baidu.com';`\n> * 使用 `UF.config({global: {domain: 'baidu.com'}})`，见 [全局配置](#/Develop/Config)\n\n* 子页面高度问题  \n此外如果子页面的`body/html`标签 CSS 设置了`height: 100%`，则`mode: 'auto'`失效，展现出的效果同`mode: 'max'`\n> theme.css 里定义了`body`标签为`height: 100%`，所以如果嵌套通用用UF开发的子页面，可以在子页面入口的html中加入`<style>html, body {height: auto !important;}</style>`，覆盖掉默认样式\n\n---\n\n*关于样式：*\n\ndemo里的浏览器样式是文档里额外加的，默认的`Iframe`组件没有额外样式，没有边框及阴影。如果想要使用demo里的样式，可以参考如下css代码：\n```css\n.uf-iframe {\n    border-top: 2em solid rgba(230, 230, 230, 0.7);\n    box-shadow: 0 0.1em 0.5em 0 rgba(0, 0, 0, 0.28);\n    position: relative;\n    border-radius: 3px 3px 0 0;\n}\n.uf-iframe:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: -1.25em;\n    left: 1em;\n    width: 0.5em;\n    height: 0.5em;\n    border-radius: 50%;\n    background-color: #f44;\n    box-shadow: 0 0 0 2px #f44, 1.5em 0 0 2px #9b3, 3em 0 0 2px #fb5;\n}\n.uf-iframe:after {\n    content: attr(data-src);\n    display: block;\n    position: absolute;\n    color: #ddd;\n    font-weight: 100;\n    padding-left: 5px;\n    width: calc(100% - 6em);\n    height: 1.2em;\n    line-height: 1.2em;\n    top: -1.6em;\n    left: 5.5em;\n    border-radius: 2px;\n    background-color: white;\n}\n```"

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _markdown = __webpack_require__(191);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '默认高度自动根据内容调整',
	    config: [{
	        type: 'ueditor',
	        name: 'my-editor',
	        style: { marginBottom: '10px' },
	        simple: true
	    }, {
	        type: 'button',
	        content: '获取内容',
	        onClick: function onClick() {
	            var result = (0, _tools2.default)('my-editor').getContent();
	            _tools2.default.message.info(result, 3);
	        }
	    }, {
	        type: 'button',
	        content: '不可编辑',
	        onClick: function onClick() {
	            (0, _tools2.default)('my-editor').setDisabled();
	        }
	    }, {
	        type: 'button',
	        content: '追加内容',
	        onClick: function onClick() {
	            (0, _tools2.default)('my-editor').setContent('追加内容', true);
	        }
	    }]
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 191 */
/***/ (function(module, exports) {

	module.exports = "Ueditor 用法。\n\n### 功能说明\n\n* 使用和其他组件用法相似的方式使用 ueditor\n* 通过`UF()`可以获取到ueditor实例，并调用ueditor原生API\n\n\n## 组件&参数\n\n### # iframe\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\nname | 当前Ueditor名称，用于使用`UF()`获取组件 | string | |\nstyle | Ueditor样式 | object | |\ndata | 输入框内的默认内容 | string |  |\nsimple | 使用简洁版本，省略大量默认按钮 | boolen | false |\nonChange | 内容变动时的回调函数 | function(value) {} |  |\nserverUrl | 服务器统一请求接口路径 | string | URL + \"php/controller.php\" |\ntoolbars | 工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的从新定义 | {2d Array} |  |\nzIndex | 编辑器在页面上的z-index层级的基数 | number | 900 |\nautoHeightEnabled | 是否自动长高 | boolean | true |\n\n其他参数见：[Ueditor 官方配置](http://fex.baidu.com/ueditor/#start-config)\n\n\n#### 组件 API\n\n函数名 | 说明 | 参数\n---- | ---- | -----\nsetContent | 设置/追加编辑器内容 | ue.setContent('text'[, true])\ngetContent | 获取编辑器内容 | ue.getContent()\ngetContentTxt | 获取纯文本 | ue.getContentTxt()\nfocus | 让编辑器获得焦点 | ue.focus()\nsetDisabled | 设置编辑区域不可编辑 | ue.setDisabled()\nsetEnabled | 设置编辑区域可编辑 | ue.setEnabled()\nselection.getText | 获得当前选中的文本 | ue.selection.getText()\n\n其他参见：[Ueditor 官方API](http://fex.baidu.com/ueditor/#api-common)\n\n### 注意\n\n与其他组件不同的是，使用`UF('name')`获取到的是ueditor的实例，所以可以使用ueditor官网给出的API，但是不能使用类似于其它组件用的`set`、`hide`函数等"

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '按钮类型',
	    description: '按钮有四种类型：主按钮、次按钮、虚线按钮、危险按钮。主按钮在同一个操作区域最多出现一次',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Primary'
	    }, {
	        type: 'button',
	        mode: 'default',
	        content: 'Default'
	    }, {
	        type: 'button',
	        mode: 'dashed',
	        content: 'Dashed'
	    }, {
	        type: 'button',
	        mode: 'danger',
	        content: 'Danger'
	    }]
	};
	var demo2 = {
	    title: '图标按钮',
	    description: '当需要在 Button 内嵌入 Icon 时，可以设置 icon 属性，或者直接在 Button 内使用 Icon 组件。',
	    config: [{
	        type: 'button',
	        shape: 'circle',
	        mode: 'primary',
	        icon: 'search'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        icon: 'search',
	        content: 'Search'
	    }, {
	        type: 'button',
	        shape: 'circle',
	        icon: 'search'
	    }, {
	        type: 'button',
	        icon: 'search',
	        content: 'Search'
	    }]
	};

	var demo3 = {
	    title: '组合按钮',
	    description: '可以将多个 `button` 放入 `button-group` 的容器中，使按钮作为一组展示。',
	    config: [{
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            mode: 'primary',
	            content: [{
	                type: 'icon',
	                mode: 'left'
	            }, 'Backward']
	        }, {
	            type: 'button',
	            mode: 'primary',
	            content: ['Forward', {
	                type: 'icon',
	                mode: 'right'
	            }]
	        }]
	    }, {
	        type: 'button-group',
	        style: { marginLeft: 10 },
	        size: 'small',
	        content: [{
	            type: 'button',
	            mode: 'primary',
	            content: [{
	                type: 'icon',
	                mode: 'left'
	            }, 'Backward']
	        }, {
	            type: 'button',
	            mode: 'primary',
	            content: ['Forward', {
	                type: 'icon',
	                mode: 'right'
	            }]
	        }]
	    }, {
	        type: 'div',
	        style: { marginTop: 10 }
	    }, {
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            content: 'A'
	        }, {
	            type: 'button',
	            disabled: true,
	            content: 'B'
	        }, {
	            type: 'button',
	            mode: 'dashed',
	            content: 'C'
	        }, {
	            type: 'button',
	            mode: 'danger',
	            content: 'D'
	        }]
	    }]
	};
	var demo4 = {
	    title: '加载中状态',
	    description: '添加 loading 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        loading: true,
	        content: 'Loading'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        size: 'small',
	        loading: true,
	        content: 'Loading'
	    }, {
	        type: 'button',
	        shape: 'circle',
	        loading: true
	    }, {
	        type: 'button',
	        mode: 'primary',
	        shape: 'circle',
	        loading: true
	    }, {
	        type: 'div',
	        style: { marginTop: 10 }
	    }, {
	        type: 'button',
	        name: 'my-button1',
	        mode: 'primary',
	        content: 'Click me!',
	        onClick: function onClick(v) {
	            return (0, _tools2.default)('my-button1').set({
	                loading: true
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        name: 'my-button2',
	        icon: 'poweroff',
	        content: 'Click me!',
	        onClick: function onClick(v) {
	            return (0, _tools2.default)('my-button2').set({
	                loading: true
	            });
	        }
	    }]
	};

	var Button = function (_BaseDoc) {
	    _inherits(Button, _BaseDoc);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this.doc = 'antd-button.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Button, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Button;
	}(_BaseDoc3.default);

	exports.default = Button;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _antd = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var IconApp = function (_BaseDoc) {
	    _inherits(IconApp, _BaseDoc);

	    function IconApp(props) {
	        _classCallCheck(this, IconApp);

	        var _this = _possibleConstructorReturn(this, (IconApp.__proto__ || Object.getPrototypeOf(IconApp)).call(this, props));

	        _this.doc = 'antd-icon.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(IconApp, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'direction' }), document.getElementById('direction-demo'));
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'suggestion' }), document.getElementById('suggestion-demo'));
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'other' }), document.getElementById('other-demo'));
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'logo' }), document.getElementById('logo-demo'));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u65B9\u5411\u6027\u56FE\u6807'
	                    ),
	                    _react2.default.createElement('div', { id: 'direction-demo' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u63D0\u793A\u5EFA\u8BAE\u6027\u56FE\u6807'
	                    ),
	                    _react2.default.createElement('div', { id: 'suggestion-demo' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u7F51\u7AD9\u901A\u7528\u56FE\u6807'
	                    ),
	                    _react2.default.createElement('div', { id: 'other-demo' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u54C1\u724C\u548C\u6807\u8BC6'
	                    ),
	                    _react2.default.createElement('div', { id: 'logo-demo' })
	                )
	            );
	        }
	    }]);

	    return IconApp;
	}(_BaseDoc3.default);

	exports.default = IconApp;

	var IconSet = function (_React$Component) {
	    _inherits(IconSet, _React$Component);

	    function IconSet(props) {
	        _classCallCheck(this, IconSet);

	        var _this2 = _possibleConstructorReturn(this, (IconSet.__proto__ || Object.getPrototypeOf(IconSet)).call(this, props));

	        _this2.icons = {
	            direction: ['step-backward', 'step-forward', 'fast-backward', 'fast-forward', 'shrink', 'arrows-alt', 'down', 'up', 'left', 'right', 'caret-up', 'caret-down', 'caret-left', 'caret-right', 'up-circle', 'down-circle', 'left-circle', 'right-circle', 'up-circle-o', 'down-circle-o', 'right-circle-o', 'left-circle-o', 'double-right', 'double-left', 'verticle-left', 'verticle-right', 'forward', 'backward', 'rollback', 'enter', 'retweet', 'swap', 'swap-left', 'swap-right', 'arrow-up', 'arrow-down', 'arrow-left', 'arrow-right', 'play-circle', 'play-circle-o', 'up-square', 'down-square', 'left-square', 'right-square', 'up-square-o', 'down-square-o', 'left-square-o', 'right-square-o', 'login', 'logout', 'menu-fold', 'menu-unfold'],
	            suggestion: ['question', 'question-circle-o', 'question-circle', 'plus', 'plus-circle-o', 'plus-circle', 'pause', 'pause-circle-o', 'pause-circle', 'minus', 'minus-circle-o', 'minus-circle', 'plus-square', 'plus-square-o', 'minus-square', 'minus-square-o', 'info', 'info-circle-o', 'info-circle', 'exclamation', 'exclamation-circle-o', 'exclamation-circle', 'close', 'close-circle', 'close-circle-o', 'close-square', 'close-square-o', 'check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o', 'clock-circle-o', 'clock-circle'],
	            logo: ['android', 'android-o', 'apple', 'apple-o', 'windows', 'windows-o', 'ie', 'chrome', 'github', 'aliwangwang', 'aliwangwang-o', 'dingding', 'dingding-o'],
	            other: ['lock', 'unlock', 'area-chart', 'pie-chart', 'bar-chart', 'dot-chart', 'bars', 'book', 'calendar', 'cloud', 'cloud-download', 'code', 'code-o', 'copy', 'credit-card', 'delete', 'desktop', 'download', 'edit', 'ellipsis', 'file', 'file-text', 'file-unknown', 'file-pdf', 'file-excel', 'file-jpg', 'file-ppt', 'file-add', 'folder', 'folder-open', 'folder-add', 'hdd', 'frown', 'frown-o', 'meh', 'meh-o', 'smile', 'smile-o', 'inbox', 'laptop', 'appstore-o', 'appstore', 'line-chart', 'link', 'mail', 'mobile', 'notification', 'paper-clip', 'picture', 'poweroff', 'reload', 'search', 'setting', 'share-alt', 'shopping-cart', 'tablet', 'tag', 'tag-o', 'tags', 'tags-o', 'to-top', 'upload', 'user', 'video-camera', 'home', 'loading', 'loading-3-quarters', 'cloud-upload-o', 'cloud-download-o', 'cloud-upload', 'cloud-o', 'star-o', 'star', 'heart-o', 'heart', 'environment', 'environment-o', 'eye', 'eye-o', 'camera', 'camera-o', 'save', 'team', 'solution', 'phone', 'filter', 'exception', 'export', 'customer-service', 'qrcode', 'scan', 'like', 'like-o', 'dislike', 'dislike-o', 'message', 'pay-circle', 'pay-circle-o', 'calculator', 'pushpin', 'pushpin-o', 'bulb', 'select', 'switcher', 'rocket', 'bell', 'disconnect', 'database', 'compass', 'barcode', 'hourglass', 'key', 'flag', 'layout', 'printer', 'sound', 'usb', 'skin', 'tool', 'sync', 'wifi', 'car', 'schedule', 'user-add', 'user-delete', 'usergroup-add', 'usergroup-delete', 'man', 'woman', 'shop', 'gift', 'idcard', 'medicine-box', 'red-envelope', 'coffee', 'copyright', 'trademark', 'safety', 'wallet', 'bank', 'trophy', 'contacts', 'global', 'shake', 'api', 'fork']
	        };
	        return _this2;
	    }

	    _createClass(IconSet, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                className = _props.className,
	                catigory = _props.catigory;

	            var listClassName = 'anticons-list clearfix ' + (className || '');
	            return _react2.default.createElement(
	                'ul',
	                { className: listClassName },
	                this.icons[catigory].map(function (type) {
	                    return _react2.default.createElement(
	                        'li',
	                        { key: type },
	                        _react2.default.createElement(_antd.Icon, { type: type }),
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'anticon-class' },
	                            type
	                        )
	                    );
	                })
	            );
	        }
	    }]);

	    return IconSet;
	}(_react2.default.Component);

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基础栅格',
	    description: '从堆叠到水平排列。使用单一的一组 Row 和 Col 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 Row 内。',
	    config: [{
	        type: 'row',
	        style: { textAlign: 'center', background: 'rgba(0, 160, 233, 0.7)' },
	        content: [{
	            type: 'col',
	            span: 12,
	            content: 'col-12'
	        }, {
	            type: 'col',
	            span: 12,
	            style: { background: '#00a0e9' },
	            content: 'col-12'
	        }]
	    }, {
	        type: 'row',
	        style: { textAlign: 'center', background: 'rgba(0, 160, 233, 0.7)', marginTop: 8 },
	        content: [{
	            type: 'col',
	            span: 8,
	            content: 'col-8'
	        }, {
	            type: 'col',
	            span: 8,
	            style: { background: '#00a0e9' },
	            content: 'col-8'
	        }, {
	            type: 'col',
	            span: 8,
	            content: 'col-8'
	        }]
	    }, {
	        type: 'row',
	        style: { textAlign: 'center', background: 'rgba(0, 160, 233, 0.7)', marginTop: 8 },
	        content: [{
	            type: 'col',
	            span: 6,
	            content: 'col-6'
	        }, {
	            type: 'col',
	            span: 6,
	            style: { background: '#00a0e9' },
	            content: 'col-6'
	        }, {
	            type: 'col',
	            span: 6,
	            content: 'col-6'
	        }, {
	            type: 'col',
	            span: 6,
	            style: { background: '#00a0e9' },
	            content: 'col-6'
	        }]
	    }]
	};

	var demo2 = {
	    title: '区块间隔',
	    description: '栅格常常需要和间隔进行配合，你可以使用 Row 的 gutter 属性，我们推荐使用 (16+8n)px 作为栅格间隔。(n 是自然数)',
	    config: [{
	        type: 'row',
	        gutter: 16,
	        style: { textAlign: 'center' },
	        content: [{
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }, {
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }, {
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }, {
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }]
	    }]
	};

	var GridApp = function (_BaseDoc) {
	    _inherits(GridApp, _BaseDoc);

	    function GridApp(props) {
	        _classCallCheck(this, GridApp);

	        var _this = _possibleConstructorReturn(this, (GridApp.__proto__ || Object.getPrototypeOf(GridApp)).call(this, props));

	        _this.doc = 'antd-grid.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(GridApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return GridApp;
	}(_BaseDoc3.default);

	exports.default = GridApp;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	var _markdown = __webpack_require__(196);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var demo1 = {
	    title: '带路由的页面',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/card'
	    }
	};

	var RouterApp = function (_BaseDoc) {
	    _inherits(RouterApp, _BaseDoc);

	    function RouterApp(props) {
	        _classCallCheck(this, RouterApp);

	        var _this = _possibleConstructorReturn(this, (RouterApp.__proto__ || Object.getPrototypeOf(RouterApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(RouterApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return RouterApp;
	}(_BaseDoc3.default);

	exports.default = RouterApp;

/***/ }),
/* 196 */
/***/ (function(module, exports) {

	module.exports = "*以上 [demo页面](docs/demo/router.php#/card) 的路由部分配置见底部。更多完整示例见 [页面示例](#/Usage/Demo)*\n\n## 何时使用\n\n* 单页应用的入口，用于负责控制整个应用页面跳转。\n\n\n## 组件&配置\n\n### # router\n参数     | 说明           | 类型             | 默认值   |是否必须\n--------|----------------|------------------|--------|-----\nroutes  | 路由的及组件的映射关系对象列表，可以为数组，也可以为单个route对象。详见`route` | `route`&#124;`route`[] | 无    | 必须\nhistory  | 定义浏览器上的路由展现形式，分为两种：`hashHistory` - 默认形式，路由为`#`后面的值，使用起来较方便； `browserHistory` - 高级用法，会去掉`#`，展现形式像是真正的url，需要服务端配合使用，可参考 [这里](http://react-china.org/t/react-router-hashhistory-browserhistory/6799) | string | `'hashHistory'` |\n\n\n#### *route*\n\n描述路由的及组件的映射关系，是 `routes` 中的一项。\n\n参数       | 说明           | 类型             | 默认值   |是否必须\n------------|----------------|------------------|--------|-----\npath    | URL 中的路径。它会组合父 route 的路径，除非它是从 / 开始的， 将它变成一个绝对路径。 | string  |  无   | 必须\nto    | 从当前路径（path）重定向到另一个路径。**此属性不可和`component`同时使用**（因为一个是解析路由，一个是重定向路由）。例如：访问`/mine`路由时重定向到`/aboutme` |  string  |  无   | \ncomponent  | 当前路由对应的组件。它会作为父 route 组件中包含`childrenHolder: true`的组件的子组件渲染。可以直接是一个配置对象；也可以是一个模块名（*懒加载*）。**此属性不可和`to`同时使用** | `config` &#124; string  | 无  | 必须\nindexRoute    | 当用户在父 route 的 URL 时，indexRoute 允许你为父 route 提供一个默认的 \"child\" | `route` |   |\nindexRedirect    | 自动从当前路由重定向到其子路由的 path。例如：访问首页`/`时，自动重定向到`/Home`，即可在配置`/`路由那一层增加 indexRedirect 字段 | string |   |\nchildRoutes   | route 可以被嵌套，childRoutes 为子路由配置。 | `route` &#124; `route`[] |   |\ngetComponent  | 与 component 一样，但是是异步的。用于动态路由 | function(location, cb) { cb(null, Compnent) }  |     |\nonEnter    | 当 route 即将进入时调用。 | function(nextState, replaceState, callback?){}  |   |\nonLeave    | 当 route 即将退出时调用。 |  |   |\nbreadcrumbName    | 供面包屑组件使用，见 [Breadcrumb](#/Navigation/Breadcrumb) | string |   |\nbreadcrumbIcon    | 供面包屑组件使用，见 [Breadcrumb](#/Navigation/Breadcrumb) | string |   |\n\n> 更详细配置可参考原 [react-router](https://react-guide.github.io/react-router-cn/)\n\n---\n\n*demo中路由部分的配置如下：*\n\n```json\n{\n    type: 'router',\n    routes: [\n        {\n            path: '/',\n            component: App,\n            breadcrumbName: '首页',\n            indexRoute: {component: Card},\n            childRoutes: [\n                {path: 'card', breadcrumbName: '卡片', component: Card},\n                {path: 'card2', breadcrumbName: '卡片2', component: Card2,\n                    childRoutes: [\n                        {path: 'card3', breadcrumbName: '卡片3', component: Card3}\n                    ]\n                }\n            ]\n        }\n    ]\n};\n```"

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 固钉
	


	var demo1 = {
	    title: '基本用法',
	    description: '固钉距离可视区上下边缘固定的距离，并且可获取是否是固定状态',
	    config: [{
	        type: 'affix',
	        offsetTop: 120,
	        content: {
	            type: 'button',
	            mode: 'primary',
	            content: '120px to affix top'
	        },
	        onChange: function onChange(affixed) {
	            console.log(affixed);
	        }
	    }, {
	        type: 'affix',
	        offsetBottom: 120,
	        style: {
	            marginTop: '15px'
	        },
	        content: {
	            type: 'button',
	            mode: 'primary',
	            content: '120px to affix buttom'
	        }
	    }]
	};

	var Affix = function (_BaseDoc) {
	    _inherits(Affix, _BaseDoc);

	    function Affix(props) {
	        _classCallCheck(this, Affix);

	        var _this = _possibleConstructorReturn(this, (Affix.__proto__ || Object.getPrototypeOf(Affix)).call(this, props));

	        _this.doc = 'antd-affix.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Affix, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1);
	        }
	    }]);

	    return Affix;
	}(_BaseDoc3.default);

	exports.default = Affix;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var Breadcrumb = function (_BaseDoc) {
	    _inherits(Breadcrumb, _BaseDoc);

	    function Breadcrumb(props) {
	        _classCallCheck(this, Breadcrumb);

	        var _this = _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).call(this, props));

	        _this.doc = 'antd-breadcrumb.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Breadcrumb, [{
	        key: 'render',
	        value: function render() {
	            // return this.__getDemo();
	        }
	    }]);

	    return Breadcrumb;
	}(_BaseDoc3.default);

	exports.default = Breadcrumb;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 下拉菜单
	


	var menu = {
	    type: 'menu',
	    items: [{
	        key: 1,
	        link: 'http://www.baidu.com/',
	        title: 'this is the 1st menu item'
	    }, {
	        key: 2,
	        link: 'http://www.map.baidu.com/',
	        title: 'this is the 2nd menu item'
	    }, {
	        key: 3,
	        link: 'http://ww.taobao.com/',
	        title: 'this is the 3rd menu item'
	    }]
	};
	var demo1 = {
	    title: '基本用法',
	    description: '最简单的下拉菜单，通过trigger属性配置如何触发，关于更多的Menu样式可参考Menu组件',
	    config: {
	        type: 'dropdown',
	        overlay: menu,
	        trigger: ['click'],
	        content: {
	            type: 'a',
	            // href: '#',
	            content: ['Click me', {
	                type: 'icon',
	                mode: 'down'
	            }]
	        },
	        onVisibleChange: function onVisibleChange(flag) {
	            console.log('visible:', flag);
	        }
	    }
	};
	var demo2 = {
	    title: '弹出位置',
	    description: '支持6个弹出位置',
	    config: [{
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'bottomLeft',
	        content: {
	            type: 'button',
	            content: 'bottomLeft',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'bottomCenter',
	        content: {
	            type: 'button',
	            content: 'bottomCenter',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'bottomRight',
	        content: {
	            type: 'button',
	            content: 'bottomRight',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'topLeft',
	        content: {
	            type: 'button',
	            content: 'topLeft',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'topCenter',
	        content: {
	            type: 'button',
	            content: 'topCenter',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'topRight',
	        content: {
	            type: 'button',
	            content: 'topRight',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }]
	};
	var demo3 = {
	    title: '带下拉框的按钮',
	    description: '左边是按钮，右边是额外的相关功能菜单',
	    config: {
	        type: 'dropdown-button',
	        overlay: menu,
	        content: 'Dropdown-Button'
	    }
	};

	var Dropdown = function (_BaseDoc) {
	    _inherits(Dropdown, _BaseDoc);

	    function Dropdown(props) {
	        _classCallCheck(this, Dropdown);

	        var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

	        _this.doc = 'antd-dropdown.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Dropdown, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Dropdown;
	}(_BaseDoc3.default);

	exports.default = Dropdown;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '顶部导航',
	    description: '水平的顶部导航菜单。',
	    config: {
	        type: 'menu',
	        mode: 'horizontal',
	        items: [{
	            key: 'mail',
	            icon: 'mail',
	            title: 'Navigation One'
	        }, {
	            key: 'app',
	            icon: 'appstore',
	            title: 'app'
	        }, {
	            key: 'setting',
	            icon: 'setting',
	            title: 'Navigation Tree - Submenu',
	            childItems: [{
	                mode: 'group',
	                title: 'Item 1',
	                childItems: [{
	                    key: 'setting:1',
	                    title: 'Option 1'
	                }, {
	                    key: 'setting:2',
	                    title: 'Option 2'
	                }]
	            }]
	        }, {
	            key: 'baidu',
	            title: {
	                type: 'html',
	                content: '<a href="http://www.baidu.design" target="_blank" rel="noopener noreferrer">Navigation Four - Link</a>'
	            }
	        }]
	    }
	};
	var demo2 = {
	    title: '内嵌菜单',
	    description: '垂直菜单，子菜单内嵌在菜单区域。',
	    config: {
	        type: 'menu',
	        mode: 'inline',
	        style: { width: 240 },
	        defaultSelectedKeys: ['1'],
	        defaultOpenKeys: ['sub1'],
	        items: [{
	            key: 'sub1',
	            title: 'Navigation One - Submenu',
	            icon: 'setting',
	            childItems: [{
	                mode: 'group',
	                title: 'Item 1',
	                childItems: [{
	                    key: '1',
	                    title: 'Option 1'
	                }, {
	                    key: '2',
	                    title: 'Option 2'
	                }]
	            }, {
	                mode: 'group',
	                title: 'Item 2',
	                childItems: [{
	                    key: '3',
	                    title: 'Option 3'
	                }, {
	                    key: '4',
	                    title: 'Option 4'
	                }]
	            }]
	        }, {
	            key: 'mail',
	            icon: 'mail',
	            title: 'Navigation Two'
	        }, {
	            key: 'app',
	            icon: 'appstore',
	            title: 'Navigation Tree'
	        }]
	    }
	};
	var demo3 = {
	    title: '主题',
	    description: '内建了两套主题 light|dark，默认 light。',
	    config: [{
	        type: 'switch',
	        checked: true,
	        checkedChildren: 'Dark',
	        unCheckedChildren: 'Light',
	        onChange: function onChange(v) {
	            return (0, _tools2.default)('my-menu').set({
	                theme: v ? 'dark' : 'light'
	            });
	        }
	    }, {
	        type: 'menu',
	        name: 'my-menu',
	        mode: 'inline',
	        theme: 'dark',
	        style: { width: 240, marginTop: 10 },
	        defaultSelectedKeys: ['1'],
	        defaultOpenKeys: ['sub1'],
	        items: [{
	            key: 'sub1',
	            icon: 'setting',
	            title: 'Navigation One',
	            childItems: [{
	                key: '1',
	                title: 'Option 1'
	            }, {
	                key: '2',
	                title: 'Option 2'
	            }, {
	                key: '3',
	                title: 'Option 3'
	            }, {
	                key: '4',
	                title: 'Option 4'
	            }]
	        }, {
	            key: 'mail',
	            icon: 'mail',
	            title: 'Navigation Two'
	        }, {
	            key: 'app',
	            disabled: true,
	            icon: 'appstore',
	            title: 'Navigation Tree'
	        }]
	    }]
	};

	var Menu = function (_BaseDoc) {
	    _inherits(Menu, _BaseDoc);

	    function Menu(props) {
	        _classCallCheck(this, Menu);

	        var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

	        _this.doc = 'antd-menu.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Menu, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3);
	        }
	    }]);

	    return Menu;
	}(_BaseDoc3.default);

	exports.default = Menu;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 分页
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '基础分页，规定每页展示数目，并且显示数据总条数',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        pageSize: 50,
	        onChange: function onChange(page) {
	            console.log('Page:', page);
	        }
	    }
	};
	var demo2 = {
	    title: '改变',
	    description: '改变每页显示条目数',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        showSizeChanger: true,
	        pageSizeOptions: ['10', '25', '50'],
	        onShowSizeChange: function onShowSizeChange(current, pageSize) {
	            console.log(current, pageSize);
	        }
	    }
	};
	var demo3 = {
	    title: '跳转',
	    description: '快速跳转到某一页',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        showQuickJumper: true,
	        onChange: function onChange(pageNumber) {
	            console.log('Page:', pageNumber);
	        }
	    }
	};
	var demo4 = {
	    title: '迷你',
	    description: '迷你版本',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        size: 'small',
	        showQuickJumper: true,
	        showSizeChanger: true,
	        onChange: function onChange(pageNumber) {
	            console.log('Page:', pageNumber);
	        }
	    }
	};
	var demo5 = {
	    title: '简洁',
	    description: '简单的翻页',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        pageSize: 10,
	        simple: true,
	        showQuickJumper: true,
	        showSizeChanger: true,
	        onChange: function onChange(pageNumber) {
	            console.log('Page:', pageNumber);
	        }
	    }
	};
	var demo6 = {
	    title: '总数',
	    description: '通过设置showTotal展示总共有多少数据',
	    config: {
	        type: 'pagination',
	        total: 85,
	        showTotal: function showTotal(total) {
	            return '共' + total + '条';
	        },
	        pageSize: 20,
	        current: 1
	    }
	};

	var Pagination = function (_BaseDoc) {
	    _inherits(Pagination, _BaseDoc);

	    function Pagination(props) {
	        _classCallCheck(this, Pagination);

	        var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

	        _this.doc = 'antd-pagination.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Pagination, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return Pagination;
	}(_BaseDoc3.default);

	exports.default = Pagination;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 步骤条
	


	var demo1 = {
	    title: '基本用法',
	    description: '简单的步骤条',
	    config: {
	        type: 'steps',
	        current: 1,
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};
	var demo2 = {
	    title: '带图标的步骤条',
	    description: '通过设置step的icon属性，可以启用自定义图标',
	    config: {
	        type: 'steps',
	        content: [{
	            type: 'step',
	            status: 'finish',
	            title: 'Login',
	            icon: {
	                type: 'icon',
	                mode: 'user'
	            }
	        }, {
	            type: 'step',
	            status: 'finish',
	            title: 'Verification',
	            icon: {
	                type: 'icon',
	                mode: 'solution'
	            }
	        }, {
	            type: 'step',
	            status: 'process',
	            title: 'Pay',
	            icon: {
	                type: 'icon',
	                mode: 'credit-card'
	            }
	        }, {
	            type: 'step',
	            status: 'wait',
	            title: 'Done',
	            icon: {
	                type: 'icon',
	                mode: 'smile-o'
	            }
	        }]
	    }
	};
	var demo3 = {
	    title: '竖直方向的步骤条',
	    description: '简单的竖直方向的步骤条',
	    config: {
	        type: 'steps',
	        current: 1,
	        direction: 'vertical',
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};
	var demo4 = {
	    title: '步骤运行错误',
	    description: '使用steps的status属性来指定当前步骤的状态',
	    config: {
	        type: 'steps',
	        current: 1,
	        status: 'error',
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};
	var demo5 = {
	    title: '点状步骤条',
	    description: '包含步骤点的进度条',
	    config: {
	        type: 'steps',
	        current: 1,
	        progressDot: true,
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};

	var Steps = function (_BaseDoc) {
	    _inherits(Steps, _BaseDoc);

	    function Steps(props) {
	        _classCallCheck(this, Steps);

	        var _this = _possibleConstructorReturn(this, (Steps.__proto__ || Object.getPrototypeOf(Steps)).call(this, props));

	        _this.doc = 'antd-steps.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Steps, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Steps;
	}(_BaseDoc3.default);

	exports.default = Steps;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 自动补全AutoComplete-Demo
	


	var dataSource1 = [];
	var demo1 = {
	    title: '基本用法',
	    description: '基本使用。通过 options 设置自动补全的后缀',
	    config: {
	        type: 'auto-complete',
	        style: { width: '80%' },
	        name: 'auto-complete-demo1',
	        options: ['@baidu.com', '@163.com', '@qq.com'],
	        placeholder: 'input here',
	        onSelect: function onSelect(value) {
	            console.log(value);
	        }
	    }
	};
	var demo2 = {
	    title: '具有清除功能',
	    description: '通过 allowClear 设置清除功能，同时设定默认value',
	    config: {
	        type: 'auto-complete',
	        style: { width: '80%' },
	        name: 'auto-complete-demo2',
	        options: ['@baidu.com', '@163.com', '@qq.com'],
	        value: '123123',
	        allowClear: true,
	        onChange: function onChange(value) {
	            console.log(value);
	        }
	    }
	};

	var Button = function (_BaseDoc) {
	    _inherits(Button, _BaseDoc);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this.doc = 'antd-auto-complete.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Button, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Button;
	}(_BaseDoc3.default);

	exports.default = Button;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Cascader-Demo
	


	var demo1 = {
	    title: '基本用法',
	    description: '省市区级联选择',
	    config: {
	        type: 'cascader',
	        name: 'myCascader1',
	        placeholder: '省区选择',
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }]
	    }
	};
	var demo2 = {
	    title: '设定默认值，移入展开',
	    description: '级联选择框设定默认值，移入选项时展开下一级列表',
	    config: {
	        type: 'cascader',
	        name: 'myCascader2',
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }],
	        defaultValue: ['zhejiang', 'hangzhou', 'xihu'],
	        expandTrigger: 'hover'
	    }
	};
	var demo3 = {
	    title: '选择即改变，选项禁用',
	    description: '选中父级则父级出现在选框中，某些选项可设定为不可选',
	    config: {
	        type: 'cascader',
	        name: 'myCascader3',
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            disabled: true,
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }],
	        changeOnSelect: true,
	        onChange: function onChange(value) {
	            console.log(value);
	        }
	    }
	};
	var demo4 = {
	    title: '大小',
	    description: '不同大小的级联选择器',
	    config: [{
	        type: 'cascader',
	        size: 'large',
	        style: {
	            display: 'block',
	            width: '90%'
	        },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }]
	    }, {
	        type: 'cascader',
	        size: 'small',
	        style: {
	            display: 'block',
	            width: '90%',
	            marginTop: '15px'
	        },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }]
	    }]
	};
	var demo5 = {
	    title: '自定义已选项',
	    description: '通过displayRender方法给改变选项的连接符号',
	    config: {
	        type: 'cascader',
	        style: { width: 270 },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖',
	                    code: '752100'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门',
	                    code: '453400'
	                }]
	            }]
	        }],
	        displayRender: function displayRender(labels) {
	            return labels.join(' - ');
	        }
	    }
	};
	var demo6 = {
	    title: '级联选框搜索功能',
	    description: '可以直接搜索选项并选择',
	    config: {
	        type: 'cascader',
	        style: { width: 270 },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖',
	                    code: '752100'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门',
	                    code: '453400'
	                }]
	            }]
	        }],
	        showSearch: {
	            matchInputWidth: true
	        }
	    }
	};

	var CascaderApp = function (_BaseDoc) {
	    _inherits(CascaderApp, _BaseDoc);

	    function CascaderApp(props) {
	        _classCallCheck(this, CascaderApp);

	        var _this = _possibleConstructorReturn(this, (CascaderApp.__proto__ || Object.getPrototypeOf(CascaderApp)).call(this, props));

	        _this.doc = 'antd-cascader.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(CascaderApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return CascaderApp;
	}(_BaseDoc3.default);

	exports.default = CascaderApp;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本用法',
	    description: '可用与不可用复选框',
	    config: [{
	        type: 'checkbox',
	        checked: true,
	        onChange: function onChange(e) {
	            console.log(e.target.checked);
	        }
	    }, {
	        type: 'checkbox',
	        checked: false,
	        disabled: true
	    }, {
	        type: 'checkbox',
	        checked: true,
	        disabled: true
	    }]
	};
	var demo2 = {
	    title: 'Checkbox组',
	    description: '由数组生成复选框组',
	    config: {
	        type: 'checkbox-group',
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear' }, { label: 'Orange', value: 'Orange' }],
	        value: ['Pear'],
	        onChange: function onChange(checkedValues) {
	            console.log('checked = ', checkedValues);
	        }
	    }
	};

	var Checkbox = function (_BaseDoc) {
	    _inherits(Checkbox, _BaseDoc);

	    function Checkbox(props) {
	        _classCallCheck(this, Checkbox);

	        var _this = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

	        _this.doc = 'antd-checkbox.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Checkbox, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Checkbox;
	}(_BaseDoc3.default);

	exports.default = Checkbox;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法，在浮层中可以选择或者输入日期',
	    config: [{
	        type: 'date-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        value: '2017/08/31',
	        format: 'YYYY/MM/DD'
	    }, {
	        type: 'month-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        value: '2017/08',
	        format: 'YYYY/MM'
	    }, {
	        type: 'range-picker',
	        style: {
	            display: 'block'
	        },
	        value: ['2017/08/31', '2017/09/01'],
	        format: 'YYYY/MM/DD'
	    }]
	};
	var demo2 = {
	    title: '日期时间选择',
	    description: '增加选择时间功能，当 showTime 为一个对象时，其属性会传递给内建的 TimePicker',
	    config: [{
	        type: 'date-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        placeholder: 'Select Time',
	        format: 'YYYY-MM-DD HH:mm:ss',
	        showTime: true,
	        onOk: function onOk(value) {
	            console.log('onOk:', value);
	        }
	    }, {
	        type: 'range-picker',
	        style: {
	            display: 'block'
	        },
	        placeholder: ['Start Time', 'End Time'],
	        format: 'YYYY-MM-DD HH:mm:ss',
	        showTime: { format: 'HH:mm' },
	        onChange: function onChange(value, dateString) {
	            console.log('Selected Time: ', value);
	            console.log('Formatted Selected Time: ', dateString);
	        }
	    }]
	};
	var demo3 = {
	    title: '额外的页脚',
	    description: '在浮层中加入额外的页脚，以满足某些定制信息的需求',
	    config: [{
	        type: 'date-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        renderExtraFooter: function renderExtraFooter() {
	            return _tools2.default.init({
	                type: 'button',
	                content: '额外的页脚'
	            });
	        }
	    }, {
	        type: 'range-picker',
	        style: {
	            display: 'block'
	        },
	        renderExtraFooter: function renderExtraFooter() {
	            return _tools2.default.init({
	                type: 'button',
	                content: '额外的页脚'
	            });
	        }
	    }]
	};

	var DatePicker = function (_BaseDoc) {
	    _inherits(DatePicker, _BaseDoc);

	    function DatePicker(props) {
	        _classCallCheck(this, DatePicker);

	        var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

	        _this.doc = 'antd-date-picker.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(DatePicker, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return DatePicker;
	}(_BaseDoc3.default);

	exports.default = DatePicker;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本用法',
	    description: '数字输入框。',
	    config: [{
	        type: 'input-number',
	        min: 1,
	        max: 5,
	        value: 3,
	        onChange: function onChange(v) {
	            console.log(v);
	        }
	    }]
	};
	var demo2 = {
	    title: '小数',
	    description: '和原生的数字输入框一样，value 的精度由 step 的小数位数决定。',
	    config: [{
	        type: 'input-number',
	        min: 0,
	        max: 1,
	        step: 0.1,
	        onChange: function onChange(v) {
	            console.log(v);
	        }
	    }]
	};
	var demo3 = {
	    title: '格式化展示',
	    description: '通过 formatter 格式化数字，以展示具有具体含义的数据，往往需要配合 parser 一起使用。',
	    config: [{
	        type: 'input-number',
	        value: 100,
	        formatter: function formatter(v) {
	            return v + '%';
	        },
	        onChange: function onChange(v) {
	            return ('' + v).replace('%', '');
	        }
	    }]
	};

	var InputNumber = function (_BaseDoc) {
	    _inherits(InputNumber, _BaseDoc);

	    function InputNumber(props) {
	        _classCallCheck(this, InputNumber);

	        var _this = _possibleConstructorReturn(this, (InputNumber.__proto__ || Object.getPrototypeOf(InputNumber)).call(this, props));

	        _this.doc = 'antd-input-number.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(InputNumber, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return InputNumber;
	}(_BaseDoc3.default);

	exports.default = InputNumber;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本使用',
	    description: '基本使用。',
	    config: {
	        type: 'input',
	        placeholder: '基本使用'
	    }
	};

	var demo2 = {
	    title: '前置/后置标签',
	    description: '用于配置一些固定组合。',
	    config: [{
	        type: 'input',
	        style: { marginBottom: 16 },
	        placeholder: '基本使用',
	        addonBefore: 'Http://',
	        addonAfter: '.com',
	        value: 'mysite'
	    }, {
	        type: 'input',
	        style: { marginBottom: 16 },
	        placeholder: '基本使用',
	        addonBefore: {
	            type: 'select',
	            value: 'Http://',
	            options: ['Http://', 'Https://']
	        },
	        addonAfter: {
	            type: 'select',
	            value: '.com',
	            options: ['.com', '.cn']
	        },
	        value: 'mysite'
	    }, {
	        type: 'input',
	        style: { marginBottom: 16 },
	        placeholder: '基本使用',
	        addonAfter: {
	            type: 'icon',
	            mode: 'setting'
	        },
	        value: 'mysite'
	    }]
	};

	var demo3 = {
	    title: '搜索框',
	    description: '带搜索按钮的输入框。点击回车时会触发onSearch函数',
	    config: {
	        type: 'input-search',
	        placeholder: 'input search text',
	        style: { width: 200 },
	        onSearch: function onSearch(v) {
	            console.log(v);
	        }
	    }
	};

	var demo4 = {
	    title: '输入框组合',
	    description: '输入框的组合展现。',
	    config: [{
	        type: 'input-group',
	        content: [{
	            type: 'input',
	            style: { width: 100 },
	            placeholder: '组合',
	            value: '0571'
	        }, {
	            type: 'input',
	            style: { width: '30%' },
	            placeholder: '输入框',
	            value: '26888888'
	        }]
	    }, {
	        type: 'input-group',
	        compact: true,
	        style: { marginTop: 16 },
	        content: [{
	            type: 'select',
	            value: 'Between',
	            style: { width: '100px' },
	            options: ['Between', 'Except']
	        }, {
	            type: 'input',
	            style: { width: 100, textAlign: 'center' },
	            placeholder: 'Minimun'
	        }, {
	            type: 'input',
	            style: { width: 24, borderLeft: 0, pointerEvents: 'none', backgroundColor: '#fff' },
	            placeholder: '~',
	            disabled: true
	        }, {
	            type: 'input',
	            style: { width: 100, textAlign: 'center', borderLeft: 0 },
	            placeholder: 'Maximum'
	        }]
	    }]
	};

	var demo5 = {
	    title: '文本域',
	    description: '用于多行输入。`autosize` 属性适用于 `textarea` 节点，并且只有高度会自动变化。另外 autosize 可以设定为一个对象，指定最小行数和最大行数。',
	    config: [{
	        type: 'textarea',
	        placeholder: 'Autosize height',
	        autosize: true
	    }, {
	        type: 'textarea',
	        style: { marginTop: '16px' },
	        placeholder: 'Autosize height with minimum and maximum number',
	        autosize: { minRows: 2, maxRows: 6 }
	    }]
	};

	var demo6 = {
	    title: '前缀和后缀',
	    description: '在输入框上添加前缀或后缀图标。',
	    config: [{
	        type: 'input',
	        placeholder: 'Enter your userName',
	        prefix: {
	            type: 'icon',
	            mode: 'user'
	        },
	        suffix: {
	            type: 'icon',
	            mode: 'close-circle'
	        }
	    }]
	};

	var Input = function (_BaseDoc) {
	    _inherits(Input, _BaseDoc);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.doc = 'antd-input.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Input, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return Input;
	}(_BaseDoc3.default);

	exports.default = Input;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '单选组合',
	    description: '一组互斥的 Radio 配合使用。',
	    config: [{
	        type: 'radio',
	        name: 'my-radio2',
	        style: { display: 'block', marginBottom: 16 },
	        options: ['Apple', 'Pear', 'Orange']
	    }, {
	        type: 'radio',
	        name: 'my-radio',
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear', disabled: true }, { label: 'Orange', value: 'Orange' }]
	    }]
	};
	var demo2 = {
	    title: '按钮样式',
	    description: '按钮样式的单选组合。',
	    config: {
	        type: 'radio',
	        name: 'my-radio-button',
	        showAsButton: true,
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear', disabled: true }, { label: 'Orange', value: 'Orange' }]
	    }
	};

	var Radio = function (_BaseDoc) {
	    _inherits(Radio, _BaseDoc);

	    function Radio(props) {
	        _classCallCheck(this, Radio);

	        var _this = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

	        _this.doc = 'antd-radio.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Radio, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Radio;
	}(_BaseDoc3.default);

	exports.default = Radio;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 评分
	


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法',
	    config: {
	        type: 'rate',
	        value: 3,
	        onChange: function onChange(value) {
	            console.log(value);
	        }
	    }
	};

	var demo2 = {
	    title: '半星及文案',
	    description: '支持选中半星',
	    config: {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true
	    }
	};

	var demo3 = {
	    title: '其他符号',
	    description: '可以将星星替换为其他字符，比如字母，数字，字体图案甚至中文',
	    config: [{
	        type: 'rate',
	        value: 2.5,
	        style: {
	            display: 'block',
	            marginBottom: '10px'
	        },
	        allowHalf: true,
	        character: {
	            type: 'icon',
	            mode: 'heart'
	        }
	    }, {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true,
	        style: {
	            display: 'block',
	            marginBottom: '10px'
	        },
	        character: 'A'
	    }, {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true,
	        character: '好'
	    }]
	};

	var demo4 = {
	    title: '只读',
	    description: '只读，无法进行交互',
	    config: {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true,
	        disabled: true
	    }
	};

	var Rate = function (_BaseDoc) {
	    _inherits(Rate, _BaseDoc);

	    function Rate(props) {
	        _classCallCheck(this, Rate);

	        var _this = _possibleConstructorReturn(this, (Rate.__proto__ || Object.getPrototypeOf(Rate)).call(this, props));

	        _this.doc = 'antd-rate.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Rate, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Rate;
	}(_BaseDoc3.default);

	exports.default = Rate;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本使用',
	    description: '基本使用。',
	    config: {
	        type: 'select',
	        name: 'my-select',
	        value: 'Apple',
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear', disabled: true }, { label: 'Orange', value: 'Orange' }]
	    }
	};

	var demo2 = {
	    title: '带搜索框',
	    description: '展开后可对选项进行搜索。',
	    config: {
	        type: 'select',
	        name: 'my-select2',
	        style: { width: 200 },
	        showSearch: true,
	        allowClear: true,
	        onChange: function onChange(v) {
	            return console.log(v);
	        },
	        options: ['Apple', 'Pear', 'Orange']
	    }
	};

	var demo3 = {
	    title: '多选模式',
	    description: '可以选择多个',
	    config: {
	        type: 'select',
	        name: 'my-select2',
	        style: { width: '100%' },
	        mode: 'multiple',
	        value: ['Apple'],
	        options: ['Apple', 'Pear', 'Orange']
	    }
	};

	var demo4 = {
	    title: '标签模式',
	    description: '可以把随意输入的内容作为选项并选中。',
	    config: {
	        type: 'select',
	        name: 'my-select2',
	        style: { width: '100%' },
	        mode: 'tags',
	        value: ['Apple'],
	        options: ['Apple', 'Pear', 'Orange']
	    }
	};

	var Select = function (_BaseDoc) {
	    _inherits(Select, _BaseDoc);

	    function Select(props) {
	        _classCallCheck(this, Select);

	        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

	        _this.doc = 'antd-select.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Select, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Select;
	}(_BaseDoc3.default);

	exports.default = Select;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'switch',
	        checked: true
	    }
	};

	var demo2 = {
	    title: '两种大小',
	    description: 'size="small" 表示小号开关。',
	    config: [{
	        type: 'switch'
	    }, {
	        type: 'switch',
	        size: 'small'
	    }]
	};

	var demo3 = {
	    title: '文字和图标',
	    description: '带有文字和图标。',
	    config: [{
	        type: 'switch',
	        checkedChildren: '开',
	        unCheckedChildren: '关'
	    }, {
	        type: 'switch',
	        checkedChildren: {
	            type: 'icon',
	            mode: 'check'
	        },
	        unCheckedChildren: {
	            type: 'icon',
	            mode: 'cross'
	        }
	    }]
	};

	var Switch = function (_BaseDoc) {
	    _inherits(Switch, _BaseDoc);

	    function Switch(props) {
	        _classCallCheck(this, Switch);

	        var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

	        _this.doc = 'antd-switch.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Switch, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Switch;
	}(_BaseDoc3.default);

	exports.default = Switch;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var Upload = function (_BaseDoc) {
	    _inherits(Upload, _BaseDoc);

	    function Upload(props) {
	        _classCallCheck(this, Upload);

	        var _this = _possibleConstructorReturn(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));

	        _this.doc = 'antd-upload.md';
	        _this.__init();
	        return _this;
	    }

	    // render() {
	    //     return <div id="demo-content"></div>;
	    // }


	    return Upload;
	}(_BaseDoc3.default);

	exports.default = Upload;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 头像
	


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法',
	    config: [{
	        type: 'div',
	        content: [{
	            type: 'avatar',
	            size: 'large',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            size: 'small',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }]
	    }, {
	        type: 'div',
	        content: [{
	            type: 'avatar',
	            size: 'large',
	            shape: 'square',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            shape: 'square',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            size: 'small',
	            shape: 'square',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }]
	    }]
	};

	var demo2 = {
	    title: '类型',
	    description: '支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。',
	    config: [{
	        type: 'avatar',
	        style: {
	            display: 'inline-block',
	            margin: '5px'
	        },
	        content: 'UMP'
	    }, {
	        type: 'avatar',
	        style: {
	            backgroundColor: '#87d068',
	            display: 'inline-block',
	            margin: '5px'
	        },
	        icon: 'user'
	    }, {
	        type: 'avatar',
	        style: {
	            color: '#f56a00',
	            backgroundColor: '#fde3cf',
	            display: 'inline-block',
	            margin: '5px'
	        },
	        content: 'U'
	    }, {
	        type: 'avatar',
	        src: "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
	        style: {
	            display: 'inline-block',
	            margin: '5px'
	        }
	    }]
	};

	var demo3 = {
	    title: '带徽标的头像',
	    description: '通常用于消息提示',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 1,
	            content: {
	                type: 'avatar',
	                shape: 'square',
	                icon: 'user'
	            }
	        }
	    }, {
	        type: 'badge',
	        dot: true,
	        content: {
	            type: 'avatar',
	            shape: 'square',
	            icon: 'user'
	        }
	    }]
	};

	var Avatar = function (_BaseDoc) {
	    _inherits(Avatar, _BaseDoc);

	    function Avatar(props) {
	        _classCallCheck(this, Avatar);

	        var _this = _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call(this, props));

	        _this.doc = 'antd-avatar.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Avatar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Avatar;
	}(_BaseDoc3.default);

	exports.default = Avatar;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 徽标数
	


	var example = {
	    type: 'span',
	    style: {
	        display: 'inline-block',
	        width: '42px',
	        height: '42px',
	        borderRadius: '6px',
	        backgroundColor: '#eee'
	    }
	};
	var demo1 = {
	    title: '基本用法',
	    description: '简单的徽章展示，当count为0时，默认不显示，但是可以使用showZero修改为显示',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 5,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 0,
	            showZero: true,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 0,
	            dot: true,
	            content: example
	        }
	    }]
	};

	var demo2 = {
	    title: '独立使用',
	    description: '不包裹任何元素即是独立使用，可自定样式展现。',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 25
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 4,
	            style: {
	                'backgroundColor': '#fff',
	                color: '#999',
	                boxShadow: '0 0 0 1px #d9d9d9 inset'
	            }
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 109,
	            style: {
	                backgroundColor: '#87d068'
	            }
	        }
	    }]
	};

	var demo3 = {
	    title: '封顶数字',
	    description: '超过overflowCount的会显示为${overflowCount}+，默认的overflowCount为99',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 99,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 100,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 99,
	            overflowCount: 10,
	            content: example
	        }
	    }, {
	        type: 'span',
	        content: {
	            type: 'badge',
	            count: 1000,
	            overflowCount: 999,
	            content: example
	        }
	    }]
	};

	var demo4 = {
	    title: '状态点',
	    description: '用于表示状态的小圆点',
	    config: [{
	        type: 'badge',
	        status: 'success',
	        text: 'success'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'error',
	        text: 'error'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'default',
	        text: 'default'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'processing',
	        text: 'processing'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'warning',
	        text: 'warning'
	    }]
	};

	var demo5 = {
	    title: '动态',
	    description: '展示动态变化的效果',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 5,
	            name: 'myBadge',
	            content: example
	        }
	    }, {
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            content: {
	                type: 'icon',
	                mode: 'minus'
	            },
	            onClick: function onClick() {
	                var count = (0, _tools2.default)('myBadge').getOption('count');
	                count--;
	                if (count < 0) {
	                    count = 0;
	                }
	                (0, _tools2.default)('myBadge').set({ count: count });
	            }
	        }, {
	            type: 'button',
	            content: {
	                type: 'icon',
	                mode: 'plus'
	            },
	            onClick: function onClick() {
	                var count = (0, _tools2.default)('myBadge').getOption('count');
	                count++;
	                (0, _tools2.default)('myBadge').set({ count: count });
	            }
	        }]
	    }]
	};

	var Badge = function (_BaseDoc) {
	    _inherits(Badge, _BaseDoc);

	    function Badge(props) {
	        _classCallCheck(this, Badge);

	        var _this = _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props));

	        _this.doc = 'antd-badge.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Badge, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Badge;
	}(_BaseDoc3.default);

	exports.default = Badge;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '典型卡片',
	    description: '包含标题、内容、操作区域。',
	    config: {
	        type: 'card',
	        title: 'Card title',
	        extra: {
	            type: 'a',
	            content: 'More'
	        },
	        content: {
	            type: 'html',
	            content: '包含标题<p class="test" style="background-color:#eee;">包含标题、内容、操作区域的卡片内容区域</p><p>包含标题、内容、操作区域的卡片内容区域</p><p>包含标题、内容、操作区域的卡片内容区域</p>'
	        }
	    }
	};

	var demo2 = {
	    title: '无边框',
	    description: '在灰色背景上使用无边框的卡片。',
	    config: {
	        type: 'div',
	        style: { padding: 30, background: '#ececec' },
	        content: {
	            type: 'card',
	            bordered: false,
	            style: { width: 300 },
	            title: 'Card title',
	            content: '包含标题、内容、操作区域的卡片内容区域'
	        }
	    }
	};

	var demo3 = {
	    title: '预加载的卡片',
	    description: '数据读入前会有文本块样式。',
	    config: {
	        type: 'card',
	        title: 'Card title',
	        loading: true,
	        content: '包含标题、内容、操作区域的卡片内容区域'
	    }
	};

	var demo4 = {
	    title: '简洁卡片',
	    description: '只包含内容区域。',
	    config: {
	        type: 'card',
	        style: { width: 300 },
	        content: '包含标题、内容、操作区域的卡片内容区域'
	    }
	};

	var Card = function (_BaseDoc) {
	    _inherits(Card, _BaseDoc);

	    function Card(props) {
	        _classCallCheck(this, Card);

	        var _this = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));

	        _this.doc = 'antd-card.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Card, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Card;
	}(_BaseDoc3.default);

	exports.default = Card;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var content = [{
	    type: 'div',
	    style: { lineHeight: '160px', color: '#fff', background: '#364d79', textAlign: 'center' },
	    content: '1'
	}, {
	    type: 'div',
	    style: { lineHeight: '160px', color: '#fff', background: '#364d79', textAlign: 'center' },
	    content: '2'
	}, {
	    type: 'div',
	    style: { lineHeight: '160px', color: '#fff', background: '#364d79', textAlign: 'center' },
	    content: '3'
	}];

	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'carousel',
	        content: content
	    }
	};

	var demo2 = {
	    title: '垂直',
	    description: '垂直显示。',
	    config: {
	        type: 'carousel',
	        vertical: true,
	        content: content
	    }
	};

	var demo3 = {
	    title: '渐显',
	    description: '切换效果为渐显。',
	    config: {
	        type: 'carousel',
	        effect: 'fade',
	        content: content
	    }
	};

	var demo4 = {
	    title: '自动切换',
	    description: '定时切换下一张。',
	    config: {
	        type: 'carousel',
	        autoplay: true,
	        content: content
	    }
	};

	var Carousel = function (_BaseDoc) {
	    _inherits(Carousel, _BaseDoc);

	    function Carousel(props) {
	        _classCallCheck(this, Carousel);

	        var _this = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

	        _this.doc = 'antd-carousel.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Carousel, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Carousel;
	}(_BaseDoc3.default);

	exports.default = Carousel;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _utils = __webpack_require__(79);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var content = [{
	    type: 'panel',
	    key: '1',
	    header: 'This is panel header 1',
	    content: 'content 1'
	}, {
	    type: 'panel',
	    key: '2',
	    header: 'This is panel header 2',
	    content: 'content 2'
	}, {
	    type: 'panel',
	    key: '3',
	    header: 'This is panel header 3',
	    content: 'content 3'
	}];

	var customPanelStyle = {
	    background: '#f7f7f7',
	    borderRadius: 4,
	    marginBottom: 24,
	    border: 0
	};

	var demo1 = {
	    title: '折叠面板',
	    description: '可以同时展开多个面板，这个例子默认展开了第一个。',
	    config: {
	        type: 'collapse',
	        activeKey: ['1'],
	        content: content
	    }
	};

	var demo2 = {
	    title: '手风琴',
	    description: '手风琴，每次只打开一个tab。默认打开第一个。',
	    config: {
	        type: 'collapse',
	        accordion: true,
	        activeKey: ['1'],
	        content: content
	    }
	};

	var demo3 = {
	    title: '简洁风格',
	    description: '一套没有边框的简洁样式。',
	    config: {
	        type: 'collapse',
	        bordered: false,
	        activeKey: ['1'],
	        content: content
	    }
	};

	var demo4 = {
	    title: '自定义面板',
	    description: '自定义各个面板的背景色、圆角和边距。',
	    config: {
	        type: 'collapse',
	        bordered: false,
	        activeKey: ['1'],
	        content: _utils.Utils.clone(content).map(function (v) {
	            v.style = customPanelStyle;return v;
	        })
	    }
	};

	var Collapse = function (_BaseDoc) {
	    _inherits(Collapse, _BaseDoc);

	    function Collapse(props) {
	        _classCallCheck(this, Collapse);

	        var _this = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));

	        _this.doc = 'antd-collapse.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Collapse, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Collapse;
	}(_BaseDoc3.default);

	exports.default = Collapse;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var body = {
	    type: 'html',
	    content: '<p>Content</p><p>Content</p><p>Content</p>'
	};

	var demo1 = {
	    title: '基本',
	    description: '最简单的用法，浮层的大小由内容区域决定。',
	    config: {
	        type: 'popover',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            mode: 'primary',
	            content: 'Hover me'
	        }
	    }
	};

	var demo2 = {
	    title: '三种触发方式',
	    description: '鼠标移入、聚集、点击。',
	    config: [{
	        type: 'popover',
	        trigger: 'hover',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Hover me'
	        }
	    }, {
	        type: 'popover',
	        trigger: 'focus',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Focus me'
	        }
	    }, {
	        type: 'popover',
	        trigger: 'click',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Click me'
	        }
	    }]
	};

	var demo3 = {
	    title: '展示位置',
	    description: '位置有十二个方向。',
	    config: [{
	        type: 'popover',
	        placement: 'left',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Left'
	        }
	    }, {
	        type: 'popover',
	        placement: 'top',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Top'
	        }
	    }, {
	        type: 'popover',
	        placement: 'bottom',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Bottom'
	        }
	    }, {
	        type: 'popover',
	        placement: 'right',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Right'
	        }
	    }]
	};

	var demo4 = {
	    title: '箭头指向',
	    description: '设置了 arrowPointAtCenter 后，箭头将指向目标元素的中心。',
	    config: [{
	        type: 'popover',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Align edge / 边缘对齐'
	        }
	    }, {
	        type: 'popover',
	        arrowPointAtCenter: true,
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            content: 'Arrow points to center / 箭头指向中心'
	        }
	    }]
	};

	var Popover = function (_BaseDoc) {
	    _inherits(Popover, _BaseDoc);

	    function Popover(props) {
	        _classCallCheck(this, Popover);

	        var _this = _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(this, props));

	        _this.doc = 'antd-popover.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Popover, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Popover;
	}(_BaseDoc3.default);

	exports.default = Popover;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'tooltip',
	        title: 'Title',
	        content: 'Tooltip will show when mouse enter.'
	    }
	};

	var demo2 = {
	    title: '位置',
	    description: '位置有 12 个方向。',
	    config: [{
	        type: 'tooltip',
	        placement: 'left',
	        title: 'Title',
	        content: ' Left '
	    }, {
	        type: 'tooltip',
	        placement: 'top',
	        title: 'Title',
	        content: ' Top '
	    }, {
	        type: 'tooltip',
	        placement: 'bottom',
	        title: 'Title',
	        content: ' Bottom '
	    }, {
	        type: 'tooltip',
	        placement: 'right',
	        title: 'Title',
	        content: ' Right '
	    }]
	};

	var Tooltip = function (_BaseDoc) {
	    _inherits(Tooltip, _BaseDoc);

	    function Tooltip(props) {
	        _classCallCheck(this, Tooltip);

	        var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

	        _this.doc = 'antd-tooltip.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tooltip, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Tooltip;
	}(_BaseDoc3.default);

	exports.default = Tooltip;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _utils = __webpack_require__(79);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var content = [{
	    type: 'tab-pane',
	    key: '1',
	    tab: 'Tab 1',
	    content: 'Content of Tab Pane 1'
	}, {
	    type: 'tab-pane',
	    key: '2',
	    tab: 'Tab 2',
	    content: 'Content of Tab Pane 2'
	}, {
	    type: 'tab-pane',
	    key: '3',
	    tab: 'Tab 3',
	    content: 'Content of Tab Pane 3'
	}];

	var demo1 = {
	    title: '基本',
	    description: '默认选中第一项。',
	    config: {
	        type: 'tabs',
	        activeKey: '1',
	        content: content
	    }
	};

	var demo2 = {
	    title: '图标',
	    description: '有图标的标签。',
	    config: {
	        type: 'tabs',
	        activeKey: '1',
	        content: [{
	            type: 'tab-pane',
	            key: '1',
	            tab: {
	                type: 'span',
	                content: [{ type: 'icon', mode: 'apple' }, 'Tab 1']
	            },
	            content: 'Content of Tab Pane 1'
	        }]
	    }
	};

	var demo3 = {
	    title: '迷你型',
	    description: '用在弹出框等较狭窄的容器内。',
	    config: {
	        type: 'tabs',
	        activeKey: '1',
	        size: 'small',
	        content: content
	    }
	};

	var demo4 = {
	    title: '位置',
	    description: '有四个位置，tabPosition="left|right|top|bottom"。',
	    config: [{
	        type: 'div',
	        content: ['Tab position: ', {
	            type: 'select',
	            value: 'top',
	            options: ['top', 'bottom', 'left', 'right'],
	            onChange: function onChange(v) {
	                return (0, _tools2.default)('my-tabs').set({ tabPosition: v });
	            }
	        }]
	    }, {
	        type: 'tabs',
	        name: 'my-tabs',
	        tabPosition: 'top',
	        style: { marginTop: 16 },
	        activeKey: '1',
	        size: 'small',
	        content: content
	    }]
	};

	var demo5 = {
	    title: '卡片式页签',
	    description: '另一种样式的页签，不提供对应的垂直样式。',
	    config: {
	        type: 'tabs',
	        mode: 'card',
	        activeKey: '1',
	        content: content
	    }
	};

	var Tabs = function (_BaseDoc) {
	    _inherits(Tabs, _BaseDoc);

	    function Tabs(props) {
	        _classCallCheck(this, Tabs);

	        var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));

	        _this.doc = 'antd-tabs.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tabs, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Tabs;
	}(_BaseDoc3.default);

	exports.default = Tabs;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 标签
	


	var demo1 = {
	    title: '基本用法',
	    description: '基本标签的用法，可以通过添加 closable 变为可关闭标签。可关闭标签具有 onClose afterClose 两个事件。',
	    config: [{
	        type: 'tag',
	        content: 'Tag 1',
	        style: {
	            margin: '8px'
	        }
	    }, {
	        type: 'tag',
	        content: {
	            type: 'a',
	            content: 'Link',
	            href: 'http://www.baidu.com/'
	        },
	        style: {
	            margin: '8px'
	        }
	    }, {
	        type: 'tag',
	        content: 'Tag 2',
	        closable: true,
	        onClose: function onClose(e) {
	            console.log(e);
	        },
	        style: {
	            margin: '8px'
	        }
	    }, {
	        type: 'tag',
	        content: 'Prevent Default',
	        closable: true,
	        onClose: function onClose(e) {
	            e.preventDefault();
	            console.log('Clicked! But prevent default.');
	        },
	        style: {
	            margin: '8px'
	        }
	    }]
	};

	var demo2 = {
	    title: '多彩标签',
	    description: '我们添加了多种预设色彩的标签样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。',
	    config: [{
	        type: 'div',
	        content: [{
	            type: 'tag',
	            content: 'pink',
	            color: 'pink',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'red',
	            color: 'red',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'orange',
	            color: 'orange',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'green',
	            color: 'green',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'cyan',
	            color: 'cyan',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'blue',
	            color: 'blue',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'purple',
	            color: 'purple',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: '#f50',
	            color: '#f50',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: '#2db7f5',
	            color: '#2db7f5',
	            style: {
	                margin: '8px'
	            }
	        }]
	    }]
	};

	var demo3 = {
	    title: '可选择',
	    description: '可通过checkable-tag实现类似checkbox的效果，点击切换选中效果',
	    config: [{
	        type: 'checkable-tag',
	        content: 'tag1',
	        checked: true,
	        name: 'myTag',
	        onChange: function onChange(checked) {
	            console.log(checked);
	            (0, _tools2.default)('myTag').set({
	                checked: checked
	            });
	        }
	    }]
	};

	var Tag = function (_BaseDoc) {
	    _inherits(Tag, _BaseDoc);

	    function Tag(props) {
	        _classCallCheck(this, Tag);

	        var _this = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));

	        _this.doc = 'antd-tag.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tag, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Tag;
	}(_BaseDoc3.default);

	exports.default = Tag;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 时间轴
	


	var demo1 = {
	    title: '常见用法',
	    description: '常用的时间轴用法',
	    config: {
	        type: 'timeline',
	        pending: {
	            type: 'p',
	            content: '至今'
	        },
	        content: [{
	            type: 'timeline-item',
	            content: '出生：1992'
	        }, {
	            type: 'timeline-item',
	            content: '小学：1997',
	            color: 'green'
	        }, {
	            type: 'timeline-item',
	            content: '中学：2005',
	            color: 'red'
	        }, {
	            type: 'timeline-item',
	            content: [{
	                type: 'p',
	                content: '大学：2011'
	            }, {
	                type: 'p',
	                content: '大一'
	            }, {
	                type: 'p',
	                content: '大二'
	            }, {
	                type: 'p',
	                content: '大三'
	            }, {
	                type: 'p',
	                content: '大四'
	            }],
	            color: '#8085e9'
	        }, {
	            type: 'timeline-item',
	            dot: {
	                type: 'icon',
	                mode: 'heart-o'
	            },
	            content: '研究生：2015'
	        }]
	    }
	};

	var Timeline = function (_BaseDoc) {
	    _inherits(Timeline, _BaseDoc);

	    function Timeline(props) {
	        _classCallCheck(this, Timeline);

	        var _this = _possibleConstructorReturn(this, (Timeline.__proto__ || Object.getPrototypeOf(Timeline)).call(this, props));

	        _this.doc = 'antd-timeline.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Timeline, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1);
	        }
	    }]);

	    return Timeline;
	}(_BaseDoc3.default);

	exports.default = Timeline;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本四种样式',
	    description: '最简单的用法，适用于简短的警告提示。',
	    config: [{
	        type: 'alert',
	        mode: 'success',
	        message: 'Success Text'
	    }, {
	        type: 'alert',
	        mode: 'info',
	        message: 'Info Text'
	    }, {
	        type: 'alert',
	        mode: 'warning',
	        message: 'Warning Text'
	    }, {
	        type: 'alert',
	        mode: 'error',
	        message: 'Error Text'
	    }]
	};

	var demo2 = {
	    title: '可关闭的警告提示',
	    description: '显示关闭按钮，点击可关闭警告提示。',
	    config: [{
	        type: 'alert',
	        mode: 'success',
	        description: 'Warning Text Warning Text Warning TextW arning Text Warning Text Warning TextWarning Text',
	        closable: true
	    }, {
	        type: 'alert',
	        mode: 'error',
	        description: 'Error Description Error Description Error Description Error Description Error Description Error Description',
	        message: 'Error Text',
	        closable: true
	    }]
	};

	var demo3 = {
	    title: '图标',
	    description: '可口的图标让信息类型更加醒目。',
	    config: [{
	        type: 'alert',
	        mode: 'success',
	        message: 'Success Tips',
	        showIcon: true
	    }, {
	        type: 'alert',
	        mode: 'info',
	        message: 'Informational Notes',
	        showIcon: true
	    }, {
	        type: 'alert',
	        mode: 'warning',
	        message: 'Warning',
	        description: 'This is a warning notice about copywriting.',
	        showIcon: true
	    }, {
	        type: 'alert',
	        mode: 'error',
	        message: 'Error',
	        description: 'This is an error message about copywriting.',
	        showIcon: true
	    }]
	};

	var demo4 = {
	    title: '自定义关闭',
	    description: '可以自定义关闭，自定义的文字会替换原先的关闭 Icon.',
	    config: {
	        type: 'alert',
	        mode: 'info',
	        message: 'Info Text',
	        closeText: 'Close Now'
	    }
	};

	var Alert = function (_BaseDoc) {
	    _inherits(Alert, _BaseDoc);

	    function Alert(props) {
	        _classCallCheck(this, Alert);

	        var _this = _possibleConstructorReturn(this, (Alert.__proto__ || Object.getPrototypeOf(Alert)).call(this, props));

	        _this.doc = 'antd-alert.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Alert, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Alert;
	}(_BaseDoc3.default);

	exports.default = Alert;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '各种提示类型',
	    description: '包括成功、失败、警告、信息。',
	    config: [{
	        type: 'button',
	        content: 'Success',
	        onClick: function onClick(v) {
	            return _tools2.default.message.success('Success message.');
	        }
	    }, {
	        type: 'button',
	        content: 'Info',
	        onClick: function onClick(v) {
	            return _tools2.default.message.info('Info message.');
	        }
	    }, {
	        type: 'button',
	        content: 'Warning',
	        onClick: function onClick(v) {
	            return _tools2.default.message.warning('Warning message.');
	        }
	    }, {
	        type: 'button',
	        content: 'Error',
	        onClick: function onClick(v) {
	            return _tools2.default.message.error('Error message.');
	        }
	    }]
	};

	var demo2 = {
	    title: '加载中',
	    description: '进行全局 loading，异步自行移除。例如操作执行完成后，执行`message`返回的句柄，即可销毁loading提示',
	    config: [{
	        type: 'button',
	        content: 'Display a loading indicator',
	        onClick: function onClick(v) {
	            var hide = _tools2.default.message.loading('Success message.', 0);
	            setTimeout(hide, 3000);
	        }
	    }]
	};

	var Message = function (_BaseDoc) {
	    _inherits(Message, _BaseDoc);

	    function Message(props) {
	        _classCallCheck(this, Message);

	        var _this = _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).call(this, props));

	        _this.doc = 'antd-message.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Message, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Message;
	}(_BaseDoc3.default);

	exports.default = Message;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法，4.5 秒后自动关闭。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Open the notification box',
	        onClick: function onClick(v) {
	            _tools2.default.notification.open({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }]
	};

	var demo2 = {
	    title: '取消关闭的延时',
	    description: '自定义通知框自动关闭的延时，默认4.5s，取消自动关闭只要将该值设为 0 即可。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Open the notification box',
	        onClick: function onClick(v) {
	            _tools2.default.notification.open({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
	                duration: 0
	            });
	        }
	    }]
	};

	var demo3 = {
	    title: '带有图标的通知提醒框',
	    description: '通知提醒框左侧有图标。',
	    config: [{
	        type: 'button',
	        content: 'Success',
	        onClick: function onClick(v) {
	            _tools2.default.notification.success({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Info',
	        onClick: function onClick(v) {
	            _tools2.default.notification.info({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Warning',
	        onClick: function onClick(v) {
	            _tools2.default.notification.warning({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Error',
	        onClick: function onClick(v) {
	            _tools2.default.notification.error({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }]
	};

	var demo4 = {
	    title: '自定义按钮',
	    description: '自定义关闭按钮的样式和文字。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Open the notification box',
	        onClick: function onClick(v) {
	            _tools2.default.notification.open({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
	                duration: 0,
	                key: 'my-infomation',
	                btn: {
	                    type: 'button',
	                    mode: 'primary',
	                    size: 'small',
	                    content: 'Confirm',
	                    onClick: function onClick(v) {
	                        return _tools2.default.notification.close('my-infomation');
	                    }
	                }
	            });
	        }
	    }]
	};

	var Notification = function (_BaseDoc) {
	    _inherits(Notification, _BaseDoc);

	    function Notification(props) {
	        _classCallCheck(this, Notification);

	        var _this = _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this, props));

	        _this.doc = 'antd-notification.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Notification, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Notification;
	}(_BaseDoc3.default);

	exports.default = Notification;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '进度条',
	    description: '标准的进度条。',
	    config: [{
	        type: 'progress',
	        percent: 30
	    }, {
	        type: 'progress',
	        percent: 50,
	        status: 'active'
	    }, {
	        type: 'progress',
	        percent: 70,
	        status: 'exception'
	    }, {
	        type: 'progress',
	        percent: 100
	    }, {
	        type: 'progress',
	        percent: 50,
	        showInfo: false
	    }]
	};

	var demo2 = {
	    title: '进度圈',
	    description: '圈形的进度。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        percent: 75
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        percent: 100
	    }]
	};

	var demo3 = {
	    title: '小型进度条',
	    description: '适合放在较狭窄的区域内。',
	    config: [{
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 30
	    }, {
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 50,
	        status: 'active'
	    }, {
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 70,
	        status: 'exception'
	    }, {
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 100
	    }]
	};

	var demo4 = {
	    title: '小型进度圈',
	    description: '小一号的圈形进度。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 30
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 50,
	        status: 'active'
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 70,
	        status: 'exception'
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 100
	    }]
	};

	var demo5 = {
	    title: '进度圈动态展示',
	    description: '会动的进度条才是好进度条。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        name: 'my-progress',
	        percent: 50
	    }, {
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            icon: 'minus',
	            onClick: function onClick(v) {
	                var progress = (0, _tools2.default)('my-progress');
	                var current = progress.get('percent');
	                progress.set({
	                    percent: current - 10
	                });
	            }
	        }]
	    }]
	};

	var demo6 = {
	    title: '动态展示进度条',
	    description: '会动的进度条才是好进度条。',
	    config: [{
	        type: 'progress',
	        name: 'my-progress2',
	        percent: 10
	    }, {
	        type: 'button-group',
	        style: { marginTop: 10 },
	        content: [{
	            type: 'button',
	            icon: 'minus',
	            onClick: function onClick(v) {
	                var progress = (0, _tools2.default)('my-progress2');
	                var current = progress.get('percent');
	                progress.set({
	                    percent: current - 10
	                });
	            }
	        }, {
	            type: 'button',
	            icon: 'plus',
	            onClick: function onClick(v) {
	                var progress = (0, _tools2.default)('my-progress2');
	                var current = progress.get('percent');
	                progress.set({
	                    percent: current + 10
	                });
	            }
	        }]
	    }]
	};

	var demo7 = {
	    title: '自定义文字格式',
	    description: '`format` 属性指定格式。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        percent: 75,
	        format: function format(v) {
	            return v + ' Days';
	        }
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        percent: 100,
	        format: function format(v) {
	            return 'Done';
	        }
	    }]
	};

	var demo8 = {
	    title: '仪表盘',
	    description: '通过设置 `mode=dashboard`，可以很方便地实现仪表盘样式的进度条。',
	    config: [{
	        type: 'progress',
	        mode: 'dashboard',
	        percent: 75
	    }]
	};

	var Progress = function (_BaseDoc) {
	    _inherits(Progress, _BaseDoc);

	    function Progress(props) {
	        _classCallCheck(this, Progress);

	        var _this = _possibleConstructorReturn(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).call(this, props));

	        _this.doc = 'antd-progress.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Progress, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6, demo7, demo8);
	        }
	    }]);

	    return Progress;
	}(_BaseDoc3.default);

	exports.default = Progress;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: [{
	        type: 'popconfirm',
	        title: 'Are you sure delete this task?',
	        okText: 'Yes',
	        cancelText: 'No',
	        content: {
	            type: 'html',
	            content: '<a href="#">Delete</a>'
	        },
	        onConfirm: function onConfirm(v) {
	            return console.log('confirm');
	        },
	        onCancel: function onCancel(v) {
	            return console.log('cancel');
	        }
	    }]
	};

	var demo2 = {
	    title: '展示位置',
	    description: '位置有十二个方向。如需箭头指向目标元素中心，可以设置 arrowPointAtCenter。',
	    config: [{
	        type: 'popconfirm',
	        placement: 'left',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Left'
	        }
	    }, {
	        type: 'popconfirm',
	        placement: 'top',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Top'
	        }
	    }, {
	        type: 'popconfirm',
	        placement: 'bottom',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Bottom'
	        }
	    }, {
	        type: 'popconfirm',
	        placement: 'right',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Right'
	        }
	    }]
	};

	var Popconfirm = function (_BaseDoc) {
	    _inherits(Popconfirm, _BaseDoc);

	    function Popconfirm(props) {
	        _classCallCheck(this, Popconfirm);

	        var _this = _possibleConstructorReturn(this, (Popconfirm.__proto__ || Object.getPrototypeOf(Popconfirm)).call(this, props));

	        _this.doc = 'antd-popconfirm.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Popconfirm, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Popconfirm;
	}(_BaseDoc3.default);

	exports.default = Popconfirm;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tools = __webpack_require__(73);

	var _tools2 = _interopRequireDefault(_tools);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '各种大小',
	    description: '小的用于文本加载，默认用于卡片容器级加载，大的用于页面级加载。',
	    config: [{
	        type: 'loading',
	        size: 'small',
	        style: { marginRight: 16 },
	        loading: true
	    }, {
	        type: 'loading',
	        style: { marginRight: 16 },
	        loading: true
	    }, {
	        type: 'loading',
	        size: 'large',
	        loading: true
	    }]
	};

	var demo2 = {
	    title: '卡片加载中',
	    description: '可以直接把内容内嵌到 Loading 中，将现有容器变为加载状态。',
	    config: [{
	        type: 'loading',
	        name: 'my-loading',
	        loading: true,
	        content: {
	            type: 'alert',
	            mode: 'info',
	            description: 'Further details about the context of this alert.'
	        }
	    }, {
	        type: 'div',
	        style: { marginTop: 10 },
	        content: ['Loading state: ', {
	            type: 'switch',
	            checked: true,
	            onChange: function onChange(v) {
	                return (0, _tools2.default)('my-loading').loading(v);
	            }
	        }]
	    }]
	};

	var demo3 = {
	    title: '自定义描述文案',
	    description: '自定义描述文案。',
	    config: [{
	        type: 'loading',
	        loading: true,
	        tip: 'Loading...',
	        content: {
	            type: 'alert',
	            mode: 'info',
	            message: 'Alert message title',
	            description: 'Further details about the context of this alert.'
	        }
	    }]
	};

	var demo4 = {
	    title: '延迟',
	    description: '延迟显示 loading 效果。当 loading 状态在 delay 时间内结束，则不显示 loading 状态。',
	    config: [{
	        type: 'loading',
	        name: 'my-loading2',
	        delay: 500,
	        content: {
	            type: 'alert',
	            mode: 'info',
	            description: 'Further details about the context of this alert.'
	        }
	    }, {
	        type: 'div',
	        style: { marginTop: 10 },
	        content: ['Loading state: ', {
	            type: 'switch',
	            onChange: function onChange(v) {
	                return (0, _tools2.default)('my-loading2').set({ loading: v });
	            }
	        }]
	    }]
	};

	var Loading = function (_BaseDoc) {
	    _inherits(Loading, _BaseDoc);

	    function Loading(props) {
	        _classCallCheck(this, Loading);

	        var _this = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, props));

	        _this.doc = 'antd-loading.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Loading, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Loading;
	}(_BaseDoc3.default);

	exports.default = Loading;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: ['见右下角 `灰色` 按钮', {
	        type: 'backtop'
	    }]
	};

	var demo2 = {
	    title: '自定义样式',
	    description: '可以自定义回到顶部按钮的样式，限制宽高：40px * 40px。',
	    config: ['见右下角 `蓝色` 按钮', {
	        type: 'backtop',
	        content: {
	            type: 'span',
	            content: 'UP',
	            style: { display: 'block', height: '40px', width: '40px', lineHeight: '40px', borderRadius: '4px', backgroundColor: '#1088e9', color: '#fff', textAlign: 'center', fontSize: '20px', marginTop: '-50px' }
	        }
	    }]
	};

	var BackTop = function (_BaseDoc) {
	    _inherits(BackTop, _BaseDoc);

	    function BackTop(props) {
	        _classCallCheck(this, BackTop);

	        var _this = _possibleConstructorReturn(this, (BackTop.__proto__ || Object.getPrototypeOf(BackTop)).call(this, props));

	        _this.doc = 'antd-backtop.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(BackTop, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return BackTop;
	}(_BaseDoc3.default);

	exports.default = BackTop;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 开发规范
	


	var StandardApp = function (_BaseDoc) {
	    _inherits(StandardApp, _BaseDoc);

	    function StandardApp(props) {
	        _classCallCheck(this, StandardApp);

	        var _this = _possibleConstructorReturn(this, (StandardApp.__proto__ || Object.getPrototypeOf(StandardApp)).call(this, props));

	        _this.doc = 'standard.md';
	        _this.__init();
	        return _this;
	    }

	    return StandardApp;
	}(_BaseDoc3.default);

	exports.default = StandardApp;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(13);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var StandardApp = function (_BaseDoc) {
	    _inherits(StandardApp, _BaseDoc);

	    function StandardApp(props) {
	        _classCallCheck(this, StandardApp);

	        var _this = _possibleConstructorReturn(this, (StandardApp.__proto__ || Object.getPrototypeOf(StandardApp)).call(this, props));

	        _this.doc = 'third-party.md';
	        _this.__init();
	        return _this;
	    }

	    return StandardApp;
	}(_BaseDoc3.default);

	exports.default = StandardApp;

/***/ })
/******/ ]);