/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _app = __webpack_require__(109);

	var _app2 = _interopRequireDefault(_app);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_reactDom2.default.render(_react2.default.createElement(_app2.default, { demo: true }), document.getElementById('container')); /**
	                                                                                                                                * @file 使用文档入口文件
	                                                                                                                                *
	                                                                                                                                * Author: liuzechun (liuzechun@baidu.com)
	                                                                                                                                * Created: 2019-01-10 22:18:40
	                                                                                                                                */

/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ (function(module, exports) {

	module.exports = window.DLL.React;

/***/ }),
/* 108 */
/***/ (function(module, exports) {

	module.exports = window.DLL.ReactDOM;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.MobileComponent = exports.ComponentList = exports.DocsList = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(110);

	var _antd = __webpack_require__(111);

	var _index = __webpack_require__(112);

	var _index2 = _interopRequireDefault(_index);

	var _Header = __webpack_require__(301);

	var _Header2 = _interopRequireDefault(_Header);

	var _Nav = __webpack_require__(302);

	var _Nav2 = _interopRequireDefault(_Nav);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 使用文档入口文件
	


	__webpack_require__(303);
	__webpack_require__(307);

	// 通用文档
	var DocsList = exports.DocsList = [{ path: 'Guide', name: '写在最前面', component: __webpack_require__(309).default }, { path: 'Introduction', name: '功能介绍', component: __webpack_require__(310).default }, { path: 'UpdateLog', name: '更新日志', component: __webpack_require__(311).default }, { path: 'Usage', name: '入门', children: [{ path: 'Install', name: '开始使用', component: __webpack_require__(312).default }, { path: 'Join', name: '组件嵌套', component: __webpack_require__(313).default }, { path: 'Call', name: '组件交互', component: __webpack_require__(314).default }, { path: 'Layout', name: '页面布局', component: __webpack_require__(315).default }, { path: 'Page', name: '一个例子', component: __webpack_require__(316).default }] }, { path: 'Develop', name: '进阶', children: [{ path: 'Install', name: '路由&模块', component: __webpack_require__(317).default }, { path: 'Config', name: '全局配置', component: __webpack_require__(318).default }, { path: 'Modules', name: '模块开发', component: __webpack_require__(319).default }, { path: 'Build', name: '另一种模式', component: __webpack_require__(320).default }] }, { path: 'Api', name: '交互API', component: __webpack_require__(321).default }, { path: 'Params', name: '通用参数', component: __webpack_require__(322).default }, { path: 'Lifecycle', name: '生命周期', component: __webpack_require__(323).default }, { path: 'Load', name: '特殊组件', component: __webpack_require__(324).default }, { path: 'Others', name: '更多用法', component: __webpack_require__(325).default }];

	// 组件文档列表
	var ComponentList = exports.ComponentList = [{ path: 'Custom', name: '定制组件', children: [{ path: 'Export', name: 'Export 导出', component: __webpack_require__(326).default }, { path: 'Form', name: 'Form 表单', component: __webpack_require__(328).default }, { path: 'Forms', name: 'Forms 复制新增表单', component: __webpack_require__(330).default }, { path: 'Modal', name: 'Modal 弹框', component: __webpack_require__(332).default }, { path: 'Table', name: 'Table 表格', component: __webpack_require__(334).default }, { path: 'TableCrud', name: 'Table Crud 表格扩展', component: __webpack_require__(336).default }, { path: 'Tree', name: 'Tree 树形控件', component: __webpack_require__(338).default }, { path: 'Ueditor', name: 'Ueditor 富文本', component: __webpack_require__(340).default }, { path: 'Echarts', name: 'Echarts 图表', component: __webpack_require__(342).default }, { path: 'List', name: 'List 列表', component: __webpack_require__(344).default }] }, { path: 'General', name: '综合组件', children: [{ path: 'Button', name: 'Button 按钮', component: __webpack_require__(231).default }, { path: 'Icon', name: 'Icon 图标', component: __webpack_require__(346).default }, { path: 'IconPlus', name: 'IconPlus 扩展图标', component: __webpack_require__(347).default }, { path: 'Grid', name: 'Grid 栅格', component: __webpack_require__(348).default }, { path: 'Layout', name: 'Layout 布局', component: __webpack_require__(349).default }, { path: 'Router', name: 'Router 路由', component: __webpack_require__(350).default }] }, { path: 'Navigation', name: '导航', children: [{ path: 'Affix', name: 'Affix 固钉', component: __webpack_require__(352).default }, { path: 'Breadcrumb', name: 'Breadcrumb 面包屑', component: __webpack_require__(353).default }, { path: 'Dropdown', name: 'Dropdown 下拉菜单', component: __webpack_require__(354).default }, { path: 'Menu', name: 'Menu 导航菜单', component: __webpack_require__(355).default }, { path: 'Pagination', name: 'Pagination 分页', component: __webpack_require__(356).default }, { path: 'Steps', name: 'Steps 步骤条', component: __webpack_require__(357).default }] }, { path: 'DataEntry', name: '数据录入', children: [{ path: 'AutoComplete', name: 'AutoComplete 自动完成', component: __webpack_require__(358).default }, { path: 'Cascader', name: 'Cascader 级联选择', component: __webpack_require__(360).default }, { path: 'Checkbox', name: 'Checkbox 多选框', component: __webpack_require__(361).default }, { path: 'DatePicker', name: 'DatePicker 日期选择框', component: __webpack_require__(362).default }, { path: 'InputNumber', name: 'InputNumber 数字输入框', component: __webpack_require__(363).default }, { path: 'Input', name: 'Input 输入框', component: __webpack_require__(364).default }, { path: 'Radio', name: 'Radio 单选框', component: __webpack_require__(365).default }, { path: 'Rate', name: 'Rate 评分', component: __webpack_require__(366).default }, { path: 'Select', name: 'Select 选择器', component: __webpack_require__(367).default }, { path: 'TreeSelect', name: 'TreeSelect 树选择', component: __webpack_require__(368).default }, { path: 'Switch', name: 'Switch 开关', component: __webpack_require__(369).default }, { path: 'Upload', name: 'Upload 上传', component: __webpack_require__(370).default }] }, { path: 'DataDisplay', name: '数据展示', children: [{ path: 'Avatar', name: 'Avatar 头像', component: __webpack_require__(371).default }, { path: 'Badge', name: 'Badge 徽标数', component: __webpack_require__(372).default },
	    // {path: 'Calendar', name: 'Calendar 日历', component: require('src/antd/docs/antd-calendar').default},
	    { path: 'Card', name: 'Card 卡片', component: __webpack_require__(373).default }, { path: 'Carousel', name: 'Carousel 走马灯', component: __webpack_require__(374).default }, { path: 'Collapse', name: 'Collapse 折叠面板', component: __webpack_require__(375).default }, { path: 'Popover', name: 'Popover 气泡卡片', component: __webpack_require__(376).default }, { path: 'Tooltip', name: 'Tooltip 文字提示', component: __webpack_require__(377).default }, { path: 'Tabs', name: 'Tabs 标签页', component: __webpack_require__(378).default }, { path: 'Tag', name: 'Tag 标签', component: __webpack_require__(379).default }, { paht: 'Timeline', name: 'Timeline 时间轴', component: __webpack_require__(380).default }] }, { path: 'Feedback', name: '反馈', children: [{ path: 'Alert', name: 'Alert 警告提示', component: __webpack_require__(381).default }, { path: 'Message', name: 'Message 全局提示', component: __webpack_require__(382).default }, { path: 'Notification', name: 'Notification 通知提醒框', component: __webpack_require__(383).default }, { path: 'Progress', name: 'Progress 进度条', component: __webpack_require__(384).default }, { path: 'Popconfirm', name: 'Popconfirm 气泡确认框', component: __webpack_require__(385).default }, { path: 'Loading', name: 'Loading 加载中', component: __webpack_require__(386).default }] }, { path: 'Other', name: '其他组件', children: [{ path: 'Backtop', name: 'Backtop 回到顶部', component: __webpack_require__(387).default }, { path: 'Anchor', name: 'Anchor 锚点', component: __webpack_require__(388).default }, { path: 'Iframe', name: 'Iframe 子页面', component: __webpack_require__(389).default }, { path: 'Fieldset', name: 'Fieldset 文字块', component: __webpack_require__(391).default }] }];

	// 组件文档列表
	var MobileComponent = exports.MobileComponent = [{ path: 'Mobile/Guide', name: '写在最前面', component: __webpack_require__(393).default }, { path: 'Mobile/Global', name: '综合组件', children: [{ path: 'Button', name: 'Button 按钮', component: __webpack_require__(394).default }, { path: 'Flex', name: 'Flex 布局', component: __webpack_require__(396).default }, { path: 'Grid', name: 'Grid 宫格', component: __webpack_require__(398).default }, { path: 'Icon', name: 'Icon 图标', component: __webpack_require__(400).default }, { path: 'IconPlus', name: 'IconPlus 扩展图标', component: __webpack_require__(347).default }, { path: 'Router', name: 'Router 路由', component: __webpack_require__(402).default }, { path: 'WhiteSpace', name: 'WhiteSpace 上下留白', component: __webpack_require__(403).default }, { path: 'WingBlank', name: 'WingBlank 两翼留白', component: __webpack_require__(405).default }] }, { path: 'Mobile/Navigation', name: '导航', children: [{ path: 'Steps', name: 'Steps 步骤条', component: __webpack_require__(407).default }, { path: 'Drawer', name: 'Drawer 抽屉', component: __webpack_require__(409).default }, { path: 'Menu', name: 'Menu 菜单', component: __webpack_require__(411).default }, { path: 'NavBar', name: 'NavBar 导航栏', component: __webpack_require__(413).default }, { path: 'Pagination', name: 'Pagination 分页器', component: __webpack_require__(415).default }, { path: 'Tabs', name: 'Tabs 标签页', component: __webpack_require__(417).default }, { path: 'TabBar', name: 'TabBar 标签栏', component: __webpack_require__(419).default }] }, { path: 'Mobile/DataEntry', name: '数据录入', children: [{ path: 'Checkbox', name: 'Checkbox 复选框', component: __webpack_require__(421).default }, { path: 'Input', name: 'Input 输入框', component: __webpack_require__(423).default }, { path: 'Select', name: 'Select 选择器', component: __webpack_require__(425).default }, { path: 'Calendar', name: 'Calendar 日历选择', component: __webpack_require__(427).default }, { path: 'Radio', name: 'Radio 单选', component: __webpack_require__(429).default }, { path: 'DatePicker', name: 'DatePicker 日期选择器', component: __webpack_require__(431).default }, { path: 'Slider', name: 'Slider 滑动输入条', component: __webpack_require__(433).default }, { path: 'Textarea', name: 'Textarea 多行输入', component: __webpack_require__(435).default }, { path: 'ImagePicker', name: 'ImagePicker 图片选择', component: __webpack_require__(437).default }, { path: 'Switch', name: 'Switch 滑动开关', component: __webpack_require__(439).default }, { path: 'Stepper', name: 'Stepper 步进器', component: __webpack_require__(441).default }, { path: 'SearchBar', name: 'SearchBar 搜索栏', component: __webpack_require__(443).default }] }, { path: 'Mobile/DataDisplay', name: '数据展示', children: [{ path: 'Collapse', name: 'Collapse 手风琴', component: __webpack_require__(445).default }, { path: 'Badge', name: 'Badge 徽标数', component: __webpack_require__(447).default }, { path: 'Carousel', name: 'Carousel 走马灯', component: __webpack_require__(449).default }, { path: 'Card', name: 'Card 卡片', component: __webpack_require__(451).default }, { path: 'List', name: 'List 列表', component: __webpack_require__(453).default }, { path: 'Popover', name: 'Popover 气泡', component: __webpack_require__(455).default }, { path: 'NoticeBar', name: 'NoticeBar 通告栏', component: __webpack_require__(457).default }, { path: 'Tag', name: 'Tag 标签', component: __webpack_require__(459).default }, { path: 'Result', name: 'Result 结果页', component: __webpack_require__(461).default }] }, { path: 'Mobile/Feedback', name: '反馈', children: [{ path: 'Modal', name: 'Modal 对话框', component: __webpack_require__(463).default }, { path: 'ActionSheet', name: 'ActionSheet 动作面板', component: __webpack_require__(465).default }, { path: 'Progress', name: 'Progress 进度条', component: __webpack_require__(467).default }, { path: 'Loading', name: 'Loading 加载中', component: __webpack_require__(469).default }, { path: 'Message', name: 'Message 提示', component: __webpack_require__(471).default }] }, { path: 'Mobile/Other', name: '其他组件', children: [{ path: 'PullRefresh', name: 'PullRefresh 拉动刷新', component: __webpack_require__(473).default }, { path: 'SwipeAction', name: 'SwipeAction 滑动操作', component: __webpack_require__(475).default }] }];

	// 全部路由列表
	var RouteList = [{ path: 'Index', name: '首页', component: __webpack_require__(477).default }, { path: 'Standard', name: '规范', component: __webpack_require__(478).default }, { path: 'ThirdParty', name: '第三方组件', component: __webpack_require__(479).default }].concat(DocsList, ComponentList, MobileComponent);

	var App = function (_React$Component) {
	    _inherits(App, _React$Component);

	    function App() {
	        _classCallCheck(this, App);

	        return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
	    }

	    _createClass(App, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 代码高亮
	            Prism && Prism.highlightAll();
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            Prism && Prism.highlightAll();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var currentHeader = this.props.routes[1] ? this.props.routes[1].path : '';
	            var currentNav = this.props.location.pathname.slice(1);
	            // let Test = ({text, children})=><div><p>{text}</p><p>{children}</p></div>;
	            var isComponent = ComponentList.map(function (v) {
	                return v.path;
	            }).indexOf(currentNav.split('/')[0]) > -1;
	            var isDocs = DocsList.map(function (v) {
	                return v.path;
	            }).indexOf(currentNav.split('/')[0]) > -1;
	            var isMobile = 'Mobile' === currentNav.split('/')[0];
	            var navList = [];
	            if (isComponent) {
	                navList = ComponentList;
	            } else if (isDocs) {
	                navList = DocsList;
	            } else if (isMobile) {
	                navList = MobileComponent;
	            }
	            return _react2.default.createElement(
	                'section',
	                null,
	                _react2.default.createElement(_Header2.default, { current: currentHeader, isComponent: isComponent, isDocs: isDocs }),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'main' },
	                    !(isComponent || isDocs || isMobile) ? this.props.children : _react2.default.createElement(
	                        _antd.Row,
	                        null,
	                        _react2.default.createElement(
	                            _antd.Col,
	                            { xs: 6, sm: 6, md: 6, lg: 4, xl: 4 },
	                            _react2.default.createElement(_Nav2.default, { current: currentNav, navList: navList })
	                        ),
	                        _react2.default.createElement(
	                            _antd.Col,
	                            { xs: 18, sm: 18, md: 18, lg: 20, xl: 20 },
	                            this.props.children
	                        )
	                    )
	                ),
	                _react2.default.createElement(_index2.default, null),
	                _react2.default.createElement(_antd.BackTop, null)
	            );
	        }
	    }]);

	    return App;
	}(_react2.default.Component);
	// demo入口


	var DemoApp = function (_React$Component2) {
	    _inherits(DemoApp, _React$Component2);

	    function DemoApp() {
	        _classCallCheck(this, DemoApp);

	        return _possibleConstructorReturn(this, (DemoApp.__proto__ || Object.getPrototypeOf(DemoApp)).apply(this, arguments));
	    }

	    _createClass(DemoApp, [{
	        key: 'render',
	        value: function render() {
	            return this.props.children;
	        }
	    }]);

	    return DemoApp;
	}(_react2.default.Component);

	var Routes = function (_React$Component3) {
	    _inherits(Routes, _React$Component3);

	    function Routes(props) {
	        _classCallCheck(this, Routes);

	        return _possibleConstructorReturn(this, (Routes.__proto__ || Object.getPrototypeOf(Routes)).call(this, props));
	    }

	    _createClass(Routes, [{
	        key: 'render',
	        value: function render() {
	            var isDemo = this.props.demo;
	            return _react2.default.createElement(
	                _reactRouter.Router,
	                { history: _reactRouter.hashHistory },
	                _react2.default.createElement(
	                    _reactRouter.Route,
	                    { path: '/', component: isDemo ? DemoApp : App },
	                    _react2.default.createElement(_reactRouter.IndexRedirect, { to: 'Index' }),
	                    RouteList.map(function (first) {
	                        return !first.children ? _react2.default.createElement(_reactRouter.Route, { key: first.name, name: first.name,
	                            path: first.path + '(/:pos)', component: first.component,
	                            isDemo: isDemo }) : first.children.map(function (second) {
	                            return _react2.default.createElement(_reactRouter.Route, { key: second.name, name: second.name, isDemo: isDemo,
	                                path: first.path + '/' + second.path + '(/:pos)', component: second.component });
	                        }).concat(_react2.default.createElement(_reactRouter.Redirect, { path: first.path, to: first.path + '/' + first.children[0].path }));
	                    }),
	                    _react2.default.createElement(_reactRouter.Redirect, { path: 'Docs', to: DocsList[0].path }),
	                    _react2.default.createElement(_reactRouter.Redirect, { path: 'Component', to: ComponentList[0].path }),
	                    _react2.default.createElement(_reactRouter.Redirect, { path: 'Mobile', to: MobileComponent[0].path }),
	                    _react2.default.createElement(_reactRouter.Route, { path: '*', component: null })
	                )
	            );
	        }
	    }]);

	    return Routes;
	}(_react2.default.Component);

	exports.default = Routes;

/***/ }),
/* 110 */
/***/ (function(module, exports) {

	module.exports = window.DLL.ReactRouter;

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	module.exports = window.DLL.Antd;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
	                                                                                                                                                                                                                                                                   * @file 新功能提示
	                                                                                                                                                                                                                                                                   */


	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _DemoCard = __webpack_require__(113);

	var _DemoCard2 = _interopRequireDefault(_DemoCard);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _mapping = __webpack_require__(230);

	var _mapping2 = _interopRequireDefault(_mapping);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var version = '0.3.0';

	var config = {
	    type: 'modal',
	    className: "new-tips",
	    visible: true,
	    width: 600,
	    title: ['新功能一览：',
	    // 'WHAT\'S NEW：',
	    {
	        type: 'span',
	        name: 'tips-count',
	        content: ''
	    }],
	    content: _mapping2.default[version].map(function (item, i) {
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	                'div',
	                { className: 'demo' },
	                _react2.default.createElement(_DemoCard2.default, _extends({ id: 'newtips-' + i }, item.config, { card: { noHovering: true } }))
	            )
	        );
	    })
	};

	var NewTips = function (_React$Component) {
	    _inherits(NewTips, _React$Component);

	    function NewTips() {
	        _classCallCheck(this, NewTips);

	        return _possibleConstructorReturn(this, (NewTips.__proto__ || Object.getPrototypeOf(NewTips)).apply(this, arguments));
	    }

	    _createClass(NewTips, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // UF.init(config, '#new-tips');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { id: 'new-tips' });
	        }
	    }]);

	    return NewTips;
	}(_react2.default.Component);

	exports.default = NewTips;
	;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DemoCodeCard = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.switchCode = switchCode;

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _marked = __webpack_require__(114);

	var _marked2 = _interopRequireDefault(_marked);

	var _antd = __webpack_require__(111);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo展示
	


	var ufName = '$uf';

	// 把配置转换成字符串
	function switchCode(config) {
	    var funcList = [];
	    var cfgStr = JSON.stringify(config, function (key, value) {
	        var result = value;
	        if (_utils.Utils.typeof(value, 'function')) {
	            result = '$F' + funcList.length + '$';
	            funcList.push(value.toString().replace(/\t/g, ''));
	            // if (/\t/g) {
	            //     funcList.push(value.toString().replace(/\t/g, ''));
	            // }
	            // funcList.push(value.toString().replace(/\n\s{5}/g, '\n'));
	        }
	        return result;
	    }, 4);
	    cfgStr = cfgStr.replace(/\"\$F(\d+)\$\"/g, function (v, v1) {
	        return funcList[v1];
	    });
	    cfgStr = cfgStr.replace(/\"(\w+?)\"\:\s/g, function (v, v1) {
	        return v1 + ': ';
	    });
	    // 把双引号改为单引号
	    cfgStr = cfgStr.replace(/\\"/g, '$_tmp\'');
	    cfgStr = cfgStr.replace(/\"/g, '\'');
	    cfgStr = cfgStr.replace(/$_tmp\'/g, '\"');
	    // 替换UF名称
	    cfgStr = cfgStr.replace(/\(0\, _tools2\.default\)/g, ufName);
	    cfgStr = cfgStr.replace(/_tools2\.default/g, ufName);
	    cfgStr = cfgStr.replace(/\(0\, _src2\.default\)/g, ufName);
	    cfgStr = cfgStr.replace(/_src2\.default/g, ufName);
	    // 移除匿名函数的名称
	    cfgStr = cfgStr.replace(/function\s(\S+?)\(/g, function (str, d) {
	        return str.replace(d, '');
	    });
	    return cfgStr;
	}

	var DemoCard = function (_React$Component) {
	    _inherits(DemoCard, _React$Component);

	    function DemoCard(props) {
	        _classCallCheck(this, DemoCard);

	        var _this = _possibleConstructorReturn(this, (DemoCard.__proto__ || Object.getPrototypeOf(DemoCard)).call(this, props));

	        _this.state = {
	            show: false
	        };
	        _this.id = 'demo-' + _this.props.id;
	        _marked2.default.setOptions({
	            gfm: true,
	            tables: true,
	            breaks: false,
	            pedantic: false,
	            sanitize: true,
	            smartLists: true,
	            smartypants: false
	        });
	        _this.sourceCode = _this.getSourceCode(_this.props.config);
	        return _this;
	    }

	    _createClass(DemoCard, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // clone一份，防止内部修改了配置的源数据影响demo代码的展示
	            var conf = _utils.Utils.clone(this.props.config);
	            _src2.default.init(conf, '#' + this.id);
	        }
	    }, {
	        key: 'toggle',
	        value: function toggle(i) {
	            this.setState({ show: !this.state.show });
	        }
	    }, {
	        key: 'viewcode',
	        value: function viewcode() {
	            _src2.default.Modal.create({
	                title: this.props.title,
	                width: 850,
	                footer: null,
	                maskClosable: true,
	                afterCreate: function afterCreate() {
	                    Prism && Prism.highlightAll();
	                },

	                content: { type: 'div', className: 'demo codeviewer', content: {
	                        type: 'div', className: 'demo-card', content: {
	                            type: 'div', className: 'ant-card-body', content: {
	                                type: 'div',
	                                className: 'source-code',
	                                content: this.sourceCode
	                            }
	                        }
	                    } }
	            });
	        }
	    }, {
	        key: 'getSourceCode',
	        value: function getSourceCode(config) {
	            var code = 'var config = ' + switchCode(config) + ';\n' + ufName + '.init(config, \'#demo\');';
	            return _react2.default.createElement(
	                'pre',
	                { className: 'language-javascript', style: { background: 'transparent' } },
	                _react2.default.createElement('code', { className: 'language-javascript', dangerouslySetInnerHTML: { __html: code } })
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _antd.Card,
	                _extends({ className: 'demo-card' }, this.props.card),
	                _react2.default.createElement('div', { className: 'show', id: this.id }),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'description' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'title' },
	                        this.props.title
	                    ),
	                    _react2.default.createElement('div', { className: 'content markdown', dangerouslySetInnerHTML: { __html: (0, _marked2.default)(this.props.description || '') } }),
	                    _react2.default.createElement(_antd.Icon, { className: 'viewcode collapse', type: this.state.show ? 'up-circle-o' : 'down-circle-o',
	                        onClick: this.toggle.bind(this) })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'source-code', style: { display: this.state.show ? 'block' : 'none' } },
	                    this.sourceCode
	                )
	            );
	        }
	    }]);

	    return DemoCard;
	}(_react2.default.Component);

	// 仅展示代码的卡片（不有代码的实现效果）


	exports.default = DemoCard;

	var DemoCodeCard = exports.DemoCodeCard = function (_DemoCard) {
	    _inherits(DemoCodeCard, _DemoCard);

	    function DemoCodeCard() {
	        _classCallCheck(this, DemoCodeCard);

	        return _possibleConstructorReturn(this, (DemoCodeCard.__proto__ || Object.getPrototypeOf(DemoCodeCard)).apply(this, arguments));
	    }

	    _createClass(DemoCodeCard, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {}
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _antd.Card,
	                _extends({ className: 'demo-card' }, this.props.card),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'description' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'title' },
	                        this.props.title
	                    ),
	                    _react2.default.createElement('div', { className: 'content markdown', dangerouslySetInnerHTML: { __html: (0, _marked2.default)(this.props.description || '') } }),
	                    _react2.default.createElement(_antd.Icon, { className: 'viewcode bymodal', type: 'code-o', onClick: this.viewcode.bind(this) }),
	                    _react2.default.createElement(_antd.Icon, { className: 'viewcode collapse', type: this.state.show ? 'up-circle-o' : 'down-circle-o',
	                        onClick: this.toggle.bind(this) })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'source-code', style: this.state.show ? {} : { maxHeight: '240px', overflow: 'scroll' } },
	                    this.sourceCode
	                )
	            );
	        }
	    }]);

	    return DemoCodeCard;
	}(DemoCard);

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 */

	;(function() {

	/**
	 * Block-Level Grammar
	 */

	var block = {
	  newline: /^\n+/,
	  code: /^( {4}[^\n]+\n*)+/,
	  fences: noop,
	  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
	  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
	  nptable: noop,
	  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
	  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
	  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
	  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
	  table: noop,
	  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
	  text: /^[^\n]+/
	};

	block.bullet = /(?:[*+-]|\d+\.)/;
	block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
	block.item = replace(block.item, 'gm')
	  (/bull/g, block.bullet)
	  ();

	block.list = replace(block.list)
	  (/bull/g, block.bullet)
	  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
	  ('def', '\\n+(?=' + block.def.source + ')')
	  ();

	block.blockquote = replace(block.blockquote)
	  ('def', block.def)
	  ();

	block._tag = '(?!(?:'
	  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
	  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
	  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

	block.html = replace(block.html)
	  ('comment', /<!--[\s\S]*?-->/)
	  ('closed', /<(tag)[\s\S]+?<\/\1>/)
	  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
	  (/tag/g, block._tag)
	  ();

	block.paragraph = replace(block.paragraph)
	  ('hr', block.hr)
	  ('heading', block.heading)
	  ('lheading', block.lheading)
	  ('blockquote', block.blockquote)
	  ('tag', '<' + block._tag)
	  ('def', block.def)
	  ();

	/**
	 * Normal Block Grammar
	 */

	block.normal = merge({}, block);

	/**
	 * GFM Block Grammar
	 */

	block.gfm = merge({}, block.normal, {
	  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
	  paragraph: /^/,
	  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
	});

	block.gfm.paragraph = replace(block.paragraph)
	  ('(?!', '(?!'
	    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
	    + block.list.source.replace('\\1', '\\3') + '|')
	  ();

	/**
	 * GFM + Tables Block Grammar
	 */

	block.tables = merge({}, block.gfm, {
	  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
	  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
	});

	/**
	 * Block Lexer
	 */

	function Lexer(options) {
	  this.tokens = [];
	  this.tokens.links = {};
	  this.options = options || marked.defaults;
	  this.rules = block.normal;

	  if (this.options.gfm) {
	    if (this.options.tables) {
	      this.rules = block.tables;
	    } else {
	      this.rules = block.gfm;
	    }
	  }
	}

	/**
	 * Expose Block Rules
	 */

	Lexer.rules = block;

	/**
	 * Static Lex Method
	 */

	Lexer.lex = function(src, options) {
	  var lexer = new Lexer(options);
	  return lexer.lex(src);
	};

	/**
	 * Preprocessing
	 */

	Lexer.prototype.lex = function(src) {
	  src = src
	    .replace(/\r\n|\r/g, '\n')
	    .replace(/\t/g, '    ')
	    .replace(/\u00a0/g, ' ')
	    .replace(/\u2424/g, '\n');

	  return this.token(src, true);
	};

	/**
	 * Lexing
	 */

	Lexer.prototype.token = function(src, top, bq) {
	  var src = src.replace(/^ +$/gm, '')
	    , next
	    , loose
	    , cap
	    , bull
	    , b
	    , item
	    , space
	    , i
	    , l;

	  while (src) {
	    // newline
	    if (cap = this.rules.newline.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[0].length > 1) {
	        this.tokens.push({
	          type: 'space'
	        });
	      }
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      cap = cap[0].replace(/^ {4}/gm, '');
	      this.tokens.push({
	        type: 'code',
	        text: !this.options.pedantic
	          ? cap.replace(/\n+$/, '')
	          : cap
	      });
	      continue;
	    }

	    // fences (gfm)
	    if (cap = this.rules.fences.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'code',
	        lang: cap[2],
	        text: cap[3] || ''
	      });
	      continue;
	    }

	    // heading
	    if (cap = this.rules.heading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[1].length,
	        text: cap[2]
	      });
	      continue;
	    }

	    // table no leading pipe (gfm)
	    if (top && (cap = this.rules.nptable.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i].split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // lheading
	    if (cap = this.rules.lheading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[2] === '=' ? 1 : 2,
	        text: cap[1]
	      });
	      continue;
	    }

	    // hr
	    if (cap = this.rules.hr.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'hr'
	      });
	      continue;
	    }

	    // blockquote
	    if (cap = this.rules.blockquote.exec(src)) {
	      src = src.substring(cap[0].length);

	      this.tokens.push({
	        type: 'blockquote_start'
	      });

	      cap = cap[0].replace(/^ *> ?/gm, '');

	      // Pass `top` to keep the current
	      // "toplevel" state. This is exactly
	      // how markdown.pl works.
	      this.token(cap, top, true);

	      this.tokens.push({
	        type: 'blockquote_end'
	      });

	      continue;
	    }

	    // list
	    if (cap = this.rules.list.exec(src)) {
	      src = src.substring(cap[0].length);
	      bull = cap[2];

	      this.tokens.push({
	        type: 'list_start',
	        ordered: bull.length > 1
	      });

	      // Get each top-level item.
	      cap = cap[0].match(this.rules.item);

	      next = false;
	      l = cap.length;
	      i = 0;

	      for (; i < l; i++) {
	        item = cap[i];

	        // Remove the list item's bullet
	        // so it is seen as the next token.
	        space = item.length;
	        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

	        // Outdent whatever the
	        // list item contains. Hacky.
	        if (~item.indexOf('\n ')) {
	          space -= item.length;
	          item = !this.options.pedantic
	            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
	            : item.replace(/^ {1,4}/gm, '');
	        }

	        // Determine whether the next list item belongs here.
	        // Backpedal if it does not belong in this list.
	        if (this.options.smartLists && i !== l - 1) {
	          b = block.bullet.exec(cap[i + 1])[0];
	          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
	            src = cap.slice(i + 1).join('\n') + src;
	            i = l - 1;
	          }
	        }

	        // Determine whether item is loose or not.
	        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	        // for discount behavior.
	        loose = next || /\n\n(?!\s*$)/.test(item);
	        if (i !== l - 1) {
	          next = item.charAt(item.length - 1) === '\n';
	          if (!loose) loose = next;
	        }

	        this.tokens.push({
	          type: loose
	            ? 'loose_item_start'
	            : 'list_item_start'
	        });

	        // Recurse.
	        this.token(item, false, bq);

	        this.tokens.push({
	          type: 'list_item_end'
	        });
	      }

	      this.tokens.push({
	        type: 'list_end'
	      });

	      continue;
	    }

	    // html
	    if (cap = this.rules.html.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: this.options.sanitize
	          ? 'paragraph'
	          : 'html',
	        pre: !this.options.sanitizer
	          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	        text: cap[0]
	      });
	      continue;
	    }

	    // def
	    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.links[cap[1].toLowerCase()] = {
	        href: cap[2],
	        title: cap[3]
	      };
	      continue;
	    }

	    // table (gfm)
	    if (top && (cap = this.rules.table.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i]
	          .replace(/^ *\| *| *\| *$/g, '')
	          .split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // top-level paragraph
	    if (top && (cap = this.rules.paragraph.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'paragraph',
	        text: cap[1].charAt(cap[1].length - 1) === '\n'
	          ? cap[1].slice(0, -1)
	          : cap[1]
	      });
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      // Top-level should never reach here.
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'text',
	        text: cap[0]
	      });
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return this.tokens;
	};

	/**
	 * Inline-Level Grammar
	 */

	var inline = {
	  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
	  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
	  url: noop,
	  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
	  link: /^!?\[(inside)\]\(href\)/,
	  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
	  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
	  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
	  em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
	  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
	  br: /^ {2,}\n(?!\s*$)/,
	  del: noop,
	  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
	};

	inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
	inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

	inline.link = replace(inline.link)
	  ('inside', inline._inside)
	  ('href', inline._href)
	  ();

	inline.reflink = replace(inline.reflink)
	  ('inside', inline._inside)
	  ();

	/**
	 * Normal Inline Grammar
	 */

	inline.normal = merge({}, inline);

	/**
	 * Pedantic Inline Grammar
	 */

	inline.pedantic = merge({}, inline.normal, {
	  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
	});

	/**
	 * GFM Inline Grammar
	 */

	inline.gfm = merge({}, inline.normal, {
	  escape: replace(inline.escape)('])', '~|])')(),
	  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
	  del: /^~~(?=\S)([\s\S]*?\S)~~/,
	  text: replace(inline.text)
	    (']|', '~]|')
	    ('|', '|https?://|')
	    ()
	});

	/**
	 * GFM + Line Breaks Inline Grammar
	 */

	inline.breaks = merge({}, inline.gfm, {
	  br: replace(inline.br)('{2,}', '*')(),
	  text: replace(inline.gfm.text)('{2,}', '*')()
	});

	/**
	 * Inline Lexer & Compiler
	 */

	function InlineLexer(links, options) {
	  this.options = options || marked.defaults;
	  this.links = links;
	  this.rules = inline.normal;
	  this.renderer = this.options.renderer || new Renderer;
	  this.renderer.options = this.options;

	  if (!this.links) {
	    throw new
	      Error('Tokens array requires a `links` property.');
	  }

	  if (this.options.gfm) {
	    if (this.options.breaks) {
	      this.rules = inline.breaks;
	    } else {
	      this.rules = inline.gfm;
	    }
	  } else if (this.options.pedantic) {
	    this.rules = inline.pedantic;
	  }
	}

	/**
	 * Expose Inline Rules
	 */

	InlineLexer.rules = inline;

	/**
	 * Static Lexing/Compiling Method
	 */

	InlineLexer.output = function(src, links, options) {
	  var inline = new InlineLexer(links, options);
	  return inline.output(src);
	};

	/**
	 * Lexing/Compiling
	 */

	InlineLexer.prototype.output = function(src) {
	  var out = ''
	    , link
	    , text
	    , href
	    , cap;

	  while (src) {
	    // escape
	    if (cap = this.rules.escape.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += cap[1];
	      continue;
	    }

	    // autolink
	    if (cap = this.rules.autolink.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[2] === '@') {
	        text = cap[1].charAt(6) === ':'
	          ? this.mangle(cap[1].substring(7))
	          : this.mangle(cap[1]);
	        href = this.mangle('mailto:') + text;
	      } else {
	        text = escape(cap[1]);
	        href = text;
	      }
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // url (gfm)
	    if (!this.inLink && (cap = this.rules.url.exec(src))) {
	      src = src.substring(cap[0].length);
	      text = escape(cap[1]);
	      href = text;
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // tag
	    if (cap = this.rules.tag.exec(src)) {
	      if (!this.inLink && /^<a /i.test(cap[0])) {
	        this.inLink = true;
	      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
	        this.inLink = false;
	      }
	      src = src.substring(cap[0].length);
	      out += this.options.sanitize
	        ? this.options.sanitizer
	          ? this.options.sanitizer(cap[0])
	          : escape(cap[0])
	        : cap[0]
	      continue;
	    }

	    // link
	    if (cap = this.rules.link.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.inLink = true;
	      out += this.outputLink(cap, {
	        href: cap[2],
	        title: cap[3]
	      });
	      this.inLink = false;
	      continue;
	    }

	    // reflink, nolink
	    if ((cap = this.rules.reflink.exec(src))
	        || (cap = this.rules.nolink.exec(src))) {
	      src = src.substring(cap[0].length);
	      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	      link = this.links[link.toLowerCase()];
	      if (!link || !link.href) {
	        out += cap[0].charAt(0);
	        src = cap[0].substring(1) + src;
	        continue;
	      }
	      this.inLink = true;
	      out += this.outputLink(cap, link);
	      this.inLink = false;
	      continue;
	    }

	    // strong
	    if (cap = this.rules.strong.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.strong(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // em
	    if (cap = this.rules.em.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.em(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.codespan(escape(cap[2], true));
	      continue;
	    }

	    // br
	    if (cap = this.rules.br.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.br();
	      continue;
	    }

	    // del (gfm)
	    if (cap = this.rules.del.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.del(this.output(cap[1]));
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.text(escape(this.smartypants(cap[0])));
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return out;
	};

	/**
	 * Compile Link
	 */

	InlineLexer.prototype.outputLink = function(cap, link) {
	  var href = escape(link.href)
	    , title = link.title ? escape(link.title) : null;

	  return cap[0].charAt(0) !== '!'
	    ? this.renderer.link(href, title, this.output(cap[1]))
	    : this.renderer.image(href, title, escape(cap[1]));
	};

	/**
	 * Smartypants Transformations
	 */

	InlineLexer.prototype.smartypants = function(text) {
	  if (!this.options.smartypants) return text;
	  return text
	    // em-dashes
	    .replace(/---/g, '\u2014')
	    // en-dashes
	    .replace(/--/g, '\u2013')
	    // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
	    // closing singles & apostrophes
	    .replace(/'/g, '\u2019')
	    // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
	    // closing doubles
	    .replace(/"/g, '\u201d')
	    // ellipses
	    .replace(/\.{3}/g, '\u2026');
	};

	/**
	 * Mangle Links
	 */

	InlineLexer.prototype.mangle = function(text) {
	  if (!this.options.mangle) return text;
	  var out = ''
	    , l = text.length
	    , i = 0
	    , ch;

	  for (; i < l; i++) {
	    ch = text.charCodeAt(i);
	    if (Math.random() > 0.5) {
	      ch = 'x' + ch.toString(16);
	    }
	    out += '&#' + ch + ';';
	  }

	  return out;
	};

	/**
	 * Renderer
	 */

	function Renderer(options) {
	  this.options = options || {};
	}

	Renderer.prototype.code = function(code, lang, escaped) {
	  if (this.options.highlight) {
	    var out = this.options.highlight(code, lang);
	    if (out != null && out !== code) {
	      escaped = true;
	      code = out;
	    }
	  }

	  if (!lang) {
	    return '<pre><code>'
	      + (escaped ? code : escape(code, true))
	      + '\n</code></pre>';
	  }

	  return '<pre><code class="'
	    + this.options.langPrefix
	    + escape(lang, true)
	    + '">'
	    + (escaped ? code : escape(code, true))
	    + '\n</code></pre>\n';
	};

	Renderer.prototype.blockquote = function(quote) {
	  return '<blockquote>\n' + quote + '</blockquote>\n';
	};

	Renderer.prototype.html = function(html) {
	  return html;
	};

	Renderer.prototype.heading = function(text, level, raw) {
	  return '<h'
	    + level
	    + ' id="'
	    + this.options.headerPrefix
	    + raw.toLowerCase().replace(/[^\w]+/g, '-')
	    + '">'
	    + text
	    + '</h'
	    + level
	    + '>\n';
	};

	Renderer.prototype.hr = function() {
	  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	};

	Renderer.prototype.list = function(body, ordered) {
	  var type = ordered ? 'ol' : 'ul';
	  return '<' + type + '>\n' + body + '</' + type + '>\n';
	};

	Renderer.prototype.listitem = function(text) {
	  return '<li>' + text + '</li>\n';
	};

	Renderer.prototype.paragraph = function(text) {
	  return '<p>' + text + '</p>\n';
	};

	Renderer.prototype.table = function(header, body) {
	  return '<table>\n'
	    + '<thead>\n'
	    + header
	    + '</thead>\n'
	    + '<tbody>\n'
	    + body
	    + '</tbody>\n'
	    + '</table>\n';
	};

	Renderer.prototype.tablerow = function(content) {
	  return '<tr>\n' + content + '</tr>\n';
	};

	Renderer.prototype.tablecell = function(content, flags) {
	  var type = flags.header ? 'th' : 'td';
	  var tag = flags.align
	    ? '<' + type + ' style="text-align:' + flags.align + '">'
	    : '<' + type + '>';
	  return tag + content + '</' + type + '>\n';
	};

	// span level renderer
	Renderer.prototype.strong = function(text) {
	  return '<strong>' + text + '</strong>';
	};

	Renderer.prototype.em = function(text) {
	  return '<em>' + text + '</em>';
	};

	Renderer.prototype.codespan = function(text) {
	  return '<code>' + text + '</code>';
	};

	Renderer.prototype.br = function() {
	  return this.options.xhtml ? '<br/>' : '<br>';
	};

	Renderer.prototype.del = function(text) {
	  return '<del>' + text + '</del>';
	};

	Renderer.prototype.link = function(href, title, text) {
	  if (this.options.sanitize) {
	    try {
	      var prot = decodeURIComponent(unescape(href))
	        .replace(/[^\w:]/g, '')
	        .toLowerCase();
	    } catch (e) {
	      return '';
	    }
	    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
	      return '';
	    }
	  }
	  var out = '<a href="' + href + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += '>' + text + '</a>';
	  return out;
	};

	Renderer.prototype.image = function(href, title, text) {
	  var out = '<img src="' + href + '" alt="' + text + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += this.options.xhtml ? '/>' : '>';
	  return out;
	};

	Renderer.prototype.text = function(text) {
	  return text;
	};

	/**
	 * Parsing & Compiling
	 */

	function Parser(options) {
	  this.tokens = [];
	  this.token = null;
	  this.options = options || marked.defaults;
	  this.options.renderer = this.options.renderer || new Renderer;
	  this.renderer = this.options.renderer;
	  this.renderer.options = this.options;
	}

	/**
	 * Static Parse Method
	 */

	Parser.parse = function(src, options, renderer) {
	  var parser = new Parser(options, renderer);
	  return parser.parse(src);
	};

	/**
	 * Parse Loop
	 */

	Parser.prototype.parse = function(src) {
	  this.inline = new InlineLexer(src.links, this.options, this.renderer);
	  this.tokens = src.reverse();

	  var out = '';
	  while (this.next()) {
	    out += this.tok();
	  }

	  return out;
	};

	/**
	 * Next Token
	 */

	Parser.prototype.next = function() {
	  return this.token = this.tokens.pop();
	};

	/**
	 * Preview Next Token
	 */

	Parser.prototype.peek = function() {
	  return this.tokens[this.tokens.length - 1] || 0;
	};

	/**
	 * Parse Text Tokens
	 */

	Parser.prototype.parseText = function() {
	  var body = this.token.text;

	  while (this.peek().type === 'text') {
	    body += '\n' + this.next().text;
	  }

	  return this.inline.output(body);
	};

	/**
	 * Parse Current Token
	 */

	Parser.prototype.tok = function() {
	  switch (this.token.type) {
	    case 'space': {
	      return '';
	    }
	    case 'hr': {
	      return this.renderer.hr();
	    }
	    case 'heading': {
	      return this.renderer.heading(
	        this.inline.output(this.token.text),
	        this.token.depth,
	        this.token.text);
	    }
	    case 'code': {
	      return this.renderer.code(this.token.text,
	        this.token.lang,
	        this.token.escaped);
	    }
	    case 'table': {
	      var header = ''
	        , body = ''
	        , i
	        , row
	        , cell
	        , flags
	        , j;

	      // header
	      cell = '';
	      for (i = 0; i < this.token.header.length; i++) {
	        flags = { header: true, align: this.token.align[i] };
	        cell += this.renderer.tablecell(
	          this.inline.output(this.token.header[i]),
	          { header: true, align: this.token.align[i] }
	        );
	      }
	      header += this.renderer.tablerow(cell);

	      for (i = 0; i < this.token.cells.length; i++) {
	        row = this.token.cells[i];

	        cell = '';
	        for (j = 0; j < row.length; j++) {
	          cell += this.renderer.tablecell(
	            this.inline.output(row[j]),
	            { header: false, align: this.token.align[j] }
	          );
	        }

	        body += this.renderer.tablerow(cell);
	      }
	      return this.renderer.table(header, body);
	    }
	    case 'blockquote_start': {
	      var body = '';

	      while (this.next().type !== 'blockquote_end') {
	        body += this.tok();
	      }

	      return this.renderer.blockquote(body);
	    }
	    case 'list_start': {
	      var body = ''
	        , ordered = this.token.ordered;

	      while (this.next().type !== 'list_end') {
	        body += this.tok();
	      }

	      return this.renderer.list(body, ordered);
	    }
	    case 'list_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.token.type === 'text'
	          ? this.parseText()
	          : this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'loose_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'html': {
	      var html = !this.token.pre && !this.options.pedantic
	        ? this.inline.output(this.token.text)
	        : this.token.text;
	      return this.renderer.html(html);
	    }
	    case 'paragraph': {
	      return this.renderer.paragraph(this.inline.output(this.token.text));
	    }
	    case 'text': {
	      return this.renderer.paragraph(this.parseText());
	    }
	  }
	};

	/**
	 * Helpers
	 */

	function escape(html, encode) {
	  return html
	    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#39;');
	}

	function unescape(html) {
		// explicitly match decimal, hex, and named HTML entities 
	  return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g, function(_, n) {
	    n = n.toLowerCase();
	    if (n === 'colon') return ':';
	    if (n.charAt(0) === '#') {
	      return n.charAt(1) === 'x'
	        ? String.fromCharCode(parseInt(n.substring(2), 16))
	        : String.fromCharCode(+n.substring(1));
	    }
	    return '';
	  });
	}

	function replace(regex, opt) {
	  regex = regex.source;
	  opt = opt || '';
	  return function self(name, val) {
	    if (!name) return new RegExp(regex, opt);
	    val = val.source || val;
	    val = val.replace(/(^|[^\[])\^/g, '$1');
	    regex = regex.replace(name, val);
	    return self;
	  };
	}

	function noop() {}
	noop.exec = noop;

	function merge(obj) {
	  var i = 1
	    , target
	    , key;

	  for (; i < arguments.length; i++) {
	    target = arguments[i];
	    for (key in target) {
	      if (Object.prototype.hasOwnProperty.call(target, key)) {
	        obj[key] = target[key];
	      }
	    }
	  }

	  return obj;
	}


	/**
	 * Marked
	 */

	function marked(src, opt, callback) {
	  if (callback || typeof opt === 'function') {
	    if (!callback) {
	      callback = opt;
	      opt = null;
	    }

	    opt = merge({}, marked.defaults, opt || {});

	    var highlight = opt.highlight
	      , tokens
	      , pending
	      , i = 0;

	    try {
	      tokens = Lexer.lex(src, opt)
	    } catch (e) {
	      return callback(e);
	    }

	    pending = tokens.length;

	    var done = function(err) {
	      if (err) {
	        opt.highlight = highlight;
	        return callback(err);
	      }

	      var out;

	      try {
	        out = Parser.parse(tokens, opt);
	      } catch (e) {
	        err = e;
	      }

	      opt.highlight = highlight;

	      return err
	        ? callback(err)
	        : callback(null, out);
	    };

	    if (!highlight || highlight.length < 3) {
	      return done();
	    }

	    delete opt.highlight;

	    if (!pending) return done();

	    for (; i < tokens.length; i++) {
	      (function(token) {
	        if (token.type !== 'code') {
	          return --pending || done();
	        }
	        return highlight(token.text, token.lang, function(err, code) {
	          if (err) return done(err);
	          if (code == null || code === token.text) {
	            return --pending || done();
	          }
	          token.text = code;
	          token.escaped = true;
	          --pending || done();
	        });
	      })(tokens[i]);
	    }

	    return;
	  }
	  try {
	    if (opt) opt = merge({}, marked.defaults, opt);
	    return Parser.parse(Lexer.lex(src, opt), opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/chjj/marked.';
	    if ((opt || marked.defaults).silent) {
	      return '<p>An error occured:</p><pre>'
	        + escape(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	}

	/**
	 * Options
	 */

	marked.options =
	marked.setOptions = function(opt) {
	  merge(marked.defaults, opt);
	  return marked;
	};

	marked.defaults = {
	  gfm: true,
	  tables: true,
	  breaks: false,
	  pedantic: false,
	  sanitize: false,
	  sanitizer: null,
	  mangle: true,
	  smartLists: false,
	  silent: false,
	  highlight: null,
	  langPrefix: 'lang-',
	  smartypants: false,
	  headerPrefix: '',
	  renderer: new Renderer,
	  xhtml: false
	};

	/**
	 * Expose
	 */

	marked.Parser = Parser;
	marked.parser = Parser.parse;

	marked.Renderer = Renderer;

	marked.Lexer = Lexer;
	marked.lexer = Lexer.lex;

	marked.InlineLexer = InlineLexer;
	marked.inlineLexer = InlineLexer.output;

	marked.parse = marked;

	if (true) {
	  module.exports = marked;
	} else if (typeof define === 'function' && define.amd) {
	  define(function() { return marked; });
	} else {
	  this.marked = marked;
	}

	}).call(function() {
	  return this || (typeof window !== 'undefined' ? window : global);
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.WhiteList = exports.Loader = exports.Factory = undefined;

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _lib = __webpack_require__(116);

	var _lib2 = _interopRequireDefault(_lib);

	var _env = __webpack_require__(213);

	var _env2 = _interopRequireDefault(_env);

	var _moment = __webpack_require__(125);

	var _moment2 = _interopRequireDefault(_moment);

	__webpack_require__(214);

	var _utils = __webpack_require__(121);

	var _cache = __webpack_require__(215);

	var _cache2 = _interopRequireDefault(_cache);

	var _factory = __webpack_require__(223);

	var _factory2 = _interopRequireDefault(_factory);

	var _loader = __webpack_require__(224);

	var _loader2 = _interopRequireDefault(_loader);

	var _whitelist = __webpack_require__(161);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	var _init = __webpack_require__(227);

	var _init2 = _interopRequireDefault(_init);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	// import Model from 'src/tools/model.js';
	// import Precondition from 'src/tools/precondition.js';

	// 设置 moment 的 locale
	_moment2.default.locale('zh-cn');

	// 这里设置一下，domain才能同域，否则即使在同一个域名下的iframe也会有跨域问题。这一行一定不能删！
	// 本地访问的时候，domain为''，不能给domain赋值''
	!!document.domain && (document.domain = document.domain);

	// 生成UF实例
	var create = function create(_ref) {
	    var name = _ref.name;

	    // 初始化缓存空间
	    var _Cache$init = _cache2.default.init(name),
	        Config = _Cache$init.Config,
	        ModelCache = _Cache$init.ModelCache,
	        ComponentsCache = _Cache$init.ComponentsCache;
	    // 初始化其他工具实例，如ajax


	    var _Tools$init = _init2.default.init(name),
	        Ajax = _Tools$init.Ajax,
	        Requirejs = _Tools$init.Requirejs,
	        Precondition = _Tools$init.Precondition;

	    // UF实例上的工具函数


	    var func = {
	        /*******************************************************/
	        /******** 私有属性/方法 *********************************/
	        /*****************************************************/
	        insName: name,
	        // 是否阻塞
	        waiting: false,
	        // waitingCache: {},
	        // 异步逻辑执行完成后，重新执行init函数
	        _reInit: function _reInit() {
	            this.waiting = false;
	            if (ModelCache.get('_$waitingCache')) {
	                var _ModelCache$get = ModelCache.get('_$waitingCache'),
	                    config = _ModelCache$get.config,
	                    selector = _ModelCache$get.selector;

	                ModelCache.del('_$waitingCache');
	                this.render(config, selector);
	            }
	        },

	        // 获取组件
	        _get: function _get(name, key) {
	            var cp = ComponentsCache.get(name);
	            if (key && cp) {
	                return cp.get(key);
	            }
	            return cp;
	        },

	        // 根据选择器获取目标元素
	        _getTarget: function _getTarget(selector) {
	            if (_utils.Utils.typeof(selector, 'string')) {
	                var result = document.querySelector(selector);
	                if (!result) {
	                    console.error('Error: The specified element `' + selector + '` is not found.');
	                }
	                return result;
	                // 如果传入的是dom元素，直接返回
	            } else if (selector instanceof Element) {
	                return selector;
	            } else {
	                return null;
	            }
	        },

	        // 向selector中插入新的组件
	        _append: function _append(config, selector) {
	            var destoryHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	            var div = document.createElement('div');
	            var target = document.body;
	            if (selector) {
	                target = this._getTarget(selector) || target;
	            }
	            target.appendChild(div);
	            function destory() {
	                var unmountResult = _reactDom2.default.unmountComponentAtNode(div);
	                if (unmountResult && div.parentNode) {
	                    div.parentNode.removeChild(div);
	                }
	            }
	            // 给config增加destory逻辑
	            if (destoryHandler) {
	                var origin = config[destoryHandler];
	                config[destoryHandler] = !!origin ? function () {
	                    origin.apply(undefined, arguments);
	                    destory();
	                } : destory;
	            }
	            this.render(config, div);
	            return {
	                element: div,
	                destory: destory
	            };
	        },


	        /*******************************************************/
	        /******** 公共属性/方法 *********************************/
	        /*****************************************************/

	        require: Requirejs,
	        // ajax请求。包含 ajax(), ajax.get(), ajax.post()
	        ajax: Ajax,
	        // 暴露全部工具类
	        utils: _utils.Utils,
	        // moment 暴露全部功能
	        moment: _moment2.default,
	        // underscore工具函数
	        _: _utils.Utils._,
	        // Modal直接调用函数，传入insName
	        Modal: _utils.Utils.each(_lib2.default.Modal, function (item) {
	            return _utils.Utils.typeof(item, 'function') ? item.bind(null, name) : item;
	        }),
	        // message、notification 直接调用函数，传入insName
	        message: _utils.Utils.each(_lib2.default.message, function (item) {
	            return _utils.Utils.typeof(item, 'function') ? item.bind(null, name) : item;
	        }),
	        notification: _utils.Utils.each(_lib2.default.notification, function (item) {
	            return _utils.Utils.typeof(item, 'function') ? item.bind(null, name) : item;
	        }),
	        // model 数据绑定页面
	        // model: Model,
	        // 全局数据
	        get: ModelCache.get.bind(ModelCache),
	        set: ModelCache.set.bind(ModelCache),
	        del: ModelCache.delete.bind(ModelCache),
	        delete: ModelCache.delete.bind(ModelCache),
	        // 获取当前页面路由信息
	        getRouter: _lib2.default.Router.getRouter,
	        // 根据组件配置 生成&渲染组件实例
	        init: function init(config, selector) {
	            if (!this.waiting) {
	                this.render(config, selector);
	            } else {
	                // this.waitingCache = {config, selector};
	                ModelCache.set('_$waitingCache', { config: config, selector: selector });
	            }
	        },

	        // 根据组件配置 生成&渲染组件实例
	        render: function render(config, selector) {
	            var result = _react2.default.createElement(_factory2.default, { config: config, insName: this.insName });
	            // 如果没有指定目标容器的id，则直接返回生成的组件实例
	            if (!selector || !this._getTarget(selector)) {
	                return result;
	            }
	            return _reactDom2.default.render(result, this._getTarget(selector));
	        },

	        // 主动销毁render到页面上的组件
	        unrender: function unrender(selector) {
	            return _reactDom2.default.unmountComponentAtNode(this._getTarget(selector));
	        },

	        // 向selector中插入新的组件
	        append: function append(config, selector) {
	            return this._append(config, selector);
	        },

	        // 载入自定义组件
	        load: function load(components) {
	            _loader2.default.add(components);
	        },

	        // mockFiles 参数处理，加载
	        _handleMockFilesConf: function _handleMockFilesConf(conf) {
	            var _this = this;

	            var mockFiles = conf.global && conf.global.mockFiles || [];
	            // 如果有异步components，将加载逻辑加入到precondition中
	            if (!_utils.Utils.empty(mockFiles)) {
	                conf.precondition = (conf.precondition || []).concat(mockFiles.map(function (path) {
	                    return function (resovle) {
	                        Requirejs([path], function (foo) {
	                            foo && _this.config({
	                                global: {
	                                    mock: foo
	                                }
	                            });
	                            resovle();
	                        });
	                    };
	                }));
	            }
	            return conf;
	        },

	        // components 配置处理，components有两种情况
	        //  1、直接为一个对象，即一系列配置对象列表
	        //  2、还有一种为一个数组，数组中每一项即可以为1中的配置对象列表，又可以为一个url（异步加载其余地方的公用配置）
	        _handleComponentsConf: function _handleComponentsConf(conf) {
	            var _this2 = this;

	            var componentsLoader = [];
	            if (conf.components && _utils.Utils.typeof(conf.components, 'array')) {
	                // 为字符串的项为异步加载配置的url，需追加到precondition里处理
	                // 剩余的为真正的配置
	                var componentsConf = {};
	                conf.components.forEach(function (item) {
	                    if (_utils.Utils.typeof(item, 'string')) {
	                        componentsLoader.push(item);
	                    } else {
	                        Object.assign(componentsConf, item);
	                    }
	                });
	                conf.components = componentsConf;
	            }
	            // 如果有异步components，将加载逻辑加入到precondition中
	            if (!_utils.Utils.empty(componentsLoader)) {
	                conf.precondition = (conf.precondition || []).concat(componentsLoader.map(function (path) {
	                    return function (resovle) {
	                        Requirejs([path], function (foo) {
	                            foo && _this2.config({ components: foo });
	                            resovle();
	                        });
	                    };
	                }));
	            }
	            return conf;
	        },

	        // plugins 配置处理，将异步加载逻辑加入到precondition中
	        _handlePluginsConf: function _handlePluginsConf(conf) {
	            // 加载扩展组件。格式为[ {name, path} || name ]
	            if (conf.plugins) {
	                conf.precondition = (conf.precondition || []).concat(conf.plugins.map(function (mod) {
	                    var path = void 0;
	                    var modName = void 0;
	                    if (_utils.Utils.typeof(mod, 'string')) {
	                        modName = mod;
	                        path = _env2.default.pluginPath + modName + '.js';
	                    } else {
	                        path = mod.path;
	                        modName = mod.name;
	                    }
	                    return function (resovle) {
	                        Requirejs([path], function (foo) {
	                            // 如果有 mod.name，则认为是单一组件，名称使用名字命名
	                            // 如果没有 mod.name，则认为是多个组件，直接添加
	                            if (modName) {
	                                _loader2.default.add(_defineProperty({}, modName, foo && foo.default ? foo.default : foo));
	                            } else {
	                                _loader2.default.add(foo);
	                            }
	                            resovle();
	                        });
	                    };
	                }));
	            }
	            return conf;
	        },

	        // precondition 配置处理，执行加载逻辑
	        _handlePreconditionConf: function _handlePreconditionConf(conf) {
	            if (conf.precondition) {
	                if (_utils.Utils.typeof(conf.precondition, 'array') && conf.precondition.length > 0) {
	                    this.waiting = true;
	                    Precondition.handle(conf.precondition);
	                }
	            }
	        },

	        // 整体配置
	        config: function config(conf) {
	            // 处理global.mock，数组转对象
	            if (conf && conf.global && conf.global.mock) {
	                var map = {};
	                conf.global.mock.forEach(function (v) {
	                    return map[v.url] = v.handler;
	                });
	                conf.global.mock = map;
	            }
	            // 用户自定义 UF 别名
	            if (conf.alias) {
	                window[conf.alias] = window.UF;
	            }
	            // 设置默认公用数据，存入 model 中
	            if (conf.data) {
	                ModelCache.set(conf.data);
	            }

	            // 处理 mockFiles 参数
	            conf = this._handleMockFilesConf(conf);
	            // 处理 components 参数
	            conf = this._handleComponentsConf(conf);
	            // 处理 plugins 参数
	            conf = this._handlePluginsConf(conf);
	            // 存储全部配置
	            var config = Config.set(_utils.Utils.filter(conf, ['data', 'precondition']));
	            // modules 属性里定义了 requirejs的配置项，具体参数详见：http://requirejs.org/docs/api.html#config
	            Requirejs.config(config.modules);
	            // 设置默认域，解决跨域问题
	            !!document.domain && (document.domain = config.global['domain']);

	            // 处理 precondition 参数, 执行阻塞页面加载的函数
	            this._handlePreconditionConf(conf);

	            // message组件设置
	            if (config.components.message) {
	                func.message.config(config.components.message);
	            }
	            // notification组件设置
	            if (config.components.notification) {
	                func.notification.config(config.components.notification);
	            }
	        },

	        // 获取实例，可以和其他实例做交互
	        getIns: function getIns(name) {
	            return (0, _instance.getInstance)(name);
	        },
	        getAllIns: function getAllIns(name) {
	            var allIns = (0, _instance.getAll)();
	            return name ? allIns[name] : allIns;
	        },
	        delIns: function delIns(name) {
	            return (0, _instance.delInstance)(name);
	        }
	    };

	    // 绑定获取组件的函数
	    var UF = func._get;
	    Object.assign(UF, func);

	    // 存储新产生的uf实例
	    (0, _instance.setInstance)(name, UF);

	    return UF;
	};

	// 先产生一个默认实例，以兼容以前的用法
	var defaultName = '_$default';
	var defaultUF = create({ name: defaultName });
	defaultUF.config({});

	// 重写window上的UF函数，使其增加创建uf实例功能
	var UF = function UF() {
	    var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    // 如果传入的是字符串，则走原来的获取组件的逻辑
	    if (typeof conf === 'string') {
	        return defaultUF(conf);
	    }
	    // 默认使用default名称
	    conf.name = conf.name || conf.appName || defaultName;
	    // 获取当前name的uf实例
	    var ufIns = (0, _instance.getInstance)(conf.name);
	    // 如果不存在生成一个新的实例
	    if (!ufIns) {
	        ufIns = create(conf);
	    }
	    ufIns.config(conf);
	    return ufIns;
	};

	// 并把默认实例抛出以供直接调用
	Object.assign(UF, defaultUF);

	exports.default = UF;
	// 获取到window上的_catch，即用户事先用到的UF方法，在此进行执行

	var catchArr = window._catch;
	if (_utils.Utils.typeof(catchArr, 'array') && catchArr.length > 0) {
	    for (var i in catchArr) {
	        var funcName = catchArr[i].func;
	        var params = catchArr[i].params;
	        UF[funcName].apply(UF, _toConsumableArray(params));
	    }
	}

	exports.Factory = _factory2.default;
	exports.Loader = _loader2.default;
	exports.WhiteList = _whitelist2.default;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file index.js 汇总所有 src 里对用户暴露的组件
	 * @author liuzechun@baidu.com
	 */

	module.exports = Object.assign(__webpack_require__(117),
	// antd 组件统一迁移，见 src/antd/index.js
	__webpack_require__(165),
	// 路由组件
	__webpack_require__(175),
	// 其他自己实现/封装的组件
	{
	    Iframe: __webpack_require__(181),

	    AutoComplete: __webpack_require__(183).AutoComplete,
	    LocalComplete: __webpack_require__(183).LocalComplete,
	    Export: __webpack_require__(185),
	    Tree: __webpack_require__(187),
	    Table: __webpack_require__(189),
	    Form: __webpack_require__(197).Form,
	    Forms: __webpack_require__(197).Forms,
	    Modal: __webpack_require__(200).Modal,
	    Dashboard: __webpack_require__(200).Dashboard,
	    Drawer: __webpack_require__(200).Drawer,
	    Ueditor: __webpack_require__(204).Ueditor,
	    UeditorParse: __webpack_require__(204).UeditorParse,
	    Echarts: __webpack_require__(207),
	    Fieldset: __webpack_require__(209),
	    List: __webpack_require__(211)
	});

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    Dom: __webpack_require__(118).default,
	    Html: __webpack_require__(164).default
	};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(119);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 需要操作的原生dom继承 BaseComponent
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-17 04:11:07
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Dom = function (_BaseComponent) {
	    _inherits(Dom, _BaseComponent);

	    function Dom(props) {
	        _classCallCheck(this, Dom);

	        // 开放给用户使用的 Api
	        var _this = _possibleConstructorReturn(this, (Dom.__proto__ || Object.getPrototypeOf(Dom)).call(this, props));

	        _this._openApi.push('trigger');
	        // 壳子调用antd组件，调用的组件的实例存储在_component中
	        _this._component = null;
	        _this._filter.push('preventUpdate');
	        _this.__init();
	        return _this;
	    }

	    _createClass(Dom, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            if (this.__props.preventUpdate) {
	                return false;
	            }
	            return true;
	        }
	        // 触发组件上的原生事件，例如 focus、change 等

	    }, {
	        key: 'trigger',
	        value: function trigger(event) {
	            for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                params[_key - 1] = arguments[_key];
	            }

	            if (this._component && this._component[event]) {
	                this._component[event](params);
	            } else {
	                var _get2;

	                (_get2 = _get(Dom.prototype.__proto__ || Object.getPrototypeOf(Dom.prototype), 'trigger', this)).call.apply(_get2, [this, event].concat(params));
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            // style传一个可变对象且对象进行变化时，会报warning
	            // 见：https://stackoverflow.com/questions/33295615/why-was-mutating-style-deprecated
	            return _react2.default.createElement(this.type, _extends({}, this.__props, { ref: function ref(ele) {
	                    return _this2._component = ele;
	                },
	                style: _extends({}, this.__props.style)
	            }));
	        }
	    }]);

	    return Dom;
	}(_base.BaseComponent);

	exports.default = Dom;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    BaseComponent: __webpack_require__(120).default,
	    BaseConf: __webpack_require__(120),
	    ExtendComponent: __webpack_require__(163)
	};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.FilterProps = exports.Uncomplex = exports.PreventCoverageMap = exports.ForUserApi = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _utils = __webpack_require__(121);

	var _authority = __webpack_require__(160);

	var _authority2 = _interopRequireDefault(_authority);

	var _whitelist = __webpack_require__(161);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 基础类
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by liuzechun on 2017/8/4.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description
	多个处理逻辑最终合并为一个事件函数传给组件
	执行顺序依次为：((__controlled > this._xxx > api > control)->this._xxx) > this.__props.onXxx
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	// import Model from 'src/tools/model.js';


	// // 提供给用户的和生命周期相关的函数，命名更加语义化
	var ForUserApi = exports.ForUserApi = {
	    beforeCreate: 'componentWillMount',
	    afterCreate: 'componentDidMount',
	    beforeRender: 'componentWillMount,componentWillUpdate',
	    afterRender: 'componentDidMount,componentDidUpdate',
	    beforeDestroy: 'componentWillUnmount'
	};

	// React的生命周期中的7个常用函数，为了防止函数被终的子组件覆盖，这7个函数会经过逻辑处理
	// 中间子类在使用这几个函数的时候，需要在函数最前面调用parent.[func]()
	var PreventCoverageMap = exports.PreventCoverageMap = _utils.Utils.distinct(Object.values(ForUserApi).join(',').split(',').concat(['componentWillReceiveProps', 'shouldComponentUpdate']));

	// 不复杂的属性，即无需merge处理直接覆盖的属性
	var Uncomplex = exports.Uncomplex = ['params', 'data', 'options'];

	// 转化为__props时需过滤的属性 - 用户配置的特殊功能的属性
	var FilterProps = exports.FilterProps = Object.keys(ForUserApi).concat(PreventCoverageMap, [
	// 权限
	'authority',
	// 获取系列参数
	// source 系列参数有：url,method,params,handler,targe
	'source',
	// 提交/发送数据系列参数
	// api 系列参数有： url,method,params,handler,trigger
	'api',
	// 组件额外动作及组件关联相关属性
	'control',
	// 隐藏组件
	'hidden']);

	// 因为组件很少使用 props 和 state，某些时候需要组件刷新的。例如面包屑组件

	var BaseComponent = function (_Component) {
	    _inherits(BaseComponent, _Component);

	    // export default class BaseComponent extends PureComponent {
	    // 组件、中间基类不调用__init，如果想要给Base设置type，则需要构造函数传入
	    function BaseComponent(props) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        _classCallCheck(this, BaseComponent);

	        var _this = _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call(this, props));

	        _this.state = {};
	        // 组件类型，用于组件及其基类基础配置的获取
	        _this.class = ['base-component'];
	        // 未使用__init的组件，手动传入组件类型
	        _this.type = _this.props.__type || options.type;
	        _this.key = _this.props.__key;
	        // 组件缓存的key。有值的话组件才会缓存，如果值为null，则不会做缓存
	        _this.cacheName = _this._getTransmitName();
	        // 标志组件是否已被销毁
	        _this.unmounted = false;
	        // _factory 是最初 Factory 的 this
	        _this._factory = _this.props._factory;
	        _this.insName = _this._factory.insName;
	        // 供用户使用，例如获取路由信息/参数等
	        _this._root = _this._factory;
	        // 开发时自定义的需注入到事件中的函数，例如 AutoComplete 组件中的 'onSearch' 函数
	        _this._injectEvent = [];
	        _this._filter = _utils.Utils.copy(FilterProps).concat(
	        // 一些隐藏的属性
	        ['__cache', '__type', '__key', '_factory', '_selfCalling'],
	        // 二次解析白名单里的属性的原值存储在 _${v} 中
	        _whitelist2.default.getall(_this.type).map(function (v) {
	            return '_' + v;
	        }),
	        // 需要先执行函数得到组件配置并需要重新解析配置的属性
	        _whitelist2.default.getallFuncs(_this.type));
	        _this._innerFilter = _this._filter.filter(function (v) {
	            return v.indexOf('_') === 0;
	        });
	        // 不复杂的属性，即无需merge处理直接覆盖的属性
	        _this._uncomplex = _utils.Utils.copy(Uncomplex);
	        // 开放给用户使用的 Api，需处理下
	        _this._openApi = ['set', 'get', 'show', 'hide', 'loading', 'reload'];
	        // 可用于链式调用的API
	        _this._chainedApi = ['set', 'show', 'hide', 'loading', 'reload'];
	        // 存储一些程序执行过程中的数据
	        _this._tempData = {};
	        // 临时存储组件更新之后执行的逻辑。类似于 setState 之后的回调函数（但是 forceUpdate 没有）
	        _this._afterUpdateQueue = [];
	        _this.__defaultProps = {};
	        _this.__props = {};
	        // 更新前的__props
	        _this.__prevProps = {};
	        // 用于存放被过滤掉的props上的属性，使用户重新set也可以生效（如果直接在props上取的话，set不会触发props更新，被过滤掉的属性就无法再更新了）
	        _this.__filtered = {};
	        return _this;
	    }

	    _createClass(BaseComponent, [{
	        key: '_getDefautlProps',
	        value: function _getDefautlProps() {
	            var _this2 = this;

	            var conf = this._factory.$config.get('components.' + this.type) || {};
	            // 取中间各基类的默认配置，并合并全部配置
	            var confArr = this.class.map(function (v) {
	                return _this2._factory.$config.get('components.' + v) || {};
	            });
	            conf = this.__mergeProps.apply(this, _toConsumableArray(confArr).concat([conf]));
	            return conf;
	        }

	        // forceUpdate 完成之后执行并清空队列

	    }, {
	        key: '_componentDidUpdate',
	        value: function _componentDidUpdate(prevProps, prevState) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._afterUpdateQueue.splice(0)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var func = _step.value;

	                    func();
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }

	        // 组件的 componentWillReceiveProps 中注入的处理逻辑
	        // 有两种情况会调用cwr：
	        //  一种是父组件刷新，currentProps = this.props，如果props确实发生了变化，则需要重新调用__setProps
	        //  还有一种是set函数调用的，currentProps = this.__props，如果__props发生变化，则需要重新调用__setProps
	        // 所以nextProps也有对应另种情况：
	        //  一种是父组件刷新，传入的是正常的外部传入的配置；
	        //  还有一种是set函数调用，会额外传入一个_selfCalling属性，此属性中包含了set的原数据。直接使用此属性的内容进行__setProps即可

	    }, {
	        key: '_componentWillReceiveProps',
	        value: function _componentWillReceiveProps(nextProps, currentProps) {
	            // cwr函数执行很频繁，这里对一些props不变的情况进行一些过滤
	            currentProps = !_utils.Utils.empty(currentProps) ? currentProps : this.props;

	            var reGetData = false;
	            // 更新 __props
	            if (this.__shouldUpdate(currentProps, nextProps, false)) {
	                // 如果参数变化，则重新获取数据。要在变更 __props 之前判断。
	                reGetData = nextProps.source && _utils.Utils.isChange(_utils.Utils.varietyFormat(nextProps.source, 'url'), this.__filtered.source)
	                // 由于isChange对于子集的情况无效，对于标记为非复杂属性，需使用equals做检测
	                || !_utils.Utils.equals(nextProps.params, this.__props.params);
	                // 重新设置 __props.只传入待更新的值
	                // 如果为自身调用，则待更新的值存储在_selfCalling中；
	                // 否则为外部刷新，用 nextProps 和 currentProps 做对比，获取变化的值
	                // TODO: 深层次的属性变换无法检测到（currentProps使用的this.props）！！
	                //  是否可以考虑clone一份缓存起来专门用于做检查呢？
	                var changeProps = nextProps._selfCalling;
	                if (!changeProps) {
	                    changeProps = _utils.Utils.getChange(nextProps, currentProps);
	                }
	                this.__setProps(changeProps);
	            }

	            // 判断是否重新加载数据
	            this._tryReloadData(reGetData, nextProps._selfCalling);
	        }
	        // 自动重新加载数据

	    }, {
	        key: '_tryReloadData',
	        value: function _tryReloadData(reGetData, selfCalling) {
	            /**
	             * 自动重新加载概括起来讲，分几种判断条件：
	             *  1、是否为自身set (selfCalling，除此之外还有cwr生命周期)
	             *  2、是否发生了source参数变化（reGetData）
	             *  3、是否设置过source参数（isSetSource，对应的为set了source参数(不管有没有变化)，注意和reGetData两者有交集但互不包含）
	             *
	             * 自动重新加载有几种不同的等级，对应参数值依次为：
	             *  1、true: 范围最宽，source参数变动、自身set source参数、父组件刷新都会触发
	             *  2、'set': source参数变动、自身set source参数都会更新
	             *  3、false: 只有params或者source变化时才会更新
	             *  4、'never': 则永远不更新，除非手动调用 reload 函数
	             *
	             * 一般组件默认为false
	             */
	            var autoReload = this.__filtered.source.autoReload;
	            var isSetSource = selfCalling && (selfCalling.source || selfCalling.params);
	            switch (autoReload) {
	                case true:
	                    if (selfCalling && !isSetSource && !reGetData) {
	                        return;
	                    }
	                    break;
	                case 'set':
	                    if (!isSetSource && !reGetData) {
	                        return;
	                    }
	                    break;
	                case 'never':
	                    return;
	                case false:
	                default:
	                    if (!reGetData) {
	                        return;
	                    }
	            }
	            // 改为异步执行，保证获取数据前，组件自定义的cwr函数的逻辑也执行完毕
	            _utils.Utils.defer(this._handleAsyncData.bind(this));
	        }

	        // componentDidMount 中注入的处理逻辑

	    }, {
	        key: '_componentDidMount',
	        value: function _componentDidMount() {
	            // 组件加载完成后再中心共享一次组件，保证渲染完成后缓存中一定存在。
	            //   貌似如果组件需重新解析渲染时，时先执行构造函数生成新组件，再销毁原来组件，再把新组件渲染（未验证...）
	            //   如果如上面的流程，则会导致新组件写入缓存中后有被老组件销毁掉，最终缓存中不再有新组件
	            this._transmitComponent(false);
	            // 如果设置了自动获取异步数据，则执行逻辑
	            if (this.__filtered.source.autoLoad === undefined || this.__filtered.source.autoLoad) {
	                this._handleAsyncData();
	            }
	        }

	        // componentWillUnmount 中注入的处理逻辑
	        // 最外层的子类实例化的时候会调用 _injectFunction 函数，把函数注入到子类示例的 componentWillUnmount 中

	    }, {
	        key: '_componentWillUnmount',
	        value: function _componentWillUnmount() {
	            this._unsetTransmitComponent();
	            this.unmounted = true;
	            delete this.parent;
	        }

	        /**
	         * __init 之前，构造函数中未能执行的逻辑（比如需要在子类构造函数中继续处理的属性，最后再进行初始化）
	         *      开发时，如果是要在 this.__props 初始化之后执行的逻辑，请覆写_beforeInit
	         */

	    }, {
	        key: '_beforeInit',
	        value: function _beforeInit() {
	            // 从缓存中读出组件的默认参数。参数来源可以是在 config.js 里配置；也可以是用户通过调用 UF.config() 配置
	            // （如 loading 组件的 delay 参数在 config.js 中定义为 150）
	            // 开发组件的时候，也可以在this.__props上增加一些默认的参数（注意不要直接用对象覆盖）
	            this.__defaultProps = this._getDefautlProps();
	            this.__props = _utils.Utils.clone(this.__defaultProps);
	        }

	        // __init 执行之后，紧跟着执行的逻辑。一般用于初始化后追加的子类内部初始化逻辑

	    }, {
	        key: '_afterInit',
	        value: function _afterInit() {}

	        // 执行 _initProps 之前的附加的逻辑

	    }, {
	        key: '_beforeInitProps',
	        value: function _beforeInitProps() {}

	        // 执行完 _initProps 后附加的逻辑，由子类自行实现

	    }, {
	        key: '_afterInitProps',
	        value: function _afterInitProps() {}

	        // 执行完 __setProps 后附加的逻辑，由子类自行实现

	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps(newProps) {}

	        // 覆盖原生的setState方法。如果组件已销毁，则不再执行setState。用于异步操作中调用setState时的通用状态检测

	    }, {
	        key: 'setState',
	        value: function setState() {
	            var _get2;

	            if (this.unmounted) {
	                return;
	            }

	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            (_get2 = _get(BaseComponent.prototype.__proto__ || Object.getPrototypeOf(BaseComponent.prototype), 'setState', this)).call.apply(_get2, [this].concat(params));
	        }
	        // 覆盖原生的forceUpdate方法。如果组件已销毁，则不再执行forceUpdate。用于异步操作中调用forceUpdate时的通用状态检测

	    }, {
	        key: 'forceUpdate',
	        value: function forceUpdate() {
	            var _get3;

	            if (this.unmounted) {
	                return;
	            }

	            for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                params[_key2] = arguments[_key2];
	            }

	            (_get3 = _get(BaseComponent.prototype.__proto__ || Object.getPrototypeOf(BaseComponent.prototype), 'forceUpdate', this)).call.apply(_get3, [this].concat(params));
	        }

	        /* 暴露给用户的方法 ***********************************************************************/

	        // 暴露给用户刷新组件的接口

	    }, {
	        key: 'set',
	        value: function set(options) {
	            // 使用 factory.handleProps 函数处理用户配置的参数，并生成组件需要使用的 props
	            options = this._factory.handleProps(Object.assign({ type: this.type }, options));
	            // 要保证调用cwr时传入的nextProps的完整性
	            // 增加一个_selfCalling属性，标识当前进入cwr的为内部调用还是外部调用；_selfCalling上存储了用户传入的配置对象原值
	            var props = this.__mergeProps({ _selfCalling: options }, this.__props, options);
	            // cwr一定存在，且cwr中会执行__setProps。不管子组件是否用的是__props，都能保证兼容性
	            // 因为默认会更改__props并且forceUpdate；如果组件用的自己的props，必定会自己实现cwr中的逻辑
	            this.componentWillReceiveProps(props, this.__props);
	            return this;
	        }
	        // 获取属性key的配置
	        // 可以传递多个key，从前到后依次尝试获取，直至获取到数据为止
	        // 如果未传入可以，则返回整个配置

	    }, {
	        key: 'get',
	        value: function get() {
	            var props = Object.assign({}, this.__filtered, this.__props);

	            for (var _len3 = arguments.length, keys = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                keys[_key3] = arguments[_key3];
	            }

	            if (keys.length > 0) {
	                var result = void 0;
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                    for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                        var key = _step2.value;

	                        result = _utils.Utils.fromObject(key, props);
	                        if (result) {
	                            break;
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError2 = true;
	                    _iteratorError2 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                            _iterator2.return();
	                        }
	                    } finally {
	                        if (_didIteratorError2) {
	                            throw _iteratorError2;
	                        }
	                    }
	                }

	                return result;
	            }
	            return props;
	        }
	        // 触发组件上的事件。包括用户自定义的各种函数/事件（比如配置的onSubmit）
	        // 可以使用 tigger('onSubmit') 来手动触发某个用户定义的函数/事件
	        //   子类里面可能会重写：例如Antd/Dom中的 focus、change 等原生dom事件的触发，会在重写时实现

	    }, {
	        key: 'trigger',
	        value: function trigger(event) {
	            if (this.__props[event]) {
	                for (var _len4 = arguments.length, params = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	                    params[_key4 - 1] = arguments[_key4];
	                }

	                this.__props[event](params);
	            } else {
	                console.error('Warning: There is no event named: ' + event + '. ' + ('Check the component `' + this.type + '` which named `' + this.cacheName + '`'));
	            }
	        }
	        // 隐藏组件
	        // 子组件中有可能重写

	    }, {
	        key: 'hide',
	        value: function hide() {
	            this.__setProps({ hidden: true });
	        }
	        // 展示组件

	    }, {
	        key: 'show',
	        value: function show() {
	            var style = Object.assign({}, this.__props.style);
	            if (this._tempData.display && this._tempData.display !== 'none') {
	                style.display = this._tempData.display;
	            } else {
	                style.display = undefined;
	            }
	            this.__setProps({ style: style, hidden: false });
	        }
	        // 展示 loading 效果

	    }, {
	        key: 'loading',
	        value: function loading() {
	            var __showLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            // this.__setProps({__showLoading: __showLoading});
	            this.setState({ __showLoading: __showLoading });
	        }
	        // 重新获取source数据

	    }, {
	        key: 'reload',
	        value: function reload() {
	            this._handleAsyncData();
	        }
	        // 强制刷新组件
	        // TODO: 不完全刷新

	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            var _this3 = this;

	            // 取出全部二次解析的属性，并重新解析一次
	            var newProps = {};
	            _whitelist2.default.getall(this.type).forEach(function (v) {
	                var oItem = _this3.__filtered['_' + v];
	                oItem && (newProps[v] = oItem);
	            });
	            this.set(newProps);
	        }
	        // 产生快捷操作某个参数的api
	        // 比如可以通过 component.source.set 等直接操作 source 参数（不会触发reload）
	        // operator(targetStr) {
	        //     let self = this;
	        //     let target = Utils.fromObject(targetStr, this.__filtered) || Utils.fromObject(targetStr, this.__props);
	        //     return {
	        //         get(key) {
	        //             if (key) {
	        //                 return target[key];
	        //             }
	        //             return target;
	        //         },
	        //         set(key, value) {
	        //             let params = {};
	        //             if (Utils.typeof(key, 'object')) {
	        //                 params = key;
	        //             } else {
	        //                 params[key] = value;
	        //             }
	        //             return Object.assign(target, params);
	        //         },
	        //         delete(key) {
	        //             if (target[key] !== undefined) {
	        //                 delete target[key];
	        //             }
	        //             return target;
	        //         }
	        //     };
	        // }

	        /* 供子组件调用方法 ***********************************************************************/

	        // 供子组件调用初始化 使用子组件this调用

	    }, {
	        key: '__init',
	        value: function __init() {
	            // 初始化之前，执行一些构造函数中未能执行的初始化逻辑
	            this._beforeInit();

	            // 以下几个函数执行顺序固定，请慎重调整！！
	            // 把父类中设置的需注入到生命周期中的逻辑注入到对应生命周期函数中
	            this._injectFunction();
	            // 共享组件
	            this._transmitComponent();

	            // 执行 _initProps 之前的附加的逻辑
	            this._beforeInitProps();
	            // 将_injectEvent定义的属性转义到_filter上
	            this._injectEventFilter();
	            // 后面传入组件的参数用 __props 代替 props
	            this._initProps();
	            // 把开发时定义的需注入到组件事件中的逻辑注入到对应的事件函数中，并置于__props上
	            // 由于_initProps中会把_injectEvent指定的函数过滤到__filtered中，所以紧接着需要进行处理并重新赋值给__props
	            this._injectEventFunction();
	            // 执行完 _initProps 后附加的逻辑
	            this._afterInitProps();

	            // 处理数据绑定页面
	            // this._handleModel();
	            // 挂载用户传入的需要关联到生命周期中的函数（这个把生命周期的函数做个一个转换，更加语义化）
	            this._loadUserFunction();

	            // 针对一些需要先执行函数得到组件配置并需要重新解析配置的属性进行处理
	            this._analysisProps();

	            // 替换 render 函数，给render加额外处理逻辑
	            this._injectRender();

	            // 开放给用户使用的 Api，需处理下
	            this._handleOpenApi();

	            // 初始化之后，执行子类内部初始化逻辑
	            this._afterInit();
	        }

	        // 获取完整的组件配置：会把config中的通用组件配置合并进来；也会解析自定义组件配置

	    }, {
	        key: '__getConf',
	        value: function __getConf(props) {
	            return this._factory.getConf(props);
	        }

	        // 用于在组件开发中更新__props，类似于setState，只不过是在刷新 __props
	        //   TODO：通过 __setProps 只能设置属性，不能更换函数。
	        //      原因，函数需要额外注入处理，各个函数各不相同，未统一，无法直接更新到__props。所以在_filterHandler中把传入的函数过滤掉了
	        // 也可以传入待刷新完成后执行自己想要执行的逻辑（比如Modal，需弹框显示后才能执行其他操作）
	        // 默认会刷新组件；也可以把第二个参数设为 false 阻止刷新

	    }, {
	        key: '__setProps',
	        value: function __setProps(nextProps, follow) {
	            // 如果组件已销毁，则不再进行任何操作
	            if (this.unmounted) {
	                return;
	            }
	            // 去除掉多余的属性（解决报warning问题）
	            // 因为初始化的时候对函数有额外处理，所以暂时不能随意更改函数属性，需全部过滤
	            // 但是初始化时，需把this.props上的全部赋值给__props，所以是否过滤函数需要增加判断
	            var __props = this._filterHandler(nextProps);
	            // this.__prevProps = this.__props;
	            // this.__props = this.__mergeProps({}, this.__props, __props);
	            // __props一直是用同一个对象，__prevProps为复制来的，这样方便程序里使用深层对象的引用
	            // TODO: 待观察是否有问题
	            this.__prevProps = _utils.Utils.clone(this.__props);
	            this.__props = this.__mergeProps(this.__props, __props);
	            // 执行附加逻辑
	            this._afterSetProps(nextProps);
	            if (follow !== false) {
	                this.forceUpdate();
	                // 延迟执行
	                // setTimeout(follow, 10);
	                // TODO: 待观察效果，update at 2018-07-03
	                // forceUpdate 完成之后执行
	                if (_utils.Utils.typeof(follow, 'function')) {
	                    this._afterUpdateQueue.push(follow);
	                }
	            }
	        }

	        // 把默认配置和当前用户传入配置进行合并，可以传多个参数
	        //  如果把 defaultProps 放在第一位，merge完成后defaultProps的值会变成merge后的数据，如果defaultProps需多次使用，会出问题
	        //  针对此问题，可以第一个参数放一个空对象，类似于Object.assign的用法

	    }, {
	        key: '__mergeProps',
	        value: function __mergeProps() {
	            for (var _len5 = arguments.length, props = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	                props[_key5] = arguments[_key5];
	            }

	            return _utils.Utils.merge.apply(_utils.Utils, [this._uncomplex].concat(props));
	        }

	        // 从props中过滤掉某些属性，例如原始元素不支持的属性

	    }, {
	        key: '__filterProps',
	        value: function __filterProps(props) {
	            var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._filter;

	            return _utils.Utils.filter(props, arr);
	        }

	        // 判断是否需要刷新
	        //   如果是单纯因为父组件属性导致子组件的 cwr 函数被调用，两次的props是相同的，没必要刷新；
	        //   如果是set导致的，则两次的props肯定会有不同，需刷新
	        // 还有：需要把_filter中定义的属性全部过滤掉，这些属性是额外定义的，对判断结果会有影响
	        // update at 2018/08/06, 如果是set的source等过滤属性，要保证这里也能通过，所以仅仅过滤`_`开头的属性

	    }, {
	        key: '__shouldUpdate',
	        value: function __shouldUpdate(props, nextProps, disposeFunc) {
	            return !_utils.Utils.equals(_utils.Utils.filter(props, this._innerFilter), _utils.Utils.filter(nextProps, this._innerFilter), disposeFunc);
	        }

	        // ajax通用方法

	    }, {
	        key: '__ajax',
	        value: function __ajax(config) {
	            var _this4 = this;

	            this._inject(config, 'success', function () {
	                // 增加逻辑：如果组件已销毁，则不再往下执行
	                if (_this4.unmounted) {
	                    return false;
	                }
	            });
	            this._inject(config, 'error', function () {
	                // 增加逻辑：如果组件已销毁，则不再往下执行
	                if (_this4.unmounted) {
	                    return false;
	                }
	            });
	            return this._factory.$ajax(config);
	        }

	        // 解析某个属性的配置。方便开发组件时定义一些可以为配置的属性

	    }, {
	        key: '__analysis',
	        value: function __analysis(item) {
	            return this._factory.generateElement(item);
	        }

	        // 判断是否为权限点 && 是否有权限

	    }, {
	        key: '__authority',
	        value: function __authority(item) {
	            return _authority2.default.check(item, this.insName);
	        }

	        // 获取缓存中的组件

	    }, {
	        key: '__getComponent',
	        value: function __getComponent(name) {
	            return this._factory.$components.get(name);
	        }

	        // 兼容自定义额外操作返回结果有可能为 Promise 的情况。
	        // 如果result是Promse，使用then/catch处理；
	        // 否则，根据返回的是否为false判断要执行成功还是失败

	    }, {
	        key: '__compatePromise',
	        value: function __compatePromise(result, success, error) {
	            if (result instanceof Promise) {
	                result.then(function () {
	                    success && success();
	                }).catch(function () {
	                    error && error();
	                });
	            } else if (result !== false) {
	                success && success();
	            } else {
	                error && error();
	            }
	        }

	        // 从source接口获取数据
	        // 传入的config包含 success 和 error，source一系列处理完成后最终数据才会传给 success

	    }, {
	        key: '__getSourceData',
	        value: function __getSourceData(config) {
	            var _this5 = this;

	            // success 和 error 等来自子组件调用，其余参数如果子组件传入，则进行覆盖
	            var _Object$assign = Object.assign({}, this.__filtered.source, config),
	                target = _Object$assign.target,
	                showLoading = _Object$assign.showLoading,
	                onchange = _Object$assign.onchange,
	                others = _objectWithoutProperties(_Object$assign, ['target', 'showLoading', 'onchange']);

	            this.__execAjax(_extends({}, others, {
	                // 验证返回结果是否为空
	                verifyData: true,
	                onchange: !showLoading ? onchange : function (status) {
	                    _this5._handleSourceLoading(status, showLoading);
	                    onchange && onchange(status);
	                }
	            }));
	        }
	        // 处理source系列接口参数的通用逻辑（例如handler处理）

	    }, {
	        key: '__execAjax',
	        value: function __execAjax(conf) {
	            var _this6 = this;

	            var usePromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            var url = conf.url,
	                params = conf.params,
	                _paramsHandler = conf._paramsHandler,
	                paramsHandler = conf.paramsHandler,
	                _conf$paramIndex = conf.paramIndex,
	                paramIndex = _conf$paramIndex === undefined ? {} : _conf$paramIndex,
	                removeEmptyParams = conf.removeEmptyParams,
	                _handler = conf._handler,
	                handler = conf.handler,
	                _success = conf.success,
	                onSuccess = conf.onSuccess,
	                _error = conf.error,
	                onError = conf.onError,
	                others = _objectWithoutProperties(conf, ['url', 'params', '_paramsHandler', 'paramsHandler', 'paramIndex', 'removeEmptyParams', '_handler', 'handler', 'success', 'onSuccess', 'error', 'onError']);

	            if (url) {
	                // 额外增加对参数预处理逻辑，不暴露给用户使用
	                if (_paramsHandler && false === (params = _paramsHandler(params))) {
	                    return false;
	                }
	                // 可以通过 paramIndex 属性更改默认传递的page和size参数
	                if (params && _utils.Utils.typeof(paramIndex, 'object') && !_utils.Utils.empty(paramIndex)) {
	                    for (var i in params) {
	                        if (paramIndex[i]) {
	                            params[paramIndex[i]] = params[i];
	                            delete params[i];
	                        }
	                    }
	                }
	                if (paramsHandler) {
	                    // 如果paramsHandler返回结果为false，则阻止ajax请求
	                    //  可以在paramsHandler中格式化参数的同时对参数进行校验，如果校验失败，则终止请求
	                    var result = paramsHandler(params, this);
	                    // 使用时需注意，如果调用之外有额外的状态控制，例如loading没写到onchange里，则需要自己额外写判断逻辑恢复状态
	                    if (result === false) {
	                        return false;
	                    }
	                    params = result !== undefined ? result : params;
	                }
	                // 移除为空的属性
	                if (params && removeEmptyParams === true) {
	                    for (var _i in params) {
	                        if (params[_i] === null || params[_i] === undefined || params[_i] === '') {
	                            delete params[_i];
	                        }
	                    }
	                }
	                return new Promise(function (resolve, reject) {
	                    _this6.__ajax(_extends({}, others, {
	                        url: url,
	                        params: params,
	                        success: function success(data, res) {
	                            if (false === (_handler && (data = _handler(data, res)))) {
	                                return false;
	                            }
	                            // 如果用户定义了数据处理函数，先对数据进行处理
	                            handler && (data = handler(data, res, _this6));
	                            // 两个handler都可以通过return false 阻止后续逻辑
	                            // 注意，存在返回数据本身为data的情况。所以需要确认当data为handler处理结果时，再阻止
	                            if (data === false && (_handler || handler)) {
	                                return;
	                            }
	                            // 实际的调用处传入的成功处理逻辑
	                            _success && _success(data, res);
	                            // 成功后的额外操作
	                            onSuccess && onSuccess(data, res, _this6);
	                            usePromise && resolve();
	                        },
	                        error: function error(res) {
	                            // 实际的调用处传入的失败处理逻辑
	                            var result = _error && _error(res);
	                            usePromise && reject();
	                            var userResult = onError && onError(res);
	                            // 失败后额外操作
	                            return userResult !== undefined ? userResult : result;
	                        }
	                    }));
	                });
	            }
	        }

	        // source获取数据时，通用的展示source的逻辑

	    }, {
	        key: '_handleSourceLoading',
	        value: function _handleSourceLoading(status, showLoading) {
	            // 展示loading可以自定义展示效果，showLoading为loading的配置
	            var loadingConf = status;
	            if (status) {
	                loadingConf = showLoading;
	                if (!_utils.Utils.typeof(loadingConf, 'object')) {
	                    loadingConf = { spinning: !!loadingConf };
	                }
	                loadingConf.spinning = true;
	            }
	            // DataEntry里重写了loading，会用到showLoading参数
	            this.loading(loadingConf, showLoading);
	        }

	        // 获取通用的公共属性

	    }, {
	        key: '__getCommonProps',
	        value: function __getCommonProps() {
	            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	            var commonProps = ['style', 'className'];
	            var result = _utils.Utils.pass(this.__props, commonProps);
	            if (props.className) {
	                result.className = props.className + ' ' + (result.className || '');
	            }
	            if (props.style) {
	                result.style = Object.assign(props.style, result.style);
	            }
	            return result;
	        }

	        /* 私有方法 ***********************************************************************/

	        // 过滤 props，生成 __props 和 __filtered

	    }, {
	        key: '_filterHandler',
	        value: function _filterHandler(props) {
	            var newProps = {};
	            for (var i in props) {
	                if (props.hasOwnProperty(i)) {
	                    if (this._filter.indexOf(i) === -1) {
	                        newProps[i] = props[i];
	                    } else {
	                        // 使用merge，保证增量合并。使进入到__filtered中的属性，也能增量的set
	                        // this.__filtered[i] = this.__mergeProps({}, this.__filtered[i], props[i]);
	                        var value = props[i];
	                        // 格式化 api、source、control 系列参数
	                        if (['api', 'source', 'control'].indexOf(i) > -1) {
	                            value = this._varietyPropsFormat(i, value);
	                        }
	                        this.__filtered[i] = _utils.Utils.merge(this.__filtered[i] || {}, value);
	                    }
	                }
	            }
	            return newProps;
	        }

	        // api、source、control 系列参数初始化，处理成对象

	    }, {
	        key: '_varietyPropsFormat',
	        value: function _varietyPropsFormat(key, value) {
	            switch (key) {
	                case 'api':
	                    value = _utils.Utils.varietyFormat(value, 'url');
	                    break;
	                case 'source':
	                    value = _utils.Utils.varietyFormat(value, 'url');
	                    break;
	                case 'control':
	                    value = _utils.Utils.varietyFormat(value, 'target');
	                    break;
	                default:
	                    return value;
	            }
	            // 检查默认配置中是否有配置，如果有进行合并
	            if (!_utils.Utils.empty(value) && this.__defaultProps[key]) {
	                value = this.__mergeProps({}, this.__defaultProps[key], value);
	            }
	            return value;
	        }

	        // 后面传入组件的参数用 __props 代替 props

	    }, {
	        key: '_initProps',
	        value: function _initProps() {
	            // 先把 this.__props 中初始化的多余属性过滤掉
	            // 在这里执行是为了方便子类中__init之前在去更改__props
	            this.__props = this._filterHandler(this.__props);
	            // 然后把组件原props作为新值传给__setProps做合并
	            this.__setProps(this.props, false);
	        }

	        // 获取key的名称

	    }, {
	        key: '_getTransmitName',
	        value: function _getTransmitName() {
	            // 根据 __cache 属性判断
	            var key = this.props.__cache;
	            if (!!this.props.route && this.props.route.__cache) {
	                key = this.props.route.__cache;
	            }
	            return key;
	        }

	        // 共享组件

	    }, {
	        key: '_transmitComponent',
	        value: function _transmitComponent(isCheck) {
	            if (!!this.cacheName) {
	                this._factory.$components.set(this.cacheName, this, isCheck);
	            }
	        }

	        // 解除共享

	    }, {
	        key: '_unsetTransmitComponent',
	        value: function _unsetTransmitComponent() {
	            if (!!this.cacheName) {
	                this._factory.$components.del(this.cacheName);
	                // 删除全部this上的变量，防止循环引用
	                // for (let i in this) {
	                //     delete this[i];
	                // }
	            }
	        }

	        // 处理数据绑定页面。设置关联关系 && 替换模板
	        // _handleModel() {
	        //     this.__props = Model.setCache(this.cacheName, this.__props);
	        // }

	        // 开放给用户使用的 Api，需处理下

	    }, {
	        key: '_handleOpenApi',
	        value: function _handleOpenApi() {
	            var _this7 = this;

	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = this._openApi[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var v = _step3.value;

	                    if (_utils.Utils.typeof(this[v], 'function')) {
	                        this[v] = this[v].bind(this);
	                    }
	                }
	                // 可用于链式调用的api，执行完成后返回当前组件
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = this._chainedApi[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var _v = _step4.value;

	                    if (_utils.Utils.typeof(this[_v], 'function')) {
	                        (function () {
	                            _this7[_v] = _this7[_v].bind(_this7);
	                            var origin = _this7[_v];
	                            _this7[_v] = function () {
	                                for (var _len6 = arguments.length, p = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	                                    p[_key6] = arguments[_key6];
	                                }

	                                origin.call.apply(origin, [_this7].concat(p));
	                                return _this7;
	                            };
	                        })();
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }
	        }

	        // 把父组件定义的 需在React的生命周期中的7个函数中增加的处理逻辑 注入到对应的7个函数中

	    }, {
	        key: '_injectFunction',
	        value: function _injectFunction() {
	            var _iteratorNormalCompletion5 = true;
	            var _didIteratorError5 = false;
	            var _iteratorError5 = undefined;

	            try {
	                for (var _iterator5 = PreventCoverageMap[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                    var v = _step5.value;

	                    // 如果父组件中有等待注入的函数
	                    var inject = this['_' + v];
	                    if (inject) {
	                        this._inject(this, v, inject);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError5 = true;
	                _iteratorError5 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                        _iterator5.return();
	                    }
	                } finally {
	                    if (_didIteratorError5) {
	                        throw _iteratorError5;
	                    }
	                }
	            }
	        }
	    }, {
	        key: '_injectEventFilter',
	        value: function _injectEventFilter() {
	            // api 及 control 的功能使用 injectEvent 的处理方式实现
	            // 必须先处理api参数，只有先注入的函数才能使用其返回值
	            // 绑定 api 系列参数处理逻辑
	            this._handleApiProps();
	            // 绑定 control 系列参数处理逻辑
	            this._handleControlProps();

	            // initProps之前，将_injectEvent中定义的需要额外处理的函数追加到_filter中
	            this._filter = this._filter.concat(this._injectEvent);
	        }

	        // 把开发时定义的需注入到组件事件中的逻辑注入到对应的事件函数中，可见 AutoComplete 组件中的 'onSearch' 函数
	        // _injectEvent 中定义的事件，会被过滤到__filtered中，并在此处加上额外自定义的逻辑重新创建函数

	    }, {
	        key: '_injectEventFunction',
	        value: function _injectEventFunction() {
	            var _this8 = this;

	            var _iteratorNormalCompletion6 = true;
	            var _didIteratorError6 = false;
	            var _iteratorError6 = undefined;

	            try {
	                var _loop = function _loop() {
	                    var v = _step6.value;

	                    _this8.__props[v] = function () {
	                        var _filtered;

	                        var result = _this8['_' + v] && _this8['_' + v].apply(_this8, arguments);
	                        // 返回false会阻止事件
	                        if (result === false) {
	                            return false;
	                        }
	                        var oResult = _this8.__filtered[v] && (_filtered = _this8.__filtered)[v].apply(_filtered, arguments);
	                        // 当函数返回结果为空时，尝试获取用户定义的函数的结果
	                        result === undefined && (result = oResult);
	                        return result;
	                    };
	                };

	                for (var _iterator6 = _utils.Utils.distinct(this._injectEvent)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError6 = true;
	                _iteratorError6 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                        _iterator6.return();
	                    }
	                } finally {
	                    if (_didIteratorError6) {
	                        throw _iteratorError6;
	                    }
	                }
	            }
	        }

	        // 针对一些需要先执行函数得到组件配置并需要重新解析配置的属性进行处理

	    }, {
	        key: '_analysisProps',
	        value: function _analysisProps() {
	            var _this9 = this;

	            var _iteratorNormalCompletion7 = true;
	            var _didIteratorError7 = false;
	            var _iteratorError7 = undefined;

	            try {
	                for (var _iterator7 = _whitelist2.default.getallFuncs(this.type)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	                    var _v2 = _step7.value;

	                    if (this.__filtered[_v2]) {
	                        (function () {
	                            var func = _this9.__filtered[_v2];
	                            _this9.__props[_v2] = function () {
	                                return _this9.__analysis(func.apply(undefined, arguments));
	                            };
	                        })();
	                    }
	                }
	            } catch (err) {
	                _didIteratorError7 = true;
	                _iteratorError7 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                        _iterator7.return();
	                    }
	                } finally {
	                    if (_didIteratorError7) {
	                        throw _iteratorError7;
	                    }
	                }
	            }
	        }

	        // 挂载用户传入的需要关联到生命周期中的函数

	    }, {
	        key: '_loadUserFunction',
	        value: function _loadUserFunction() {
	            var _this10 = this;

	            var _loop2 = function _loop2(f) {
	                // 如果props中有等待注入的函数
	                var inject = _this10.__filtered[f];
	                if (inject) {
	                    var _iteratorNormalCompletion9 = true;
	                    var _didIteratorError9 = false;
	                    var _iteratorError9 = undefined;

	                    try {
	                        for (var _iterator9 = ForUserApi[f].split(',')[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	                            var _v3 = _step9.value;

	                            _this10._inject(_this10, _v3, function () {
	                                // __filtered 需覆盖 __props，以在 _filterHandler 时还原回去
	                                var props = Object.assign({}, _this10.__props, _this10.__filtered);
	                                var result = inject(props, _this10);
	                                // 组件渲染/刷新前可以让用户有机会改参数
	                                if (result && ['beforeCreate', 'beforeRender'].indexOf(f) !== -1) {
	                                    // 防止用户设置过滤属性
	                                    _this10.__props = _this10._filterHandler(result);
	                                }
	                            }, true);
	                        }
	                    } catch (err) {
	                        _didIteratorError9 = true;
	                        _iteratorError9 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                                _iterator9.return();
	                            }
	                        } finally {
	                            if (_didIteratorError9) {
	                                throw _iteratorError9;
	                            }
	                        }
	                    }
	                }
	            };

	            for (var f in ForUserApi) {
	                _loop2(f);
	            }
	            // 支持高级用户（专业前端）直接使用原始的生命周期函数
	            var _iteratorNormalCompletion8 = true;
	            var _didIteratorError8 = false;
	            var _iteratorError8 = undefined;

	            try {
	                for (var _iterator8 = PreventCoverageMap[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                    var _v4 = _step8.value;

	                    // 如果父组件中有等待注入的函数
	                    var _inject2 = this.__filtered['_' + _v4];
	                    if (_inject2) {
	                        // 绑定this，使用户可以在函数中是用this指向当前的this
	                        this._inject(this, _v4, _inject2, false, this);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError8 = true;
	                _iteratorError8 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                        _iterator8.return();
	                    }
	                } finally {
	                    if (_didIteratorError8) {
	                        throw _iteratorError8;
	                    }
	                }
	            }
	        }

	        // 组件 control 系列参数相关处理
	        // 使用 injectEvent 的处理方式实现

	    }, {
	        key: '_handleControlProps',
	        value: function _handleControlProps() {
	            // 还未进行initProps，api参数 props 上，init之后才在 __filtered 上
	            var control = _utils.Utils.varietyFormat(this.props.control, 'target');
	            // 只有用户进行了设置才做处理
	            if (!_utils.Utils.empty(control)) {
	                if (this.__defaultProps.control) {
	                    control = this.__mergeProps({}, this.__defaultProps.control, control);
	                }
	                if (control.trigger) {
	                    this._injectEvent.push(control.trigger);
	                    this._inject(this, '_' + control.trigger, this._controlHandler.bind(this), true);
	                }
	            }
	        }
	    }, {
	        key: '_controlHandler',
	        value: function _controlHandler() {
	            var _filtered$control = this.__filtered.control,
	                target = _filtered$control.target,
	                type = _filtered$control.type,
	                params = _filtered$control.params,
	                handler = _filtered$control.handler,
	                _filtered$control$pre = _filtered$control.preventDefault,
	                preventDefault = _filtered$control$pre === undefined ? true : _filtered$control$pre,
	                _filtered$control$sto = _filtered$control.stopPropagation,
	                stopPropagation = _filtered$control$sto === undefined ? true : _filtered$control$sto;

	            if (!target) {
	                return;
	            }
	            // 阻止默认事件及冒泡

	            for (var _len7 = arguments.length, para = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	                para[_key7] = arguments[_key7];
	            }

	            if (_utils.Utils.typeof(para[0], 'object') && para[0].preventDefault) {
	                preventDefault && para[0].preventDefault();
	                stopPropagation && para[0].stopPropagation();
	            }
	            // 1、动作类型为：绑定(开发使用)
	            if (type === 'bind') {
	                target.apply(undefined, _toConsumableArray(params).concat(para));
	                return;
	            }
	            // target可以为一个函数，函数的参数为trigger的参数列表，函数返回一个target的字符串
	            var targetArr = target;
	            if (_utils.Utils.typeof(target, 'function')) {
	                targetArr = target.apply(undefined, para);
	            }
	            // 支持target为一个数组，配置同时操作多个同类的target
	            if (!_utils.Utils.typeof(targetArr, 'array')) {
	                targetArr = [targetArr];
	            }
	            var _iteratorNormalCompletion10 = true;
	            var _didIteratorError10 = false;
	            var _iteratorError10 = undefined;

	            try {
	                for (var _iterator10 = targetArr[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	                    var _v5 = _step10.value;

	                    var targetStr = _v5;
	                    // targetAttr 可以为空数组，即目标直接指向组件

	                    var _targetStr$split = targetStr.split('.'),
	                        _targetStr$split2 = _toArray(_targetStr$split),
	                        targetName = _targetStr$split2[0],
	                        targetAttr = _targetStr$split2.slice(1);

	                    var _target = this.__getComponent(targetName);
	                    if (_target) {
	                        // 如果没设置type，则根据target的类型确定
	                        if (!type) {
	                            var attr = _utils.Utils.fromObject(targetAttr.join('.'), _target);
	                            type = _utils.Utils.typeof(attr, 'function') ? 'call' : 'assign';
	                        }
	                        switch (type) {
	                            // 2、动作类型为：调用
	                            case 'call':
	                                {
	                                    var func = _utils.Utils.fromObject(targetAttr.join('.'), _target);
	                                    // 如果没有设置params，则尝试执行handler
	                                    !params && handler && (params = handler.apply(undefined, para.concat([_target, this])));
	                                    // 转成数组以便解构
	                                    !_utils.Utils.typeof(params, 'array') && (params = [params]);
	                                    func.call.apply(func, [_target].concat(_toConsumableArray(params)));
	                                    break;
	                                }
	                            // 3、动作类型为：赋值
	                            case 'assign':
	                                {
	                                    var result = handler && handler.apply(undefined, para.concat([_target, this]));
	                                    var tData = _utils.Utils.generateObject(targetAttr.join('.'), result);
	                                    // 如果设置了params，则会把要设置的值和params合并到一起，并同时set给组件
	                                    if (params) {
	                                        tData = Object.assign({}, params, tData);
	                                    }
	                                    // 要调set函数，才能走cwr逻辑，适用于自定义组件
	                                    _target.set(tData);
	                                    break;
	                                }
	                            default:
	                                break;
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError10 = true;
	                _iteratorError10 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
	                        _iterator10.return();
	                    }
	                } finally {
	                    if (_didIteratorError10) {
	                        throw _iteratorError10;
	                    }
	                }
	            }
	        }

	        // 自动异步获取数据

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {
	            var _this11 = this;

	            var _filtered$source = this.__filtered.source,
	                url = _filtered$source.url,
	                target = _filtered$source.target;

	            if (url) {
	                this.__getSourceData({
	                    success: function success(data) {
	                        // 如果用户自己配置了 target 属性，则按照用户定义的赋值
	                        target = target === 'content' ? 'children' : target;
	                        // 目标元素可以有层级,可以给更深层的属性设置,例如：pagination.count
	                        var tData = _utils.Utils.generateObject(target, data);
	                        // __setProps在table、form等自定义组件不适用
	                        _this11.set(tData);
	                    }
	                });
	            }
	        }

	        // 组件 api 系列参数相关处理
	        // 使用 injectEvent 的处理方式实现

	    }, {
	        key: '_handleApiProps',
	        value: function _handleApiProps() {
	            // 还未进行initProps，api参数 props 上，init之后才在 __filtered 上
	            var api = _utils.Utils.varietyFormat(this.props.api, 'url');
	            // 只有用户进行了设置才做处理
	            if (!_utils.Utils.empty(api)) {
	                if (this.__defaultProps.api) {
	                    api = this.__mergeProps({}, this.__defaultProps.api, api);
	                }
	                if (api.trigger) {
	                    this._injectEvent.push(api.trigger);
	                    // TODO: 有待观察，目前看代码之间的相互限制有点多
	                    this._inject(this, '_' + api.trigger, this._apiHandler.bind(this), true);
	                }
	            }
	        }

	        // 提交数据功能

	    }, {
	        key: '_apiHandler',
	        value: function _apiHandler(oParams) {
	            var _filtered$api = this.__filtered.api,
	                _filtered$api$params = _filtered$api.params,
	                params = _filtered$api$params === undefined ? oParams : _filtered$api$params,
	                onSuccess = _filtered$api.onSuccess,
	                onError = _filtered$api.onError,
	                showLoading = _filtered$api.showLoading,
	                others = _objectWithoutProperties(_filtered$api, ['params', 'onSuccess', 'onError', 'showLoading']);

	            if (!others.url) {
	                return;
	            }
	            // 如果传入或者设置的params不是简单对象，则重置params
	            if (!_utils.Utils.directInstanceof(params, [Object, Array])) {
	                params = {};
	            }
	            var hideLoading = void 0;
	            return this.__execAjax(_extends({}, others, {
	                params: params,
	                success: function success(data, res) {
	                    // 改变了onSuccess在__execAjax中的执行顺序，所以取出后不再传入给__execAjax
	                    var result = onSuccess && onSuccess(data, res);
	                    // onSuccess有返回值，则执行默认提示
	                    if (result === undefined || result === true) {
	                        _antd.message.success('执行成功' + (res.msg ? '：' + res.msg : _utils.Utils.typeof(res.data, 'number') ? '，影响 ' + res.data + ' 条数据' : '!'), 2);
	                    }
	                },
	                error: function error(res) {
	                    var result = onError && onError(res);
	                    // onError有返回值，则执行默认提示
	                    if (result === undefined || result === true) {
	                        _antd.message.error(res.msg ? res.msg : '执行失败!', 3);
	                    }
	                    return result || false;
	                },
	                onchange: function onchange(status) {
	                    if (status) {
	                        if (showLoading) {
	                            hideLoading = _antd.message.loading('提交中，请等待~', 0);
	                        }
	                    } else {
	                        hideLoading && hideLoading();
	                    }
	                }
	            }), true);
	        }

	        // 替换 render 函数，给render加额外处理逻辑

	    }, {
	        key: '_injectRender',
	        value: function _injectRender() {
	            var render = this.render;
	            this.render = this._render.bind(this, render);
	        }
	        // 插入额外render处理逻辑

	    }, {
	        key: '_render',
	        value: function _render(render) {
	            // 如果设置了__showLoading，则在组件外额外追加一个loading组件
	            if (this.state.__showLoading !== undefined) {
	                var loadingConf = this.state.__showLoading;
	                if (_utils.Utils.typeof(loadingConf, 'boolean')) {
	                    loadingConf = { spinning: loadingConf };
	                }
	                if (loadingConf.spinning === undefined) {
	                    loadingConf.spinning = true;
	                }
	                return _react2.default.createElement(
	                    _antd.Spin,
	                    loadingConf,
	                    render.call(this)
	                );
	            }
	            // 隐藏组件，如果组件隐藏，则不再进行render
	            //  TODO: 待观察，如果有问题，可以改为外出嵌套display:none的div实现
	            //      return null 会导致组件销毁，不能保存组件操作状态
	            // if (this.__filtered.hidden === true) {
	            //     return null;
	            // }
	            if (this.__filtered.hidden === true) {
	                // return null;
	                this.__props.style = this.__props.style || {};
	                this.__props.style.display = 'none';
	            } else if (this.__filtered.hidden === false && this.__props.style) {
	                delete this.__props.style.display;
	            }
	            return render.call(this);
	        }

	        // 函数替换 函数
	        // 参数依次为 父级、目标函数、新函数、是否把原来逻辑提前

	    }, {
	        key: '_inject',
	        value: function _inject(parent, target, newFunc, oldAhead) {
	            return _utils.Utils.inject(parent, target, newFunc, oldAhead, this);
	        }
	    }]);

	    return BaseComponent;
	}(_react.Component);

	exports.default = BaseComponent;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    Utils: __webpack_require__(122).default,
	    Ajax: __webpack_require__(126).default
	};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _underscore = __webpack_require__(123);

	var _underscore2 = _interopRequireDefault(_underscore);

	var _moment2 = __webpack_require__(125);

	var _moment3 = _interopRequireDefault(_moment2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
	                                                                                                                                                                                                     * @file 一些常用的函数工具
	                                                                                                                                                                                                     * @author liuzechun
	                                                                                                                                                                                                     **/

	var I64BIT_TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-'.split('');
	var s4 = function s4() {
	    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
	};

	// 引入了underscore的功能，并在其上增加了自定义的一些函数
	var utils = Object.assign({}, _underscore2.default, {
	    // 如果要使用原生的功能，可通过 _ 来访问
	    _: _underscore2.default,

	    /*********************************************************************************/
	    /* 原函数改造 **********************************************************************/
	    /*********************************************************************************/

	    // 如果数据合法，返回moment数据；否则返回null
	    moment: function moment() {
	        var result = _moment3.default.apply(undefined, arguments);
	        if (result.isValid()) {
	            return result;
	        }
	        return arguments.length <= 0 ? undefined : arguments[0];
	    },

	    // 数组是否有交集
	    isIntersection: function isIntersection() {
	        return _underscore2.default.intersection.apply(_underscore2.default, arguments).length > 0;
	    },

	    // ES6 对象合并
	    assign: function assign() {
	        return Object.assign.apply(Object, arguments);
	    },

	    // JSON.stringify 的改造版，跳过复杂属性、不忽略正则等变量等，用于把一个对象转换成一个字符串
	    stringify: function stringify(data) {
	        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;

	        if (level <= 0) {
	            return '_$leaf';
	        }
	        if (utils.typeof(data, ['object', 'array', 'symbol'])) {
	            if (utils.directInstanceof(data, [Object, Array])) {
	                data = utils.each(data, function (v) {
	                    return utils.stringify(v, level - 1);
	                });
	                data = JSON.stringify(data);
	            } else {
	                // Symbol(react.element)
	                data = '_$Symbol';
	            }
	        } else if (utils.typeof(data, 'function')) {
	            data = '_$function';
	        }
	        return '' + data;
	    },

	    // 数组去重
	    distinct: function distinct(arr) {
	        return [].concat(_toConsumableArray(new Set(arr)));
	    },


	    /*********************************************************************************/
	    /* 自定义工具函数 ******************************************************************/
	    /*********************************************************************************/

	    // 数字前面补充0
	    padNum: function padNum(num, n) {
	        var len = ('' + num).length;
	        return Array(n > len ? n - len + 1 : 0).join(0) + num;
	    },

	    // 生成随机唯一ID，32位
	    uniqueId: function uniqueId() {
	        return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
	    },

	    // 字符串哈希
	    //  当传入第3个属性时，说明对象不是简单对象，走自定义处理逻辑，过滤掉非p
	    hash: function hash(text, len, level) {
	        var hash = 5381;
	        if (level) {
	            text = utils.stringify(text, level);
	        } else {
	            text = JSON.stringify(text);
	        }
	        text += '';
	        var i = text.length - 1;
	        for (; i > -1; i--) {
	            hash += (hash << 5) + text.charCodeAt(i);
	        }
	        var value = hash & 0x7FFFFFFF;
	        var retValue = '';
	        do {
	            retValue += I64BIT_TABLE[value & 0x3F];
	        } while (value >>= 1);
	        // 凑长度
	        if (len) {
	            while (retValue.length < len) {
	                retValue = retValue + retValue;
	            }
	            if (retValue.length > len) {
	                retValue = retValue.slice(0, len);
	            }
	        }
	        return retValue;
	    },

	    // 数据格式转换
	    format: function format(value, type) {
	        if (value === undefined) {
	            return undefined;
	        }
	        switch (type) {
	            case 'number':
	                value = +value || 0;
	                break;
	            case 'string':
	                value = '' + value;
	                break;
	            case 'boolean':
	                value = value === 'false' || value === 'FALSE' ? false : !!value;
	                break;
	            case 'array':
	                if (utils.typeof(value, 'undefined')) {
	                    value = [];
	                }
	                if (!utils.typeof(value, 'array')) {
	                    value = [value];
	                }
	                break;
	            case 'undefined':
	                value = undefined;
	                break;
	            default:
	                ;
	        }
	        return value;
	    },

	    // 判断数组或对象是否为空
	    empty: function empty(obj) {
	        if (utils.typeof(obj, ['array', 'object'])) {
	            for (var t in obj) {
	                return false;
	            }
	            return true;
	        } else {
	            return !obj;
	        }
	    },

	    // 浅拷贝，指针指向，只拷贝一层
	    copy: function copy(obj) {
	        return utils.clone(obj, 1);
	    },

	    // 深拷贝对象/数组
	    // level 为深拷贝的层级，默认一直遍历到最深层.
	    // 默认10层，防止循环引用
	    clone: function clone(data) {
	        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

	        if (level <= 0) {
	            return data;
	        }
	        var newData = void 0;
	        if (utils.typeof(data, 'array')) {
	            newData = [];
	        } else if (utils.typeof(data, 'object') && utils.directInstanceof(data, Object) && !Object.isFrozen(data)) {
	            newData = {};
	        } else {
	            return data;
	        }
	        for (var i in data) {
	            if (data.hasOwnProperty(i)) {
	                newData[i] = utils.clone(data[i], level - 1);
	            }
	        }
	        return newData;
	    },

	    // 以第一个对象为目标，依次把后面的对象merge到上去，支持深层的merge，类似于一个深层的 Object.assign()
	    // ghost 为一特殊参数，分三种情况
	    //   level 参数为拷贝层数，不传则默认遍历10层，防止循环引用
	    //   filter 为数组，声明某些属性无需合并直接覆盖
	    // ** 只适用于JSON等对象字面量的对象，比较复杂的对象直接覆盖，不做深层遍历
	    merge: function merge(ghost, target) {
	        var filter = [];
	        var level = 10;
	        // 场景1：ghost 为level值，即merge的深度

	        for (var _len = arguments.length, objs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	            objs[_key - 2] = arguments[_key];
	        }

	        if (utils.typeof(ghost, 'number')) {
	            level = ghost;
	            // 场景2：ghost 为filter数组，声明某些属性无需合并直接覆盖
	        } else if (utils.typeof(ghost, 'array')) {
	            filter = ghost;
	            // 场景3：无上述两种类型的参数，ghost为target
	        } else {
	            objs.unshift(target);
	            target = ghost;
	        }
	        if (level <= 0) {
	            // 如果存储内容不为普通对象，例如类的实例，copy不能拷贝继承的函数
	            // return utils.copy(objs[0]);
	            return objs[0];
	        }
	        var result = target;
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = objs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var obj = _step.value;

	                // 首先判断对象是否冻结（冻结的对象为只读对象，其属性不可直接更改），直接覆盖
	                // 其次判断两个数据的格式，只有两个数据都为引用类型时，才需要循环合并
	                // 然后判断对象是否为直接继承自Object，如果不是，复杂对象不再深层遍历，直接覆盖
	                // array 应该直接覆盖，否则数组的值只增不减
	                if (!Object.isFrozen(result) && utils.typeof(result, 'object') && utils.typeof(obj, 'object') && utils.directInstanceof(result, Object)) {
	                    for (var i in obj) {
	                        if (filter.indexOf(i) === -1) {
	                            result[i] = utils.merge(level - 1, result[i], obj[i]);
	                        } else {
	                            result[i] = utils.clone(obj[i]);
	                        }
	                    }
	                } else {
	                    // update at 2018/01/19，undefined的值也要覆盖，否则影响form中select的清空功能
	                    // result = obj === undefined ? target : obj;
	                    // update at 2018/10/24，使用clone，防止多个对象merge时，深层的对象的源数据会被改变。例如：utils.merge({}, a, b); a 对象的 a.b.c 的值会被 b.b.c 改变
	                    //  但是多出来的大量clone需要考虑是否会有性能问题
	                    // result = obj;
	                    result = utils.clone(obj);
	                }
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return result;
	    },

	    // 从obj中过滤掉某些属性
	    filter: function filter(obj, arr) {
	        if (utils.typeof(arr, 'string')) {
	            arr = [arr];
	        }
	        var newObj = {};
	        for (var i in obj) {
	            if (obj.hasOwnProperty(i) && arr.indexOf(i) === -1) {
	                newObj[i] = obj[i];
	            }
	        }
	        return newObj;
	    },

	    // 从obj中获取某些属性
	    pass: function pass() {
	        return utils.reverseFilter.apply(utils, arguments);
	    },
	    reverseFilter: function reverseFilter(obj, arr) {
	        if (utils.typeof(arr, 'string')) {
	            arr = [arr];
	        }
	        var newObj = {};
	        for (var i in obj) {
	            if (obj.hasOwnProperty(i) && arr.indexOf(i) >= 0) {
	                newObj[i] = obj[i];
	            }
	        }
	        return newObj;
	    },

	    // 对比两个值是否相等
	    // 注意：不要随意切换其余的对比函数，例如underscore的isEqual
	    // TODO: 太ugly了。。。
	    equals: function equals(value1, value2) {
	        var disposeFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	        if (disposeFunc) {
	            return utils.equals1(value1, value2);
	        } else {
	            return utils.equals2(value1, value2);
	        }
	    },

	    // 转成字符串再做对比，会对函数进行处理
	    // 注意：不要随意切换其余的对比函数，例如underscore的isEqual
	    equals1: function equals1(value1, value2) {
	        // 检测类型，类型一致才继续后续的对比
	        if (utils.getType(value1) !== utils.getType(value2)) {
	            return false;
	        }
	        // 普通类型校验
	        if (value1 === value2) {
	            return true;
	        }
	        // 对象或数组的话，只检查了一层
	        if (utils.typeof(value1, ['object', 'array'])) {
	            var keys = Object.keys(Object.assign({}, value1, value2));
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var i = _step2.value;

	                    // 如果是函数，把函数转换成字符串再做比较。否则如果函数声明两次，用is比较返回的是false
	                    if (utils.typeof(value1[i], 'function') && utils.typeof(value2[i], 'function')) {
	                        if (utils.toString(value1[i]) !== utils.toString(value2[i])) {
	                            return false;
	                        }
	                    } else if (!Object.is(value1[i], value2[i]) && !_underscore2.default.isEqual(value1[i], value2[i])) {
	                        return false;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return true;
	        }
	        // 包括：function、null、undefined、regexp、number、string、boolean、date ...
	        if (utils.toString(value1) === utils.toString(value2)) {
	            return true;
	        }
	        return false;
	    },

	    // 函数也进行对比
	    equals2: function equals2(value1, value2) {
	        // 检测类型，类型一致才继续后续的对比
	        if (utils.getType(value1) !== utils.getType(value2)) {
	            return false;
	        }
	        // 普通类型校验
	        if (value1 === value2) {
	            return true;
	        }
	        // 对象或数组的话，只检查了一层
	        if (utils.typeof(value1, ['object', 'array'])) {
	            var keys = Object.keys(Object.assign({}, value1, value2));
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var i = _step3.value;

	                    // 如果是函数，把函数转换成字符串再做比较。否则如果函数声明两次，用is比较返回的是false
	                    // update at 2018-12-26，当传入新定义的函数时，支持函数更新（原逻辑当传入函数结构一置，但是重新生成并绑定的参数不同时，无法检测出来）
	                    // if (utils.typeof(value1[i], 'function') && utils.typeof(value2[i], 'function')) {
	                    //     if (utils.toString(value1[i]) !== utils.toString(value2[i])) {
	                    //         return false;
	                    //     }
	                    // } else
	                    if (!Object.is(value1[i], value2[i]) && !_underscore2.default.isEqual(value1[i], value2[i])) {
	                        return false;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            return true;
	        }
	        // 包括：function、null、undefined、regexp、number、string、boolean、date ...
	        // if (utils.toString(value1) === utils.toString(value2)) {
	        if (_underscore2.default.isEqual(value1, value2)) {
	            return true;
	        }
	        return false;
	    },

	    // 检查是否有改变内容。与equals的区别是，仅检测newVal中的值相对于oldVal相应的值是否发生了变化
	    //  注意：newVal是oldVal的子集且值没有变化时，返回的是false
	    isChange: function isChange(newVal, oldVal) {
	        // 检测类型，类型一致才继续后续的对比
	        if (utils.getType(newVal) !== utils.getType(oldVal)) {
	            return true;
	        }
	        if (utils.typeof(newVal, ['object', 'array'])) {
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = Object.keys(newVal)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var i = _step4.value;

	                    if (utils.isChange(newVal[i], oldVal[i])) {
	                        return true;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }
	        }
	        if (utils.toString(newVal) !== utils.toString(oldVal)) {
	            return true;
	        }
	        return false;
	    },

	    // 获取变化的内容
	    getChange: function getChange(newVal, oldVal) {
	        var result = {};
	        var _iteratorNormalCompletion5 = true;
	        var _didIteratorError5 = false;
	        var _iteratorError5 = undefined;

	        try {
	            for (var _iterator5 = Object.keys(newVal)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                var i = _step5.value;

	                if (!utils.equals(newVal[i], oldVal[i], false)) {
	                    result[i] = newVal[i];
	                }
	            }
	        } catch (err) {
	            _didIteratorError5 = true;
	            _iteratorError5 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                    _iterator5.return();
	                }
	            } finally {
	                if (_didIteratorError5) {
	                    throw _iteratorError5;
	                }
	            }
	        }

	        return result;
	    },

	    // 子串是否处于字符串最末尾
	    isLast: function isLast(sub, str) {
	        return str.lastIndexOf(sub) === str.length - sub.length;
	    },

	    // each 遍历对象属性，类似于jQuery的each函数，方便react的render函数中遍历对象
	    // callback 为回调函数，支持三个参数：依次是 item, index, obj
	    // 注意：返回结果随着传入的参数变化，如果传入的是数组，则返回数组；如果传入的是对象，则返回对象
	    each: function each(obj, callback) {
	        var result = utils.typeof(obj, 'array') ? [] : {};
	        for (var i in obj) {
	            result[i] = callback(obj[i], i, obj);
	        }
	        return result;
	    },

	    // map 遍历对象属性，类似于上面的each
	    // 不同点在于：永远返回数组，对象也会遍历成数组
	    map: function map(obj, callback) {
	        var result = [];
	        for (var i in obj) {
	            result.push(callback(obj[i], i, obj));
	        }
	        return result;
	    },

	    // 把多数组嵌套层级拉平
	    drawLevel: function drawLevel(arr) {
	        var result = [];
	        arr.forEach(function (item) {
	            if (utils.typeof(item, 'array')) {
	                item = utils.drawLevel(item);
	            }
	            result = result.concat(item);
	        });
	        return result;
	    },

	    // 遍历深层数组
	    // 多层数组嵌套，保证原来数组层级的情况下遍历数组，值到值不为数组，并对每一项执行函数func
	    traverse: function traverse(arr, func) {
	        if (utils.typeof(arr, 'array')) {
	            return arr.map(function (item) {
	                return utils.traverse(item, func);
	            });
	        }
	        return func(arr);
	    },

	    // 根据路由模式生成真实的链接
	    // pattern  路由模式，如：#/visual/room/:room/realMode/:rack_col/:sn
	    // data 真实数据，模式中的:room即在data中取room字段的值
	    getPathFromPattern: function getPathFromPattern(pattern, data) {
	        var path = '#';
	        if (pattern) {
	            var arr = pattern.slice(2, pattern.length).split('/');
	            var _iteratorNormalCompletion6 = true;
	            var _didIteratorError6 = false;
	            var _iteratorError6 = undefined;

	            try {
	                for (var _iterator6 = arr[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                    var v = _step6.value;

	                    if (v.indexOf(':') === 0) {
	                        var key = v.slice(1, v.length);
	                        path += '/' + data[key];
	                    } else {
	                        path += '/' + v;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError6 = true;
	                _iteratorError6 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                        _iterator6.return();
	                    }
	                } finally {
	                    if (_didIteratorError6) {
	                        throw _iteratorError6;
	                    }
	                }
	            }
	        } else {
	            path = 'javascript:void(0);';
	        }
	        return path;
	    },

	    // 跳转链接，router的调整组件会刷新两次，不过也不建议使用此函数，可以使用a标签代替
	    goto: function goto(path) {
	        var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        // 如果path不是已#/开头，且不是/开头，则加上#/
	        path = path.indexOf('#/') !== 0 ? path.indexOf('/') !== 0 ? '#/' + path : path : path;
	        var nowPath = window.location.hash;
	        if (path !== nowPath && path !== '' || forceUpdate) {
	            // 之所以不用hashHistory.push()是因为会自动执行两次push
	            window.location.href = path;
	        }
	    },

	    // 转换为字符串，原生的toString方法不适用于undefined，null等
	    toString: function toString(value) {
	        return '' + value;
	    },

	    // 获取数据的类型，返回的类型名称为全小写
	    // 包括：object、array、function、null、undefined、regexp、number、string、boolean、date ...
	    // 推荐使用 utils.typeof 函数
	    getType: function getType(value) {
	        return {}.toString.call(value).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
	    },

	    // 判断 value 是否为指定类型
	    // type 可以为一个字符串或者一个数组
	    typeof: function _typeof(value, type) {
	        if (utils.getType(type) === 'string') {
	            return utils.getType(value) === type;
	        } else if (utils.getType(type) === 'array') {
	            return type.indexOf(utils.getType(value)) !== -1;
	        } else {
	            return false;
	        }
	    },

	    // 把中横线命名的字符串转换成帕斯卡命名形式
	    toPascal: function toPascal(str) {
	        return (str || '').split('-').map(function (i) {
	            return i.replace(/^\w/g, function (v) {
	                return v.toUpperCase();
	            });
	        }).join('');
	    },

	    // 下划线转换驼峰
	    toHump: function toHump(str) {
	        return (str || '').replace(/\_(\w)/g, function (all, letter) {
	            return letter.toUpperCase();
	        });
	    },

	    // 驼峰转换下划线
	    toLine: function toLine(str) {
	        return (str || '').replace(/([A-Z])/g, '_$1').toLowerCase();
	    },

	    // 判断组件是否继承自某个类，支持验证自己
	    // 根据组件的引用（通过import获得）判断，支持深层查找
	    isExtendsOf: function isExtendsOf(item, superClass) {
	        if (item === superClass) {
	            return true;
	        }
	        // item.prototype.__proto__.__proto__.constructor === SuperClass
	        // let Item = item.prototype && item.prototype.__proto__;
	        // while(Item) {
	        //     if (Item.constructor === superClass) {
	        //         return true;
	        //     }
	        //     Item = Item.__proto__
	        // };
	        // return false;
	        return superClass.isPrototypeOf(item);
	    },

	    // 某个对象是否直接来自某个类的实例
	    directInstanceof: function directInstanceof(obj, cls) {
	        if (!utils.typeof(cls, 'array')) {
	            cls = [cls];
	        }
	        var _iteratorNormalCompletion7 = true;
	        var _didIteratorError7 = false;
	        var _iteratorError7 = undefined;

	        try {
	            for (var _iterator7 = cls[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	                var v = _step7.value;

	                if (obj && obj.constructor && obj.constructor.prototype === v.prototype) {
	                    return true;
	                }
	            }
	        } catch (err) {
	            _didIteratorError7 = true;
	            _iteratorError7 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                    _iterator7.return();
	                }
	            } finally {
	                if (_didIteratorError7) {
	                    throw _iteratorError7;
	                }
	            }
	        }

	        return false;
	    },


	    // 把数组、对象转换成select等需要的options标准格式
	    toOptions: function toOptions(data) {
	        var result = [];
	        if (utils.typeof(data, 'array')) {
	            // ['value', 'value2']
	            if (utils.typeof(data[0], ['string', 'number', 'boolean'])) {
	                result = utils.distinct(data).map(function (v) {
	                    return { label: v, value: v };
	                });
	                // 如果数据无需格式化，直接返回
	            } else if (data[0] && data[0].label !== undefined && data[0].value !== undefined) {
	                result = data;
	                // 可以处理以下几种格式的数据
	                // {label: 'a', value: 1}
	                // {key: 1, value: 'a'}
	                // {id: 1, name: 'a'}
	            } else {
	                result = data.map(function (v) {
	                    return v.key !== undefined && v.value !== undefined ? v.children ? { label: v.value, value: v.key, children: utils.toOptions(v.children) } : { label: v.value, value: v.key } : v.id !== undefined && v.name !== undefined ? v.children ? { label: v.name, value: v.id, children: utils.toOptions(v.children) } : { label: v.name, value: v.id } : v;
	                });
	            }
	        } else if (utils.typeof(data, 'object')) {
	            // {key: value}
	            for (var i in data) {
	                // 如果 data 的值还是对象，则不是简单的键值对，很可能是 键-原数据对象 的结构
	                if (utils.typeof(data[i], 'object')) {
	                    return utils.toOptions(Object.values(data));
	                }
	                var item = {
	                    label: data[i],
	                    value: i
	                };
	                // true 选项移到首位
	                if (i.toString().toLowerCase() === 'true') {
	                    result.unshift(item);
	                } else {
	                    result.push(item);
	                }
	            }
	        }
	        return result;
	    },

	    // 从options结构中取值并形成一个新的数组（或者是类似于options的结构）
	    // 可以取value或label
	    // fromOptions(data, propName) {
	    //     let format = utils.toOptions(data);
	    //     return format.map(item=>item[propName]);
	    // },
	    // 获取options数据中的第一个值
	    getFirstOption: function getFirstOption(data) {
	        var format = utils.toOptions(data);
	        if (format[0]) {
	            return format[0].value;
	        }
	    },

	    // 把数据格式化成json展示
	    prettyJson: function prettyJson(data, origin) {
	        if (origin) {
	            return utils.syntaxHighlight(data);
	        }
	        return {
	            type: 'pre',
	            className: 'json',
	            dangerouslySetInnerHTML: { __html: utils.syntaxHighlight(data) }
	        };
	    },

	    // 根据一个字符串，生成一个深层的对象
	    // 例如：根据 a.b.c 生成 {a:{b:{c: 1}}}
	    generateObject: function generateObject(strc, value) {
	        var tData = value;
	        // 如果 strc 为空，则返回 value 本身
	        if (strc) {
	            var _iteratorNormalCompletion8 = true;
	            var _didIteratorError8 = false;
	            var _iteratorError8 = undefined;

	            try {
	                for (var _iterator8 = strc.split('.').reverse()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                    var v = _step8.value;

	                    tData = _defineProperty({}, v, tData);
	                }
	            } catch (err) {
	                _didIteratorError8 = true;
	                _iteratorError8 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                        _iterator8.return();
	                    }
	                } finally {
	                    if (_didIteratorError8) {
	                        throw _iteratorError8;
	                    }
	                }
	            }
	        }
	        return tData;
	    },

	    // 根据一个字符串，从一个深层的对象中取数据
	    // 例如：根据 a.b.c 从对象 {a:{b:{c: 1}}} 中取出 1
	    fromObject: function fromObject(strc, obj) {
	        var target = obj;
	        // 如果 strc 为空字符串，则返回 obj 本身
	        if (strc) {
	            var _iteratorNormalCompletion9 = true;
	            var _didIteratorError9 = false;
	            var _iteratorError9 = undefined;

	            try {
	                for (var _iterator9 = strc.split('.')[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	                    var v = _step9.value;

	                    if (!target || !utils.typeof(target, 'object')) {
	                        return undefined;
	                    }
	                    target = target[v];
	                }
	            } catch (err) {
	                _didIteratorError9 = true;
	                _iteratorError9 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                        _iterator9.return();
	                    }
	                } finally {
	                    if (_didIteratorError9) {
	                        throw _iteratorError9;
	                    }
	                }
	            }
	        }
	        return target;
	    },

	    // 根据一个字符串，把数据塞入一个深层的对象中
	    toObject: function toObject(origin, strc, value) {
	        var tData = utils.generateObject(strc, value);
	        var level = strc.split('.').length;
	        utils.merge(level, origin, tData);
	    },

	    // 根据一个字符串，把数据从一个深层的对象中删除
	    delFromObject: function delFromObject(strc, obj) {
	        var lastKey = strc;
	        var target = obj;
	        // 如果 strc 为空字符串，则返回 obj 本身
	        if (strc && strc.lastIndexOf('.') > -1) {
	            lastKey = strc.slice(strc.lastIndexOf('.') + 1);
	            var prestrc = strc.slice(0, strc.lastIndexOf('.'));
	            target = utils.fromObject(prestrc, obj);
	        }
	        target && delete target[lastKey];
	        return obj;
	    },

	    // url中如果有类似于`:id`这种形式的动态参数，则替换成对应的参数值
	    urlAnalysis: function urlAnalysis(url, params) {
	        var delParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	        if (!url || url.indexOf(':') === -1 || !utils.typeof(params, 'object')) {
	            return url;
	        }
	        var matched = '';
	        for (var i in params) {
	            // 匹配一个最长的
	            if (url.indexOf(':' + i) > -1 && matched.length < i.length) {
	                matched = i;
	            }
	        }
	        if (matched) {
	            url = url.replace(':' + matched, params[matched]);
	            delParams && delete params[matched];
	            url = utils.urlAnalysis(url, params, delParams);
	        }
	        return url;
	    },

	    // 想某个对象上的某个函数注入额外逻辑
	    // 参数依次为 父级、目标函数、新函数、是否把原来逻辑提前、bind的对象
	    inject: function inject(parent, target, newFunc) {
	        var oldAhead = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	        var utilsObj = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

	        var origin = parent[target];
	        parent[target] = !!origin ? function () {
	            for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                params[_key2] = arguments[_key2];
	            }

	            // return原函数执行结果
	            var result = void 0;
	            oldAhead ? result = origin.call.apply(origin, [utilsObj].concat(params)) : null;
	            // 如果注入的逻辑返回false，可阻止原函数的继续执行（前提是原函数后执行）
	            var newResult = newFunc.call.apply(newFunc, [utilsObj].concat(params));
	            !oldAhead && newResult !== false ? result = origin.call.apply(origin, [utilsObj].concat(params)) : null;
	            // TODO: 返回哪个结果有待斟酌，目前代码之间的相互限制有点多
	            //  好像还不能随便return，比如可能会得到预期之外的结果
	            // return result || newResult;
	            return result;
	        } : utilsObj ? newFunc.bind(utilsObj) : newFunc;
	        // 被替换函数标记
	        parent[target].replaced = true;
	        return parent;
	    },

	    // 延迟执行
	    // debounce(func, delay) {
	    // }
	    getCache: function getCache(key) {
	        var result = localStorage.getItem(key);
	        if (result) {
	            return JSON.parse(result);
	        } else {
	            return result;
	        }
	    },
	    setCache: function setCache(key, value) {
	        value = JSON.stringify(value);
	        return localStorage.setItem(key, value);
	    },
	    getSession: function getSession(key) {
	        var result = sessionStorage.getItem(key);
	        if (result) {
	            return JSON.parse(result);
	        } else {
	            return result;
	        }
	    },
	    setSession: function setSession(key, value) {
	        value = JSON.stringify(value);
	        return sessionStorage.setItem(key, value);
	    },

	    // 遍历一个数组，从数组里取出某两个字段，组合成键值对数据
	    // 如更不传valueName，则相当于把keyName的值提出来当key，整条数据为value
	    detachToMap: function detachToMap(arr, keyName) {
	        var valueName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	        var obj = {};
	        utils.each(arr, function (v) {
	            v[keyName] && (obj[v[keyName]] = valueName ? v[valueName] : v);
	        });
	        return obj;
	    },

	    // 多变参数格式化工具，保证格式化后必需为对象
	    //  使用场景，参数既可以为一个对象，也可以简写为某个对象的属性，不管使用哪种方式，此函数可以统一格式成对象的形式
	    //  第一个参数为参数值，第二个参数为简写时对应的属性名称
	    // 例如：api/source/control 系列参数，api即可以写成一个url字符串，也可以是一个对象
	    varietyFormat: function varietyFormat() {
	        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var attr = arguments[1];

	        if (!utils.typeof(value, 'object')) {
	            value = _defineProperty({}, attr, value);
	        }
	        return value;
	    },

	    // 重试功能
	    // 间隔 interval 的时间，重试 time 次，直到 func 执行成功
	    // 如果func返回false，则继续重试。否则终止重试
	    retry: function retry(func) {
	        var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
	        var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;

	        var count = 1;
	        var handler = function handler() {
	            var result = func();
	            if (result !== false || count > time) {
	                return result;
	            } else {
	                setTimeout(handler, interval);
	            }
	            count++;
	        };
	        handler();
	    },

	    // 批量绑定对象中函数的执行环境
	    batchBind: function batchBind(obj, target) {
	        var result = {};
	        for (var i in obj) {
	            if (obj.hasOwnProperty(i) && utils.typeof(obj[i], 'function')) {
	                result[i] = obj[i].bind(target);
	            } else {
	                result[i] = obj[i];
	            }
	        }
	        return result;
	    },

	    // 时间格式化，将秒转换成时/分/秒
	    timeFormatter: function timeFormatter() {
	        var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	        var result = '';
	        var hours = Math.floor(seconds / (60 * 60));
	        if (hours > 0) {
	            result += hours + '小时';
	            seconds = seconds % (60 * 60);
	        }
	        var minutes = Math.floor(seconds / 60);
	        if (hours > 0 || minutes > 0) {
	            result += minutes + '分';
	            seconds = seconds % 60;
	        }
	        result += seconds + '秒';
	        return result;
	    },


	    /************************************************************************/
	    // 私有方法
	    syntaxHighlight: function syntaxHighlight(json) {
	        if (typeof json !== 'string') {
	            json = JSON.stringify(json, undefined, 4);
	        }
	        json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');
	        var reg = /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)/g;
	        return json.replace(reg, function (match) {
	            var cls = 'number';
	            if (/^"/.test(match)) {
	                if (/:$/.test(match)) {
	                    cls = 'key';
	                } else {
	                    try {
	                        var type = JSON.parse(match);
	                        if (_typeof2(JSON.parse(type)) === 'object') {
	                            return utils.syntaxHighlight(JSON.parse(type));
	                        } else {
	                            cls = 'string';
	                        }
	                    } catch (e) {
	                        cls = 'string';
	                    }
	                }
	            } else if (/true|false/.test(match)) {
	                cls = 'boolean';
	            } else if (/null/.test(match)) {
	                cls = 'null';
	            }
	            return '<span class="' + cls + '">' + match + '</span>';
	        });
	    }
	});

	exports.default = utils;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {//     Underscore.js 1.9.1
	//     http://underscorejs.org
	//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` (`self`) in the browser, `global`
	  // on the server, or `this` in some virtual machines. We use `self`
	  // instead of `window` for `WebWorker` support.
	  var root = typeof self == 'object' && self.self === self && self ||
	            typeof global == 'object' && global.global === global && global ||
	            this ||
	            {};

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
	  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

	  // Create quick reference variables for speed access to core prototypes.
	  var push = ArrayProto.push,
	      slice = ArrayProto.slice,
	      toString = ObjProto.toString,
	      hasOwnProperty = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var nativeIsArray = Array.isArray,
	      nativeKeys = Object.keys,
	      nativeCreate = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for their old module API. If we're in
	  // the browser, add `_` as a global object.
	  // (`nodeType` is checked to ensure that `module`
	  // and `exports` are not HTML elements.)
	  if (typeof exports != 'undefined' && !exports.nodeType) {
	    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.9.1';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      // The 2-argument case is omitted because we’re not using it.
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  var builtinIteratee;

	  // An internal function to generate callbacks that can be applied to each
	  // element in a collection, returning the desired result — either `identity`,
	  // an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
	    return _.property(value);
	  };

	  // External wrapper for our callback generator. Users may customize
	  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	  // This abstraction hides the internal-only argCount argument.
	  _.iteratee = builtinIteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // Some functions take a variable number of arguments, or a few expected
	  // arguments at the beginning and then a variable number of values to operate
	  // on. This helper accumulates all remaining arguments past the function’s
	  // argument length (or an explicit `startIndex`), into an array that becomes
	  // the last argument. Similar to ES6’s "rest parameter".
	  var restArguments = function(func, startIndex) {
	    startIndex = startIndex == null ? func.length - 1 : +startIndex;
	    return function() {
	      var length = Math.max(arguments.length - startIndex, 0),
	          rest = Array(length),
	          index = 0;
	      for (; index < length; index++) {
	        rest[index] = arguments[index + startIndex];
	      }
	      switch (startIndex) {
	        case 0: return func.call(this, rest);
	        case 1: return func.call(this, arguments[0], rest);
	        case 2: return func.call(this, arguments[0], arguments[1], rest);
	      }
	      var args = Array(startIndex + 1);
	      for (index = 0; index < startIndex; index++) {
	        args[index] = arguments[index];
	      }
	      args[startIndex] = rest;
	      return func.apply(this, args);
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var shallowProperty = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  var has = function(obj, path) {
	    return obj != null && hasOwnProperty.call(obj, path);
	  }

	  var deepGet = function(obj, path) {
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      if (obj == null) return void 0;
	      obj = obj[path[i]];
	    }
	    return length ? obj : void 0;
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object.
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = shallowProperty('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  var createReduce = function(dir) {
	    // Wrap code that reassigns argument variables in a separate function than
	    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	    var reducer = function(obj, iteratee, memo, initial) {
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      if (!initial) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    };

	    return function(obj, iteratee, memo, context) {
	      var initial = arguments.length >= 3;
	      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	    };
	  };

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
	    var key = keyFinder(obj, predicate, context);
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = restArguments(function(obj, path, args) {
	    var contextPath, func;
	    if (_.isFunction(path)) {
	      func = path;
	    } else if (_.isArray(path)) {
	      contextPath = path.slice(0, -1);
	      path = path[path.length - 1];
	    }
	    return _.map(obj, function(context) {
	      var method = func;
	      if (!method) {
	        if (contextPath && contextPath.length) {
	          context = deepGet(context, contextPath);
	        }
	        if (context == null) return void 0;
	        method = context[path];
	      }
	      return method == null ? method : method.apply(context, args);
	    });
	  });

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection.
	  _.shuffle = function(obj) {
	    return _.sample(obj, Infinity);
	  };

	  // Sample **n** random values from a collection using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
	    var length = getLength(sample);
	    n = Math.max(Math.min(n, length), 0);
	    var last = length - 1;
	    for (var index = 0; index < n; index++) {
	      var rand = _.random(index, last);
	      var temp = sample[index];
	      sample[index] = sample[rand];
	      sample[rand] = temp;
	    }
	    return sample.slice(0, n);
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    var index = 0;
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, key, list) {
	      return {
	        value: value,
	        index: index++,
	        criteria: iteratee(value, key, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior, partition) {
	    return function(obj, iteratee, context) {
	      var result = partition ? [[], []] : {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (has(result, key)) result[key]++; else result[key] = 1;
	  });

	  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (_.isString(obj)) {
	      // Keep surrogate pair characters together
	      return obj.match(reStrSymbol);
	    }
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = group(function(result, value, pass) {
	    result[pass ? 0 : 1].push(value);
	  }, true);

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null || array.length < 1) return n == null ? void 0 : [];
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null || array.length < 1) return n == null ? void 0 : [];
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, Boolean);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, output) {
	    output = output || [];
	    var idx = output.length;
	    for (var i = 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        // Flatten current level of array or arguments object.
	        if (shallow) {
	          var j = 0, len = value.length;
	          while (j < len) output[idx++] = value[j++];
	        } else {
	          flatten(value, shallow, strict, output);
	          idx = output.length;
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = restArguments(function(array, otherArrays) {
	    return _.difference(array, otherArrays);
	  });

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // The faster algorithm will not work with an iteratee if the iteratee
	  // is not a one-to-one function, so providing an iteratee will disable
	  // the faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted && !iteratee) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = restArguments(function(arrays) {
	    return _.uniq(flatten(arrays, true, true));
	  });

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      var j;
	      for (j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = restArguments(function(array, rest) {
	    rest = flatten(rest, true, true);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  });

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices.
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = restArguments(_.unzip);

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values. Passing by pairs is the reverse of _.pairs.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions.
	  var createPredicateIndexFinder = function(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  };

	  // Returns the first index on an array-like that passes a predicate test.
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions.
	  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	          i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  };

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    if (!step) {
	      step = stop < start ? -1 : 1;
	    }

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Chunk a single array into multiple arrays, each containing `count` or fewer
	  // items.
	  _.chunk = function(array, count) {
	    if (count == null || count < 1) return [];
	    var result = [];
	    var i = 0, length = array.length;
	    while (i < length) {
	      result.push(slice.call(array, i, i += count));
	    }
	    return result;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments.
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = restArguments(function(func, context, args) {
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var bound = restArguments(function(callArgs) {
	      return executeBound(func, bound, context, this, args.concat(callArgs));
	    });
	    return bound;
	  });

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder by default, allowing any combination of arguments to be
	  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
	  _.partial = restArguments(function(func, boundArgs) {
	    var placeholder = _.partial.placeholder;
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  });

	  _.partial.placeholder = _;

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = restArguments(function(obj, keys) {
	    keys = flatten(keys, false, false);
	    var index = keys.length;
	    if (index < 1) throw new Error('bindAll must be passed function names');
	    while (index--) {
	      var key = keys[index];
	      obj[key] = _.bind(obj[key], obj);
	    }
	  });

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = restArguments(function(func, wait, args) {
	    return setTimeout(function() {
	      return func.apply(null, args);
	    }, wait);
	  });

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var timeout, context, args, result;
	    var previous = 0;
	    if (!options) options = {};

	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };

	    var throttled = function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };

	    throttled.cancel = function() {
	      clearTimeout(timeout);
	      previous = 0;
	      timeout = context = args = null;
	    };

	    return throttled;
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, result;

	    var later = function(context, args) {
	      timeout = null;
	      if (args) result = func.apply(context, args);
	    };

	    var debounced = restArguments(function(args) {
	      if (timeout) clearTimeout(timeout);
	      if (immediate) {
	        var callNow = !timeout;
	        timeout = setTimeout(later, wait);
	        if (callNow) result = func.apply(this, args);
	      } else {
	        timeout = _.delay(later, wait, this, args);
	      }

	      return result;
	    });

	    debounced.cancel = function() {
	      clearTimeout(timeout);
	      timeout = null;
	    };

	    return debounced;
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  _.restArguments = restArguments;

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  var collectNonEnumProps = function(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  };

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`.
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object.
	  // In contrast to _.map it returns an object.
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = _.keys(obj),
	        length = keys.length,
	        results = {};
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys[index];
	      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  // The opposite of _.object.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`.
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, defaults) {
	    return function(obj) {
	      var length = arguments.length;
	      if (defaults) obj = Object(obj);
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!defaults || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s).
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test.
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Internal pick helper function to determine if `obj` has key `key`.
	  var keyInObj = function(value, key, obj) {
	    return key in obj;
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = restArguments(function(obj, keys) {
	    var result = {}, iteratee = keys[0];
	    if (obj == null) return result;
	    if (_.isFunction(iteratee)) {
	      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
	      keys = _.allKeys(obj);
	    } else {
	      iteratee = keyInObj;
	      keys = flatten(keys, false, false);
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  });

	  // Return a copy of the object without the blacklisted properties.
	  _.omit = restArguments(function(obj, keys) {
	    var iteratee = keys[0], context;
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	      if (keys.length > 1) context = keys[1];
	    } else {
	      keys = _.map(flatten(keys, false, false), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  });

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq, deepEq;
	  eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null) return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a) return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
	    return deepEq(a, b, aStack, bStack);
	  };

	  // Internal recursive comparison function for `isEqual`.
	  deepEq = function(a, b, aStack, bStack) {
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN.
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	      case '[object Symbol]':
	        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	  var nodelist = root.document && root.document.childNodes;
	  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`?
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && isNaN(obj);
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, path) {
	    if (!_.isArray(path)) {
	      return has(obj, path);
	    }
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      var key = path[i];
	      if (obj == null || !hasOwnProperty.call(obj, key)) {
	        return false;
	      }
	      obj = obj[key];
	    }
	    return !!length;
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  // Creates a function that, when passed an object, will traverse that object’s
	  // properties down the given `path`, specified as an array of keys or indexes.
	  _.property = function(path) {
	    if (!_.isArray(path)) {
	      return shallowProperty(path);
	    }
	    return function(obj) {
	      return deepGet(obj, path);
	    };
	  };

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    if (obj == null) {
	      return function(){};
	    }
	    return function(path) {
	      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	  // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped.
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // Traverses the children of `obj` along `path`. If a child is a function, it
	  // is invoked with its parent as context. Returns the value of the final
	  // child, or `fallback` if any child is undefined.
	  _.result = function(obj, path, fallback) {
	    if (!_.isArray(path)) path = [path];
	    var length = path.length;
	    if (!length) {
	      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
	    }
	    for (var i = 0; i < length; i++) {
	      var prop = obj == null ? void 0 : obj[path[i]];
	      if (prop === void 0) {
	        prop = fallback;
	        i = length; // Ensure we don't continue iterating.
	      }
	      obj = _.isFunction(prop) ? prop.call(obj) : prop;
	    }
	    return obj;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate: /<%([\s\S]+?)%>/g,
	    interpolate: /<%=([\s\S]+?)%>/g,
	    escape: /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'": "'",
	    '\\': '\\',
	    '\r': 'r',
	    '\n': 'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offset.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    var render;
	    try {
	      render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var chainResult = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return chainResult(this, func.apply(_, args));
	      };
	    });
	    return _;
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return chainResult(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return chainResult(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return String(this._wrapped);
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(124)(module)))

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 125 */
/***/ (function(module, exports) {

	module.exports = window.DLL.moment;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _reqwest = __webpack_require__(127);

	var _reqwest2 = _interopRequireDefault(_reqwest);

	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	var _axios = __webpack_require__(129);

	var _axios2 = _interopRequireDefault(_axios);

	var _ajaxPlugin = __webpack_require__(157);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 依赖 Config, AjaxCache 两个实例，通过generete获取
	exports.default = (0, _instance.generate)(['Config', 'AjaxCache', 'ModelCache'], function (Config, AjaxCache, ModelCache) {

	    // 通用ajax函数，参数为一个对象
	    function request(conf) {
	        var config = _utils2.default.clone(conf);
	        // 兼容，合并两个参数
	        if (config.data) {
	            config.params = Object.assign({}, config.params, config.data);
	            delete config.data;
	        }
	        var globalAjax = Config.get('global.ajax');
	        var mockMap = Config.get('global.mock');

	        // 检查是否中断请求，如果有中断请求的钩子，则完全不会进入获取数据的逻辑
	        if ((0, _ajaxPlugin.checkInterrupt)(config)) {
	            return;
	        }
	        // 第一次调用接口时，检查是否有本地缓存
	        // remind,必须放在checkCache之前，保证success调用是不会受缓存的影响
	        if ((0, _ajaxPlugin.checkLocalStorage)(config, AjaxCache)) {
	            return;
	        }
	        // 检查是否有缓存，如果有，则直接中断后续逻辑
	        if ((0, _ajaxPlugin.checkCache)(config, AjaxCache)) {
	            return;
	        }
	        // 检查当前是否已有相同的请求正在进行中，如果有，则进行请求合并并中断
	        if ((0, _ajaxPlugin.checkQueue)(config)) {
	            return;
	        }

	        // onchange 为请求前后执行，开始执行请求返回参数true，请求完成返回参数false
	        var onchange = config.onchange || function () {};
	        // successHandler
	        var tmpSuccess = config.success || function () {};
	        var successHandler = function successHandler(data, res) {
	            for (var _len = arguments.length, p = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	                p[_key - 2] = arguments[_key];
	            }

	            onchange(false, 'success');
	            // 全局数据处理函数，若进行了配置，则全部数据都会先经过此函数处理
	            if (globalAjax.handler) {
	                data = globalAjax.handler(data, res, config);
	            }
	            return tmpSuccess.apply(undefined, [data, res].concat(p));
	        };
	        // errorHandler
	        // 如果是null或者false等，则不执行错误处理；如果是true，则执行默认错误处理
	        var tmpError = config.error;
	        if ([null, false].indexOf(tmpError) > -1) {
	            tmpError = function tmpError() {};
	        }
	        tmpError = config.error === true ? _ajaxPlugin.errorMessage : config.error;
	        var errorHandler = function errorHandler() {
	            onchange(false, 'error');
	            return tmpError.apply(undefined, arguments);
	        };
	        // onerror 处理逻辑
	        var onerror = function onerror(err) {
	            // 如果用户配置了error处理逻辑，则全部按照用户配置的逻辑做处理
	            var result = void 0;
	            if (globalAjax.error) {
	                result = globalAjax.error(err, errorHandler, config);
	            } else {
	                result = errorHandler(err);
	            }
	            // handler有返回值，则执行默认错误提示
	            if (result !== false) {
	                if (result === true || result === undefined) {
	                    (0, _ajaxPlugin.errorMessage)(err);
	                } else {
	                    (0, _ajaxPlugin.errorMessage)(result);
	                }
	            }
	        };

	        // 配置合并
	        config = Object.assign({ method: 'get', type: 'json' }, globalAjax, config);
	        // 复制一份，防止url解析时更改原数据
	        var params = Object.assign({}, config.params, config.data);
	        var final = Object.assign({}, config, {
	            // 原始配置,mock中使用
	            originConf: config,
	            // url中可以使用来自 params 或 uf.config.data 中的动态参数
	            // params中的数据取完会从params中移除，uf.config.data 会保留原数据
	            url: _utils2.default.urlAnalysis(_utils2.default.urlAnalysis(config.url, params), ModelCache.get(), false),
	            // data 可能来自 globalAjax
	            data: params,
	            success: function success(res) {
	                // 如果用户配置了success处理逻辑，则全部按照用户配置的逻辑做处理
	                // 与 globalAjax.error 的处理逻辑稍微有点区别，error执行完之后还有默认处理逻辑，所以根据返回结果进行判断
	                // 而 globalAjax.success 的处理是直接截断，并传入调用处定义的成功与失败的回调
	                if (globalAjax.success) {
	                    var result = globalAjax.success(res, successHandler, errorHandler, config);
	                    if (result !== true) {
	                        return;
	                    }
	                }
	                // 默认成功处理逻辑
	                // 如果接口无返回值，则res为http实例
	                if (res instanceof XMLHttpRequest) {
	                    onerror({ msg: '接口未返回任何数据' });
	                    // 如果data为null
	                } else if (config.verifyData && res.data === null) {
	                    onerror({ msg: '接口返回值为空' });
	                } else {
	                    // 兼容 message/msg、status/code
	                    res.status = res.status || res.code || 0;
	                    res.message = res.message || res.msg;
	                    res.msg = res.message;
	                    if (+res.status === 0) {
	                        successHandler(res.data, res);
	                    } else {
	                        onerror(res);
	                    }
	                }
	            },
	            error: function error(err) {
	                // 如果有response,则对response进行解码处理,并一起传给error函数
	                if (err.response) {
	                    var res = void 0;
	                    try {
	                        res = JSON.parse(err.response);
	                    } catch (e) {}
	                    err = Object.assign({}, err, res, { msg: res && res.message });
	                }
	                onerror(err);
	            }
	        });

	        // 检查是否有缓存，如果有，则直接中断后续逻辑
	        // if (checkCache(final, AjaxCache)) {
	        //     return;
	        // }
	        // // 检查当前是否已有相同的请求正在进行中，如果有，则进行请求合并并中断
	        // if (checkQueue(final)) {
	        //     return;
	        // }

	        onchange(true, 'sending');

	        // 检查是否有mock数据接口
	        if ((0, _ajaxPlugin.checkMock)(final, mockMap)) {
	            return;
	        }

	        // baseUrl 参数处理
	        if (globalAjax.baseUrl && final.url && final.url.indexOf('http://') === -1 && final.url.indexOf('https://') === -1) {
	            // 两个字符串连接时，自动添加或去除多余的斜线
	            var startReg = /^\//i;
	            var endReg = /\/$/i;
	            if (startReg.test(final.url) && endReg.test(globalAjax.baseUrl)) {
	                final.url = globalAjax.baseUrl + final.url.substr(1);
	            } else if (!startReg.test(final.url) && !endReg.test(globalAjax.baseUrl)) {
	                final.url = globalAjax.baseUrl + '/' + final.url;
	            } else {
	                final.url = globalAjax.baseUrl + final.url;
	            }
	        }
	        // 发送请求前，用户可配置通用参数处理方法，比如把传入的参数序列化
	        if (globalAjax.beforeSend) {
	            globalAjax.beforeSend(final);
	        }

	        if (final.useAxios) {
	            return (0, _axios2.default)(final);
	        }
	        // console.log(final);
	        return (0, _reqwest2.default)(final);
	    }

	    request.init = function (url, method) {
	        return function (params, success, error, onchange) {
	            return request({ url: url, method: method, params: params, success: success, error: error, onchange: onchange });
	        };
	    };

	    // 增加 RESTful 函数
	    var _arr = ['get', 'post', 'put', 'delete'];

	    var _loop = function _loop() {
	        var v = _arr[_i];
	        request[v] = function (url, params, success, error, onchange) {
	            return request.init(url, v)(params, success, error, onchange);
	        };
	    };

	    for (var _i = 0; _i < _arr.length; _i++) {
	        _loop();
	    }

	    // 抛出错误处理函数
	    request.errorMessage = _ajaxPlugin.errorMessage;

	    return request;
	});
	// export default request;
	/**
	 * @file 通用的请求发送+错误处理工具
	 *       全部请求都通过这里处理
	 *       request参数为一个对象，即reqwest这个库需要的参数的对象
	 *          但是有几个参数需要注意：
	 *              success: 不是指请求成功执行的函数，而是请求的数据符合预期，可以正常使用的处理函数(即 'HTTP Status Code' === 200 && data.status === 0)
	 *              error:   除了请求出错，还有请求不符合预期都会触发error (即 'HTTP Status Code' !== 200 || data.status !== 0)
	 *                       >> tips: 如果error执行完返回true，则会继续执行默认的error处理函数
	 *              onchange: 请求开始/结束时执行。
	 *                      开始执行请求时执行 onchange 参数为 (true, 'sending');
	 *                      请求完成时执行 onchange 参数为 (false, 'success'/'error')
	 *              complete:
	 *
	 * @author liuzechun@baidu.com
	 * **/

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  * Reqwest! A general purpose XHR connection manager
	  * license MIT (c) Dustin Diaz 2015
	  * https://github.com/ded/reqwest
	  */

	!function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  else context[name] = definition()
	}('reqwest', this, function () {

	  var context = this

	  if ('window' in context) {
	    var doc = document
	      , byTag = 'getElementsByTagName'
	      , head = doc[byTag]('head')[0]
	  } else {
	    var XHR2
	    try {
	      XHR2 = __webpack_require__(128)
	    } catch (ex) {
	      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')
	    }
	  }


	  var httpsRe = /^http/
	    , protocolRe = /(^\w+):\/\//
	    , twoHundo = /^(20\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	    , readyState = 'readyState'
	    , contentType = 'Content-Type'
	    , requestedWith = 'X-Requested-With'
	    , uniqid = 0
	    , callbackPrefix = 'reqwest_' + (+new Date())
	    , lastValue // data stored by the most recent JSONP callback
	    , xmlHttpRequest = 'XMLHttpRequest'
	    , xDomainRequest = 'XDomainRequest'
	    , noop = function () {}

	    , isArray = typeof Array.isArray == 'function'
	        ? Array.isArray
	        : function (a) {
	            return a instanceof Array
	          }

	    , defaultHeaders = {
	          'contentType': 'application/x-www-form-urlencoded'
	        , 'requestedWith': xmlHttpRequest
	        , 'accept': {
	              '*':  'text/javascript, text/html, application/xml, text/xml, */*'
	            , 'xml':  'application/xml, text/xml'
	            , 'html': 'text/html'
	            , 'text': 'text/plain'
	            , 'json': 'application/json, text/javascript'
	            , 'js':   'application/javascript, text/javascript'
	          }
	      }

	    , xhr = function(o) {
	        // is it x-domain
	        if (o['crossOrigin'] === true) {
	          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null
	          if (xhr && 'withCredentials' in xhr) {
	            return xhr
	          } else if (context[xDomainRequest]) {
	            return new XDomainRequest()
	          } else {
	            throw new Error('Browser does not support cross-origin requests')
	          }
	        } else if (context[xmlHttpRequest]) {
	          return new XMLHttpRequest()
	        } else if (XHR2) {
	          return new XHR2()
	        } else {
	          return new ActiveXObject('Microsoft.XMLHTTP')
	        }
	      }
	    , globalSetupOptions = {
	        dataFilter: function (data) {
	          return data
	        }
	      }

	  function succeed(r) {
	    var protocol = protocolRe.exec(r.url)
	    protocol = (protocol && protocol[1]) || context.location.protocol
	    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response
	  }

	  function handleReadyState(r, success, error) {
	    return function () {
	      // use _aborted to mitigate against IE err c00c023f
	      // (can't read props on aborted request objects)
	      if (r._aborted) return error(r.request)
	      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')
	      if (r.request && r.request[readyState] == 4) {
	        r.request.onreadystatechange = noop
	        if (succeed(r)) success(r.request)
	        else
	          error(r.request)
	      }
	    }
	  }

	  function setHeaders(http, o) {
	    var headers = o['headers'] || {}
	      , h

	    headers['Accept'] = headers['Accept']
	      || defaultHeaders['accept'][o['type']]
	      || defaultHeaders['accept']['*']

	    var isAFormData = typeof FormData !== 'undefined' && (o['data'] instanceof FormData);
	    // breaks cross-origin requests with legacy browsers
	    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']
	    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']
	    for (h in headers)
	      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])
	  }

	  function setCredentials(http, o) {
	    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {
	      http.withCredentials = !!o['withCredentials']
	    }
	  }

	  function generalCallback(data) {
	    lastValue = data
	  }

	  function urlappend (url, s) {
	    return url + (/\?/.test(url) ? '&' : '?') + s
	  }

	  function handleJsonp(o, fn, err, url) {
	    var reqId = uniqid++
	      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key
	      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)
	      , cbreg = new RegExp('((^|\\?|&)' + cbkey + ')=([^&]+)')
	      , match = url.match(cbreg)
	      , script = doc.createElement('script')
	      , loaded = 0
	      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1

	    if (match) {
	      if (match[3] === '?') {
	        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name
	      } else {
	        cbval = match[3] // provided callback func name
	      }
	    } else {
	      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em
	    }

	    context[cbval] = generalCallback

	    script.type = 'text/javascript'
	    script.src = url
	    script.async = true
	    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {
	      // need this for IE due to out-of-order onreadystatechange(), binding script
	      // execution to an event listener gives us control over when the script
	      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	      script.htmlFor = script.id = '_reqwest_' + reqId
	    }

	    script.onload = script.onreadystatechange = function () {
	      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {
	        return false
	      }
	      script.onload = script.onreadystatechange = null
	      script.onclick && script.onclick()
	      // Call the user callback with the last value stored and clean up values and scripts.
	      fn(lastValue)
	      lastValue = undefined
	      head.removeChild(script)
	      loaded = 1
	    }

	    // Add the script to the DOM head
	    head.appendChild(script)

	    // Enable JSONP timeout
	    return {
	      abort: function () {
	        script.onload = script.onreadystatechange = null
	        err({}, 'Request is aborted: timeout', {})
	        lastValue = undefined
	        head.removeChild(script)
	        loaded = 1
	      }
	    }
	  }

	  function getRequest(fn, err) {
	    var o = this.o
	      , method = (o['method'] || 'GET').toUpperCase()
	      , url = typeof o === 'string' ? o : o['url']
	      // convert non-string objects to query-string form unless o['processData'] is false
	      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')
	        ? reqwest.toQueryString(o['data'])
	        : (o['data'] || null)
	      , http
	      , sendWait = false

	    // if we're working on a GET request and we have data then we should append
	    // query string to end of URL and not post data
	    if ((o['type'] == 'jsonp' || method == 'GET') && data) {
	      url = urlappend(url, data)
	      data = null
	    }

	    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)

	    // get the xhr from the factory if passed
	    // if the factory returns null, fall-back to ours
	    http = (o.xhr && o.xhr(o)) || xhr(o)

	    http.open(method, url, o['async'] === false ? false : true)
	    setHeaders(http, o)
	    setCredentials(http, o)
	    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {
	        http.onload = fn
	        http.onerror = err
	        // NOTE: see
	        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e
	        http.onprogress = function() {}
	        sendWait = true
	    } else {
	      http.onreadystatechange = handleReadyState(this, fn, err)
	    }
	    o['before'] && o['before'](http)
	    if (sendWait) {
	      setTimeout(function () {
	        http.send(data)
	      }, 200)
	    } else {
	      http.send(data)
	    }
	    return http
	  }

	  function Reqwest(o, fn) {
	    this.o = o
	    this.fn = fn

	    init.apply(this, arguments)
	  }

	  function setType(header) {
	    // json, javascript, text/plain, text/html, xml
	    if (header === null) return undefined; //In case of no content-type.
	    if (header.match('json')) return 'json'
	    if (header.match('javascript')) return 'js'
	    if (header.match('text')) return 'html'
	    if (header.match('xml')) return 'xml'
	  }

	  function init(o, fn) {

	    this.url = typeof o == 'string' ? o : o['url']
	    this.timeout = null

	    // whether request has been fulfilled for purpose
	    // of tracking the Promises
	    this._fulfilled = false
	    // success handlers
	    this._successHandler = function(){}
	    this._fulfillmentHandlers = []
	    // error handlers
	    this._errorHandlers = []
	    // complete (both success and fail) handlers
	    this._completeHandlers = []
	    this._erred = false
	    this._responseArgs = {}

	    var self = this

	    fn = fn || function () {}

	    if (o['timeout']) {
	      this.timeout = setTimeout(function () {
	        timedOut()
	      }, o['timeout'])
	    }

	    if (o['success']) {
	      this._successHandler = function () {
	        o['success'].apply(o, arguments)
	      }
	    }

	    if (o['error']) {
	      this._errorHandlers.push(function () {
	        o['error'].apply(o, arguments)
	      })
	    }

	    if (o['complete']) {
	      this._completeHandlers.push(function () {
	        o['complete'].apply(o, arguments)
	      })
	    }

	    function complete (resp) {
	      o['timeout'] && clearTimeout(self.timeout)
	      self.timeout = null
	      while (self._completeHandlers.length > 0) {
	        self._completeHandlers.shift()(resp)
	      }
	    }

	    function success (resp) {
	      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE
	      resp = (type !== 'jsonp') ? self.request : resp
	      // use global data filter on response text
	      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)
	        , r = filteredResponse
	      try {
	        resp.responseText = r
	      } catch (e) {
	        // can't assign this in IE<=8, just ignore
	      }
	      if (r) {
	        switch (type) {
	        case 'json':
	          try {
	            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')
	          } catch (err) {
	            return error(resp, 'Could not parse JSON in response', err)
	          }
	          break
	        case 'js':
	          resp = eval(r)
	          break
	        case 'html':
	          resp = r
	          break
	        case 'xml':
	          resp = resp.responseXML
	              && resp.responseXML.parseError // IE trololo
	              && resp.responseXML.parseError.errorCode
	              && resp.responseXML.parseError.reason
	            ? null
	            : resp.responseXML
	          break
	        }
	      }

	      self._responseArgs.resp = resp
	      self._fulfilled = true
	      fn(resp)
	      self._successHandler(resp)
	      while (self._fulfillmentHandlers.length > 0) {
	        resp = self._fulfillmentHandlers.shift()(resp)
	      }

	      complete(resp)
	    }

	    function timedOut() {
	      self._timedOut = true
	      self.request.abort()
	    }

	    function error(resp, msg, t) {
	      resp = self.request
	      self._responseArgs.resp = resp
	      self._responseArgs.msg = msg
	      self._responseArgs.t = t
	      self._erred = true
	      while (self._errorHandlers.length > 0) {
	        self._errorHandlers.shift()(resp, msg, t)
	      }
	      complete(resp)
	    }

	    this.request = getRequest.call(this, success, error)
	  }

	  Reqwest.prototype = {
	    abort: function () {
	      this._aborted = true
	      this.request.abort()
	    }

	  , retry: function () {
	      init.call(this, this.o, this.fn)
	    }

	    /**
	     * Small deviation from the Promises A CommonJs specification
	     * http://wiki.commonjs.org/wiki/Promises/A
	     */

	    /**
	     * `then` will execute upon successful requests
	     */
	  , then: function (success, fail) {
	      success = success || function () {}
	      fail = fail || function () {}
	      if (this._fulfilled) {
	        this._responseArgs.resp = success(this._responseArgs.resp)
	      } else if (this._erred) {
	        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._fulfillmentHandlers.push(success)
	        this._errorHandlers.push(fail)
	      }
	      return this
	    }

	    /**
	     * `always` will execute whether the request succeeds or fails
	     */
	  , always: function (fn) {
	      if (this._fulfilled || this._erred) {
	        fn(this._responseArgs.resp)
	      } else {
	        this._completeHandlers.push(fn)
	      }
	      return this
	    }

	    /**
	     * `fail` will execute when the request fails
	     */
	  , fail: function (fn) {
	      if (this._erred) {
	        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._errorHandlers.push(fn)
	      }
	      return this
	    }
	  , 'catch': function (fn) {
	      return this.fail(fn)
	    }
	  }

	  function reqwest(o, fn) {
	    return new Reqwest(o, fn)
	  }

	  // normalize newline variants according to spec -> CRLF
	  function normalize(s) {
	    return s ? s.replace(/\r?\n/g, '\r\n') : ''
	  }

	  function serial(el, cb) {
	    var n = el.name
	      , t = el.tagName.toLowerCase()
	      , optCb = function (o) {
	          // IE gives value="" even where there is no value attribute
	          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273
	          if (o && !o['disabled'])
	            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))
	        }
	      , ch, ra, val, i

	    // don't serialize elements that are disabled or without a name
	    if (el.disabled || !n) return

	    switch (t) {
	    case 'input':
	      if (!/reset|button|image|file/i.test(el.type)) {
	        ch = /checkbox/i.test(el.type)
	        ra = /radio/i.test(el.type)
	        val = el.value
	        // WebKit gives us "" instead of "on" if a checkbox has no value, so correct it here
	        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))
	      }
	      break
	    case 'textarea':
	      cb(n, normalize(el.value))
	      break
	    case 'select':
	      if (el.type.toLowerCase() === 'select-one') {
	        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)
	      } else {
	        for (i = 0; el.length && i < el.length; i++) {
	          el.options[i].selected && optCb(el.options[i])
	        }
	      }
	      break
	    }
	  }

	  // collect up all form elements found from the passed argument elements all
	  // the way down to child elements; pass a '<form>' or form fields.
	  // called with 'this'=callback to use for serial() on each element
	  function eachFormElement() {
	    var cb = this
	      , e, i
	      , serializeSubtags = function (e, tags) {
	          var i, j, fa
	          for (i = 0; i < tags.length; i++) {
	            fa = e[byTag](tags[i])
	            for (j = 0; j < fa.length; j++) serial(fa[j], cb)
	          }
	        }

	    for (i = 0; i < arguments.length; i++) {
	      e = arguments[i]
	      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)
	      serializeSubtags(e, [ 'input', 'select', 'textarea' ])
	    }
	  }

	  // standard query string style serialization
	  function serializeQueryString() {
	    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))
	  }

	  // { 'name': 'value', ... } style serialization
	  function serializeHash() {
	    var hash = {}
	    eachFormElement.apply(function (name, value) {
	      if (name in hash) {
	        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])
	        hash[name].push(value)
	      } else hash[name] = value
	    }, arguments)
	    return hash
	  }

	  // [ { name: 'name', value: 'value' }, ... ] style serialization
	  reqwest.serializeArray = function () {
	    var arr = []
	    eachFormElement.apply(function (name, value) {
	      arr.push({name: name, value: value})
	    }, arguments)
	    return arr
	  }

	  reqwest.serialize = function () {
	    if (arguments.length === 0) return ''
	    var opt, fn
	      , args = Array.prototype.slice.call(arguments, 0)

	    opt = args.pop()
	    opt && opt.nodeType && args.push(opt) && (opt = null)
	    opt && (opt = opt.type)

	    if (opt == 'map') fn = serializeHash
	    else if (opt == 'array') fn = reqwest.serializeArray
	    else fn = serializeQueryString

	    return fn.apply(null, args)
	  }

	  reqwest.toQueryString = function (o, trad) {
	    var prefix, i
	      , traditional = trad || false
	      , s = []
	      , enc = encodeURIComponent
	      , add = function (key, value) {
	          // If value is a function, invoke it and return its value
	          value = ('function' === typeof value) ? value() : (value == null ? '' : value)
	          s[s.length] = enc(key) + '=' + enc(value)
	        }
	    // If an array was passed in, assume that it is an array of form elements.
	    if (isArray(o)) {
	      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])
	    } else {
	      // If traditional, encode the "old" way (the way 1.3.2 or older
	      // did it), otherwise encode params recursively.
	      for (prefix in o) {
	        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)
	      }
	    }

	    // spaces should be + according to spec
	    return s.join('&').replace(/%20/g, '+')
	  }

	  function buildParams(prefix, obj, traditional, add) {
	    var name, i, v
	      , rbracket = /\[\]$/

	    if (isArray(obj)) {
	      // Serialize array item.
	      for (i = 0; obj && i < obj.length; i++) {
	        v = obj[i]
	        if (traditional || rbracket.test(prefix)) {
	          // Treat each array item as a scalar.
	          add(prefix, v)
	        } else {
	          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)
	        }
	      }
	    } else if (obj && obj.toString() === '[object Object]') {
	      // Serialize object item.
	      for (name in obj) {
	        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
	      }

	    } else {
	      // Serialize scalar item.
	      add(prefix, obj)
	    }
	  }

	  reqwest.getcallbackPrefix = function () {
	    return callbackPrefix
	  }

	  // jQuery and Zepto compatibility, differences can be remapped here so you can call
	  // .ajax.compat(options, callback)
	  reqwest.compat = function (o, fn) {
	    if (o) {
	      o['type'] && (o['method'] = o['type']) && delete o['type']
	      o['dataType'] && (o['type'] = o['dataType'])
	      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']
	      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])
	    }
	    return new Reqwest(o, fn)
	  }

	  reqwest.ajaxSetup = function (options) {
	    options = options || {}
	    for (var k in options) {
	      globalSetupOptions[k] = options[k]
	    }
	  }

	  return reqwest
	});


/***/ }),
/* 128 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (config) {
	    var conf = _utils2.default.filter(config, ['baseUrl', 'success', 'error', 'interrupt']);
	    conf.data = conf.params;
	    return (0, _axios2.default)(conf).then(function (response) {
	        config.success(response.data);
	    }, function (err) {
	        config.error(err.response.data || { message: '请求出错！' });
	    });
	};

	var _axios = __webpack_require__(130);

	var _axios2 = _interopRequireDefault(_axios);

	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(131);

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);
	var bind = __webpack_require__(133);
	var Axios = __webpack_require__(135);
	var defaults = __webpack_require__(136);

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(154);
	axios.CancelToken = __webpack_require__(155);
	axios.isCancel = __webpack_require__(151);

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(156);

	module.exports = axios;

	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(133);
	var isBuffer = __webpack_require__(134);

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 133 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 134 */
/***/ (function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}

	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(136);
	var utils = __webpack_require__(132);
	var InterceptorManager = __webpack_require__(148);
	var dispatchRequest = __webpack_require__(149);

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
	  config.method = config.method.toLowerCase();

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	module.exports = Axios;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(132);
	var normalizeHeaderName = __webpack_require__(138);

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(139);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(139);
	  }
	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});

	module.exports = defaults;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(137)))

/***/ }),
/* 137 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(132);
	var settle = __webpack_require__(140);
	var buildURL = __webpack_require__(143);
	var parseHeaders = __webpack_require__(144);
	var isURLSameOrigin = __webpack_require__(145);
	var createError = __webpack_require__(141);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(146);

	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;

	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(147);

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(137)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createError = __webpack_require__(141);

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var enhanceError = __webpack_require__(142);

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};


/***/ }),
/* 142 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.request = request;
	  error.response = response;
	  return error;
	};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 146 */
/***/ (function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);
	var transformData = __webpack_require__(150);
	var isCancel = __webpack_require__(151);
	var defaults = __webpack_require__(136);
	var isAbsoluteURL = __webpack_require__(152);
	var combineURLs = __webpack_require__(153);

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(132);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ }),
/* 151 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 152 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 153 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};


/***/ }),
/* 154 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	module.exports = Cancel;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Cancel = __webpack_require__(154);

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	module.exports = CancelToken;


/***/ }),
/* 156 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.errorMessage = errorMessage;
	exports.checkCache = checkCache;
	exports.checkLocalStorage = checkLocalStorage;
	exports.checkQueue = checkQueue;
	exports.checkMock = checkMock;
	exports.checkInterrupt = checkInterrupt;

	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
	                                                                                                                                                                                                     * @file Ajax 的插件，包含 数据缓存、请求合并、生成错误信息 等功能
	                                                                                                                                                                                                     * @author liuzechun@baidu.com
	                                                                                                                                                                                                     * **/

	// Ajajx队列，用于缓存待执行的 ajax 回调函数相关内容
	var ajaxQueue = {};

	var errorMsg = {
	    top: 24,
	    message: '请求出错',
	    description: '请求数据时出错，请稍后重试。',
	    duration: 3.5
	};

	// 获取错误信息
	function getErrorMsg(error) {
	    var message = void 0;
	    try {
	        if (_utils2.default.typeof(error, 'string')) {
	            message = error;
	        } else if (_utils2.default.typeof(error, 'object') && error.message) {
	            message = error.message;
	            if (_utils2.default.typeof(message, 'array')) {
	                message = message.join('; ');
	            }
	        } else {
	            message = JSON.stringify(error);
	        }
	    } catch (e) {
	        _utils2.default.defer(console.error, 'Error: There is something wrong in function `getErrorMsg` of `ajax`: ' + e);
	    }
	    return message;
	}

	// 请求出错的提示信息函数
	function errorMessage(error) {
	    var message = getErrorMsg(error);
	    _src2.default.notification.error(Object.assign({}, errorMsg, !message ? null : {
	        description: message
	    }));
	    return false;
	}

	/**
	 * 检查是否有缓存
	 *
	 * @param {Object} config ajax的配置
	 * @param {Class} AjaxCache 工具类
	 * @return {boolean} 如果有直接调用缓存数据，返回true，否则返回false
	 */
	function checkCache(config, AjaxCache) {
	    // 如果需要做缓存，key不为空
	    var key = AjaxCache.getCacheKey(config);
	    if (key) {
	        // 如果能获取到缓存数据，则直接以此数据作为success的返回值，中断真正的ajax调用
	        var cacheData = AjaxCache.getCacheData(key);
	        if (cacheData) {
	            // 保证异步
	            _utils2.default.defer.apply(_utils2.default, [config.success].concat(_toConsumableArray(cacheData)));
	            return true;
	        }
	        // 给success函数插入缓存逻辑，数据返回后先对数据进行缓存
	        _utils2.default.inject(config, 'success', function () {
	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            AjaxCache.setCacheData(key, params);
	        });
	    }
	    return false;
	}

	/**
	 * 第一次调用接口时，检查是否有本地缓存
	 * 如果有，则先执行一次config.success，使页面先执行一次成功逻辑，以不阻塞后续逻辑执行；
	 * 当请求真正获取到数据后，重新再调用一次
	 *
	 * @param {Objcet} config ajax的配置
	 * @param {Class} AjaxCache 工具类
	 * @return {boolean} 如果需继续往下执行，返回true，否则返回false
	 */
	function checkLocalStorage(config, AjaxCache) {
	    // 如果需要做永久缓存，key不为空
	    var key = AjaxCache.getLocalStorageKey(config);
	    if (key) {
	        // 不管能不能，中断真正的ajax调用
	        var storageData = AjaxCache.getLocalStorageData(key);
	        var storageDataStr = void 0;
	        if (storageData) {
	            storageDataStr = JSON.stringify(storageData);
	            _utils2.default.defer(config.success, storageData.data, storageData);
	        }
	        // 给success函数插入缓存逻辑，数据返回后先对数据进行缓存
	        // Utils.inject(config, 'success', (...params) => {
	        //     AjaxCache.setLocalStorageData(key, params);
	        // });
	        var oriSuccess = config.success;
	        config.success = function (data, res) {
	            // 如果数据未更新，则不再进行任何处理
	            if (storageDataStr && storageDataStr === JSON.stringify(res)) {
	                return;
	            }
	            AjaxCache.setLocalStorageData(key, res);
	            oriSuccess(data, res);
	        };
	    }
	    return false;
	}

	/**
	 * 执行队列中缓存的待执行逻辑
	 *
	 * @param {string} key 调用处传入，保证一致性
	 * @param {string} result 执行结果：success/error
	 * @param {...*} params 执行函数所需的参数列表
	 */
	function executeQueue(key, result) {
	    if (ajaxQueue[key] && ajaxQueue[key].length > 0) {
	        for (var _len2 = arguments.length, params = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	            params[_key2 - 2] = arguments[_key2];
	        }

	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = ajaxQueue[key][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;

	                v[result] && _utils2.default.defer.apply(_utils2.default, [v[result]].concat(params));
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }
	    }
	    delete ajaxQueue[key];
	}

	/**
	 * 检查当前是否已有相同的请求正在进行中
	 * 如果有，则把后续逻辑放入队列中，中断后续逻辑。待请求返回数据后统一调用
	 *
	 * @param {Object} config ajax的配置
	 * @return {boolean} 如果有，则返回true，否则返回false
	 */
	function checkQueue(config) {
	    var key = _utils2.default.hash(config, 32);
	    // 如果有则代表有相同请求在进行中，直接把当前的config缓存起来
	    if (ajaxQueue[key]) {
	        ajaxQueue[key].push(config);
	        return true;
	    } else if (config.merge !== false) {
	        ajaxQueue[key] = [];
	        // 给 success、error 函数插入逻辑：ajax完成后调用队列中全部待执行逻辑，并依次执行
	        _utils2.default.inject(config, 'success', function () {
	            for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                params[_key3] = arguments[_key3];
	            }

	            executeQueue.apply(undefined, [key, 'success'].concat(params));
	        }, true);
	        _utils2.default.inject(config, 'error', function () {
	            for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                params[_key4] = arguments[_key4];
	            }

	            executeQueue.apply(undefined, [key, 'error'].concat(params));
	        }, true);
	    }
	    return false;
	}

	/**
	 * 检查是否有mock数据接口
	 *
	 * @param {*} config ajax的配置
	 * @param {*} mockMap
	 * @return {boolean} 如果有则返回true，否则返回false
	 */
	function checkMock(config) {
	    var mockMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var conf = config.originConf;
	    if (conf.url && mockMap[conf.url]) {
	        _utils2.default.defer(function () {
	            mockMap[conf.url](config, config.success, config.error);
	        });
	        return true;
	    }
	    return false;
	}

	/**
	 * 检查是否中断请求
	 * > 可以通过返回数据，中断请求，从而使用钩子返回的数据；
	 * > 如果钩子未返回任何内容，或返回true，则请求继续；
	 * > 如果钩子返回false，则仅中断请求，不做任何处理
	 *
	 * @param {*} config ajax的配置
	 * @return {boolean} 如果有则返回true，否则返回false
	 */
	function checkInterrupt(config) {
	    if (config.interrupt) {
	        var data = config.interrupt(config);
	        // 如果钩子未返回任何内容，或返回true，则请求继续
	        if (data === undefined || data === true) {
	            return false;
	        }
	        if (data !== false) {
	            // 保证异步
	            _utils2.default.defer(config.success, data);
	        }
	        return true;
	    }
	}

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _BaseCache = __webpack_require__(159);

	var _BaseCache2 = _interopRequireDefault(_BaseCache);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var cache = new _BaseCache2.default();
	// 结构为
	// {
	//     [insName]: {_$uf, _$cache: {Config, ComponentCache, ModelCache}}
	// }

	/**
	 * UF 实例存储类
	 */
	var ins = {
	    // 类似于依赖注入，depend声明依赖什么模块，func执行的时候把模块取出来传进去
	    generate: function generate(depend, func) {
	        // 如果只传一个参
	        if (!func) {
	            func = depend;
	            depend = [];
	        }
	        return {
	            init: function init(insName) {
	                var args = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = depend[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        args.push(ins['get' + v] && ins['get' + v](insName));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                return func.apply(undefined, args.concat([insName]));
	            }
	        };
	    },

	    // 获取全部实例
	    getAll: function getAll() {
	        return cache.get();
	    },


	    // 获取uf实例
	    getInstance: function getInstance(insName) {
	        return cache.get(insName + '._$uf');
	    },
	    setInstance: function setInstance(insName, obj) {
	        return cache.set(insName + '._$uf', obj);
	    },
	    delInstance: function delInstance(insName) {
	        cache.delete(insName + '._$uf');
	        cache.delete(insName + '._$cache');
	        cache.delete(insName + '._$tools');
	        return true;
	    },

	    // Cache相关获取/设置函数
	    getCache: function getCache(insName) {
	        return cache.get(insName + '._$cache');
	    },
	    setCache: function setCache(insName, obj) {
	        return cache.set(insName + '._$cache', obj);
	    },
	    getConfig: function getConfig(insName) {
	        return cache.get(insName + '._$cache.Config');
	    },
	    setConfig: function setConfig(insName, obj) {
	        return cache.set(insName + '._$cache.Config', obj);
	    },
	    getComponentsCache: function getComponentsCache(insName) {
	        return cache.get(insName + '._$cache.ComponentCache');
	    },
	    setComponentCache: function setComponentCache(insName, obj) {
	        return cache.set(insName + '._$cache.ComponentCache', obj);
	    },
	    getModelCache: function getModelCache(insName) {
	        return cache.get(insName + '._$cache.ModelCache');
	    },
	    setModelCache: function setModelCache(insName, obj) {
	        return cache.set(insName + '._$cache.ModelCache', obj);
	    },
	    getAjaxCache: function getAjaxCache(insName) {
	        return cache.get(insName + '._$cache.AjaxCache');
	    },
	    setAjaxCache: function setAjaxCache(insName, obj) {
	        return cache.set(insName + '._$cache.AjaxCache', obj);
	    },


	    // Tools相关获取/设置函数
	    getTools: function getTools(insName) {
	        return cache.get(insName + '._$tools');
	    },
	    setTools: function setTools(insName, obj) {
	        return cache.set(insName + '._$tools', obj);
	    },
	    getAjax: function getAjax(insName) {
	        return cache.get(insName + '._$tools.Ajax');
	    },
	    setAjax: function setAjax(insName, obj) {
	        return cache.set(insName + '._$tools.Ajax', obj);
	    },
	    getRequirejs: function getRequirejs(insName) {
	        return cache.get(insName + '._$tools.Requirejs');
	    },
	    setRequirejs: function setRequirejs(insName, obj) {
	        return cache.set(insName + '._$tools.Requirejs', obj);
	    },
	    getPrecondition: function getPrecondition(insName) {
	        return cache.get(insName + '._$tools.Precondition');
	    },
	    setPrecondition: function setPrecondition(insName, obj) {
	        return cache.set(insName + '._$tools.Precondition', obj);
	    }
	};

	module.exports = ins;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	file 缓存基类
	每 new 一次，会产生一个对象实例来做一类缓存
	author liuzechun
	reated Date: 2017-10-24 11:05:57
	


	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var BaseCache = function () {
	    // 构造函数又两个参数，第一个参数必填，为缓存前缀，第二个参数为缓存对象的默认值
	    function BaseCache(_cache) {
	        _classCallCheck(this, BaseCache);

	        this._cache = _cache || {};
	    }

	    _createClass(BaseCache, [{
	        key: 'get',
	        value: function get(names) {
	            // 可以传递多个name依次向下查找，例如：'a.b.c'
	            return _utils2.default.fromObject(names, this._cache);
	        }
	        // set函数有两种用法

	    }, {
	        key: 'set',
	        value: function set(target, component) {
	            // 如果传入的第一个参数不是一个 target 字符串，而是一个对象，则把对象和现有缓存做merge，适用于 config.js 等
	            if (_utils2.default.typeof(target, 'object')) {
	                return _utils2.default.merge(10, this._cache, target);
	                // 如果 target 为字符串，则直接替换缓存中 target 保存的值
	            } else {
	                _utils2.default.toObject(this._cache, target, component);
	                return component;
	            }
	        }
	    }, {
	        key: 'delete',
	        value: function _delete(key) {
	            _utils2.default.delFromObject(key, this._cache);
	        }
	    }, {
	        key: 'del',
	        value: function del(key) {
	            this.delete(key);
	        }
	    }]);

	    return BaseCache;
	}();

	exports.default = BaseCache;
	;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(121);

	var _instance = __webpack_require__(158);

	/**
	 * @file 权限控制模块
	 * @author liuzechun
	 */

	var authority = {
	    // 检查是否有权限
	    check: function check(item) {
	        var insName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : item.insName;

	        var conf = (0, _instance.getConfig)(insName);
	        var result = true;
	        if (conf && !_utils.Utils.typeof(item.authority, 'undefined')) {
	            var authorityMap = conf.get('authority');
	            if (authorityMap) {
	                result = false;
	                // 支持传一个数组，绑定多个权限点
	                if (_utils.Utils.typeof(item.authority, 'array')) {
	                    var _iteratorNormalCompletion = true;
	                    var _didIteratorError = false;
	                    var _iteratorError = undefined;

	                    try {
	                        for (var _iterator = item.authority[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                            var v = _step.value;

	                            // 当有一个权限点验证通过是，跳出检查
	                            if (authority.check(v, insName)) {
	                                result = true;
	                                break;
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError = true;
	                        _iteratorError = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	                        } finally {
	                            if (_didIteratorError) {
	                                throw _iteratorError;
	                            }
	                        }
	                    }
	                } else {
	                    // authorityMap 支持两种形式: 'a.b.c': true，或 a: {b: c: true}
	                    result = !!authorityMap[item.authority] || !!_utils.Utils.fromObject(item.authority, authorityMap);
	                }
	            }
	        }
	        return result;
	    }
	};

	exports.default = authority;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(121);

	var _AnalysisList = __webpack_require__(162);

	var _AnalysisList2 = _interopRequireDefault(_AnalysisList);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @file 属性需进一步解析的组件属性名单
	 * @author liuzechun
	 */

	exports.default = {

	    // 返回当前配置中需要二次解析的属性
	    get: function get(props, type) {
	        var list = this.getall(type);
	        var result = [];
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;

	                // 如果在白名单中的属性值是直接的对象或数组（未解析的配置）或函数（执行结果为配置），则返回
	                if (!!props[v] && _utils.Utils.directInstanceof(props[v], [Object, Array, Function])) {
	                    result.push(v);
	                }
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        return result;
	    },


	    // 返回当前组件全部可以解析的属性
	    getall: function getall(type) {
	        var name = _utils.Utils.toPascal(type);
	        // 把 children 属性加入到全部组件中
	        return ((_AnalysisList2.default[name] || {}).basic || []).concat('children');
	    },


	    // 返回当前配置中 需要对函数结果进行再次解析的函数列表
	    getFuncs: function getFuncs(props, type) {
	        var list = this.getallFuncs(type);
	        var result = [];
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var v = _step2.value;

	                // 如果在白名单中的属性值是直接的对象或数组（未解析的配置）或函数（执行结果为配置），则返回
	                if (!!props[v] && _utils.Utils.directInstanceof(props[v], [Object, Array, Function])) {
	                    result.push(v);
	                }
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }

	        return result;
	    },


	    // 返回全部当前组件全部需要对函数结果进行再次解析的函数列表
	    getallFuncs: function getallFuncs(type) {
	        var name = _utils.Utils.toPascal(type);
	        // 把 children 属性加入到全部组件中
	        return (_AnalysisList2.default[name] || {}).funcs || [];
	    }
	};

/***/ }),
/* 162 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * @file 解析组件时，需要再次解析处理的属性列表
	 *      分为两部分：
	 *          1、属性为子组件配置的情况，需对子组件再次解析
	 *          2、属性为函数，函数的执行结果为一个组件配置，需要再次解析的情况
	 *
	 * Author: liuzechun (liuzechun@baidu.com)
	 * Created: 2019-01-11 17:57:44
	 */

	exports.default = {
	    Breadcrumb: { basic: ['options'] },
	    Input: { basic: ['addonBefore', 'addonAfter', 'prefix', 'suffix'] },
	    Switch: { basic: ['checkedChildren', 'unCheckedChildren'] },
	    Card: { basic: ['title', 'extra'] },
	    Panel: { basic: ['header'] },
	    Popover: { basic: ['title', 'body'] },
	    Tooltip: { basic: ['title'] },
	    Tabs: { basic: ['tabBarExtraContent'] },
	    TabPane: { basic: ['tab'] },
	    SubMenu: { basic: ['title'] },
	    MenuItemGroup: { basic: ['title'] },
	    Step: { basic: ['title', 'description', 'icon'] },
	    Alert: { basic: ['closeText', 'message', 'description'] },
	    Popconfirm: { basic: ['title'] },
	    Dropdown: { basic: ['overlay'] },
	    DropdownButton: { basic: ['overlay'] },
	    Rate: { basic: ['character'] },
	    Timeline: { basic: ['pending'] },
	    TimelineItem: { basic: ['dot'] },
	    Sider: { basic: ['trigger'] },
	    Modal: { basic: ['title'] },
	    Notification: { basic: ['message', 'description', 'btn', 'icon'] },
	    Fieldset: { basic: ['title'] },
	    DatePicker: {
	        funcs: ['renderExtraFooter']
	    },
	    RangePicker: {
	        funcs: ['renderExtraFooter']
	    },
	    MonthPicker: {
	        funcs: ['renderExtraFooter']
	    },
	    TimePicker: {
	        funcs: ['renderExtraFooter']
	    }
	};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseComponent2 = __webpack_require__(120);

	var _BaseComponent3 = _interopRequireDefault(_BaseComponent2);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 对第三方组件封装的基类，包含一些对第三方组件封装的通用功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var ExtendComponent = function (_BaseComponent) {
	    _inherits(ExtendComponent, _BaseComponent);

	    function ExtendComponent(props) {
	        _classCallCheck(this, ExtendComponent);

	        var _this = _possibleConstructorReturn(this, (ExtendComponent.__proto__ || Object.getPrototypeOf(ExtendComponent)).call(this, props));

	        _this.name = props.name;
	        // 保证每次实例化都有一个唯一的id
	        _this.componentId = (props.name || 'new_component') + '_' + Date.now();
	        _this.component;
	        return _this;
	    }
	    // 将自定义api挂载到三方组件上


	    _createClass(ExtendComponent, [{
	        key: 'setOpenApi',
	        value: function setOpenApi(target) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._openApi[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    if (_utils.Utils.typeof(this[v], 'function')) {
	                        target[v] = this[v].bind(this);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this._unsetTransmitComponent();
	        }
	        // 共享组件

	    }, {
	        key: '_transmitComponent',
	        value: function _transmitComponent() {
	            if (!!this.name) {
	                this._factory.$components.set(this.name, this.component);
	            }
	        }
	        // 解除共享

	    }, {
	        key: '_unsetTransmitComponent',
	        value: function _unsetTransmitComponent() {
	            if (!!this.name) {
	                this._factory.$components.del(this.name);
	            }
	        }
	    }]);

	    return ExtendComponent;
	}(_BaseComponent3.default);

	exports.default = ExtendComponent;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _Dom2 = __webpack_require__(118);

	var _Dom3 = _interopRequireDefault(_Dom2);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 需要操作的原生dom继承 BaseComponent
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-17 04:11:07
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Html = function (_Dom) {
	    _inherits(Html, _Dom);

	    function Html(props) {
	        _classCallCheck(this, Html);

	        var _this = _possibleConstructorReturn(this, (Html.__proto__ || Object.getPrototypeOf(Html)).call(this, props));

	        _this.type = 'section';
	        return _this;
	    }

	    _createClass(Html, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            _get(Html.prototype.__proto__ || Object.getPrototypeOf(Html.prototype), '_afterSetProps', this).call(this);
	            if (this.__props.children) {
	                this.__props.dangerouslySetInnerHTML = { __html: this.__props.children };
	                delete this.__props.children;
	            }
	        }
	        // 复用父组件的render
	        // render() {}

	    }]);

	    return Html;
	}(_Dom3.default);

	exports.default = Html;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _dataentry = __webpack_require__(166);

	var DataEntry = _interopRequireWildcard(_dataentry);

	var _datadisplay = __webpack_require__(169);

	var DataDisplay = _interopRequireWildcard(_datadisplay);

	var _genaral = __webpack_require__(171);

	var Genaral = _interopRequireWildcard(_genaral);

	var _navigation = __webpack_require__(173);

	var Navigation = _interopRequireWildcard(_navigation);

	var _feedback = __webpack_require__(177);

	var Feedback = _interopRequireWildcard(_feedback);

	var _layout = __webpack_require__(179);

	var Layout = _interopRequireWildcard(_layout);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	// 感觉 ES6 的方式用起来不灵活啊。。。
	// export default Object.assign({}, DataEntry, DataDisplay, Genaral, Navigation, Feedback);

	/**
	 * @file antd组件统一封装，实现几个基础抽象类做继承
	 * @author liuzechun@baidu.com
	 */
	module.exports = Object.assign({}, DataEntry, DataDisplay, Genaral, Navigation, Feedback, Layout);

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Dragger = exports.Upload = exports.Switch = exports.TreeSelect = exports.Select = exports.Radio = exports.CheckboxGroup = exports.Checkbox = exports.Rate = exports.InputNumber = exports.InputGroup = exports.InputSearch = exports.Textarea = exports.Input = exports.TimePicker = exports.MonthPicker = exports.RangePicker = exports.DatePicker = exports.Cascader = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(121);

	var _DataEntry10 = __webpack_require__(167);

	var _DataEntry11 = _interopRequireDefault(_DataEntry10);

	var _antd = __webpack_require__(111);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据录入 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var OptionsDataEntry = _DataEntry11.default.OptionsDataEntry;
	var BasePicker = _DataEntry11.default.BasePicker;

	/************* Cascader 级联选择 ************************************************************************** */

	var Cascader = exports.Cascader = function (_OptionsDataEntry) {
	    _inherits(Cascader, _OptionsDataEntry);

	    function Cascader(props) {
	        _classCallCheck(this, Cascader);

	        var _this = _possibleConstructorReturn(this, (Cascader.__proto__ || Object.getPrototypeOf(Cascader)).call(this, props));

	        _this.__controlled.defaultVal = [];
	        _this.__init();
	        return _this;
	    }

	    _createClass(Cascader, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Cascader, this.__props);
	        }
	    }]);

	    return Cascader;
	}(OptionsDataEntry);

	/************* DatePicker 日期[时间]选择 ****************************************************************** */

	var DatePicker = exports.DatePicker = function (_BasePicker) {
	    _inherits(DatePicker, _BasePicker);

	    function DatePicker(props) {
	        _classCallCheck(this, DatePicker);

	        var _this2 = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

	        _this2.__controlled.paramsIndex = 1;
	        _this2.__init();
	        return _this2;
	    }
	    // 继承父组件的函数，_initProps 后增加额外处理逻辑


	    _createClass(DatePicker, [{
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            _get(DatePicker.prototype.__proto__ || Object.getPrototypeOf(DatePicker.prototype), '_afterInitProps', this).call(this);
	            // 如果没有设置showTime，根据format自动增删showTime属性
	            if (_utils.Utils.typeof(this.__props.showTime, 'undefined')) {
	                this.__props.showTime = this._judgeShowTime(this.__props.format);
	            }
	        }
	        // 根据format自动增删showTime属性

	    }, {
	        key: '_judgeShowTime',
	        value: function _judgeShowTime(format) {
	            return format && format.toLowerCase().indexOf('h') !== -1;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var value = this.__props.value;
	            return _react2.default.createElement(Antd.DatePicker, _extends({}, this.__props, {
	                value: value ? _utils.Utils.moment(value) : value }));
	        }
	    }]);

	    return DatePicker;
	}(BasePicker);
	// RangePicker 日期范围选择


	var RangePicker = exports.RangePicker = function (_DatePicker) {
	    _inherits(RangePicker, _DatePicker);

	    function RangePicker(props) {
	        _classCallCheck(this, RangePicker);

	        var _this3 = _possibleConstructorReturn(this, (RangePicker.__proto__ || Object.getPrototypeOf(RangePicker)).call(this, props));

	        _this3.__controlled.paramsIndex = 1;
	        _this3.__controlled.defaultVal = [];
	        _this3.__init();
	        return _this3;
	    }

	    _createClass(RangePicker, [{
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            _get(RangePicker.prototype.__proto__ || Object.getPrototypeOf(RangePicker.prototype), '_afterInitProps', this).call(this);
	            // 如果设置了 value='current'，则把current转换为当前时间
	            var value = this.__props.value;
	            if (value && value[0] === 'current') {
	                value[0] = this._getCurrentValue();
	            }
	            if (value && value[1] === 'current') {
	                value[1] = this._getCurrentValue();
	            }
	            this.__props.value = value;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // 需注意，RangePicker 的value是一个数组
	            var value = this.__props.value;
	            var format = this.__props.format;
	            return _react2.default.createElement(Antd.DatePicker.RangePicker, _extends({}, this.__props, {
	                value: value ? [_utils.Utils.moment(value[0], format), _utils.Utils.moment(value[1], format)] : value }));
	        }
	    }]);

	    return RangePicker;
	}(DatePicker);
	// MonthPicker 月份选择


	var MonthPicker = exports.MonthPicker = function (_BasePicker2) {
	    _inherits(MonthPicker, _BasePicker2);

	    function MonthPicker(props) {
	        _classCallCheck(this, MonthPicker);

	        var _this4 = _possibleConstructorReturn(this, (MonthPicker.__proto__ || Object.getPrototypeOf(MonthPicker)).call(this, props));

	        _this4.__controlled.paramsIndex = 1;
	        _this4.__init();
	        return _this4;
	    }

	    _createClass(MonthPicker, [{
	        key: 'render',
	        value: function render() {
	            var value = this.__props.value;
	            return _react2.default.createElement(Antd.DatePicker.MonthPicker, _extends({}, this.__props, {
	                value: value ? _utils.Utils.moment(value, this.__props.format) : value }));
	        }
	    }]);

	    return MonthPicker;
	}(BasePicker);
	// TimePicker 时间选择


	var TimePicker = exports.TimePicker = function (_BasePicker3) {
	    _inherits(TimePicker, _BasePicker3);

	    function TimePicker(props) {
	        _classCallCheck(this, TimePicker);

	        var _this5 = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));

	        _this5.__controlled.paramsIndex = 1;
	        _this5.__init();
	        return _this5;
	    }

	    _createClass(TimePicker, [{
	        key: 'render',
	        value: function render() {
	            var value = this.__props.value;
	            return _react2.default.createElement(Antd.TimePicker, _extends({}, this.__props, {
	                value: value ? _utils.Utils.moment(value, this.__props.format) : value }));
	        }
	    }]);

	    return TimePicker;
	}(BasePicker);

	/************* Input 输入框 ************************************************************************** */

	var Input = exports.Input = function (_DataEntry) {
	    _inherits(Input, _DataEntry);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this6 = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this6.__init();
	        return _this6;
	    }

	    _createClass(Input, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Input, this.__props);
	        }
	    }]);

	    return Input;
	}(_DataEntry11.default);
	// textarea


	var Textarea = exports.Textarea = function (_DataEntry2) {
	    _inherits(Textarea, _DataEntry2);

	    function Textarea(props) {
	        _classCallCheck(this, Textarea);

	        var _this7 = _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).call(this, props));

	        _this7.__init();
	        return _this7;
	    }

	    _createClass(Textarea, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Input.TextArea, this.__props);
	        }
	    }]);

	    return Textarea;
	}(_DataEntry11.default);
	// 带搜索按钮 - 其余功能与Input一致，所以继承 Input 的处理逻辑


	var InputSearch = exports.InputSearch = function (_Input) {
	    _inherits(InputSearch, _Input);

	    function InputSearch(props) {
	        _classCallCheck(this, InputSearch);

	        var _this8 = _possibleConstructorReturn(this, (InputSearch.__proto__ || Object.getPrototypeOf(InputSearch)).call(this, props));

	        _this8.class.push('input');
	        _this8.__init();
	        return _this8;
	    }

	    _createClass(InputSearch, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Input.Search, this.__props);
	        }
	    }]);

	    return InputSearch;
	}(Input);
	// 输入框连接在一起形成一组


	var InputGroup = exports.InputGroup = function (_DataEntry3) {
	    _inherits(InputGroup, _DataEntry3);

	    function InputGroup(props) {
	        _classCallCheck(this, InputGroup);

	        var _this9 = _possibleConstructorReturn(this, (InputGroup.__proto__ || Object.getPrototypeOf(InputGroup)).call(this, props));

	        _this9.__init();
	        return _this9;
	    }

	    _createClass(InputGroup, [{
	        key: 'render',
	        value: function render() {
	            // 使用ref会报错
	            delete this.__props.ref;
	            return _react2.default.createElement(Antd.Input.Group, _extends({ compact: true }, this.__props));
	        }
	    }]);

	    return InputGroup;
	}(_DataEntry11.default);
	// 数字输入框


	var InputNumber = exports.InputNumber = function (_DataEntry4) {
	    _inherits(InputNumber, _DataEntry4);

	    function InputNumber(props) {
	        _classCallCheck(this, InputNumber);

	        var _this10 = _possibleConstructorReturn(this, (InputNumber.__proto__ || Object.getPrototypeOf(InputNumber)).call(this, props));

	        _this10.__init();
	        return _this10;
	    }

	    _createClass(InputNumber, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.InputNumber, _extends({ compact: true }, this.__props));
	        }
	    }]);

	    return InputNumber;
	}(_DataEntry11.default);

	/************* Rate 评分 ************************************************************************** */

	var Rate = exports.Rate = function (_DataEntry5) {
	    _inherits(Rate, _DataEntry5);

	    function Rate(props) {
	        _classCallCheck(this, Rate);

	        var _this11 = _possibleConstructorReturn(this, (Rate.__proto__ || Object.getPrototypeOf(Rate)).call(this, props));

	        _this11.__init();
	        return _this11;
	    }

	    _createClass(Rate, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Rate, this.__props);
	        }
	    }]);

	    return Rate;
	}(_DataEntry11.default);

	/************* Checkbox 复选框 ************************************************************************** */

	var Checkbox = exports.Checkbox = function (_DataEntry6) {
	    _inherits(Checkbox, _DataEntry6);

	    function Checkbox(props) {
	        _classCallCheck(this, Checkbox);

	        var _this12 = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

	        _this12.__controlled.key = 'checked';
	        _this12.__controlled.defaultVal = false;
	        _this12.__init();
	        return _this12;
	    }

	    _createClass(Checkbox, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Checkbox, this.__props);
	        }
	    }]);

	    return Checkbox;
	}(_DataEntry11.default);
	// 多复选框组合


	var CheckboxGroup = exports.CheckboxGroup = function (_OptionsDataEntry2) {
	    _inherits(CheckboxGroup, _OptionsDataEntry2);

	    function CheckboxGroup(props) {
	        _classCallCheck(this, CheckboxGroup);

	        var _this13 = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call(this, props));

	        _this13._openApi.push('checkAll');
	        _this13.__controlled.defaultVal = [];
	        _this13.__init();
	        return _this13;
	    }

	    _createClass(CheckboxGroup, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps(newProps) {
	            _get(CheckboxGroup.prototype.__proto__ || Object.getPrototypeOf(CheckboxGroup.prototype), '_afterSetProps', this).call(this, newProps);
	            if (newProps.options) {
	                this._handleDefaultSelect();
	            }
	        }
	    }, {
	        key: 'checkAll',
	        value: function checkAll() {
	            var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            var value = status ? this.__props.options.map(function (v) {
	                return v.value;
	            }) : [];
	            this.__setProps({ value: value });
	            this.__props.onChange && this.__props.onChange(value);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Checkbox.Group, this.__props);
	        }
	    }]);

	    return CheckboxGroup;
	}(OptionsDataEntry);

	/************* Radio 单选 ************************************************************************** */

	// 这里直接使用Radio组，单个radio没想到什么应用场景


	var Radio = exports.Radio = function (_OptionsDataEntry3) {
	    _inherits(Radio, _OptionsDataEntry3);

	    function Radio(props) {
	        _classCallCheck(this, Radio);

	        var _this14 = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

	        _this14.__init();
	        return _this14;
	    }

	    _createClass(Radio, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps(newProps) {
	            _get(Radio.prototype.__proto__ || Object.getPrototypeOf(Radio.prototype), '_afterSetProps', this).call(this, newProps);
	            if (newProps.options) {
	                this.__props.options = this.__props.options.map(function (item) {
	                    item.value += '';
	                    return item;
	                });
	                this._handleDefaultSelect();
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // 增加了一个配置项，来控制是否以button的形式展示
	            var Item = Antd.Radio;
	            if (this.__props.showAsButton) {
	                Item = Antd.Radio.Button;
	            }
	            return _react2.default.createElement(
	                Antd.Radio.Group,
	                _extends({}, _utils.Utils.filter(this.__props, 'options'), { value: this.__props.value !== undefined ? '' + this.__props.value : undefined }),
	                this.__props.options.map(function (item) {
	                    return _react2.default.createElement(
	                        Item,
	                        { key: item.value, disabled: item.disabled, style: item.style,
	                            value: item.value },
	                        item.label
	                    );
	                })
	            );
	        }
	    }]);

	    return Radio;
	}(OptionsDataEntry);

	/************* Select 下拉菜单 ************************************************************************** */

	var Select = exports.Select = function (_OptionsDataEntry4) {
	    _inherits(Select, _OptionsDataEntry4);

	    function Select(props) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        _classCallCheck(this, Select);

	        var _this15 = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

	        _this15._openApi.push('selectAll');
	        if (!options.preventInit) {
	            _this15.__init();
	        }
	        return _this15;
	    }

	    _createClass(Select, [{
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            _get(Select.prototype.__proto__ || Object.getPrototypeOf(Select.prototype), '_afterInitProps', this).call(this);
	            this.isMultiple = this.__props.type === 'multiple' || this.__props.type === 'tags';
	            if (this.isMultiple) {
	                this.__controlled.defaultVal = [];
	            }
	        }
	    }, {
	        key: 'selectAll',
	        value: function selectAll() {
	            var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            if (this.isMultiple) {
	                var value = status ? this.__props.options.map(function (v) {
	                    return v.value;
	                }) : [];
	                this.__setProps({ value: value });
	                this.__props.onChange && this.__props.onChange(value);
	            }
	        }
	        // 改为每次set值时检查，如果更新了options，则进行是否清空或者重置为默认值的处理

	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps(newProps) {
	            _get(Select.prototype.__proto__ || Object.getPrototypeOf(Select.prototype), '_afterSetProps', this).call(this, newProps);
	            if (newProps.options) {
	                this.__props.options = this.__props.options.map(function (item) {
	                    item.value += '';
	                    return item;
	                });
	                // 根据是否多选做区别处理
	                if (this.isMultiple) {
	                    this._handleMultipleSelect();
	                } else if (this.__props.type === 'combobox') {
	                    // combobox 模式下，由于可以任意输入，所以及时取不到也不清空数据
	                    this._handleDefaultSelect(false);
	                } else {
	                    this._handleDefaultSelect();
	                }
	            }
	        }
	    }, {
	        key: 'getAllOptions',
	        value: function getAllOptions() {
	            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__props.options;

	            return [].concat(this.__props.extOptions || [], data || []);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatType = _utils.Utils.getType(this.__controlled.defaultVal);
	            var value = this.__props.value;
	            if (formatType === 'array') {
	                value = _utils.Utils.format(this.__props.value, formatType);
	            } else if (_utils.Utils.typeof(value, ['number', 'boolean'])) {
	                value += '';
	            }
	            return _react2.default.createElement(
	                Antd.Select,
	                _extends({}, _utils.Utils.filter(this.__props, 'options'), { value: value }),
	                this.getAllOptions().map(function (item) {
	                    return _react2.default.createElement(
	                        Antd.Select.Option,
	                        { key: item.value, disabled: item.disabled, style: item.style,
	                            value: item.value },
	                        item.label
	                    );
	                })
	            );
	        }
	    }]);

	    return Select;
	}(OptionsDataEntry);

	/************* TreeSelect 树选择 ************************************************************************** */

	var TreeSelect = exports.TreeSelect = function (_DataEntry7) {
	    _inherits(TreeSelect, _DataEntry7);

	    function TreeSelect(props) {
	        _classCallCheck(this, TreeSelect);

	        var _this16 = _possibleConstructorReturn(this, (TreeSelect.__proto__ || Object.getPrototypeOf(TreeSelect)).call(this, props));

	        _this16.__init();
	        return _this16;
	    }
	    // 获取页面展示内容，针对select等类型的展示和实际提交的内容不一致的组件


	    _createClass(TreeSelect, [{
	        key: 'getDisplayValue',
	        value: function getDisplayValue() {
	            var value = this.getValue();
	            var result = value;
	            var options = this.__props.options || [];

	            for (var i in options) {
	                if (options[i].value === value || options[i].value === value + '') {
	                    result = options[i].label;
	                    break;
	                }
	            }
	            return result;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.TreeSelect, this.__props);
	        }
	    }]);

	    return TreeSelect;
	}(_DataEntry11.default);

	/************* Transfer 穿梭框 ************************************************************************** */

	// export class Transfer extends DataEntry {
	//     constructor(props) {
	//         super(props);
	//         this.__init();
	//     }
	//     render() {
	//         return <Antd.Transfer {...this.__props}/>;
	//     }
	// }


	/************* Slider 滑动输入 ************************************************************************** */

	// export class Slider extends DataEntry {
	//     constructor(props) {
	//         super(props);
	//         this.__init();
	//     }
	//     render() {
	//         return <Antd.Slider {...this.__props}/>;
	//     }
	// }


	/************* Switch 开关 ************************************************************************** */

	var Switch = exports.Switch = function (_DataEntry8) {
	    _inherits(Switch, _DataEntry8);

	    function Switch(props) {
	        _classCallCheck(this, Switch);

	        var _this17 = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

	        _this17.__controlled.key = 'checked';
	        _this17.__controlled.defaultVal = false;
	        _this17.__init();
	        return _this17;
	    }

	    _createClass(Switch, [{
	        key: 'render',
	        value: function render() {
	            // Switch用的是checked受控
	            return _react2.default.createElement(Antd.Switch, this.__props);
	        }
	    }]);

	    return Switch;
	}(_DataEntry11.default);

	/************* Upload 开关 ************************************************************************** */

	var Upload = exports.Upload = function (_DataEntry9) {
	    _inherits(Upload, _DataEntry9);

	    function Upload(props) {
	        _classCallCheck(this, Upload);

	        var _this18 = _possibleConstructorReturn(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));

	        _this18.__controlled.key = 'fileList';
	        _this18.__controlled.defaultVal = [];
	        _this18._filter.push('fieldName');
	        _this18.__init();
	        _this18.__props.name = _this18.props.fieldName || 'file';
	        return _this18;
	    }
	    // 参数额外处理


	    _createClass(Upload, [{
	        key: '_updateEventHandler',
	        value: function _updateEventHandler(param) {
	            return param ? param.fileList : [];
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Upload, this.__props);
	        }
	    }]);

	    return Upload;
	}(_DataEntry11.default);

	var Dragger = exports.Dragger = function (_Upload) {
	    _inherits(Dragger, _Upload);

	    function Dragger() {
	        _classCallCheck(this, Dragger);

	        return _possibleConstructorReturn(this, (Dragger.__proto__ || Object.getPrototypeOf(Dragger)).apply(this, arguments));
	    }

	    _createClass(Dragger, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Upload.Dragger, this.__props);
	        }
	    }]);

	    return Dragger;
	}(Upload);

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _Antd2 = __webpack_require__(168);

	var _Antd3 = _interopRequireDefault(_Antd2);

	var _utils = __webpack_require__(121);

	var _moment = __webpack_require__(125);

	var _moment2 = _interopRequireDefault(_moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据录入 相关的组件抽象类，如：Input等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 01:11:19
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:11
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var DataEntry = function (_Antd) {
	    _inherits(DataEntry, _Antd);

	    function DataEntry(props) {
	        _classCallCheck(this, DataEntry);

	        var _this = _possibleConstructorReturn(this, (DataEntry.__proto__ || Object.getPrototypeOf(DataEntry)).call(this, props));

	        _this.class.push('data-entry');
	        _this._openApi.push('getValue');
	        _this.__controlled = {
	            key: 'value',
	            event: 'onChange',
	            defaultVal: undefined,
	            paramsIndex: 0
	        };
	        return _this;
	    }
	    // 针对输入型组件，重写loading函数


	    _createClass(DataEntry, [{
	        key: 'loading',
	        value: function loading(status, showLoading) {
	            if (showLoading === 'simple') {
	                if (status) {
	                    var className = this.__filtered.__className || '';
	                    className += ' has-feedback is-validating';
	                    this.__setProps({ className: className });
	                } else {
	                    this.__setProps({ className: this.__filtered.__className });
	                }
	            } else {
	                _get(DataEntry.prototype.__proto__ || Object.getPrototypeOf(DataEntry.prototype), 'loading', this).call(this, status);
	            }
	        }
	    }, {
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            // 另外存一份className
	            this.__filtered.__className = this.__props.className;
	        }
	    }, {
	        key: '_afterInit',
	        value: function _afterInit() {
	            _get(DataEntry.prototype.__proto__ || Object.getPrototypeOf(DataEntry.prototype), '_afterInit', this).call(this);
	            this._updateEvent();
	        }
	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            _get(DataEntry.prototype.__proto__ || Object.getPrototypeOf(DataEntry.prototype), '_afterSetProps', this).call(this);
	            // 把值为boolean类型的数据进行强制转换
	            if (this.__controlled.key === 'checked') {
	                this.__props.data = !!+this.__props.data;
	            }
	        }
	        // 更新 onChange/onBlur 逻辑，额外返回一个参数，为当前组件的值

	    }, {
	        key: '_updateEventHandler',
	        value: function _updateEventHandler(param) {
	            return param;
	        }
	    }, {
	        key: '_updateEvent',
	        value: function _updateEvent() {
	            var _this2 = this;

	            if (this.__props.onChange) {
	                var _controlled = this.__controlled,
	                    key = _controlled.key,
	                    paramsIndex = _controlled.paramsIndex;

	                var oriOnChange = this.__props.onChange;
	                this.__props.onChange = function () {
	                    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                        params[_key] = arguments[_key];
	                    }

	                    var value = void 0;
	                    if (_utils.Utils.typeof(params[paramsIndex], 'object') && params[paramsIndex].target) {
	                        value = params[paramsIndex].target[key];
	                    } else {
	                        value = params[paramsIndex];
	                    }
	                    // 以上规则依然不能满足时，再重写函数进行额外处理
	                    value = _this2._updateEventHandler(value);
	                    return oriOnChange.apply(undefined, params.concat([value]));
	                };
	            }
	            if (this.__props.onBlur) {
	                var oriOnBlur = this.__props.onBlur;
	                this.__props.onBlur = function () {
	                    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                        params[_key2] = arguments[_key2];
	                    }

	                    oriOnBlur.apply(undefined, params.concat([_this2.getValue()]));
	                };
	            }
	        }

	        // 增加 onChange 时默认保存数据的函数
	        // 父类的 _onControlEvent 函数不能满足需求，直接覆盖了

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            var _ref;

	            var _controlled2 = this.__controlled,
	                key = _controlled2.key,
	                paramsIndex = _controlled2.paramsIndex;

	            this.__props[key] = (_ref = arguments.length - 1, arguments.length <= _ref ? undefined : arguments[_ref]);
	            // // 适合的组件：input、checkbox、radio
	            // if (Utils.typeof(params[paramsIndex], 'object') && params[paramsIndex].target) {
	            //     this.__props[key] = params[paramsIndex].target[key];
	            // } else {
	            //     this.__props[key] = params[paramsIndex];
	            // }
	            this.forceUpdate();
	        }

	        // 获取数据接口

	    }, {
	        key: 'getValue',
	        value: function getValue() {
	            var key = this.__controlled.key;
	            return this.__props[key];
	        }
	    }]);

	    return DataEntry;
	}(_Antd3.default);

	/************* 附带options属性的基类（包含多选逻辑） ***************************************************** */

	exports.default = DataEntry;
	DataEntry.OptionsDataEntry = function (_DataEntry) {
	    _inherits(OptionsDataEntry, _DataEntry);

	    function OptionsDataEntry(props) {
	        _classCallCheck(this, OptionsDataEntry);

	        var _this3 = _possibleConstructorReturn(this, (OptionsDataEntry.__proto__ || Object.getPrototypeOf(OptionsDataEntry)).call(this, props));

	        _this3._openApi.push('getDisplayValue', 'getSelectedOption');
	        return _this3;
	    }

	    _createClass(OptionsDataEntry, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps(nextProps) {
	            _get(OptionsDataEntry.prototype.__proto__ || Object.getPrototypeOf(OptionsDataEntry.prototype), '_afterSetProps', this).call(this);
	            // 把 options 格式化为统一固定格式
	            if (nextProps.options) {
	                this.__props.options = _utils.Utils.toOptions(this.__props.options);
	            }
	            if (!this.__props.options) {
	                this.__props.options = [];
	            }
	        }
	        // 处理多选情况

	    }, {
	        key: '_handleMultipleSelect',
	        value: function _handleMultipleSelect() {
	            var current = this.__props.value || [];
	            // 当设置默认全选时，更新当前内容为全选
	            if (this.__props.defaultSelectAll) {
	                var all = this.__props.options.map(function (v) {
	                    return v.value;
	                });
	                this.__props.onChange && this.__props.onChange(all);
	                return;
	            }
	            // 默认选中第一个的处理逻辑
	            if (this.__props.defaultFirst && _utils.Utils.empty(this.__props.value)) {
	                var first = _utils.Utils.getFirstOption(this.__props.options);
	                this.__props.onChange && this.__props.onChange([first]);
	            }
	            // 如果是多选型的，且当前有值，首先判断是否还有能匹配上的，如果全部匹配则跳过，否则更新
	            var matchVal = this.__props.options.filter(function (v) {
	                return current.indexOf(v.value) > -1;
	            }).map(function (v) {
	                return v.value;
	            });
	            if (matchVal.length === current.length) {
	                return;
	            }
	            this.__props.onChange && this.__props.onChange(matchVal);
	        }
	        // 处理默认选中

	    }, {
	        key: '_handleDefaultSelect',
	        value: function _handleDefaultSelect() {
	            var allClear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            var current = this.__props.value;
	            // 如果当前值再列表中，则不做任何处理
	            var alldata = this.__props.options;
	            // 追加上extOptions中的内容，仅select组件有
	            if (this.getAllOptions) {
	                alldata = this.getAllOptions(alldata);
	            }
	            if (alldata.some(function (v) {
	                return v.value + '' === current + '';
	            })) {
	                return;
	            }
	            // 否则把值设置为第一个或者清空
	            if (this.__props.defaultFirst) {
	                var first = _utils.Utils.getFirstOption(this.__props.options);
	                this.__props.onChange && this.__props.onChange(first);
	            } else if (allClear && this.__props.value !== undefined && !_utils.Utils.equals(this.__controlled.defaultVal, this.__props.value)) {
	                // 为实现刷新组件时，清空原数据
	                // 同时会带来问题，不能为空的字段会导致出现提示（已解决）
	                this.__props.onChange && this.__props.onChange(this.__controlled.defaultVal);
	            }
	        }

	        // 获取页面展示内容，针对select等类型的展示和实际提交的内容不一致的组件

	    }, {
	        key: 'getDisplayValue',
	        value: function getDisplayValue() {
	            var value = this.getValue();
	            var result = value;
	            var options = this.__props.options || [];
	            for (var i in options) {
	                if (options[i].value === value || options[i].value === value + '') {
	                    result = options[i].label;
	                    break;
	                }
	            }
	            return result;
	        }
	        // 获取选中的option，针对select等类型的具备可选值的组件

	    }, {
	        key: 'getSelectedOption',
	        value: function getSelectedOption() {
	            var value = this.getValue();
	            var result = void 0;
	            var options = this.__props.options || [];
	            for (var i in options) {
	                if (options[i].value === value || options[i].value === value + '') {
	                    result = options[i];
	                    break;
	                }
	            }
	            return result;
	        }
	    }]);

	    return OptionsDataEntry;
	}(DataEntry);

	/************* DatePicker日期选择框系列基类 ************************************************************** */

	DataEntry.BasePicker = function (_DataEntry2) {
	    _inherits(BasePicker, _DataEntry2);

	    function BasePicker(props) {
	        _classCallCheck(this, BasePicker);

	        var _this4 = _possibleConstructorReturn(this, (BasePicker.__proto__ || Object.getPrototypeOf(BasePicker)).call(this, props));

	        _this4.class.push('basic-picker');
	        _this4._filter.push('current');
	        _this4._injectEvent.push('onOk');
	        // this.__init();
	        return _this4;
	    }
	    // 获取当前时间


	    _createClass(BasePicker, [{
	        key: '_getCurrentValue',
	        value: function _getCurrentValue() {
	            return (0, _moment2.default)().format(this.__props.format);
	        }
	        // 注入到onOk事件中
	        // BUGFIX: 直接点击确认按钮时，自动把当前日期时间填上

	    }, {
	        key: '_onOk',
	        value: function _onOk(value) {
	            if (value === undefined) {
	                value = this._getCurrentValue();
	                this.__setProps({ value: value });
	                this.__props.onChange && this.__props.onChange(_utils.Utils.moment(value), value);
	            }
	            if (value instanceof _moment2.default && this.__props.format) {
	                value = value.format(this.__props.format);
	            }
	        }
	        // 继承父组件的函数，_initProps 后增加额外处理逻辑

	    }, {
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            _get(BasePicker.prototype.__proto__ || Object.getPrototypeOf(BasePicker.prototype), '_afterInitProps', this).call(this);
	            // 如果设置了 value='current'，则把current转换为当前时间
	            if (this.__props.value === 'current') {
	                this.__props.value = this._getCurrentValue();
	            }
	        }
	    }]);

	    return BasePicker;
	}(DataEntry);

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(119);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Antd 全部组件的基类，其中实现了接管受控属性的逻辑
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 01:11:19
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Antd = function (_BaseComponent) {
	    _inherits(Antd, _BaseComponent);

	    function Antd(props) {
	        _classCallCheck(this, Antd);

	        var _this = _possibleConstructorReturn(this, (Antd.__proto__ || Object.getPrototypeOf(Antd)).call(this, props));
	        // 追加中间基类


	        _this.class.push('antd');
	        _this._filter.push('controlled');
	        // 开放给用户使用的 Api
	        _this._openApi.push('trigger');
	        // 壳子调用antd组件，调用的组件的实例存储在_component中
	        _this._component = null;
	        // 受控属性名，供子类设置。如果子类设置了此属性，则会绑定change事件，同时也受控于用户传入的此值。见 _handleControlled
	        _this.__controlled = null;
	        return _this;
	    }

	    /* 暴露给用户的方法 ***********************************************************************/

	    // 触发组件上的原生事件，例如 focus、change 等


	    _createClass(Antd, [{
	        key: 'trigger',
	        value: function trigger(event) {
	            for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                params[_key - 1] = arguments[_key];
	            }

	            if (this._component && this._component[event]) {
	                this._component[event](params);
	            } else {
	                var _get2;

	                (_get2 = _get(Antd.prototype.__proto__ || Object.getPrototypeOf(Antd.prototype), 'trigger', this)).call.apply(_get2, [this, event].concat(params));
	            }
	        }

	        /* 供子组件调用方法 ***********************************************************************/

	    }, {
	        key: '_beforeInitProps',
	        value: function _beforeInitProps() {
	            _get(Antd.prototype.__proto__ || Object.getPrototypeOf(Antd.prototype), '_beforeInitProps', this).call(this);
	            // 受控配置 - 如果不为null,则合并覆盖
	            this.__controlled = this.__controlled ? this.__mergeProps({
	                key: 'value',
	                event: 'onChange',
	                defaultVal: undefined,
	                paramsIndex: 0
	            }, this.__controlled) : null;
	            // 使用 _injectEvent 的方式将属性的控制逻辑注入到事件中，将事件名称推入_injectEvent数组中即可
	            if (this.__controlled) {
	                var event = this.__controlled.event;
	                this._injectEvent.push(event);
	                // 创建一个名为_${event}的函数，供_injectEvent的相关逻辑调用
	                // 防止子类中已经实现了_${event}函数，此处使用注入的方式进行赋值
	                this._inject(this, '_' + event, this._onControlEventHandler);
	            }
	        }
	    }, {
	        key: '_afterInit',
	        value: function _afterInit() {
	            var _this2 = this;

	            _get(Antd.prototype.__proto__ || Object.getPrototypeOf(Antd.prototype), '_afterInit', this).call(this);
	            // 保存原始antd组件的引用
	            this.__props['ref'] = function (ele) {
	                return _this2._component = ele;
	            };
	            // 受控组件默认处理逻辑
	            this._handleControlled();
	        }

	        // 组件创建时，对受控属性值进行同步

	    }, {
	        key: '_handleControlled',
	        value: function _handleControlled() {
	            if (!this.__controlled) {
	                return;
	            }
	            var _controlled = this.__controlled,
	                key = _controlled.key,
	                defaultVal = _controlled.defaultVal,
	                event = _controlled.event;
	            // 受控属性对应的默认属性，(如：value => defaultValue)

	            var defaultKey = 'default' + key.replace(/^\w/g, function (v) {
	                return v.toUpperCase();
	            });
	            // 把value和defaultValue merge一下，统一交由 value 控制
	            // let keyValue = this.__props[key] || this.__props[defaultKey];
	            var keyValue = this.__props[defaultKey];
	            // 注意需用undefined判断，否则为0的时候会不符合预期
	            if (this.__props[key] !== undefined) {
	                keyValue = this.__props[key];
	            }
	            // 如果这个值为空，否则受控属性为空会出现异常
	            if (keyValue !== undefined) {
	                this.__props[key] = keyValue;
	            } else {
	                // 屏蔽warning，非受控组件转换为受控组件会报warning
	                this.__props[key] = defaultVal;
	            }
	        }

	        // 供 _injectEvent 使用

	    }, {
	        key: '_onControlEventHandler',
	        value: function _onControlEventHandler() {
	            // 如果用户传入了 controlled 属性，则完全由用户自己控制，不再执行默认控制逻辑
	            if (this.__filtered.controlled) {
	                return;
	            }
	            this._onControlEvent.apply(this, arguments);
	        }
	        // 同步onChange的数据到受控属性上，默认取第一个参数
	        // ** 可直接被子类覆盖重写 **
	        // **     如果有其他需求可以直接覆盖重写，注意函数内要调用下 callback（如：DataEntry中用法）

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            if (this.__controlled) {
	                var _controlled2 = this.__controlled,
	                    key = _controlled2.key,
	                    paramsIndex = _controlled2.paramsIndex;

	                if (key) {
	                    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                        params[_key2] = arguments[_key2];
	                    }

	                    this.__props[key] = params[paramsIndex];
	                    this.forceUpdate();
	                }
	            }
	        }
	    }]);

	    return Antd;
	}(_base.BaseComponent);

	exports.default = Antd;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TimelineItem = exports.Timeline = exports.CheckableTag = exports.Tag = exports.TabPane = exports.Tabs = exports.Popconfirm = exports.Popover = exports.Tooltip = exports.Panel = exports.Collapse = exports.Carousel = exports.Card = exports.Badge = exports.Avatar = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = __webpack_require__(121);

	var _DataDisplay16 = __webpack_require__(170);

	var _DataDisplay17 = _interopRequireDefault(_DataDisplay16);

	var _antd = __webpack_require__(111);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据展示 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/************* Avatar 头像 ************************************************************************** */

	var Avatar = exports.Avatar = function (_DataDisplay) {
	    _inherits(Avatar, _DataDisplay);

	    function Avatar(props) {
	        _classCallCheck(this, Avatar);

	        var _this = _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Avatar, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Avatar, this.__props);
	        }
	    }]);

	    return Avatar;
	}(_DataDisplay17.default);

	/************* Badge 徽标数 ************************************************************************** */

	var Badge = exports.Badge = function (_DataDisplay2) {
	    _inherits(Badge, _DataDisplay2);

	    function Badge(props) {
	        _classCallCheck(this, Badge);

	        var _this2 = _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Badge, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Badge, this.__props);
	        }
	    }]);

	    return Badge;
	}(_DataDisplay17.default);

	/************* Card 卡片 ************************************************************************** */

	var Card = exports.Card = function (_DataDisplay3) {
	    _inherits(Card, _DataDisplay3);

	    function Card(props) {
	        _classCallCheck(this, Card);

	        var _this3 = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));

	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Card, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Card, this.__props);
	        }
	    }]);

	    return Card;
	}(_DataDisplay17.default);

	/************* Carousel 轮播 ************************************************************************** */

	var Carousel = exports.Carousel = function (_DataDisplay4) {
	    _inherits(Carousel, _DataDisplay4);

	    function Carousel(props) {
	        _classCallCheck(this, Carousel);

	        var _this4 = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Carousel, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Carousel, this.__props);
	        }
	    }]);

	    return Carousel;
	}(_DataDisplay17.default);

	/************* Collapse 折叠面板 ************************************************************************** */

	var Collapse = exports.Collapse = function (_DataDisplay5) {
	    _inherits(Collapse, _DataDisplay5);

	    function Collapse(props) {
	        _classCallCheck(this, Collapse);

	        var _this5 = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));

	        _this5._openApi.push('open', 'close');
	        // 受控属性
	        // event: onChange / paramsIndex: 0
	        _this5.__controlled = {
	            key: 'activeKey'
	        };
	        _this5.__init();
	        return _this5;
	    }

	    _createClass(Collapse, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            // 如果activeKey不是数组，则默认打开手风琴模式
	            if (this.__props.activeKey && !_utils.Utils.typeof(this.__props.activeKey, 'array')) {
	                this.__props.accordion = true;
	            }
	            // 如果设置了fixed属性，则移除折叠展开的交互，仅作为展示组件
	            if (this.__props.fixed) {
	                this.__controlled = null;
	                this.__props.className = (this.__props.className || '') + ' uf-collapse-fixed';
	            }
	        }
	        // 打开某个面板

	    }, {
	        key: 'open',
	        value: function open(key) {
	            if (this.__props.accordion) {
	                this.__setProps({ activeKey: key });
	            } else {
	                var current = this.__props.activeKey || [];
	                if (!current.some(function (v) {
	                    return v === key;
	                })) {
	                    current.push(key);
	                }
	                this.__setProps({ activeKey: current });
	            }
	        }
	        // 关闭某个面板

	    }, {
	        key: 'close',
	        value: function close(key) {
	            if (this.__props.accordion) {
	                if (!this.__props.activeKey || this.__props.activeKey === key) {
	                    this.__setProps({ activeKey: '' });
	                }
	            } else {
	                var current = this.__props.activeKey || [];
	                this.__setProps({ activeKey: current.filter(function (v) {
	                        return v !== key;
	                    }) });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Collapse, this.__props);
	        }
	    }]);

	    return Collapse;
	}(_DataDisplay17.default);
	// 单个面板


	var Panel = exports.Panel = function (_DataDisplay6) {
	    _inherits(Panel, _DataDisplay6);

	    function Panel(props) {
	        _classCallCheck(this, Panel);

	        var _this6 = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

	        _this6.__init();
	        return _this6;
	    }

	    _createClass(Panel, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Collapse.Panel, this.__props);
	        }
	    }]);

	    return Panel;
	}(_DataDisplay17.default);

	/************* Tooltip 文字提示 ************************************************************************** */
	// 默认提示


	var Tooltip = exports.Tooltip = function (_DataDisplay7) {
	    _inherits(Tooltip, _DataDisplay7);

	    function Tooltip(props) {
	        _classCallCheck(this, Tooltip);

	        // 受控属性
	        var _this7 = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

	        _this7.__controlled = {
	            key: 'visible',
	            event: 'onVisibleChange'
	        };
	        _this7.__init();
	        return _this7;
	    }

	    _createClass(Tooltip, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tooltip, this.__props);
	        }
	    }]);

	    return Tooltip;
	}(_DataDisplay17.default);
	// 气泡卡片 - tooltip 的升级


	var Popover = exports.Popover = function (_DataDisplay8) {
	    _inherits(Popover, _DataDisplay8);

	    function Popover(props) {
	        _classCallCheck(this, Popover);

	        // 受控属性
	        var _this8 = _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(this, props));

	        _this8.__controlled = {
	            key: 'visible',
	            event: 'onVisibleChange'
	        };
	        _this8.__init();
	        return _this8;
	    }

	    _createClass(Popover, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Popover, _extends({}, this.__props, { content: this.__props.body }));
	        }
	    }]);

	    return Popover;
	}(_DataDisplay17.default);
	// 气泡确认框


	var Popconfirm = exports.Popconfirm = function (_DataDisplay9) {
	    _inherits(Popconfirm, _DataDisplay9);

	    function Popconfirm(props) {
	        _classCallCheck(this, Popconfirm);

	        // 受控属性
	        var _this9 = _possibleConstructorReturn(this, (Popconfirm.__proto__ || Object.getPrototypeOf(Popconfirm)).call(this, props));

	        _this9.__controlled = {
	            key: 'visible',
	            event: 'onVisibleChange'
	        };
	        _this9.__init();
	        return _this9;
	    }

	    _createClass(Popconfirm, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Popconfirm, this.__props);
	        }
	    }]);

	    return Popconfirm;
	}(_DataDisplay17.default);

	/************* Tabs 标签页 ************************************************************************** */

	var Tabs = exports.Tabs = function (_DataDisplay10) {
	    _inherits(Tabs, _DataDisplay10);

	    function Tabs(props) {
	        _classCallCheck(this, Tabs);

	        // 受控属性
	        // event: onChange / paramsIndex: 0
	        var _this10 = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));

	        _this10.__controlled = {
	            key: 'activeKey'
	        };
	        _this10._filter.push('forceRefresh');
	        _this10._injectEvent.push('onTabClick');
	        _this10.__init();
	        // 标签页的引用
	        _this10.tabRefs = {};
	        return _this10;
	    }
	    // _onChange(key) {
	    //     window.history.pushState(null, null, key);
	    // }


	    _createClass(Tabs, [{
	        key: '_onTabClick',
	        value: function _onTabClick(activeKey) {
	            if (this.__filtered.forceRefresh) {
	                // 如果通过items生成的子tab页，则可以使用refresh；否则刷新整个Tabs
	                if (this.tabRefs[activeKey]) {
	                    this.tabRefs[activeKey].refresh();
	                } else {
	                    // 全部Tab都会解析一遍
	                    this.set({
	                        content: this.__filtered._children
	                    });
	                }
	            }
	        }
	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            var _this11 = this;

	            // 如果是使用items属性配置子tab，则做额外处理
	            if (this.__props.items) {
	                this.__props.children = this.__analysis(this.__props.items.map(function (v) {
	                    v.type = 'tab-pane';
	                    v.wrappedComponentRef = function (inst) {
	                        return _this11.tabRefs[v.key] = inst;
	                    };
	                    return v;
	                }));
	                delete this.__props.items;
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tabs, this.__props);
	        }
	    }]);

	    return Tabs;
	}(_DataDisplay17.default);
	// tab的每一项


	var TabPane = exports.TabPane = function (_DataDisplay11) {
	    _inherits(TabPane, _DataDisplay11);

	    function TabPane(props) {
	        _classCallCheck(this, TabPane);

	        var _this12 = _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).call(this, props));

	        _this12.__init();
	        return _this12;
	    }

	    _createClass(TabPane, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.props.wrappedComponentRef && this.props.wrappedComponentRef(this);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tabs.TabPane, this.__props);
	        }
	    }]);

	    return TabPane;
	}(_DataDisplay17.default);

	/************* Tag 标签 ************************************************************************** */

	var Tag = exports.Tag = function (_DataDisplay12) {
	    _inherits(Tag, _DataDisplay12);

	    function Tag(props) {
	        _classCallCheck(this, Tag);

	        var _this13 = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));

	        _this13.__init();
	        return _this13;
	    }

	    _createClass(Tag, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tag, this.__props);
	        }
	    }]);

	    return Tag;
	}(_DataDisplay17.default);

	var CheckableTag = exports.CheckableTag = function (_DataDisplay13) {
	    _inherits(CheckableTag, _DataDisplay13);

	    function CheckableTag(props) {
	        _classCallCheck(this, CheckableTag);

	        var _this14 = _possibleConstructorReturn(this, (CheckableTag.__proto__ || Object.getPrototypeOf(CheckableTag)).call(this, props));

	        _this14.__init();
	        return _this14;
	    }

	    _createClass(CheckableTag, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Tag.CheckableTag, this.__props);
	        }
	    }]);

	    return CheckableTag;
	}(_DataDisplay17.default);

	/************* Timeline 时间轴 ************************************************************************** */

	var Timeline = exports.Timeline = function (_DataDisplay14) {
	    _inherits(Timeline, _DataDisplay14);

	    function Timeline(props) {
	        _classCallCheck(this, Timeline);

	        var _this15 = _possibleConstructorReturn(this, (Timeline.__proto__ || Object.getPrototypeOf(Timeline)).call(this, props));

	        _this15.__init();
	        return _this15;
	    }

	    _createClass(Timeline, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Timeline, this.__props);
	        }
	    }]);

	    return Timeline;
	}(_DataDisplay17.default);

	var TimelineItem = exports.TimelineItem = function (_DataDisplay15) {
	    _inherits(TimelineItem, _DataDisplay15);

	    function TimelineItem(props) {
	        _classCallCheck(this, TimelineItem);

	        var _this16 = _possibleConstructorReturn(this, (TimelineItem.__proto__ || Object.getPrototypeOf(TimelineItem)).call(this, props));

	        _this16.__init();
	        return _this16;
	    }

	    _createClass(TimelineItem, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Timeline.Item, this.__props);
	        }
	    }]);

	    return TimelineItem;
	}(_DataDisplay17.default);

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(168);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 数据展示 组件抽象类，如：Card、Tooltip 等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:33
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:27:40
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var DataDisplay = function (_Antd) {
	  _inherits(DataDisplay, _Antd);

	  function DataDisplay() {
	    _classCallCheck(this, DataDisplay);

	    return _possibleConstructorReturn(this, (DataDisplay.__proto__ || Object.getPrototypeOf(DataDisplay)).apply(this, arguments));
	  }

	  return DataDisplay;
	}(_Antd3.default);

	exports.default = DataDisplay;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Col = exports.Row = exports.IconPlus = exports.Icon = exports.Backtop = exports.ButtonGroup = exports.Button = exports.AnchorLink = exports.Anchor = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = __webpack_require__(121);

	var _Genaral10 = __webpack_require__(172);

	var _Genaral11 = _interopRequireDefault(_Genaral10);

	var _antd = __webpack_require__(111);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Genaral 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/************* Anchor 锚点 ************************************************************************** */

	var Anchor = exports.Anchor = function (_Genaral) {
	    _inherits(Anchor, _Genaral);

	    function Anchor(props) {
	        _classCallCheck(this, Anchor);

	        var _this = _possibleConstructorReturn(this, (Anchor.__proto__ || Object.getPrototypeOf(Anchor)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Anchor, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Anchor, this.__props);
	        }
	    }]);

	    return Anchor;
	}(_Genaral11.default);

	var AnchorLink = exports.AnchorLink = function (_Genaral2) {
	    _inherits(AnchorLink, _Genaral2);

	    function AnchorLink(props) {
	        _classCallCheck(this, AnchorLink);

	        var _this2 = _possibleConstructorReturn(this, (AnchorLink.__proto__ || Object.getPrototypeOf(AnchorLink)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(AnchorLink, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Anchor.Link, this.__props);
	        }
	    }]);

	    return AnchorLink;
	}(_Genaral11.default);

	/************* Button 按钮 ************************************************************************** */

	var Button = exports.Button = function (_Genaral3) {
	    _inherits(Button, _Genaral3);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this3 = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this3._filter.push('link', 'active', 'actived', 'activedChildren', 'unActivedChildren');
	        _this3._injectEvent.push('onClick');
	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Button, [{
	        key: 'loading',
	        value: function loading() {
	            var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            this.__setProps({ loading: status });
	        }
	    }, {
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            if (this.__filtered.actived === true) {
	                this.__filtered.active = !!this.__filtered.active;
	            }
	        }
	    }, {
	        key: '_onClick',
	        value: function _onClick() {
	            // 如果配置了link属性，则按钮点击后会跳转到link指定的页面
	            if (this.__filtered.link) {
	                _utils.Utils.goto(this.__filtered.link);
	            }
	            if (this.__filtered.actived === true) {
	                this.__filtered.active = !this.__filtered.active;
	                this.forceUpdate();
	            }
	        }
	        // 处理 activedChildren 及 unActivedChildren 参数，可以通过这两个参数控制按钮处于两种状态时分别展示的内容

	    }, {
	        key: 'handlerOtherProps',
	        value: function handlerOtherProps() {
	            var _this4 = this;

	            var otherProps = {};
	            if (!this.__filtered.activedChildren && !this.__filtered.unActivedChildren) {
	                return otherProps;
	            }
	            // 根据是否active决定使用哪个配置
	            if (this.__filtered.active) {
	                otherProps = this.__filtered.activedChildren || {};
	            } else {
	                otherProps = this.__filtered.unActivedChildren || {};
	            }
	            otherProps = _utils.Utils.copy(otherProps);
	            // 如果配置了content，重新解析成children
	            if (otherProps.content) {
	                otherProps.children = this.__analysis(otherProps.content);
	            }
	            // 不能直接覆盖掉原组件内部绑定的onClick事件
	            if (otherProps.onClick) {
	                var oriOnClick = otherProps.onClick;
	                otherProps.onClick = function (e) {
	                    _this4.__props.onClick(e);
	                    oriOnClick(e);
	                };
	            }
	            return otherProps;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var className = '';
	            // 额外加一个mini类型的size
	            var size = this.__props.size;
	            if (size === 'mini') {
	                className += ' uf-btn-mini';
	                size = 'small';
	            }
	            if (this.__filtered.active && !this.__filtered.activedChildren) {
	                className += ' active';
	            }
	            return _react2.default.createElement(Antd.Button, _extends({}, this.__props, this.handlerOtherProps(), this.__getCommonProps({ className: className }), {
	                size: size
	            }));
	        }
	    }]);

	    return Button;
	}(_Genaral11.default);
	// 按钮组


	var ButtonGroup = exports.ButtonGroup = function (_Genaral4) {
	    _inherits(ButtonGroup, _Genaral4);

	    function ButtonGroup(props) {
	        _classCallCheck(this, ButtonGroup);

	        var _this5 = _possibleConstructorReturn(this, (ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).call(this, props));

	        _this5.__init();
	        return _this5;
	    }

	    _createClass(ButtonGroup, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Button.Group, this.__props);
	        }
	    }]);

	    return ButtonGroup;
	}(_Genaral11.default);

	/************* Backtop 返回顶部 ************************************************************************** */

	var Backtop = exports.Backtop = function (_Genaral5) {
	    _inherits(Backtop, _Genaral5);

	    function Backtop(props) {
	        _classCallCheck(this, Backtop);

	        var _this6 = _possibleConstructorReturn(this, (Backtop.__proto__ || Object.getPrototypeOf(Backtop)).call(this, props));

	        _this6.__init();
	        return _this6;
	    }

	    _createClass(Backtop, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.BackTop, this.__props);
	        }
	    }]);

	    return Backtop;
	}(_Genaral11.default);

	/************* Icon 图标 ************************************************************************** */

	var Icon = exports.Icon = function (_Genaral6) {
	    _inherits(Icon, _Genaral6);

	    function Icon(props) {
	        _classCallCheck(this, Icon);

	        var _this7 = _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).call(this, props));

	        _this7.__init();
	        return _this7;
	    }

	    _createClass(Icon, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Icon, this.__props);
	        }
	    }]);

	    return Icon;
	}(_Genaral11.default);

	var IconPlus = exports.IconPlus = function (_Genaral7) {
	    _inherits(IconPlus, _Genaral7);

	    function IconPlus(props) {
	        _classCallCheck(this, IconPlus);

	        var _this8 = _possibleConstructorReturn(this, (IconPlus.__proto__ || Object.getPrototypeOf(IconPlus)).call(this, props));

	        _this8.__init();
	        return _this8;
	    }

	    _createClass(IconPlus, [{
	        key: 'render',
	        value: function render() {
	            var type = (this.__props.type || '').replace('icon-', '');
	            return _react2.default.createElement('i', _extends({}, this.__props, this.__getCommonProps({ className: 'iconfont icon-' + type })));
	        }
	    }]);

	    return IconPlus;
	}(_Genaral11.default);

	/************* Grid 栅格 ************************************************************************** */
	// Row


	var Row = exports.Row = function (_Genaral8) {
	    _inherits(Row, _Genaral8);

	    function Row(props) {
	        _classCallCheck(this, Row);

	        var _this9 = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, props));

	        _this9.__init();
	        return _this9;
	    }

	    _createClass(Row, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Row, this.__props);
	        }
	    }]);

	    return Row;
	}(_Genaral11.default);
	// Col


	var Col = exports.Col = function (_Genaral9) {
	    _inherits(Col, _Genaral9);

	    function Col(props) {
	        _classCallCheck(this, Col);

	        var _this10 = _possibleConstructorReturn(this, (Col.__proto__ || Object.getPrototypeOf(Col)).call(this, props));

	        _this10.__init();
	        return _this10;
	    }

	    _createClass(Col, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Col, this.__props);
	        }
	    }]);

	    return Col;
	}(_Genaral11.default);

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(168);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 通用的组件 抽象类，如：Button、Icon 等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:24
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:35
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Genaral = function (_Antd) {
	  _inherits(Genaral, _Antd);

	  function Genaral() {
	    _classCallCheck(this, Genaral);

	    return _possibleConstructorReturn(this, (Genaral.__proto__ || Object.getPrototypeOf(Genaral)).apply(this, arguments));
	  }

	  return Genaral;
	}(_Antd3.default);

	exports.default = Genaral;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Step = exports.Steps = exports.Pagination = exports.Menu = exports.DropdownButton = exports.Dropdown = exports.Breadcrumb = exports.Affix = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(110);

	var _utils = __webpack_require__(121);

	var _Navigation9 = __webpack_require__(174);

	var _Navigation10 = _interopRequireDefault(_Navigation9);

	var _antd = __webpack_require__(111);

	var Antd = _interopRequireWildcard(_antd);

	var _router = __webpack_require__(175);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导航 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-26 01:18:00
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:31:44
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/************ Affix 图钉 *************************************************************************** */

	var Affix = exports.Affix = function (_Navigation) {
	    _inherits(Affix, _Navigation);

	    function Affix(props) {
	        _classCallCheck(this, Affix);

	        var _this = _possibleConstructorReturn(this, (Affix.__proto__ || Object.getPrototypeOf(Affix)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Affix, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Affix, this.__props);
	        }
	    }]);

	    return Affix;
	}(_Navigation10.default);

	/************ Breadcrumb 面包屑 *************************************************************************** */

	var Breadcrumb = exports.Breadcrumb = function (_Navigation2) {
	    _inherits(Breadcrumb, _Navigation2);

	    function Breadcrumb(props) {
	        _classCallCheck(this, Breadcrumb);

	        var _this2 = _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Breadcrumb, [{
	        key: '_afterInit',
	        value: function _afterInit() {
	            var _this3 = this;

	            _get(Breadcrumb.prototype.__proto__ || Object.getPrototypeOf(Breadcrumb.prototype), '_afterInit', this).call(this);
	            // itemRender 用户返回的是一个配置，这里根据配置生成组件
	            if (this.__props.itemRender) {
	                var origin = this.__props.itemRender;
	                this.__props.itemRender = function () {
	                    var result = origin.apply(undefined, arguments);
	                    return _this3.__analysis(result);
	                };
	            } else {
	                // 如果用户没有配置 itemRender，则使用默认的 itemRender
	                // 增加了 breadcrumbIcon 属性解析
	                this.__props.itemRender = function (route, params, routes, paths) {
	                    var last = routes.indexOf(route) === routes.length - 1;
	                    var icon = route.breadcrumbIcon ? _react2.default.createElement(Antd.Icon, { key: '1', type: route.breadcrumbIcon }) : null;
	                    var breadcrumbName = _this3.renderBreadcrumbName(route.breadcrumbName);
	                    var item = !!icon ? [icon, _react2.default.createElement(
	                        'span',
	                        { key: '2' },
	                        breadcrumbName
	                    )] : breadcrumbName;
	                    // 解决跟节点的面包屑paths为空导致不可点问题
	                    var to = '/' + paths.join('/');
	                    return last ? item : _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: to, className: 'ant-breadcrumb-link' },
	                        item
	                    );
	                };
	            }
	        }
	        // 面包屑展示处理

	    }, {
	        key: 'renderBreadcrumbName',
	        value: function renderBreadcrumbName(name) {
	            // 如果有类似于`:id`这种形式的和路由参数匹配的情况，则替换成对应的参数值
	            return _utils.Utils.urlAnalysis(name, _router.Router.getRouter().params, false);
	        }
	        // 每次render都需要重新获取routes

	    }, {
	        key: 'beforeRender',
	        value: function beforeRender() {
	            // 如果用户配置了items，则按照用户配置的items列表类展示面包屑
	            if (!this.__props.items) {
	                var newRoutes = [];
	                var routes = this._root.props.routes;
	                // 过滤掉无效的面包屑（既没有name，又没有icon）
	                if (routes) {
	                    var _iteratorNormalCompletion = true;
	                    var _didIteratorError = false;
	                    var _iteratorError = undefined;

	                    try {
	                        for (var _iterator = routes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                            var v = _step.value;

	                            if (v.breadcrumbName || v.breadcrumbIcon) {
	                                newRoutes.push(v);
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError = true;
	                        _iteratorError = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	                        } finally {
	                            if (_didIteratorError) {
	                                throw _iteratorError;
	                            }
	                        }
	                    }
	                }
	                this.__props.routes = newRoutes;
	                this.__props.params = this._root.props.params;
	            } else {
	                this.__props.routes = this.__props.items;
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            this.beforeRender();
	            return _react2.default.createElement(Antd.Breadcrumb, this.__props);
	        }
	    }]);

	    return Breadcrumb;
	}(_Navigation10.default);

	/************ Dropdown 下拉菜单 *************************************************************************** */

	var Dropdown = exports.Dropdown = function (_Navigation3) {
	    _inherits(Dropdown, _Navigation3);

	    function Dropdown(props) {
	        _classCallCheck(this, Dropdown);

	        var _this4 = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Dropdown, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Dropdown, this.__props);
	        }
	    }]);

	    return Dropdown;
	}(_Navigation10.default);

	var DropdownButton = exports.DropdownButton = function (_Navigation4) {
	    _inherits(DropdownButton, _Navigation4);

	    function DropdownButton(props) {
	        _classCallCheck(this, DropdownButton);

	        var _this5 = _possibleConstructorReturn(this, (DropdownButton.__proto__ || Object.getPrototypeOf(DropdownButton)).call(this, props));

	        _this5.__init();
	        return _this5;
	    }

	    _createClass(DropdownButton, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Dropdown.Button, this.__props);
	        }
	    }]);

	    return DropdownButton;
	}(_Navigation10.default);

	/************ Menu 导航菜单 *************************************************************************** */

	var Menu = exports.Menu = function (_Navigation5) {
	    _inherits(Menu, _Navigation5);

	    function Menu(props) {
	        _classCallCheck(this, Menu);

	        var _this6 = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

	        _this6.__controlled = {
	            key: 'selectedKeys',
	            event: 'onSelect',
	            defaultVal: []
	        };
	        // 收集全部可用的key值
	        _this6.allKeys = {};
	        _this6.__init();
	        return _this6;
	    }
	    // __setProps 后，增加附加处理逻辑


	    _createClass(Menu, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            var _get2;

	            for (var _len = arguments.length, p = Array(_len), _key = 0; _key < _len; _key++) {
	                p[_key] = arguments[_key];
	            }

	            (_get2 = _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), '_afterSetProps', this)).call.apply(_get2, [this].concat(p));
	            if (this.__props.items) {
	                this.__props.children = this.handleItems(this.__props.items);
	                delete this.__props.items;
	            }
	        }
	        // 见 Antd.js

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            var _ref = arguments.length <= 0 ? undefined : arguments[0],
	                selectedKeys = _ref.selectedKeys;

	            this.__props['selectedKeys'] = selectedKeys;
	            this.forceUpdate();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps() {
	            this.followRoute();
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.followRoute();
	            this.forceUpdate();
	        }
	        // 解析子组件结构

	    }, {
	        key: 'handleItems',
	        value: function handleItems(items, parentKey) {
	            var _this7 = this;

	            var arr = items;
	            if (!_utils.Utils.typeof(items, 'array')) {
	                arr = [items];
	            }
	            var children = [];
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                var _loop = function _loop() {
	                    var item = _step2.value;

	                    var v = _utils.Utils.copy(item);
	                    // 判断是否有权限
	                    if (!_this7.__authority(v)) {
	                        return 'continue';
	                    }
	                    // 首先处理所有类型的菜单项公共属性
	                    if (!v.key && v.link) {
	                        v.key = v.link;
	                    }
	                    if (v.title) {
	                        v.title = _react2.default.createElement(
	                            'span',
	                            null,
	                            _this7.__analysis(v.title)
	                        );
	                    }
	                    if (v.icon) {
	                        v.title = _react2.default.createElement(
	                            'span',
	                            null,
	                            _react2.default.createElement(Antd.Icon, { type: v.icon }),
	                            v.title
	                        );
	                    }
	                    // 当没有子菜单时，才增加链接
	                    if (v.link && !v.childItems) {
	                        var otherProps = {};
	                        if (v.onClick) {
	                            otherProps.onClick = function (e) {
	                                return v.onClick(e, v);
	                            };
	                        }
	                        // 如果是http链接，则改用 a 标签
	                        // to 可以是函数
	                        if (!_utils.Utils.typeof(v.link, 'function') && v.link.indexOf('http') === 0) {
	                            v.title = _react2.default.createElement(
	                                'a',
	                                _extends({ href: v.link, target: v._target }, otherProps),
	                                v.title
	                            );
	                        } else {
	                            v.title = _react2.default.createElement(
	                                _reactRouter.Link,
	                                _extends({ to: v.link }, otherProps),
	                                v.title
	                            );
	                        }
	                    }
	                    // 菜单项类型，默认为单个 菜单项组件
	                    var _Antd$Menu = Antd.Menu,
	                        Item = _Antd$Menu.Item,
	                        ItemGroup = _Antd$Menu.ItemGroup,
	                        SubMenu = _Antd$Menu.SubMenu;

	                    var Comp = Item;
	                    // 解析子菜单
	                    if (v.childItems) {
	                        // 如果有子菜单，则默认为 子菜单组件
	                        Comp = SubMenu;
	                        v.children = v.children || [];
	                        if (!_utils.Utils.typeof(v.children, 'array')) {
	                            v.children = [v.children];
	                        }
	                        v.children.push(_this7.handleItems(v.childItems, parentKey || v.key));
	                        delete v.childItems;
	                    }
	                    // 指定为group类型，则使用 菜单分组组件
	                    if (v.mode === 'group') {
	                        Comp = ItemGroup;
	                    }
	                    // 普通菜单项组件没有title属性，取而代之的是children
	                    if (Comp === Item) {
	                        v.children = v.title;
	                        delete v.title;
	                    }

	                    children.push(_react2.default.createElement(Comp, v));

	                    // 保存key值
	                    if (v.key && !v.disabled) {
	                        // 存储的是顶层导航的 key
	                        _this7.allKeys[v.key] = parentKey || v.key;
	                    }
	                };

	                for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _ret = _loop();

	                    if (_ret === 'continue') continue;
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return children;
	        }
	        // 高亮的菜单项跟随路由一起变换

	    }, {
	        key: 'followRoute',
	        value: function followRoute() {
	            // 侧边栏处于收起状态时不再执行高亮判断
	            if (!this.__props.followRoute || this.__props.inlineCollapsed) {
	                return;
	            }
	            var routes = this._root.props.routes;
	            var location = this._root.props.location;
	            var params = this._root.props.params;
	            if (routes && location) {
	                var key = routes[routes.length - 1].path;
	                key = _utils.Utils.urlAnalysis(key, params, false);
	                var path = location.pathname;
	                path = _utils.Utils.urlAnalysis(path, params, false);
	                var subPath = location.pathname.slice(1);
	                // 分两种情况：
	                //   1、每个菜单项都有key，且key为最简单（仅含当前层级的路由信息）的情况。如果路由的最后一项和菜单项相匹配，则高亮菜单项
	                //   2、具有link的菜单项没有设置key，则默认使用link值。link值为路由全路径，所有需要再用path和allKeys进行一次比对
	                if (this.allKeys[key]) {
	                    this.__props.selectedKeys = [key];
	                    this.changeDefaultOpenKeys(this.allKeys[key]);
	                } else if (this.allKeys[path]) {
	                    this.__props.selectedKeys = [path];
	                    this.changeDefaultOpenKeys(this.allKeys[path]);
	                } else if (this.allKeys[subPath]) {
	                    this.__props.selectedKeys = [subPath];
	                    this.changeDefaultOpenKeys(this.allKeys[subPath]);
	                }
	            }
	        }
	    }, {
	        key: 'changeDefaultOpenKeys',
	        value: function changeDefaultOpenKeys(key) {
	            var defaultKeys = this.__props.defaultOpenKeys;
	            if (defaultKeys && defaultKeys.indexOf(key) === -1) {
	                this.__props.defaultOpenKeys.push(key);
	            } else {
	                this.__props.defaultOpenKeys = [key];
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Menu, this.__props);
	        }
	    }]);

	    return Menu;
	}(_Navigation10.default);

	/************ Pagination 分页 *************************************************************************** */

	var Pagination = exports.Pagination = function (_Navigation6) {
	    _inherits(Pagination, _Navigation6);

	    function Pagination(props) {
	        _classCallCheck(this, Pagination);

	        // current为受控属性，父类中统一实现属性的绑定和变更（BaseComponent）
	        // event: onChange / paramsIndex: 0
	        var _this8 = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

	        _this8.__controlled = {
	            key: 'current'
	        };
	        _this8.__init();
	        return _this8;
	    }
	    // reset() {
	    //     this.__setProps({
	    //         current: 1
	    //     });
	    // }


	    _createClass(Pagination, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Pagination, this.__props);
	        }
	    }]);

	    return Pagination;
	}(_Navigation10.default);

	/************ Steps 步骤条 *************************************************************************** */

	var Steps = exports.Steps = function (_Navigation7) {
	    _inherits(Steps, _Navigation7);

	    function Steps(props) {
	        _classCallCheck(this, Steps);

	        var _this9 = _possibleConstructorReturn(this, (Steps.__proto__ || Object.getPrototypeOf(Steps)).call(this, props));

	        _this9.__init();
	        return _this9;
	    }

	    _createClass(Steps, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Steps, this.__props);
	        }
	    }]);

	    return Steps;
	}(_Navigation10.default);
	// Step 单条步骤


	var Step = exports.Step = function (_Navigation8) {
	    _inherits(Step, _Navigation8);

	    function Step(props) {
	        _classCallCheck(this, Step);

	        var _this10 = _possibleConstructorReturn(this, (Step.__proto__ || Object.getPrototypeOf(Step)).call(this, props));

	        _this10.__init();
	        return _this10;
	    }

	    _createClass(Step, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Steps.Step, this.__props);
	        }
	    }]);

	    return Step;
	}(_Navigation10.default);

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(168);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导航 相关的组件抽象类，如：Menu等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:17
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:48
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Navigation = function (_Antd) {
	  _inherits(Navigation, _Antd);

	  function Navigation() {
	    _classCallCheck(this, Navigation);

	    return _possibleConstructorReturn(this, (Navigation.__proto__ || Object.getPrototypeOf(Navigation)).apply(this, arguments));
	  }

	  return Navigation;
	}(_Antd3.default);

	exports.default = Navigation;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Router = __webpack_require__(176);

	var Router = _interopRequireWildcard(_Router);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	module.exports = Router;

	// module.exports = require('./Router.js').default;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.IndexLink = exports.Link = exports.Router = exports.BaseRouter = exports.RouteHolder = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(110);

	var OriRouter = _interopRequireWildcard(_reactRouter);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _src = __webpack_require__(115);

	var _instance = __webpack_require__(158);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 路由 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// 保存当前页面的路由信息
	var lastRouter = {
	    params: {},
	    detials: {}
	};
	// 用于获取当前页面的路由信息
	function getRouter() {
	    return _utils.Utils.copy(lastRouter);
	}
	function setRouter(props) {
	    var params = props.params,
	        location = props.location,
	        route = props.route,
	        routes = props.routes;

	    lastRouter = {
	        params: params,
	        detials: { params: params, location: location, route: route, routes: routes }
	    };
	}

	// 抽象类 每个配置均使用这个抽象类作为外壳，把组件实例转换为类

	var RouteHolder = exports.RouteHolder = function (_React$Component) {
	    _inherits(RouteHolder, _React$Component);

	    function RouteHolder(props) {
	        _classCallCheck(this, RouteHolder);

	        var _this = _possibleConstructorReturn(this, (RouteHolder.__proto__ || Object.getPrototypeOf(RouteHolder)).call(this, props));

	        setRouter(props);
	        return _this;
	    }

	    _createClass(RouteHolder, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            // console.log(nextProps);
	            // if (nextProps, nextProps.location, nextProps.location.action) {
	            //     let lastAction = this.action;
	            //     this.action = nextProps.location.action;
	            //     console.log(this.action === lastAction || nextProps.location.action === "POP");
	            //     return this.action === lastAction || nextProps.location.action === "POP";
	            // }
	            // console.log(nextProps.router);
	            // console.log(this.props, this.props.router.location.action);
	            return true;
	            // 待观察效果
	            // 有五种情况 PUSH、PUSH->POP、REPLACE、REPLACE->POP、POP
	            // return ['PUSH', 'REPLACE'].indexOf(this.props.router.location.action) !== -1;
	        }
	        // componentWillReceiveProps(nextProps) {
	        //     console.log(this.props.router.location.action);
	        //     console.log(nextProps.router.location.action);
	        // }
	        // 组件更新时，保存最新的路由信息

	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate(nextProps, nextState) {
	            setRouter(nextProps);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_src.Factory, _extends({}, this.props, {
	                // config={this.getConfig()}
	                config: this.props.route.__component,
	                insName: this.props.route.insName
	            }));
	        }
	    }]);

	    return RouteHolder;
	}(_react2.default.Component);

	// 抽象类 用于做组件种类区分


	var BaseRouter = exports.BaseRouter = function (_BaseComponent) {
	    _inherits(BaseRouter, _BaseComponent);

	    function BaseRouter() {
	        _classCallCheck(this, BaseRouter);

	        return _possibleConstructorReturn(this, (BaseRouter.__proto__ || Object.getPrototypeOf(BaseRouter)).apply(this, arguments));
	    }

	    return BaseRouter;
	}(_base.BaseComponent);

	// Router


	var Router = exports.Router = function (_BaseRouter) {
	    _inherits(Router, _BaseRouter);

	    function Router(props) {
	        _classCallCheck(this, Router);

	        var _this3 = _possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).call(this, props));

	        _this3.__init();
	        // 从 OriRouter 上获取真正的 hashHistory（用户设置的是字符串）
	        _this3.__props.history = OriRouter[_this3.__props.history];
	        // 把 routes 的内容转换为真正的路由组件
	        if (_this3.__props.routes) {
	            _this3.__props.children = _this3.handleRoutes(_this3.__props.routes);
	            delete _this3.__props.routes;
	        }
	        return _this3;
	    }

	    _createClass(Router, [{
	        key: 'handleRoutes',
	        value: function handleRoutes(routes) {
	            var arr = routes;
	            if (!_utils.Utils.typeof(routes, 'array')) {
	                arr = [routes];
	            }
	            var children = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    // 校验权限，没权限的元素返回 null
	                    if (!this.__authority(v)) {
	                        continue;
	                    }
	                    v = this.setRoute(v);
	                    v.children = [];
	                    // indexRoute 字段 => IndexRoute
	                    if (v.indexRoute) {
	                        v.children.push(_react2.default.createElement(OriRouter.IndexRoute, this.setRoute(v.indexRoute)));
	                        delete v.indexRoute;
	                    }
	                    //  indexRedirect 字段 => IndexRedirect
	                    if (v.indexRedirect) {
	                        v.children.push(_react2.default.createElement(OriRouter.IndexRedirect, { to: v.indexRedirect, query: v.query }));
	                        delete v.indexRedirect;
	                    }
	                    // childRoutes 字段 => 子路由 (Route、Redirect)
	                    if (v.childRoutes) {
	                        v.children = v.children.concat(this.handleRoutes(v.childRoutes));
	                        delete v.childRoutes;
	                    }
	                    if (v.children.length === 0) {
	                        delete v.children;
	                    }
	                    // if (v.breadcrumbName) {
	                    //     v.breadcrumbName = this.__analysis(v.breadcrumbName);
	                    // }
	                    // 不含 component && 包含 from & to 字段 => Redirect
	                    // 否则为普通的 Route 组件
	                    var Item = void 0;
	                    if (!v.component && v.path && v.to) {
	                        Item = OriRouter.Redirect;
	                    } else {
	                        Item = OriRouter.Route;
	                    }
	                    children.push(_react2.default.createElement(Item, v));
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return children;
	        }
	        // Route/IndexRoute 类型的组件
	        // component 转换为 RouteHolder

	    }, {
	        key: 'setRoute',
	        value: function setRoute(item) {
	            // @bugfix at 2018-07-12, 不能改变原配置。修复再次渲染router时报错问题
	            item = _utils.Utils.copy(item);
	            if (item.component) {
	                // 组件实例放在新属性content里
	                item.__component = item.component;
	                item.insName = this.insName;
	                // component属性为一个抽象类
	                item.component = RouteHolder;
	            }
	            return item;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // console.log('router init');
	            return _react2.default.createElement(OriRouter.Router, this.__props);
	        }
	    }]);

	    return Router;
	}(BaseRouter);
	// 获取当前页面的路由信息


	Router.getRouter = getRouter;

	// Link

	var Link = exports.Link = function (_BaseRouter2) {
	    _inherits(Link, _BaseRouter2);

	    function Link(props) {
	        _classCallCheck(this, Link);

	        var _this4 = _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).call(this, props));

	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Link, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(OriRouter.Link, this.__props);
	        }
	    }]);

	    return Link;
	}(BaseRouter);

	// IndexLink


	var IndexLink = exports.IndexLink = function (_BaseRouter3) {
	    _inherits(IndexLink, _BaseRouter3);

	    function IndexLink(props) {
	        _classCallCheck(this, IndexLink);

	        var _this5 = _possibleConstructorReturn(this, (IndexLink.__proto__ || Object.getPrototypeOf(IndexLink)).call(this, props));

	        _this5.__init();
	        return _this5;
	    }

	    _createClass(IndexLink, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(OriRouter.IndexLink, this.__props);
	        }
	    }]);

	    return IndexLink;
	}(BaseRouter);

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.notification = exports.message = exports.Loading = exports.Progress = exports.Alert = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Feedback4 = __webpack_require__(178);

	var _Feedback5 = _interopRequireDefault(_Feedback4);

	var _utils = __webpack_require__(121);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _instance = __webpack_require__(158);

	var _antd = __webpack_require__(111);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Layout 类组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/************* Alert 警告提示 ************************************************************************** */

	var Alert = exports.Alert = function (_Feedback) {
	    _inherits(Alert, _Feedback);

	    function Alert(props) {
	        _classCallCheck(this, Alert);

	        var _this = _possibleConstructorReturn(this, (Alert.__proto__ || Object.getPrototypeOf(Alert)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Alert, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Alert, this.__props);
	        }
	    }]);

	    return Alert;
	}(_Feedback5.default);

	/************* Progress 警告提示 ************************************************************************** */

	var Progress = exports.Progress = function (_Feedback2) {
	    _inherits(Progress, _Feedback2);

	    function Progress(props) {
	        _classCallCheck(this, Progress);

	        var _this2 = _possibleConstructorReturn(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).call(this, props));

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Progress, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Progress, this.__props);
	        }
	    }]);

	    return Progress;
	}(_Feedback5.default);

	/************* Loading 加载中 ************************************************************************** */

	var Loading = exports.Loading = function (_Feedback3) {
	    _inherits(Loading, _Feedback3);

	    function Loading(props) {
	        _classCallCheck(this, Loading);

	        var _this3 = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, props));

	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Loading, [{
	        key: 'loading',
	        value: function loading(status) {
	            this.__setProps({ loading: status });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Spin, _extends({}, _utils.Utils.filter(this.__props, 'loading'), {
	                spinning: !!this.__props.loading }));
	        }
	    }]);

	    return Loading;
	}(_Feedback5.default);

	/************* message 提示 ************************************************************************** */

	// 保存当前未销毁的提示信息的销毁函数


	var currentMessageHandle = {};
	var messageAutoMerge = true;
	// 统一处理config（某些属性需要二次解析）
	function messageHandler(type, insName, config, duration, onClose) {
	    var _Antd$message;

	    // key 相同的提示信息只展示一个
	    var key = _utils.Utils.hash({ type: type, config: config });
	    if (messageAutoMerge && currentMessageHandle[key]) {
	        // 先创建，再销毁
	        _utils.Utils.defer(currentMessageHandle[key]);
	    }
	    // 重写onClose函数
	    close = function close() {
	        delete currentMessageHandle[key];
	        onClose && onClose.apply(undefined, arguments);
	    };
	    if (_utils.Utils.typeof(config, ['object', 'array'])) {
	        config = ((0, _instance.getInstance)(insName) || _src2.default).render(config);
	    }
	    // 保存销毁函数，当key相同时，先销毁旧的，重新创建新的

	    for (var _len = arguments.length, params = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	        params[_key - 5] = arguments[_key];
	    }

	    var distroy = (_Antd$message = Antd.message)[type].apply(_Antd$message, [config, duration, close].concat(params));
	    currentMessageHandle[key] = distroy;
	    return distroy;
	}
	// 拦截 message.config ，加入自定义参数处理
	function messageConfHandler(insName, conf) {
	    if (conf.autoMerge !== undefined) {
	        messageAutoMerge = conf.autoMerge;
	    }
	    return Antd.message.config(_utils.Utils.filter(conf, ['autoMerge']));
	}

	var message = exports.message = Object.assign({}, Antd.message, {
	    success: messageHandler.bind(null, 'success'),
	    error: messageHandler.bind(null, 'error'),
	    info: messageHandler.bind(null, 'info'),
	    warning: messageHandler.bind(null, 'warning'),
	    warn: messageHandler.bind(null, 'warn'),
	    loading: messageHandler.bind(null, 'loading'),
	    config: messageConfHandler.bind(null)
	});

	/************* notification 提示 ************************************************************************** */
	// 保存当前未销毁的提示信息的销毁函数
	var currentNotificationHandle = {};
	var notificationAutoMerge = true;
	// 统一处理config（某些属性需要二次解析）
	function notificationHandler(type, insName, config) {
	    if (notificationAutoMerge) {
	        // key 相同的提示信息只展示一个
	        if (config.key) {
	            Antd.notification.close(config.key);
	        } else {
	            // 如果没有key，则生成一个唯一key。并根据配置生成一个hash值，保存生成的唯一key（用于销毁）
	            var hashKey = _utils.Utils.hash({ type: type, config: config });
	            _utils.Utils.defer(Antd.notification.close, currentNotificationHandle[hashKey]);
	            var key = _utils.Utils.uniqueId();
	            currentNotificationHandle[hashKey] = key;
	            config.key = key;
	        }
	    }
	    var list = _src.WhiteList.get(config, 'notification');
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var v = _step.value;

	            config[v] = ((0, _instance.getInstance)(insName) || _src2.default).render(config[v]);
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    return Antd.notification[type](config);
	}
	// 拦截 notification.config ，加入自定义参数处理
	function notificationConfHandler(insName, conf) {
	    if (conf.autoMerge !== undefined) {
	        notificationAutoMerge = conf.autoMerge;
	    }
	    return Antd.notification.config(_utils.Utils.filter(conf, ['autoMerge']));
	}

	var notification = exports.notification = Object.assign({}, Antd.notification, {
	    success: notificationHandler.bind(null, 'success'),
	    error: notificationHandler.bind(null, 'error'),
	    info: notificationHandler.bind(null, 'info'),
	    warning: notificationHandler.bind(null, 'warning'),
	    warn: notificationHandler.bind(null, 'warn'),
	    open: notificationHandler.bind(null, 'open'),
	    config: notificationConfHandler.bind(null)
	});

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(168);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 反馈 类组件抽象类，如：Button、Icon 等
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:27:29
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:28:24
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Feedback = function (_Antd) {
	  _inherits(Feedback, _Antd);

	  function Feedback() {
	    _classCallCheck(this, Feedback);

	    return _possibleConstructorReturn(this, (Feedback.__proto__ || Object.getPrototypeOf(Feedback)).apply(this, arguments));
	  }

	  return Feedback;
	}(_Antd3.default);

	exports.default = Feedback;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Content = exports.SiderTrigger = exports.Sider = exports.Footer = exports.Header = exports.Layout = undefined;

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _Layout = __webpack_require__(180);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	var Antd = _interopRequireWildcard(_antd);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Description
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:26:02
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:26:02
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/************* Layout 布局 ************************************************************************** */

	// Layout 组件
	var Layout = exports.Layout = function (_BaseLayout) {
	    _inherits(Layout, _BaseLayout);

	    function Layout(props) {
	        _classCallCheck(this, Layout);

	        var _this = _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));

	        _this.__init();
	        _this.hasSiderClass = _this.siderHandler();
	        return _this;
	    }
	    // 如果content里面包含有sider，则className中增加 ant-layout-has-sider。ps：没想清antd的官方是怎么做到适配的


	    _createClass(Layout, [{
	        key: 'siderHandler',
	        value: function siderHandler() {
	            if (this.__props.children) {
	                var children = this.__props.children;
	                if (!_utils.Utils.typeof(children, 'array')) {
	                    children = [children];
	                }
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        // children中为实例化后的组件，type对应组件的构造函数
	                        if (v && v.type === Sider) {
	                            return ' ant-layout-has-sider';
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            return '';
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout, _extends({}, this.__props, { className: (this.__props.className || '') + this.hasSiderClass }));
	        }
	    }]);

	    return Layout;
	}(_Layout2.default);

	// Layout 组件


	var Header = exports.Header = function (_BaseLayout2) {
	    _inherits(Header, _BaseLayout2);

	    function Header(props) {
	        _classCallCheck(this, Header);

	        // 属性组件本身不支持，需要过滤掉。使用时在 __filtered 上获取
	        var _this2 = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));

	        _this2._filter.push('theme');
	        _this2.__init();
	        return _this2;
	    }

	    _createClass(Header, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Header, _extends({}, this.__props, this.__getCommonProps({
	                className: this.__filtered.theme === 'dark' ? 'header-dark-theme' : ''
	            })));
	        }
	    }]);

	    return Header;
	}(_Layout2.default);

	// Layout 组件


	var Footer = exports.Footer = function (_BaseLayout3) {
	    _inherits(Footer, _BaseLayout3);

	    function Footer(props) {
	        _classCallCheck(this, Footer);

	        var _this3 = _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).call(this, props));

	        _this3.__init();
	        return _this3;
	    }

	    _createClass(Footer, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Footer, this.__props);
	        }
	    }]);

	    return Footer;
	}(_Layout2.default);

	// Layout 组件


	var Sider = exports.Sider = function (_BaseLayout4) {
	    _inherits(Sider, _BaseLayout4);

	    function Sider(props) {
	        _classCallCheck(this, Sider);

	        var _this4 = _possibleConstructorReturn(this, (Sider.__proto__ || Object.getPrototypeOf(Sider)).call(this, props));

	        _this4.__controlled = {
	            key: 'collapsed',
	            event: 'onCollapse',
	            defaultVal: false
	        };
	        // 属性组件本身不支持，需要过滤掉。使用时在 __filtered 上获取
	        _this4._filter.push('triggerPosition', 'theme');
	        _this4._openApi.push('toggleCollapsed');
	        _this4.__init();
	        return _this4;
	    }

	    _createClass(Sider, [{
	        key: '_afterInit',
	        value: function _afterInit() {
	            _get(Sider.prototype.__proto__ || Object.getPrototypeOf(Sider.prototype), '_afterInit', this).call(this);
	            this.findConnectMenuKey();
	        }
	        // __setProps 后，增加附加处理逻辑

	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            _get(Sider.prototype.__proto__ || Object.getPrototypeOf(Sider.prototype), '_afterSetProps', this).call(this);
	            var topClass = ' top-trigger';
	            var className = this.__props.className || '';
	            if (this.__filtered.triggerPosition === 'top' && className.indexOf(topClass) === -1) {
	                this.__props.className = className + topClass;
	            }
	        }
	        // 切换收起/展示状态（暴露给用户使用）

	    }, {
	        key: 'toggleCollapsed',
	        value: function toggleCollapsed() {
	            var collapsed = !this.__props.collapsed;
	            this.__setProps({ collapsed: collapsed });
	            this.__props.onCollapse(collapsed);
	        }
	    }, {
	        key: '_onCollapse',
	        value: function _onCollapse(collapsed) {
	            var _get2;

	            for (var _len = arguments.length, p = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                p[_key - 1] = arguments[_key];
	            }

	            _get(Sider.prototype.__proto__ || Object.getPrototypeOf(Sider.prototype), '_onCollapse', this) && (_get2 = _get(Sider.prototype.__proto__ || Object.getPrototypeOf(Sider.prototype), '_onCollapse', this)).call.apply(_get2, [this, collapsed].concat(p));

	            // Sider 组件自动和其子组件 Menu 做关联，收起时同时收起 Menu
	            // TODO: 代码耦合严重，需要剥离关联逻辑
	            var menu = this.connectMenuKey && this.__getComponent(this.connectMenuKey);
	            if (menu) {
	                var defaultOpenKeys = menu.get('_defaultOpenKeys', 'defaultOpenKeys');
	                // 从缓存中获取 Menu 组件，并更改组件状态
	                menu.set({
	                    inlineCollapsed: collapsed,
	                    // 保存原 defaultOpenKeys 的值
	                    _defaultOpenKeys: defaultOpenKeys,
	                    defaultOpenKeys: collapsed ? [] : defaultOpenKeys
	                });
	            }
	        }
	        // 查找其下的菜单组件的key名称，并存储在connectMenuKey上

	    }, {
	        key: 'findConnectMenuKey',
	        value: function findConnectMenuKey(children) {
	            if (this.__props.collapsible) {
	                children = children || this.__props.children;
	                if (children) {
	                    if (!_utils.Utils.typeof(children, 'array')) {
	                        children = [children];
	                    }
	                    // 查找 Menu 组件
	                    var _iteratorNormalCompletion2 = true;
	                    var _didIteratorError2 = false;
	                    var _iteratorError2 = undefined;

	                    try {
	                        for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                            var v = _step2.value;

	                            if (_utils.Utils.typeof(v, 'object') && v.props) {
	                                if (v.props.__type === 'menu') {
	                                    var key = v.props.__cache || v.props.__key;
	                                    this.connectMenuKey = key;
	                                    return;
	                                } else if (v.props.children) {
	                                    this.findConnectMenuKey(v.props.children);
	                                }
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError2 = true;
	                        _iteratorError2 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }
	                        } finally {
	                            if (_didIteratorError2) {
	                                throw _iteratorError2;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var trigger = this.__props.trigger;
	            if (trigger === undefined) {
	                trigger = _react2.default.createElement(Antd.Icon, { className: 'trigger', type: this.__props.collapsed ? 'menu-unfold' : 'menu-fold' });
	            }
	            return _react2.default.createElement(Antd.Layout.Sider, _extends({}, this.__props, { trigger: trigger
	            }, this.__getCommonProps({
	                className: this.__filtered.theme === 'dark' ? 'sider-dark-theme' : ''
	            })));
	        }
	    }]);

	    return Sider;
	}(_Layout2.default);

	// Sider 子组件
	// TODO: 关联关系如何增加？


	var SiderTrigger = exports.SiderTrigger = function (_BaseLayout5) {
	    _inherits(SiderTrigger, _BaseLayout5);

	    function SiderTrigger(props) {
	        _classCallCheck(this, SiderTrigger);

	        var _this5 = _possibleConstructorReturn(this, (SiderTrigger.__proto__ || Object.getPrototypeOf(SiderTrigger)).call(this, props));

	        _this5._filter.push('reverse');
	        _this5.__init();
	        _this5.target = null;
	        return _this5;
	    }

	    _createClass(SiderTrigger, [{
	        key: '_componentDidMount',
	        value: function _componentDidMount() {
	            _get(SiderTrigger.prototype.__proto__ || Object.getPrototypeOf(SiderTrigger.prototype), '_componentDidMount', this) && _get(SiderTrigger.prototype.__proto__ || Object.getPrototypeOf(SiderTrigger.prototype), '_componentDidMount', this).call(this);
	            this.target = this._factory.$components.get(this.__props.target);
	            this.forceUpdate();
	        }
	    }, {
	        key: 'onClick',
	        value: function onClick() {
	            this.target.toggleCollapsed();
	            this.forceUpdate();
	            this.__props.onClick && this.__props.onClick();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var style = Object.assign({ cursor: 'pointer' }, this.__props.style);
	            return _react2.default.createElement(Antd.Icon, _extends({}, this.__props, {
	                type: this.target && this.target.get('collapsed') ? !this.__filtered.reverse ? 'menu-unfold' : 'menu-fold' : this.__filtered.reverse ? 'menu-unfold' : 'menu-fold',
	                onClick: this.target && this.onClick.bind(this) }));
	        }
	    }]);

	    return SiderTrigger;
	}(_Layout2.default);

	// Layout 组件


	var Content = exports.Content = function (_BaseLayout6) {
	    _inherits(Content, _BaseLayout6);

	    function Content(props) {
	        _classCallCheck(this, Content);

	        var _this6 = _possibleConstructorReturn(this, (Content.__proto__ || Object.getPrototypeOf(Content)).call(this, props));

	        _this6.__init();
	        return _this6;
	    }

	    _createClass(Content, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(Antd.Layout.Content, this.__props);
	        }
	    }]);

	    return Content;
	}(_Layout2.default);

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Antd2 = __webpack_require__(168);

	var _Antd3 = _interopRequireDefault(_Antd2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 布局类组件 抽象类
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-09-29 07:26:34
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-09-29 07:26:34
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Layout = function (_Antd) {
	  _inherits(Layout, _Antd);

	  function Layout() {
	    _classCallCheck(this, Layout);

	    return _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).apply(this, arguments));
	  }

	  return Layout;
	}(_Antd3.default);

	exports.default = Layout;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(182).default;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file iframe 功能增强
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-12 03:13:45
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-10-12 03:17:08
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Iframe = function (_BaseComponent) {
	    _inherits(Iframe, _BaseComponent);

	    function Iframe(props) {
	        _classCallCheck(this, Iframe);

	        var _this = _possibleConstructorReturn(this, (Iframe.__proto__ || Object.getPrototypeOf(Iframe)).call(this, props));

	        _this.state = {
	            loading: true
	        };
	        _this.__init();
	        return _this;
	    }

	    _createClass(Iframe, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 重新获取页面时重新展示loading
	            // if (nextProps.src !== this.__prevProps.src) {
	            if (nextProps.src !== this.props.src) {
	                var hashIndex = nextProps.src.indexOf('#');
	                var srcHashIndex = this.props.src.indexOf('#');
	                // 如果只是变更hash值，则不需要再展示loading
	                if (hashIndex > -1 && nextProps.src.slice(0, hashIndex) === this.props.src.slice(0, srcHashIndex)) {
	                    return;
	                }
	                this.setState({ loading: true });
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (!this.ifr.height) {
	                // 获取父级容器的高度，使ifame和容器等高
	                this.ifr.height = this.getParentHeight();
	            }
	        }
	    }, {
	        key: 'getParentHeight',
	        value: function getParentHeight() {
	            var parent = this.root.parentElement;
	            return parent.offsetHeight + 'px';
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var style = { height: this.__props.height, width: this.__props.width };
	            return _react2.default.createElement(
	                'div',
	                _extends({}, this.__getCommonProps({ className: 'uf-iframe', style: style }), { ref: function ref(ele) {
	                        return _this2.root = ele;
	                    },
	                    'data-src': new URL(this.__props.src, window.location.href).href }),
	                this.__props.showLoading && this.state.loading && _react2.default.createElement(_antd.Spin, { spinning: true, className: 'uf-iframe-loading' }),
	                _react2.default.createElement('iframe', _extends({}, _utils.Utils.filter(this.__props, ['showLoading', 'delay', 'className', 'style', 'height', 'width']), {
	                    ref: function ref(ele) {
	                        return _this2.ifr = ele;
	                    },
	                    onLoad: function onLoad(even) {
	                        try {
	                            _this2.setState({ loading: false });
	                            var ifr = even.target;
	                            var iDoc = ifr.contentWindow.document;
	                            var iWindow = ifr.contentWindow;
	                            // Iframe高度根据内容高度变化的三种模式: auto / max / fixed
	                            var mode = _this2.__props.mode;
	                            if (mode !== 'fixed') {
	                                var setIfrHeight = function setIfrHeight() {
	                                    var iDocHight = void 0;
	                                    // 这里分别从 documentElement 和 body 上取值，即可达到 max/auto 的效果
	                                    if (mode === 'max') {
	                                        iDocHight = iDoc.documentElement.scrollHeight;
	                                        // mode === 'auto'
	                                    } else {
	                                        // 注意：如果iframe的页面body/html设置了height: 100%，则auto失效，展示效果和max相同
	                                        iDocHight = iDoc.body.scrollHeight;
	                                    }
	                                    ifr.height = iDocHight + 'px';
	                                };
	                                setIfrHeight();
	                                // iframe文档做监听，如果发生变化则重新设置高度
	                                // 注意观察是否会有性能问题（监听了整个页面的元素和属性变化）
	                                var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
	                                var timer = void 0;
	                                var observer = new MutationObserver(function (m) {
	                                    // 延迟重新设定iframe高度，可防止高度闪烁
	                                    timer && clearTimeout(timer);
	                                    timer = setTimeout(function () {
	                                        setIfrHeight();
	                                        timer = null;
	                                    }, _this2.__props.delay);
	                                });
	                                observer.observe(iDoc, {
	                                    childList: true,
	                                    attributes: true,
	                                    subtree: true
	                                });
	                            }
	                            // 监听页面跳转
	                            iWindow.addEventListener('popstate', function (e) {
	                                _this2.root.setAttribute('data-src', e.currentTarget.location);
	                            });

	                            _this2.__props.onLoad && _this2.__props.onLoad(even);
	                        } catch (e) {
	                            console.warn(e);
	                        }
	                    } }))
	            );
	        }
	    }]);

	    return Iframe;
	}(_base.BaseComponent);

	exports.default = Iframe;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Fieldset组件入口
	 * **/

	module.exports = {
	  AutoComplete: __webpack_require__(184).default,
	  LocalComplete: __webpack_require__(184).LocalComplete
	};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.LocalComplete = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _DataEntry = __webpack_require__(167);

	var _DataEntry2 = _interopRequireDefault(_DataEntry);

	var _utils = __webpack_require__(121);

	var _dataentry = __webpack_require__(166);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 自动补全组件 封装，支持单选和多选
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	/**
	 * 注意：关于onSearch、onChange触发条件
	 * * 单选模式下：
	 *      输入时，先触发onSearch，再触发onChange
	 *      选中时，只触发onChange
	 * * 多选模式下：
	 *      输入时，只触发onSearch
	 *      选中时，只触发onChange
	 */

	var LimitedProps = {
	    showSearch: true,
	    notFoundContent: null,
	    // defaultActiveFirstOption: false,
	    filterOption: false,
	    className: 'uf-autocomplete'
	};

	// 本地自动补全

	var LocalComplete = exports.LocalComplete = function (_Select) {
	    _inherits(LocalComplete, _Select);

	    function LocalComplete(props) {
	        _classCallCheck(this, LocalComplete);

	        // _onSearch 中的逻辑会注入到 onSearch 事件中，见 BaseComponent
	        var _this = _possibleConstructorReturn(this, (LocalComplete.__proto__ || Object.getPrototypeOf(LocalComplete)).call(this, props, { preventInit: true }));

	        _this._injectEvent = ['onSearch'];
	        _this.__init();
	        return _this;
	    }

	    _createClass(LocalComplete, [{
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            _get(LocalComplete.prototype.__proto__ || Object.getPrototypeOf(LocalComplete.prototype), '_afterInitProps', this).call(this);
	            Object.assign(this.__props, LimitedProps);
	        }
	        // 注入到 onSearch 事件中
	        // 输入时，先触发onSearch，再触发onChange

	    }, {
	        key: '_onSearch',
	        value: function _onSearch(value) {
	            // 保存原输入值
	            this.oriValue = value;
	            var options = [];
	            if (!!value) {
	                options = this.__props.suffix.map(function (i) {
	                    return value + i;
	                });
	            }
	            this.__setProps({ options: options });
	        }
	        // 当选择时，只触发onChange
	        // 默认对应的是 onChange

	    }, {
	        key: '_onControlEvent',
	        value: function _onControlEvent() {
	            for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	                params[_key] = arguments[_key];
	            }

	            if (this.isMultiple) {
	                var _get2;

	                (_get2 = _get(LocalComplete.prototype.__proto__ || Object.getPrototypeOf(LocalComplete.prototype), '_onControlEvent', this)).call.apply(_get2, [this].concat(params));
	                this.__setProps({ options: [] });
	            } else {
	                var _get3;

	                // 对change前后的数据进行对比
	                var oldValue = this.__props.value;
	                (_get3 = _get(LocalComplete.prototype.__proto__ || Object.getPrototypeOf(LocalComplete.prototype), '_onControlEvent', this)).call.apply(_get3, [this].concat(params));
	                var newValue = this.__props.value;
	                // 如果长度变短，说明是在删除，如果和后缀能匹配上，直接把后缀删除
	                if (oldValue && newValue && oldValue.length > newValue.length) {
	                    var _iteratorNormalCompletion = true;
	                    var _didIteratorError = false;
	                    var _iteratorError = undefined;

	                    try {
	                        for (var _iterator = this.__props.suffix[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                            var v = _step.value;

	                            if (oldValue.indexOf(v) !== -1) {
	                                var result = oldValue.replace(v, '');
	                                if (result.length < newValue.length) {
	                                    this.__props.value = result;
	                                    // 重置value后，需要手动再次触发onSearch逻辑，以恢复原
	                                    this.__props.onSearch(result);
	                                    break;
	                                }
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError = true;
	                        _iteratorError = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	                        } finally {
	                            if (_didIteratorError) {
	                                throw _iteratorError;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }]);

	    return LocalComplete;
	}(_dataentry.Select);

	// 自动补全远程数据


	var NewAutoComplete = function (_Select2) {
	    _inherits(NewAutoComplete, _Select2);

	    function NewAutoComplete(props) {
	        _classCallCheck(this, NewAutoComplete);

	        var _this2 = _possibleConstructorReturn(this, (NewAutoComplete.__proto__ || Object.getPrototypeOf(NewAutoComplete)).call(this, props, { preventInit: true }));

	        _this2.class.push('select');
	        _this2._injectEvent = ['onSearch', 'onChange'];
	        // 延迟150ms执行
	        _this2._onSearch = _utils.Utils.debounce(_this2._onSearch, props.delay || 150);
	        _this2.requestIndex = 0;

	        _this2.__init();
	        return _this2;
	    }

	    _createClass(NewAutoComplete, [{
	        key: '_afterInitProps',
	        value: function _afterInitProps() {
	            _get(NewAutoComplete.prototype.__proto__ || Object.getPrototypeOf(NewAutoComplete.prototype), '_afterInitProps', this).call(this);
	            Object.assign(this.__props, LimitedProps);
	            Object.assign(this.__filtered.source, {
	                autoLoad: false,
	                autoReload: 'set',
	                requestMerge: false,
	                cache: true
	            });
	        }
	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            var _get4;

	            for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                params[_key2] = arguments[_key2];
	            }

	            (_get4 = _get(NewAutoComplete.prototype.__proto__ || Object.getPrototypeOf(NewAutoComplete.prototype), '_afterSetProps', this)).call.apply(_get4, [this].concat(params));
	            // 当设置为 select-only 时，输入框仅可选补全的内容，不可任意输入
	            if (this.__props.mode === 'select-only') {
	                delete this.__props.mode;
	            }
	        }
	        // 处理 startSign 属性，判断是否进行搜索
	        // 2、当为字符串时，表示当字符串中出现设置的字符串时，进行查询补全功能
	        // 3、当为函数时，表示每次输入后，会把输入的字符串传递给函数进行判断，当函数返回true时，进行查询补全功能

	    }, {
	        key: '_isSearch',
	        value: function _isSearch(value) {
	            // 1、当为数字时，表示当输入字符串长度满足设置长度时会发起请求，进行查询补全功能
	            var sign = this.__props.startSign;
	            switch (_utils.Utils.getType(sign)) {
	                case 'number':
	                    return value && value.length >= sign;
	                case 'string':
	                    return value && value.indexOf(sign) > -1;
	                case 'function':
	                    return sign(value);
	            }
	            return true;
	        }
	        // 多选时，输入完触发onSearch，选中选项后触发onChange

	    }, {
	        key: '_onSearch',
	        value: function _onSearch(value) {
	            if (!this._isSearch(value)) {
	                return;
	            }
	            if (value === '') {
	                ++this.requestIndex;
	                this.loading(false, 'simple');
	                this.__setProps({
	                    options: []
	                });
	            } else {
	                this.set({
	                    options: [],
	                    source: {
	                        params: { value: value }
	                    }
	                });
	            }
	        }
	    }, {
	        key: '_onChange',
	        value: function _onChange(value) {
	            this.loading(false, 'simple');
	            if (_utils.Utils.typeof(value, 'array') && value.length === 0) {
	                this.__setProps({ options: [] });
	            }
	        }
	        // 追加忽略先前请求返回的结果的逻辑

	    }, {
	        key: '__getSourceData',
	        value: function __getSourceData(config) {
	            var _this3 = this;

	            var index = ++this.requestIndex;
	            config._handler = function (data) {
	                if (_this3.requestIndex !== index) {
	                    return false;
	                }
	                return data;
	            };
	            _get(NewAutoComplete.prototype.__proto__ || Object.getPrototypeOf(NewAutoComplete.prototype), '__getSourceData', this).call(this, config);
	        }
	    }]);

	    return NewAutoComplete;
	}(_dataentry.Select);

	exports.default = NewAutoComplete;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	*   @file Export导出组件的引入文件
	*/
	module.exports = __webpack_require__(186).default;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(119);

	var _antd = __webpack_require__(111);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导出表格数据组件
	uSisi <susisi@baidu.com>
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date 2017-08-25
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var Export = function (_BaseComponent) {
	    _inherits(Export, _BaseComponent);

	    function Export(props) {
	        _classCallCheck(this, Export);

	        var _this = _possibleConstructorReturn(this, (Export.__proto__ || Object.getPrototypeOf(Export)).call(this, props, { type: 'export' }));

	        _this._openApi.push('export');
	        _this.__init();
	        _this.state = {};
	        // 默认配置
	        _this.config = {
	            // 表格头部
	            headers: [],
	            // 用于保存计时器的句柄
	            timer: null,
	            // 数据导出方式 异步/同步[asyn/sync]
	            // 异步 - 通过source获取要导出的数据
	            // 同步 - 实例化组件是直接传入data
	            type: null,
	            // 记录参数中有没有message传入,如果没有传入,导出完成时进度条不隐藏
	            noMessage: true,
	            // 异步数据导出时的提示信息
	            message: null,
	            total: 0,
	            // 导出文件名称和格式
	            fileName: null,
	            fileFormat: '.xls'
	        };
	        _this.initExport();
	        return _this;
	    }

	    _createClass(Export, [{
	        key: 'initExport',
	        value: function initExport(nextProps) {
	            var objProps = nextProps ? nextProps : this.props;
	            this.config = this.__mergeProps(this.config, this.__filterProps(objProps, 'data'));
	            this.data = [];
	            if (objProps.data === undefined) {
	                this.config.type = this.config.type || 'asyn';
	                var state = {
	                    visible: false,
	                    pageSize: 200,
	                    exporting: false, // 正在导出或导出完成时的界面为true
	                    fatchedData: 0,
	                    usedTime: 0,
	                    lastTime: 0,
	                    finish: false,
	                    error: false,
	                    errorMsg: '',
	                    total: this.config.total
	                };
	                // 判断参数中有没有message传入
	                var message = this.config.message;
	                if (!!message && !!message['page2']) {
	                    this.config.noMessage = false;
	                }
	                if (nextProps) {
	                    this.setState(state);
	                } else {
	                    this.state = state;
	                }
	            } else {
	                this.config.type = this.config.type || 'sync';
	                // 用于存储导出的数据，为避免合并数据时出错，请求过来的数据没有合并到一个数组
	                // data里面的数据是这样的：[[{...},{...},...],[],[]]
	                this.data = [objProps.data];
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.initExport(nextProps);
	            }
	            // if (nextProps.data) {
	            //     this.config.type = 'sync';
	            //     this.data = [nextProps.data];
	            // }
	            // this.config = this.__mergeProps(this.config, nextProps);
	            // // Table后端分页的情况会用到
	            // if (this.config.total && this.config.total !== this.state.total) {
	            //     this.setState({
	            //         total: this.config.total
	            //     });
	            // }
	        }
	        // 重置数据

	    }, {
	        key: 'initState',
	        value: function initState() {
	            clearInterval(this.config.timer);
	            this.config.timer = null;
	            delete this.data;
	            this.data = [];
	            this.setState({
	                pageSize: 200,
	                exporting: false,
	                fatchedData: 0,
	                usedTime: 0,
	                lastTime: 0,
	                finish: false,
	                error: false,
	                errorMsg: '',
	                total: this.config.total
	            });
	            // 销毁之前创建的url
	            window.URL.revokeObjectURL(this.url);
	        }
	    }, {
	        key: 'setTimer',
	        value: function setTimer() {
	            var _this2 = this;

	            clearInterval(this.config.timer);
	            this.config.timer = setInterval(function () {
	                _this2.setState({ usedTime: _this2.state.usedTime + 1 });
	                // 如果时间只剩一秒且导出没完成，则停在1s不动
	                if (_this2.state.lastTime > 1) {
	                    _this2.setState({ lastTime: _this2.state.lastTime - 1 });
	                }
	            }, 1000);
	        }
	        // 支持直接传入待导出的数据直接导出

	    }, {
	        key: 'export',
	        value: function _export(data) {
	            var _this3 = this;

	            if (data) {
	                this.data = [data];
	                this.config.type = 'sync';
	                this.forceUpdate();
	                _utils.Utils.defer(function () {
	                    _this3.aRef && _this3.aRef.click();
	                });
	            } else if (this.config.type === 'asyn') {
	                this.showModal();
	            } else {
	                this.aRef && this.aRef.click();
	            }
	        }
	    }, {
	        key: 'showModal',
	        value: function showModal() {
	            this.setState({ visible: true });
	        }
	    }, {
	        key: 'handleCancel',
	        value: function handleCancel() {
	            this.setState({ visible: false });
	            this.initState();
	        }
	    }, {
	        key: 'pageSizeChange',
	        value: function pageSizeChange(value) {
	            this.setState({ pageSize: value });
	        }
	        // 点击开始导出

	    }, {
	        key: 'doExport',
	        value: function doExport() {
	            this.setState({ exporting: true });
	            this.setTimer();
	            this.getData(1);
	        }
	        // 覆盖原生获取异步数据的函数

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {}
	        // 导出进程

	    }, {
	        key: 'getData',
	        value: function getData(pageNum) {
	            var _this4 = this;

	            var params = this.__filtered.source.params;
	            params = Object.assign({}, params, {
	                total: this.state.total,
	                page: pageNum,
	                size: this.state.pageSize
	            });
	            // 调用通用source获取数据逻辑
	            this.__getSourceData({
	                params: params,
	                success: function success(data, res) {
	                    if (_this4.state.exporting && !_this4.state.error) {
	                        // 存储数据
	                        _this4.saveData(res);
	                        var pageSize = _this4.state.pageSize;
	                        var total = _this4.state.total;
	                        // 计算剩余时间
	                        var fatchedData = _this4.state.fatchedData;
	                        var usedTime = _this4.state.usedTime;
	                        var lastTime = _this4.state.lastTime;
	                        var newLastTime = 0;
	                        if (usedTime !== 0 && fatchedData !== 0) {
	                            newLastTime = usedTime * (total - fatchedData) / fatchedData;
	                            newLastTime = Math.max(0, Math.ceil(newLastTime));
	                        }
	                        // 防止剩余时间一直波动，如果波动区间在5秒之内就用原来的值
	                        var range = Math.abs(newLastTime - lastTime);
	                        if (range > 5 || newLastTime < 10 && range > 1) {
	                            _this4.setState({
	                                lastTime: newLastTime,
	                                currentPage: pageNum
	                            });
	                        }
	                        // 判断是否已经取得全部数据
	                        if (pageNum * pageSize < total) {
	                            _this4.getData(pageNum + 1);
	                        } else {
	                            _this4.finish();
	                        }
	                    }
	                },
	                error: function error(err) {
	                    _this4.error(err);
	                }
	            });
	        }
	        // 存储数据

	    }, {
	        key: 'saveData',
	        value: function saveData(res) {
	            this.data.push(res.data);
	            this.setState({
	                fatchedData: this.state.fatchedData + res.data.length,
	                total: res.total || res.count || this.state.total
	            });
	            if (this.state.fatchedData > this.state.total) {
	                this.error('服务器返回数据异常，请重新导出或联系管理员');
	            }
	        }
	        // 创建下载链接

	    }, {
	        key: 'createDownload',
	        value: function createDownload() {
	            var data = this.data;
	            var headers = this.config.headers;
	            // 组装数据,打包成文件
	            var link = void 0;
	            if (this.config.fileFormat === '.xls') {
	                link = this.packageDataToXLS(data, headers);
	            } else if (this.config.fileFormat === '.csv') {
	                link = this.packageDataToCSV(data, headers);
	            }
	            var download = this.refs.download;
	            download.href = link;
	            download.download = this.getFileName();
	        }
	        // 导出文件名前缀+文件格式

	    }, {
	        key: 'getFileName',
	        value: function getFileName() {
	            var fileName = this.config.fileName;
	            var fileFormat = this.config.fileFormat;
	            if (fileName) {
	                return fileName + fileFormat;
	            }
	            var date = new Date();
	            var prefix = '';
	            prefix += date.getFullYear();
	            prefix += date.getMonth() + 1;
	            prefix += date.getDate();
	            prefix += date.getHours();
	            prefix += date.getMinutes();
	            return prefix + '导出数据' + fileFormat;
	        }
	        // 从一个对象中获取需要导出的关键字

	    }, {
	        key: 'getKeyDataOfObject',
	        value: function getKeyDataOfObject(obj) {
	            var val = '';
	            // 如果传入的是一个数组，则递归的遍历这个数组，拿出数组中各个对象的关键字
	            if (_utils.Utils.typeof(obj, 'array')) {
	                var tArr = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var t = _step.value;

	                        tArr.push(this.getKeyDataOfObject(t));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                val = tArr.join('\n');
	            } else if (_utils.Utils.typeof(obj, 'object')) {
	                // 如果字段是个对象，则优先获取Title字段，否则将该对象转化为json字符串
	                if (obj.hasOwnProperty('title')) {
	                    val = obj['title'];
	                } else {
	                    val = JSON.stringify(obj);
	                }
	            } else if (obj) {
	                val = obj.toString ? obj.toString() : obj;
	            }
	            return val;
	        }
	        // 把数据打包成xls文件，返回文件链接

	    }, {
	        key: 'packageDataToXLS',
	        value: function packageDataToXLS(data, headers) {
	            var _this5 = this;

	            var thead = '<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>';
	            // headers的格式为[{key: '', title: ''}, ...]
	            for (var i = 0; i < headers.length; i++) {
	                thead += '<th>' + headers[i].title + '</th>';
	            }
	            var tbody = '';
	            data.forEach(function (list) {
	                list.forEach(function (item) {
	                    tbody += '<tr>';
	                    for (var _i = 0; _i < headers.length; _i++) {
	                        var key = headers[_i].key;
	                        var val = _this5.columnHander(key, item, headers[_i]);
	                        tbody += '<td>' + val + '</td>';
	                    }
	                    tbody += '</tr>';
	                });
	            });
	            // 如果单元格内容长度大于11，则将number类型的数字强制转换成文本
	            var format = 'style="vnd.ms-excel.numberformat:@"';
	            var table = '<table ' + format + '>' + thead + tbody + '</table>';
	            var htmlParts = [table];
	            var dataBlob = new Blob(htmlParts, { 'type': 'text/xls' });
	            var link = window.URL.createObjectURL(dataBlob);
	            this.url = link;
	            return link;
	        }
	    }, {
	        key: 'columnHander',
	        value: function columnHander(key, row, columnConf) {
	            var val = row[key];
	            if (columnConf.render && columnConf.render) {
	                val = columnConf.render(val, row);
	            }
	            if (_utils.Utils.typeof(val, 'object')) {
	                val = this.getKeyDataOfObject(val);
	            }
	            val = val === undefined || val === null ? '' : val;
	            return val;
	        }
	        // 把数据打包成csv文件，返回文件链接

	    }, {
	        key: 'packageDataToCSV',
	        value: function packageDataToCSV(data, headers) {
	            var _this6 = this;

	            var thead = '';
	            // headers的格式为[{key: '', title: ''}, ...]
	            for (var i = 0; i < headers.length; i++) {
	                thead += i === headers.length - 1 ? headers[i].title : headers[i].title + ',';
	            }
	            thead += '\n';
	            var tbody = '';
	            data.forEach(function (list) {
	                list.forEach(function (item) {
	                    for (var _i2 = 0; _i2 < headers.length; _i2++) {
	                        var key = headers[_i2].key;
	                        var val = _this6.columnHander(key, item, headers[_i2]);
	                        tbody += _i2 === headers.length - 1 ? val : val + ',';
	                    }
	                    tbody += '\n';
	                });
	            });
	            var table = thead + tbody;
	            var htmlParts = [table];
	            var dataBlob = new Blob(htmlParts, { 'type': 'text/csv,charset=UTF-8' });
	            var link = window.URL.createObjectURL(dataBlob);
	            this.url = link;
	            return link;
	        }
	    }, {
	        key: 'reExport',
	        value: function reExport() {
	            this.initState();
	        }
	    }, {
	        key: 'finish',
	        value: function finish() {
	            clearInterval(this.config.timer);
	            this.setState({ finish: true, lastTime: 0 });
	            this.createDownload();
	            // 判断数据是否丢失
	            var fatchedData = this.state.fatchedData * 1;
	            var total = this.state.total * 1;
	            if (fatchedData !== total) {
	                this.error('服务器返回数据异常，预期获取数据' + total + '条，实际获取到' + fatchedData + '条。');
	            }
	        }
	        // 导出发生错误

	    }, {
	        key: 'error',
	        value: function error(res) {
	            var msg = JSON.stringify(res);
	            clearInterval(this.config.timer);
	            this.setState({
	                error: true,
	                errorMsg: msg,
	                lastTime: 0
	            });
	        }
	        // 同步导出方式页面 - 即实例化组件时直接传入数据

	    }, {
	        key: 'syncExportRender',
	        value: function syncExportRender() {
	            var _this7 = this;

	            var data = this.data;
	            var headers = this.config.headers;
	            var link = void 0;
	            if (this.config.fileFormat === '.xls') {
	                link = this.packageDataToXLS(data, headers);
	            } else if (this.config.fileFormat === '.csv') {
	                link = this.packageDataToCSV(data, headers);
	            }
	            var name = this.getFileName();
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-export ' + (this.config.className || ''), style: this.config.style },
	                _react2.default.createElement(
	                    'a',
	                    { ref: function ref(ele) {
	                            return _this7.aRef = ele;
	                        }, href: link, download: name },
	                    this.props.children
	                )
	            );
	        }
	        // 异步导出方式页面 - 即通过url异步加载数据

	    }, {
	        key: 'asynExportRender',
	        value: function asynExportRender() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-export ' + (this.config.className || ''), style: this.config.style },
	                _react2.default.createElement(
	                    'span',
	                    { onClick: this.showModal.bind(this) },
	                    this.props.children
	                ),
	                _react2.default.createElement(
	                    _antd.Modal,
	                    { ref: 'modal', className: 'export_modal',
	                        maskClosable: false,
	                        visible: this.state.visible,
	                        title: '\u5BFC\u51FA\u6570\u636E',
	                        onCancel: this.handleCancel.bind(this),
	                        footer: [_react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary', key: 'btn1',
	                                disabled: this.state.exporting,
	                                onClick: this.doExport.bind(this) },
	                            '\u5F00\u59CB\u5BFC\u51FA'
	                        ), _react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary', key: 'btn2',
	                                onClick: this.reExport.bind(this) },
	                            '\u91CD\u65B0\u5BFC\u51FA'
	                        )] },
	                    _react2.default.createElement(
	                        'section',
	                        { hidden: this.state.exporting },
	                        this.renderSetting()
	                    ),
	                    _react2.default.createElement(
	                        'section',
	                        { hidden: !this.state.exporting },
	                        this.renderExporting()
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'getRequestTimes',
	        value: function getRequestTimes() {
	            var pageSize = this.state.pageSize;
	            var total = this.state.total;
	            return Math.ceil(total / pageSize);
	        }
	        // 导出前的设置界面

	    }, {
	        key: 'renderSetting',
	        value: function renderSetting() {
	            var pageSize = this.state.pageSize;
	            var total = this.state.total;
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'export_info' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        '\u60A8\u5373\u5C06\u5BFC\u51FA\u73B0\u6709\u7684',
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'fw700' },
	                            '\u5168\u90E8\u6570\u636E'
	                        ),
	                        '\uFF0C',
	                        total === 0 ? '数据总数未知。' : _react2.default.createElement(
	                            'span',
	                            null,
	                            '\u5171\u8BA1 ',
	                            _react2.default.createElement(
	                                'span',
	                                { className: 'fw700' },
	                                ' ',
	                                total,
	                                ' '
	                            ),
	                            ' \u6761'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        '\u6BCF\u6B21\u670D\u52A1\u5668\u8BF7\u6C42\u7684\u5927\u5C0F\u4E3A ',
	                        _react2.default.createElement(_antd.InputNumber, {
	                            size: 'small', min: 10, max: 1000, step: 100,
	                            defaultValue: pageSize, onChange: this.pageSizeChange.bind(this) }),
	                        ' \u6761',
	                        total === 0 ? '' : _react2.default.createElement(
	                            'span',
	                            null,
	                            '\uFF0C\u672C\u6B21\u5BFC\u51FA\u5171\u9700 ',
	                            _react2.default.createElement(
	                                'span',
	                                { className: 'fw700' },
	                                this.getRequestTimes()
	                            ),
	                            ' \u6B21\u670D\u52A1\u5668\u8BF7\u6C42'
	                        )
	                    )
	                ),
	                this.renderMessage(1)
	            );
	        }
	        // 正在导出的界面

	    }, {
	        key: 'renderExporting',
	        value: function renderExporting() {
	            var total = this.state.total;
	            var usedTime = this.state.usedTime;
	            var fatchedData = this.state.fatchedData;
	            var progress = total === 0 ? 0 : (fatchedData / total * 100).toFixed(2);
	            progress = progress > 100 ? 100 : progress;
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'export_progress', hidden: !this.config.noMessage && this.state.finish },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'ex_percent' },
	                        _react2.default.createElement(
	                            'span',
	                            { hidden: this.state.finish || this.state.error },
	                            _react2.default.createElement(_antd.Icon, { type: 'loading' }),
	                            '\u6B63\u5728\u5BFC\u51FA\uFF0C'
	                        ),
	                        '\u5DF2\u5B8C\u6210 ',
	                        progress,
	                        '%...'
	                    ),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'ex_time' },
	                        '\u5DF2\u7528\u65F6 ',
	                        _utils.Utils.timeFormatter(usedTime),
	                        '\uFF0C\u9884\u8BA1\u5269\u4F59',
	                        ' ' + _utils.Utils.timeFormatter(this.state.lastTime)
	                    ),
	                    _react2.default.createElement(_antd.Progress, { percent: Math.floor(progress),
	                        status: this.state.finish ? 'success' : this.state.error ? 'exception' : 'active',
	                        showInfo: false }),
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        '\u6BCF\u6B21\u670D\u52A1\u5668\u8BF7\u6C42\u6570\u636E ',
	                        this.state.pageSize,
	                        ' \u6761\uFF0C\u5DF2\u5BFC\u51FA\u6570\u636E ',
	                        fatchedData,
	                        ' of ',
	                        total
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { hidden: this.state.error },
	                    this.renderMessage(2)
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { hidden: !this.state.error },
	                    _react2.default.createElement(_antd.Alert, { description: '出错了：' + this.state.errorMsg,
	                        type: 'error',
	                        showIcon: true })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { hidden: !this.state.finish, className: 'finish-export' },
	                    _react2.default.createElement(
	                        'a',
	                        { ref: 'download', style: { color: '#fff' } },
	                        _react2.default.createElement(
	                            _antd.Button,
	                            { type: 'primary' },
	                            '\u4E0B\u8F7D\u6587\u4EF6'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'p',
	                        { className: 'mt8' },
	                        _react2.default.createElement(_antd.Icon, { type: 'check-circle', className: 'success-icon' }),
	                        '\u6570\u636E\u5BFC\u51FA\u5B8C\u6BD5\uFF0C\u5408\u8BA1',
	                        fatchedData,
	                        '\u6761\u6570\u636E\uFF0C\u7528\u65F6 ',
	                        _utils.Utils.timeFormatter(usedTime)
	                    )
	                )
	            );
	        }
	        // 渲染提示信息模块

	    }, {
	        key: 'renderMessage',
	        value: function renderMessage(pageNum) {
	            var message = this.config.message;
	            if (!message) {
	                return '';
	            } else if (!message['page' + pageNum]) {
	                return '';
	            } else {
	                var msg = message['page' + pageNum];
	                return _react2.default.createElement(
	                    'div',
	                    null,
	                    msg.map(function (item) {
	                        return _react2.default.createElement(_antd.Alert, { description: item, key: item,
	                            type: 'warning',
	                            showIcon: true });
	                    })
	                );
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            if (this.config.type === 'asyn') {
	                return this.asynExportRender();
	            } else {
	                return this.syncExportRender();
	            }
	        }
	    }]);

	    return Export;
	}(_base.BaseComponent);

	exports.default = Export;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	*   @file Tree组件的引入文件
	*/
	module.exports = __webpack_require__(188).default;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 树形控件源码
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author SuSisi
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var TreeNode = _antd.Tree.TreeNode;
	var Search = _antd.Input.Search;

	var expandedKeys = [];
	var getParentNode = function getParentNode(value) {
	    var tree = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	    var node = [];
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = tree[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var v = _step.value;

	            var children = void 0;
	            if (v.children) {
	                children = getParentNode(value, v.children);
	            }
	            if (children && children.length > 0 || v.name.indexOf(value) !== -1) {
	                // 根节点或者子节点包含搜索内容或者本节点包含搜索内容
	                node.push(Object.assign({}, v, { children: children }));
	            }
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    return node;
	};
	var getParentsKeys = function getParentsKeys(nodes, keyArray) {
	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	        for (var _iterator2 = nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var v = _step2.value;

	            if (v.children && v.children.length > 0) {
	                keyArray.push(v.key);
	                getParentsKeys(v.children, keyArray);
	            }
	        }
	    } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	            }
	        } finally {
	            if (_didIteratorError2) {
	                throw _iteratorError2;
	            }
	        }
	    }
	};

	var OriginTree = function (_BaseComponent) {
	    _inherits(OriginTree, _BaseComponent);

	    function OriginTree(props) {
	        _classCallCheck(this, OriginTree);

	        var _this = _possibleConstructorReturn(this, (OriginTree.__proto__ || Object.getPrototypeOf(OriginTree)).call(this, props));

	        _this.__init();
	        _this.config = {
	            style: {},
	            expand: {
	                defaultExpandAll: false,
	                defaultExpandedKeys: [],
	                expandLeavals: null,
	                expandedKeys: null,
	                autoExpandParent: true,
	                onExpand: function onExpand() {}
	            },
	            checkbox: {
	                checkable: false,
	                checkedKeys: null,
	                checkStrictly: false,
	                defaultCheckedKeys: [],
	                onCheck: function onCheck() {}
	            },
	            search: {
	                enable: false,
	                onlyShowSearchResult: true
	            },
	            select: {
	                defaultSelectedKeys: [],
	                selectedKeys: null,
	                multiple: false,
	                onSelect: function onSelect() {}
	            },
	            widthResize: {
	                resizeAble: false,
	                minWidth: '',
	                maxWidth: ''
	            },
	            showLine: false,
	            showIcon: false
	        };
	        _this.completePointerTree = {};
	        _this.levalPointerTree = {};
	        _this.initTree();
	        _this.handleSearch = _utils.Utils.debounce(_this.handleSearch, 200);
	        return _this;
	    }
	    // 树形控件初始化配置及数据


	    _createClass(OriginTree, [{
	        key: 'initTree',
	        value: function initTree(nextProps) {
	            var objProps = this.props;
	            // 过滤出变化的属性
	            if (nextProps) {
	                objProps = _utils.Utils.getChange(nextProps, objProps);
	            }
	            if (_utils.Utils.empty(objProps)) {
	                return;
	            }
	            var propsData = void 0;
	            if (objProps.data) {
	                propsData = _utils.Utils.clone(objProps.data);
	            }
	            // 针对数据进行处理
	            // 生成指针树，便于快速定位树节点
	            if (propsData) {
	                this.completePointerTree = {};
	                this.createPointerTree(propsData, this.completePointerTree);
	            }
	            // 生成层级树，包含每层可展开的父节点的key
	            if (propsData) {
	                this.levalPointerTree = {};
	                this.createLevalTree(propsData, this.levalPointerTree);
	            }

	            // 针对配置进行处理
	            // 对用户未配置的项使用默认配置
	            // this.config = this.__mergeProps(this.config, objProps.config);
	            this.config = this.__mergeProps(this.config, this.__filterProps(objProps, 'data'));
	            this.expand = this.config.expand;
	            this.checkbox = this.config.checkbox;
	            this.search = this.config.search;
	            this.select = this.config.select;
	            this.loadData = !!this.__filtered.source.url;
	            this.widthResize = this.config.widthResize;
	            this.showLine = this.config.showLine;
	            this.showIcon = this.config.showIcon;
	            this.antdConfig = {
	                defaultExpandAll: this.expand['expandLeavals'] ? false : this.expand['defaultExpandAll'],
	                defaultExpandedKeys: this.expand['expandLeavals'] ? [] : this.expand['defaultExpandedKeys'],
	                checkable: this.checkbox['checkable'],
	                defaultCheckedKeys: this.checkbox['defaultCheckedKeys'],
	                checkStrictly: this.checkbox['checkStrictly'],
	                defaultSelectedKeys: this.select['defaultSelectedKeys'],
	                multiple: this.select['multiple'],
	                showLine: this.showLine
	                // showIcon: this.showIcon
	            };
	            var state = {
	                expandedKeys: this.expand.expandedKeys,
	                autoExpandParent: this.expand.autoExpandParent,
	                checkedKeys: this.checkbox.checkedKeys, // 受控选择复选框
	                selectedKeys: this.select.selectedKeys, // 受控选择
	                searchValue: '' // 搜索框中输入内容
	            };
	            if (propsData) {
	                state.treeData = propsData;
	                state.completeTree = propsData;
	            }
	            if (!!nextProps) {
	                this.setState(state);
	                this.initShowLeval();
	            } else {
	                state.treeData = state.treeData || [];
	                state.completeTree = state.treeData || [];
	                this.state = state;
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.initShowLeval();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 就算props没有改变，当父组件重新渲染时，也会进这里，所以需要在这里判断是否需要重新渲染组件
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.initTree(nextProps);
	            }
	        }
	    }, {
	        key: 'initShowLeval',
	        value: function initShowLeval() {
	            // 具有expand，及expandLeavals配置，且没有配置expandedKeys时才按照用户要求展开到某一层
	            if (this.expand.expandLeavals && !this.expand.expandedKeys) {
	                this.showToLeval(this.expand.expandLeavals);
	            }
	        }
	        // 创建指针树，创建之后，pointerTree的每个元素都能指向树的一个节点

	    }, {
	        key: 'createPointerTree',
	        value: function createPointerTree(nodes, pointerTree) {
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var v = _step3.value;

	                    if (!!v.key) {
	                        var key = v.key;
	                        pointerTree[key] = v;
	                        if (v.children && v.children.length > 0) {
	                            this.createPointerTree(v.children, pointerTree);
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }
	        }
	        // 生成一个层级树，记录每层可展开的有子节点的父节点

	    }, {
	        key: 'createLevalTree',
	        value: function createLevalTree(tree, levalPointerTree) {
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = tree[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var v = _step4.value;

	                    var type = v.type;
	                    if (!levalPointerTree[type]) {
	                        levalPointerTree[type] = [];
	                    }
	                    // 对可展开的父节点进行key值存放
	                    if (v.children && v.children.length > 0) {
	                        levalPointerTree[type].push(v.key);
	                        this.createLevalTree(v.children, levalPointerTree);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'onExpand',
	        value: function onExpand(expandedKeys, e) {
	            // if not set autoExpandParent to false, if children expanded, parent can not collapse.
	            // or, you can remove all expanded children keys.
	            this.setState({
	                expandedKeys: expandedKeys,
	                autoExpandParent: false
	            });
	            var item = e && e.node && e.node.props.data;
	            this.expand.onExpand(expandedKeys, e, item);
	        }
	    }, {
	        key: 'onCheck',
	        value: function onCheck(checkedKeys, e) {
	            this.setState({
	                checkedKeys: checkedKeys
	            });
	            this.checkbox.onCheck(checkedKeys, e);
	        }
	    }, {
	        key: 'onSelect',
	        value: function onSelect(selectedKeys, e) {
	            this.setState({
	                selectedKeys: selectedKeys
	            });
	            var item = e && e.node && e.node.props.data;
	            this.select.onSelect(selectedKeys, e, item);
	        }
	        // 展示树形到哪一层，expandLeavals为数组，表示展示到哪些层

	    }, {
	        key: 'showToLeval',
	        value: function showToLeval(expandLeavals) {
	            var keys = [];
	            if (expandLeavals === null) {
	                // 展示所有节点
	                for (var i in this.levalPointerTree) {
	                    keys = keys.concat(this.levalPointerTree[i]);
	                }
	            } else {
	                for (var e in expandLeavals) {
	                    keys = keys.concat(this.levalPointerTree[expandLeavals[e]]);
	                }
	            }
	            this.setState({
	                expandedKeys: keys
	            });
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var value = e.target.value;
	            this.handleSearch(value);
	        }
	        // 通过搜索内容对策略树进行搜索

	    }, {
	        key: 'handleSearch',
	        value: function handleSearch(value) {
	            var newTree = this.state.completeTree;
	            if (value.length < 1) {
	                // 搜索框中无内容，数据展示情况分类讨论
	                if (this.expand['expandedKeys']) {
	                    // 展开用户说明的指定节点
	                    this.setState({
	                        expandedKeys: this.expand['expandedKeys'],
	                        autoExpandParent: this.expand['autoExpandParent']
	                    });
	                } else if (this.expand['expandLeavals']) {
	                    // 根据用户最初定义进行展示
	                    this.showToLeval(this.expand['expandLeavals']);
	                } else if (this.expand['defaultExpandAll']) {
	                    // 全部展开
	                    this.showToLeval(null);
	                }
	            } else {
	                // 有搜索内容时根据搜索结果渲染
	                newTree = getParentNode(value, this.state.completeTree);
	                // 对搜索结果的所有树节点进行展开
	                var newKeys = [];
	                getParentsKeys(newTree, newKeys);
	                // 搜索结果仍然展示整个树，只是对含有搜索内容的节点进行展开
	                if (!this.search.onlyShowSearchResult) {
	                    newTree = this.state.completeTree;
	                }
	                this.setState({
	                    expandedKeys: newKeys
	                });
	            }
	            this.setState({
	                treeData: newTree || [],
	                searchValue: value
	            });
	        }
	        // 覆盖原生获取异步数据的函数
	        // _handleAsyncData() {}
	        // 异步对数据进行加载，满足一定要求再加载

	    }, {
	        key: 'onLoadData',
	        value: function onLoadData(treeNode) {
	            var _this2 = this;

	            var key = treeNode.props.data.key;
	            var nodeData = this.completePointerTree[key];
	            return new Promise(function (resolve) {
	                // 没有children数据又非叶子节点的时候需要去异步请求
	                if (!nodeData.children && nodeData.isLeaf === false || nodeData.children.length < 1 && !nodeData.isLeaf) {
	                    var params = _this2.__filtered.source.params;
	                    params = Object.assign({}, params, {
	                        key: nodeData.key,
	                        name: nodeData.name,
	                        type: nodeData.type,
	                        level: nodeData.level
	                    });
	                    // 调用通用source获取数据逻辑
	                    _this2.__getSourceData({
	                        params: params,
	                        success: function success(data) {
	                            _this2.insertData(nodeData.key, nodeData.type, data);
	                            resolve();
	                        },
	                        error: function error(res) {
	                            resolve();
	                        }
	                    });
	                } else {
	                    resolve();
	                }
	            });
	        }
	        // 向展示树和完整树中插入数据

	    }, {
	        key: 'insertData',
	        value: function insertData(curKey, type) {
	            var nodeData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

	            var completeTree = this.state.completeTree;
	            // 如果返回的数据为依然为空数组或非数组，则更新当前节点为叶子节点，无法再次点击获取
	            if (_utils.Utils.typeof(nodeData, 'array') && nodeData.length) {
	                // 通过完整树指针向完整数据中插入一份数据
	                this.completePointerTree[curKey].children = nodeData;
	                // 需要更新指针树的指针情况
	                this.createPointerTree(nodeData, this.completePointerTree);
	                // 需要更新层级树的情况
	                // 当前节点为一个可展开的父节点，故层级树中加入此节点，同时用取回的数据更新层级树
	                if (!this.levalPointerTree[type]) {
	                    this.levalPointerTree[type] = [];
	                }
	                this.levalPointerTree[type].push(curKey);
	                this.createLevalTree(nodeData, this.levalPointerTree);
	            } else {
	                delete this.completePointerTree[curKey].children;
	                this.completePointerTree[curKey].isLeaf = true;
	            }
	            this.setState({
	                completeTree: completeTree
	            });
	            // 用户在搜索时对数据进行了加载，且要求只展示与搜索相匹配的结果，则需要重新过滤树
	            // 如果用户要求搜索时仍然展示全量数据，则不需要重新过滤，直接展示用户新加载的节点即可
	            if (this.search.onlyShowSearchResult && this.state.searchValue.length > 0) {
	                this.handleSearch(this.state.searchValue);
	            }
	        }
	        // 树组建右边缘可扩展

	    }, {
	        key: 'resizeWidth',
	        value: function resizeWidth(ev) {
	            var _this3 = this;

	            var iEvent = ev || event;
	            if (iEvent.button === 2) {
	                this.stopResize();
	                return false;
	            }
	            var oBox = _reactDom2.default.findDOMNode(this.refs['tree']);
	            // 当单击的时候，存储x轴的坐标。
	            var dx = iEvent.clientX;
	            // 当单击的时候，储存Y轴的坐标。
	            var dy = iEvent.clientY;
	            // 存储默认的div的宽度。
	            var dw = oBox.offsetWidth;
	            document.onmousemove = function (ev) {
	                var iEvent = ev || event;
	                oBox.style.width = dw + (iEvent.clientX - dx) + 'px';
	                // 此时的iEvent.clientX的为拖动时一直改变的鼠标的X坐标，
	                // 所以，此时的盒子宽度就等于鼠标移动的距离加上原本盒子的宽度
	                if (_this3.widthResize['minWidth']) {
	                    if (oBox.offsetWidth <= parseInt(_this3.widthResize['minWidth'], 10)) {
	                        // 当盒子缩小到一定范围内的时候，让他保持一个固定值，不再继续改变
	                        oBox.style.width = _this3.widthResize['minWidth'];
	                    }
	                }
	                if (_this3.widthResize['maxWidth']) {
	                    if (oBox.offsetWidth >= parseInt(_this3.widthResize['maxWidth'], 10)) {
	                        // 当盒子缩小到一定范围内的时候，让他保持一个固定值，不再继续改变
	                        oBox.style.width = _this3.widthResize['maxWidth'];
	                    }
	                }
	            };
	            document.onmouseup = function () {
	                document.onmouseup = null;
	                document.onmousemove = null;
	            };
	            return false;
	        }
	    }, {
	        key: 'stopResize',
	        value: function stopResize() {
	            document.onmouseup = null;
	            document.onmousemove = null;
	        }
	        // 渲染树

	    }, {
	        key: 'renderTreeNode',
	        value: function renderTreeNode(data) {
	            var _this4 = this;

	            var searchValue = this.state.searchValue;
	            return data.map(function (item) {
	                var title = item.name;
	                if (_this4.search && _this4.search.enable) {
	                    // indexOf搜索普通字符串效率最高
	                    var index = item.name.indexOf(searchValue);
	                    var beforeStr = item.name.substr(0, index);
	                    var afterStr = item.name.substr(index + searchValue.length);
	                    title = index > -1 ? _react2.default.createElement(
	                        'span',
	                        null,
	                        beforeStr,
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'ant-tree-searchable-filter', style: { color: 'red' } },
	                            searchValue
	                        ),
	                        afterStr
	                    ) : _react2.default.createElement(
	                        'span',
	                        null,
	                        item.name
	                    );
	                }
	                return _react2.default.createElement(
	                    TreeNode,
	                    {
	                        key: item.key,
	                        title: title,
	                        value: item.value || item.key,
	                        data: item,
	                        _item: item,
	                        isLeaf: !(item.isLeaf === false || !!item.children),
	                        disableCheckbox: !!item.disableCheckbox,
	                        disabled: !!item.disabled
	                    },
	                    !!item.children && _this4.renderTreeNode(item.children)
	                );
	            });
	        }
	    }, {
	        key: 'getTreeProps',
	        value: function getTreeProps() {
	            var _state = this.state,
	                expandedKeys = _state.expandedKeys,
	                autoExpandParent = _state.autoExpandParent,
	                checkedKeys = _state.checkedKeys,
	                selectedKeys = _state.selectedKeys,
	                treeData = _state.treeData;

	            return _extends({}, this.antdConfig, {
	                autoExpandParent: autoExpandParent,
	                onExpand: this.onExpand.bind(this),
	                onSelect: this.onSelect.bind(this),
	                onCheck: this.onCheck.bind(this)
	            }, !!expandedKeys ? { expandedKeys: expandedKeys } : null, !!checkedKeys ? { checkedKeys: checkedKeys } : null, !!selectedKeys ? { selectedKeys: selectedKeys } : null, !!this.loadData ? { loadData: this.onLoadData.bind(this) } : null, {
	                children: this.renderTreeNode(treeData)
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var searchTip = this.state.treeData.length === 0 ? '未找到可以匹配的结果' : '';
	            return _react2.default.createElement(
	                'div',
	                _extends({ ref: 'tree' }, this.__getCommonProps({ className: 'uf-tree' })),
	                this.search.enable && _react2.default.createElement(
	                    'div',
	                    { className: 'uf-tree-search' },
	                    _react2.default.createElement(Search, {
	                        style: { width: '90%' },
	                        placeholder: 'Search',
	                        onChange: this.onChange.bind(this)
	                    }),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'uf-tree-treeSearchTip',
	                            style: { display: searchTip.length > 0 ? 'block' : 'none' } },
	                        searchTip
	                    )
	                ),
	                _react2.default.createElement(_antd.Tree, this.getTreeProps()),
	                this.widthResize['resizeAble'] && _react2.default.createElement('div', { className: 'uf-tree-ew-resize', onMouseDown: this.resizeWidth.bind(this) })
	            );
	        }
	    }]);

	    return OriginTree;
	}(_base.BaseComponent);

	exports.default = OriginTree;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file table组件默认访问文件
	 */
	module.exports = __webpack_require__(190).default;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	var _Crud = __webpack_require__(191);

	var _Crud2 = _interopRequireDefault(_Crud);

	var _Title = __webpack_require__(192);

	var _Title2 = _interopRequireDefault(_Title);

	var _Edit = __webpack_require__(194);

	var _Edit2 = _interopRequireDefault(_Edit);

	var _Enum = __webpack_require__(195);

	var _Enum2 = _interopRequireDefault(_Enum);

	var _Export = __webpack_require__(196);

	var _Export2 = _interopRequireDefault(_Export);

	var _Filters = __webpack_require__(193);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 表格组件:antd Table的基础上增加了原来uf Table中的一些功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author susisi@baidu.com
	

	// 扩展功能 - 增删改查等


	// 从obg2中获取obj1所需要的一些属性
	var getNeedObject = function getNeedObject(obj1, obj2) {
	    for (var i in obj1) {
	        if (!!obj2[i]) {
	            obj1[i] = obj2[i];
	        }
	    }
	};

	var NewTable = function (_BaseComponent) {
	    _inherits(NewTable, _BaseComponent);

	    // 以下是函数定义
	    function NewTable(props) {
	        _classCallCheck(this, NewTable);

	        var _this = _possibleConstructorReturn(this, (NewTable.__proto__ || Object.getPrototypeOf(NewTable)).call(this, props));

	        _this._injectEvent.push('onRowDoubleClick', 'onChange');
	        // 暴露给用户使用的函数
	        _this._openApi.push('reload', 'refresh', 'export', 'showCrud', 'getSelected', 'getSelectedKeys', 'selectAll', 'clearSelect', 'getValues', 'getDisplayValues',
	        // 纯粹为了 bind this
	        'toggleFullScreen', 'refreshTable', 'toShowAllTags', '_handleExport', 'handleAction');
	        _this.__init();
	        _this._showLoading = _this.__filtered.source.showLoading === undefined || _this.__filtered.source.showLoading;
	        _this.state = {
	            antdConfig: null,
	            // 数据默认为空
	            completeData: [],
	            // 全屏展示与否
	            fullScreen: false,
	            // 是否展示全部字段
	            showAllTags: false,
	            // 加载状态
	            loading: false,
	            selectedRowKeys: [],
	            expandedRowKeys: []
	        };
	        // 保存选中的行数据
	        _this.selectedRows = [];
	        // 请求序号，当执行新请求时，之前的未返回数据的请求则废弃，通过index值是否相等判断
	        _this.requestIndex = null;
	        _this.rowKeyFunc = null;
	        _this.rowSelection = null;
	        _this.filter = new _Filters.Filter(_this);
	        _this.enum = new _Enum2.default({
	            execAjax: _this.__execAjax.bind(_this),
	            continue: _this.componentDidMount.bind(_this),
	            getConf: _this.__getConf.bind(_this)
	        });
	        _this.initTable(true);
	        return _this;
	    }

	    _createClass(NewTable, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 即使props没有改变，当父组件重新渲染时，也会进这里，所以需要在这里判断是否需要重新渲染组件
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.initTable();
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            // 组件删除时，请求返回的数据无效
	            this.requestIndex = null;
	            this.expandThEle && this.expandThEle.removeEventListener('click', this.expandAllEventListener.bind(this));
	        }
	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps(changeProps) {
	            _get(NewTable.prototype.__proto__ || Object.getPrototypeOf(NewTable.prototype), '_afterSetProps', this).call(this);
	            // 当只改了source.params参数，未更改params，则将source.params更新的值覆盖到params上
	            if (!changeProps.params && changeProps.source && changeProps.source.params) {
	                this.__props.params = _utils.Utils.merge(this.__props.params, changeProps.source.params);
	            }
	        }
	        // 为了兼容params的两种用法。
	        // 需使用params的地方，直接调用此函数
	        // 参数逻辑为，params为直接覆盖，source.params为增量更新；params > source.params

	    }, {
	        key: 'getSourceParams',
	        value: function getSourceParams() {
	            return _utils.Utils.merge({}, this.__filtered.source.params, this.__props.params);
	        }
	    }, {
	        key: 'initTable',
	        value: function initTable(isFirst) {
	            var _this2 = this;

	            var objProps = this.__props;
	            // isFirst && (this.oriSourceParams = Utils.clone(this.__filtered.source.params));
	            // 兼容参数处理，兼容params的两种用法（写source外面也可以）
	            // if (objProps.params) {
	            //     this.__filtered.source.params = Object.assign({}, this.oriSourceParams, objProps.params);
	            // }
	            var state = {};
	            this.rowKey = objProps.rowKey || 'id';
	            // 如果rowKey为一个函数，则把函数转存到rowKeyFunc中，rowKey置为_uniqueRowKey
	            if (_utils.Utils.typeof(this.rowKey, 'function')) {
	                this.rowKeyFunc = this.rowKey;
	                this.rowKey = '_uniqueRowKey';
	            }
	            // 注意：引用类型，this.pagination 和 this.__props.pagination 基本上是同一个东西
	            this.pagination = objProps.pagination || {};
	            // COMPAT: 将 pagination.paramIndex 转移到 source.paramIndex 上
	            if (this.pagination.paramIndex) {
	                this.__filtered.source.paramIndex = this.pagination.paramIndex;
	            }
	            // 是否为后端分页
	            this.serverPaging = this.__filtered.source.url && this.pagination.pageType === 'server';
	            // 列配置
	            this.columns = objProps.columns;
	            // 根据列初始化枚举类
	            isFirst && this.enum.init(this.columns);
	            var propsData = objProps.data;
	            propsData = this.handleRowKeyFunc(propsData);
	            // 行配置
	            if (!!objProps.rowSelection) {
	                this.rowSelection = objProps.rowSelection;
	                if (this.rowSelection.selectedRowKeys) {
	                    state.selectedRowKeys = this.rowSelection.selectedRowKeys;
	                }
	            }
	            var defaultCif = {
	                size: 'default',
	                rowKey: this.rowKey,
	                rowClassName: function rowClassName() {},
	                expandedRowRender: null,
	                defaultExpandedRowKeys: [],
	                expandedRowKeys: [], // 配置之后会变为受控组件
	                defaultExpandAllRows: false,
	                locale: { filterTitle: '筛选', filterConfirm: '确定', filterReset: '重置', emptyText: '暂无数据' },
	                indentSize: 15,
	                bordered: false,
	                showHeader: true,
	                footer: null,
	                scroll: {},
	                onChange: null,
	                onExpand: function onExpand() {},
	                onExpandedRowsChange: function onExpandedRowsChange() {},
	                onRowClick: function onRowClick() {},
	                onRowDoubleClick: function onRowDoubleClick() {},
	                onRowMouseEnter: function onRowMouseEnter() {},
	                onRowMouseLeave: function onRowMouseLeave() {}
	            };
	            // 为了层级清晰，把扩展行相关的属性聚合到了expended属性中。此处兼容放属性里和属性外两种用法
	            if (this.__props.expanded) {
	                getNeedObject(defaultCif, this.__props.expanded);
	            }
	            getNeedObject(defaultCif, this.__props);
	            // 关于表头
	            if (!!objProps.title) {
	                var titleConfig = objProps.title;
	                // 如果是字符串 或者 非对象（组件配置，可以是数组）或者 单一组件配置
	                if (_utils.Utils.typeof(titleConfig, 'string')) {
	                    titleConfig = { text: titleConfig };
	                }
	                titleConfig.showText = titleConfig.showText !== undefined ? titleConfig.showText : true;
	                this.title = titleConfig;
	                // 手动刷新title组件
	                this.titleRef && this.titleRef.refreshTitleConf(this.title);
	            } else {
	                this.title = null;
	            }
	            // this.header = this.handleHeader(objProps.header);
	            // 关于异步操作
	            if (propsData) {
	                state.completeData = propsData;
	                this.pagination.total = this.pagination.total || propsData.length;
	                // 如果传入新的data，则需刷新total
	                if (!this.__prevProps.data || this.__prevProps.data.length !== propsData.length) {
	                    this.pagination.total = propsData.length;
	                }
	                // 如果默认展开全部扩展内容
	                if (defaultCif.defaultExpandAllRows) {
	                    var obj = this.getAllCanSelectRows(true, propsData);
	                    state.expandedRowKeys = obj.rowKeys;
	                }
	            }
	            // 关于行样式与不可选相关联，不可选时至为灰色
	            if (this.rowSelection && this.rowSelection.disabledRow) {
	                // 暂存用户配置
	                var rowClassNameFun = defaultCif.rowClassName;
	                defaultCif.rowClassName = function (record, index) {
	                    var customRowClassName = rowClassNameFun(record, index);
	                    // 用户未定义rowClassName时customRowClassName为undefined
	                    if (!customRowClassName) {
	                        customRowClassName = '';
	                    }
	                    if (_this2.rowSelection.disabledRow(record)) {
	                        return 'disabledRow ' + customRowClassName;
	                    } else {
	                        return customRowClassName;
	                    }
	                };
	            }
	            this.antdConfig = defaultCif;
	            state.antdConfig = this.antdConfig;
	            if (isFirst) {
	                this.state = Object.assign({}, this.state, state);
	            } else {
	                this.setState(state);
	            }
	        }
	        // 双击行进行编辑功能

	    }, {
	        key: '_onRowDoubleClick',
	        value: function _onRowDoubleClick(record) {
	            if (this.__props.doubleClickEdit) {
	                this.showCrud('edit', record);
	            }
	        }
	        // 分页、排序、筛选变化时触发

	    }, {
	        key: '_onChange',
	        value: function _onChange(page, filter, sorter) {
	            // filter发生变化时，如果是后端分页进行处理
	            if (this.serverPaging && _utils.Utils.isChange(filter, this.filterParams)) {
	                var oldFilterParams = this.filterParams || {};
	                this.filterParams = filter;
	                this.filter.handleChange(filter, oldFilterParams);
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // for enum, 无论如何都刷新一次组件
	            this.setState({ loading: this.enum.loading && this._showLoading });
	            // 请求数据见公共的BaseComponent的_componentDidMount逻辑
	            // code
	            // 添加展开全部功能按钮
	            this.handleExpandAllIcon();
	        }

	        /* 供用户调用接口 ***********************************************************************/
	        // 手动拉取数据

	    }, {
	        key: 'reload',
	        value: function reload() {
	            this.getData();
	        }
	        // 刷新表格

	    }, {
	        key: 'refresh',
	        value: function refresh(page) {
	            this.refreshTable(page);
	        }
	        // 展示增删改查等弹框，具体实现逻辑见 Crud.js

	    }, {
	        key: 'showCrud',
	        value: function showCrud() {
	            var _crudRef;

	            this.crudRef && (_crudRef = this.crudRef).showCrud.apply(_crudRef, arguments);
	        }
	        // 获取当前全部选中行的数据

	    }, {
	        key: 'getSelected',
	        value: function getSelected() {
	            return this.selectedRows;
	        }
	        // 获取当前全部选中行的key

	    }, {
	        key: 'getSelectedKeys',
	        value: function getSelectedKeys() {
	            return this.state.selectedRowKeys;
	        }
	        // 全选

	    }, {
	        key: 'selectAll',
	        value: function selectAll() {
	            this._selectAllData();
	        }
	        // 所有分页全部选中

	    }, {
	        key: 'selectAllPage',
	        value: function selectAllPage() {
	            this._selectAllData(true);
	        }
	    }, {
	        key: 'clearSelect',
	        value: function clearSelect() {
	            this.rowOnChange([], []);
	        }
	        // 导出数据

	    }, {
	        key: 'export',
	        value: function _export() {
	            this.exportRef && this.exportRef.export();
	        }
	    }, {
	        key: 'getValues',
	        value: function getValues() {
	            return _utils.Utils.map(_utils.Utils.clone(this.__props.data || []), function (item) {
	                for (var i in item) {
	                    delete item[i + '.fyi'];
	                }
	                return item;
	            });
	        }
	        // 获取展示内容

	    }, {
	        key: 'getDisplayValues',
	        value: function getDisplayValues() {
	            return _utils.Utils.clone(this.__props.data);
	        }

	        /* 内部函数 ****************************************************************************/

	    }, {
	        key: '_handleExport',
	        value: function _handleExport() {
	            this.export();
	        }
	        // 执行用户自定义的 rowKey 函数，生成唯一key

	    }, {
	        key: 'handleRowKeyFunc',
	        value: function handleRowKeyFunc(data) {
	            var _this3 = this;

	            if (this.rowKeyFunc) {
	                data.forEach(function (v) {
	                    v[_this3.rowKey] = _this3.rowKeyFunc(v);
	                });
	            }
	            return data;
	        }
	        // 添加展开全部功能按钮
	        // 因为原始组件未提供相应API，所以此处通过操作真是dom上的className实现

	    }, {
	        key: 'handleExpandAllIcon',
	        value: function handleExpandAllIcon() {
	            var _this4 = this;

	            if (this.__props.expandedRowRender || this.__props.expanded) {
	                // 需操作真是dom
	                var collection = _reactDom2.default.findDOMNode(this).getElementsByClassName('ant-table-expand-icon-th');
	                this.expandThEle = collection[0];
	                // 可能会进来多次，这里判断当没oriClassName才执行
	                if (this.expandThEle && !this.expandThEle.oriClassName) {
	                    this.expandThEle.oriClassName = this.expandThEle.oriClassName || this.expandThEle.className;
	                    // 切换图标
	                    this.expandThEle.toggleClassName = function () {
	                        if (_this4.expandThEle.className.indexOf('uf-table-expand-all') === -1) {
	                            _this4.expandThEle.className = _this4.expandThEle.oriClassName + ' uf-table-expand-all';
	                            _this4.expandThEle.isExpand = false;
	                        } else {
	                            _this4.expandThEle.className = _this4.expandThEle.oriClassName + ' uf-table-fold-all';
	                            _this4.expandThEle.isExpand = true;
	                        }
	                    };
	                    this.expandThEle.toggleClassName();
	                    this.expandThEle.addEventListener('click', this.expandAllEventListener.bind(this));
	                }
	            }
	        }
	    }, {
	        key: 'expandAllEventListener',
	        value: function expandAllEventListener() {
	            this.expandThEle && this.expandThEle.toggleClassName();
	            if (this.expandThEle.isExpand) {
	                var obj = this.getAllCanSelectRows();
	                this.onExpandedRowsChange(obj.rowKeys);
	            } else {
	                this.onExpandedRowsChange([]);
	            }
	        }
	        // 行展开收起相关的两个方法

	    }, {
	        key: 'onExpandedRowsChange',
	        value: function onExpandedRowsChange(expandedRows) {
	            this.setState({
	                expandedRowKeys: expandedRows
	            });
	            this.antdConfig.onExpandedRowsChange(expandedRows);
	        }
	        // 对编辑状态的表格进行数据提交调用的函数

	    }, {
	        key: '_cellSubmit',
	        value: function _cellSubmit(key, dataIndex, value) {
	            var _this5 = this;

	            var dataSource = [].concat(_toConsumableArray(this.__props.data));
	            var dataResult = dataSource.map(function (item) {
	                if (item[_this5.rowKey] === key) {
	                    item[dataIndex] = value;
	                }
	                return item;
	            });
	            // 使用UF的修改数据的方式
	            this.__setProps({ data: dataResult });
	        }
	        // 覆盖原生获取异步数据的函数

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {
	            var _this6 = this;

	            _utils.Utils.defer(function () {
	                if (!_this6.enum.loading) {
	                    _this6.getData(1);
	                    // 清空过滤状态
	                    // this.refreshTable(1);
	                }
	            });
	        }
	        // 异步获取数据

	    }, {
	        key: 'getData',
	        value: function getData(pageNum) {
	            var _this7 = this;

	            var url = this.__filtered.source.url;
	            var params = this.getSourceParams();
	            if (!url) {
	                return;
	            }
	            // 如果有pageNum，则置为对应页；否则，pageNum等于当前页
	            if (pageNum) {
	                this.pagination.current = pageNum;
	            } else {
	                pageNum = this.pagination.current || 1;
	            }
	            if (this.pagination.pageType === 'server') {
	                params = Object.assign({}, params, {
	                    page: pageNum,
	                    size: this.pagination.pageSize
	                });
	            }
	            // 当前请求的标号
	            // 快速多次相同的请求会被合并到第一个（ajax中实现）
	            var index = _utils.Utils.hash(params);
	            this.requestIndex = index;
	            // 调用通用source获取数据逻辑
	            this.__getSourceData({
	                params: params,
	                success: function success(data, res) {
	                    if (index !== _this7.requestIndex) {
	                        return;
	                    }
	                    var displayData = data || [];
	                    // 生成唯一key
	                    displayData = _this7.handleRowKeyFunc(displayData);
	                    if (_this7.pagination.pageType === 'server') {
	                        displayData = displayData.slice(0, _this7.pagination.pageSize);
	                    }
	                    // 实时翻译
	                    // 返回值为promise对象
	                    var promise = _this7.enum.realtimeTrans(displayData);
	                    promise.then(function () {
	                        _this7.pagination.total = +(res.total || res.count || data.length);
	                        _this7.__setProps({ data: displayData }, false);
	                        _this7.setState({ completeData: displayData });
	                        _this7.onRefreshData();
	                    });
	                },
	                onchange: function onchange(loading) {
	                    if (index !== _this7.requestIndex) {
	                        return;
	                    }
	                    _this7.setState({ loading: loading && _this7._showLoading });
	                },
	                error: function error(res) {
	                    _this7.pagination.total = 0;
	                    _this7.__setProps({ data: [] });
	                }
	            });
	        }
	        // 数据刷新

	    }, {
	        key: 'onRefreshData',
	        value: function onRefreshData() {
	            // 默认展开全部逻辑
	            if (this.antdConfig.defaultExpandAllRows) {
	                var obj = this.getAllCanSelectRows();
	                this.onExpandedRowsChange(obj.rowKeys);
	            }
	            this.forceUpdate();
	        }
	        // 刷新表格

	    }, {
	        key: 'refreshTable',
	        value: function refreshTable(page) {
	            // 清空某些控制状态，例如过滤
	            this.clearState();
	            this.__setProps({ data: this.state.completeData }, false);
	            if (this.__filtered.source.url) {
	                this.getData(page);
	            } else {
	                this.onRefreshData(this.state.completeData);
	            }
	        }
	        // 清空某些控制状态
	        // TODO: 清空的时机待考量，特别针对filter的情况，当前处理不太准确

	    }, {
	        key: 'clearState',
	        value: function clearState() {
	            this.setState({
	                selectedRowKeys: []
	            });
	            this.filter && this.filter.clearState();
	            this.titleRef && this.titleRef.clearState();
	            this.forceUpdate();
	        }
	        // 全屏或退出全屏

	    }, {
	        key: 'toggleFullScreen',
	        value: function toggleFullScreen() {
	            this.setState({
	                fullScreen: !this.state.fullScreen
	            });
	        }
	        // 展示全部字段

	    }, {
	        key: 'toShowAllTags',
	        value: function toShowAllTags() {
	            this.setState({
	                showAllTags: !this.state.showAllTags
	            });
	        }
	        // 通过Pagination组建设置展示多少条

	    }, {
	        key: 'onShowSizeChange',
	        value: function onShowSizeChange(current, size) {
	            this.pagination.pageSize = parseInt(size, 10);
	            this.forceUpdate();
	            if (this.pagination.onShowSizeChange) {
	                this.pagination.onShowSizeChange(current, size);
	            }
	        }
	    }, {
	        key: 'getAllCanSelectRows',
	        value: function getAllCanSelectRows() {
	            var _this8 = this;

	            var isAllPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	            var displayData = arguments[1];

	            displayData = displayData || (isAllPage ? this.state.completeData : this.__props.data);
	            var rowKey = this.rowKey;
	            var selectedRowKeys = [];
	            var selectedRows = [];
	            // 只有选择形式为复选框时才能进行全选
	            selectedRows = displayData.filter(function (record) {
	                if (_this8.rowSelection && _this8.rowSelection.disabledRow && _this8.rowSelection.disabledRow(record)) {
	                    // 当满足不可选条件时，不可以进行选择
	                    return false;
	                } else {
	                    selectedRowKeys.push(record[rowKey]);
	                    return true;
	                }
	            });
	            return {
	                rows: selectedRows,
	                rowKeys: selectedRowKeys
	            };
	        }
	    }, {
	        key: '_selectAllData',
	        value: function _selectAllData(isAllPage) {
	            var _getAllCanSelectRows = this.getAllCanSelectRows(isAllPage),
	                rows = _getAllCanSelectRows.rows,
	                rowKeys = _getAllCanSelectRows.rowKeys;
	            // 通过组件的onChange函数完成全选


	            this.rowOnChange(rowKeys, rows);
	        }
	        // 行change时触发此函数

	    }, {
	        key: 'rowOnChange',
	        value: function rowOnChange(selectedRowKeys, selectedRows) {
	            this.selectedRows = selectedRows;
	            this.setState({
	                selectedRowKeys: selectedRowKeys
	            });
	            if (this.rowSelection.onChange) {
	                this.rowSelection.onChange(selectedRowKeys, selectedRows);
	            }
	        }
	    }, {
	        key: 'onPageChange',
	        value: function onPageChange(page) {
	            var _this9 = this;

	            this.pagination.current = page;
	            if (this.pagination.pageType === 'server') {
	                _utils.Utils.defer(function () {
	                    return _this9.getData(page);
	                });
	            }
	            this.forceUpdate();
	        }
	        // 从一个对象中获取需要用于过滤的关键字

	    }, {
	        key: '_getKeyDataOfObject',
	        value: function _getKeyDataOfObject(obj) {
	            var val = '';
	            // 如果传入的是一个数组，则递归的遍历这个数组，拿出数组中各个对象的关键字
	            if (_utils.Utils.typeof(obj, 'array')) {
	                var tArr = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var t = _step.value;

	                        tArr.push(this._getKeyDataOfObject(t));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                val = tArr.join('\n');
	            } else if (_utils.Utils.typeof(obj, 'object')) {
	                // 如果字段是个对象，则优先获取Title字段，否则获取该对象的第一个字段
	                if ('title' in obj) {
	                    val = obj['title'];
	                } else {
	                    val = JSON.stringify(obj);
	                }
	            } else if (obj) {
	                val = obj.toString ? obj.toString() : obj;
	            }
	            return val;
	        }
	    }, {
	        key: '_syntaxHighlight',
	        value: function _syntaxHighlight(json) {
	            var _this10 = this;

	            if (typeof json !== 'string') {
	                json = JSON.stringify(json, undefined, 2);
	            }
	            json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');
	            var reg = /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)/g;
	            return json.replace(reg, function (match) {
	                var cls = 'number';
	                if (/^"/.test(match)) {
	                    if (/:$/.test(match)) {
	                        cls = 'key';
	                    } else {
	                        try {
	                            var type = JSON.parse(match);
	                            if (_typeof(JSON.parse(type)) === 'object') {
	                                return _this10._syntaxHighlight(JSON.parse(type));
	                            } else {
	                                cls = 'string';
	                            }
	                        } catch (e) {
	                            cls = 'string';
	                        }
	                    }
	                } else if (/true|false/.test(match)) {
	                    cls = 'boolean';
	                } else if (/null/.test(match)) {
	                    cls = 'null';
	                }
	                return '<span class="' + cls + '">' + match + '</span>';
	            });
	        }
	        // _operation 为一个特殊属性，此属性中可以使用特定的action，关联table的crud等功能

	    }, {
	        key: 'handleAction',
	        value: function handleAction(oConfig, record) {
	            var config = _utils.Utils.clone(oConfig);
	            var arr = config;
	            if (!_utils.Utils.typeof(arr, 'array')) {
	                arr = [config];
	            }
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var v = _step2.value;

	                    // action的值与crud中的配置的key一一对应
	                    if (v.action && !v.control) {
	                        // BaseComponet不接受更新函数，使用control作为临时解决方案
	                        v.control = {
	                            type: 'bind',
	                            trigger: 'onClick',
	                            target: this.showCrud,
	                            params: [v.action, record]
	                        };
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return config;
	        }
	        // 对用户传入数据进行处理

	    }, {
	        key: 'getColumnConfig',
	        value: function getColumnConfig(item) {
	            var _this11 = this;

	            var defaultColumn = {
	                title: '',
	                key: '',
	                dataIndex: '',
	                // 默认是从用户配置中获取此字段，对于特殊的格式再做处理
	                render: null,
	                sorter: null,
	                colSpan: null,
	                width: null,
	                className: '',
	                fixed: false,
	                onCellClick: null,
	                children: null
	            };

	            getNeedObject(defaultColumn, item);
	            if (_utils.Utils.typeof(defaultColumn.title, 'object')) {
	                defaultColumn.title = this.__analysis(defaultColumn.title);
	            }
	            if (defaultColumn.dataIndex === '_operation') {
	                defaultColumn.className += ' uf-operation';
	            }
	            // 自定义样式参数
	            if (item.minWidth || item.style) {
	                var style = item.style || {};
	                var orender = item.render;
	                item.render = function (v, row) {
	                    for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	                        params[_key - 2] = arguments[_key];
	                    }

	                    if (_utils.Utils.typeof(style, 'function')) {
	                        style = style(v, row);
	                    }
	                    if (item.minWidth) {
	                        Object.assign(style, { minWidth: item.minWidth });
	                    }
	                    return {
	                        type: 'div',
	                        style: style,
	                        content: orender ? orender.apply(undefined, [v, row].concat(params)) : v
	                    };
	                };
	            }
	            // 用户配置的render是一个uf组件配置，在此转为dom
	            if (!!item.render) {
	                defaultColumn.render = function (text, record, index) {
	                    // 配置中的render返回的是配置，配置再解析后才是真正的元素
	                    var config = item.render(text, record, index);
	                    // _operation 为一个特殊属性，此属性中可以使用特定的action，关联table的crud等功能
	                    if (defaultColumn.dataIndex === '_operation') {
	                        config = _this11.handleAction(config, record);
	                    }
	                    // 根据是否可编辑状态来判断是否包裹编辑组件
	                    return _this11.__analysis(config);
	                };
	            }
	            // 将用户配置的单列筛选选项转换成antd的配置
	            if (!!item.filter) {
	                var filterConf = this.filter.handleFilterConf(item.filter, item.dataIndex);
	                if (filterConf) {
	                    defaultColumn = Object.assign({}, defaultColumn, filterConf);
	                }
	            }
	            // 文字过长，鼠标移入时进行气泡展示
	            if (!!item.ellipsis) {
	                defaultColumn.render = function (text, record, index) {
	                    var newText = item.render ? _this11.__analysis(item.render(text, record, index)) : text;
	                    var returnText = _react2.default.createElement(
	                        _antd.Popover,
	                        { content: newText },
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'uf-table-td-ellipsis' },
	                            newText
	                        )
	                    );
	                    // 根据是否可编辑状态来判断是否包裹编辑组件
	                    return returnText;
	                };
	            }
	            // 对特殊格式进行展示处理，包括html格式，json格式，duration格式
	            if (item.textType) {
	                var textType = item.textType.toString().toLowerCase();
	                // let elliClass = v['ellipsis'] ? ' ellipsis' : '';
	                // style.className += elliClass;
	                defaultColumn.render = function (text, record, index) {
	                    var newText = text;
	                    switch (textType) {
	                        case 'duration':
	                            {
	                                var timeDiff = (+new Date() - +new Date(Date.parse(text.replace(/-/g, '/')))) / 1000;
	                                var dayTime = Math.floor(timeDiff / (24 * 3600));
	                                var hourTime = Math.floor(timeDiff % (24 * 3600) / 3600);
	                                var minuteTime = Math.floor(timeDiff % (24 * 3600) % 3600 / 60);
	                                var secTime = Math.floor(timeDiff % (24 * 3600) % 3600 % 60);
	                                var timeArr = [];
	                                dayTime > 0 && timeArr.push(dayTime + '天');
	                                hourTime > 0 && timeArr.push(hourTime + '时');
	                                minuteTime > 0 && timeArr.push(minuteTime + '分');
	                                dayTime === 0 && hourTime === 0 && minuteTime === 0 && secTime > 0 && timeArr.push(secTime + '秒');
	                                var tdData = timeArr.join('');
	                                // 若用户配置了render，则将转换之后的数据给用户的render
	                                newText = item.render ? _this11.__analysis(item.render(tdData, record, index)) : tdData;
	                                break;
	                            }
	                        case 'json':
	                            {
	                                // 会出现重复json字符串编码现象,加入类型判断
	                                var json = typeof text === 'string' ? text : JSON.stringify(text, null, 2);
	                                if (text && json !== '""') {
	                                    var html = _this11._syntaxHighlight(json);
	                                    newText = _react2.default.createElement(
	                                        _antd.Popover,
	                                        { content: _react2.default.createElement('pre', { className: 'json', dangerouslySetInnerHTML: { __html: html } }) },
	                                        _react2.default.createElement('pre', { className: 'json', dangerouslySetInnerHTML: { __html: html } })
	                                    );
	                                }
	                                break;
	                            }
	                        case 'html':
	                            newText = _react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: text } });
	                            break;
	                        case 'array':
	                            break;
	                        // 默认将格式进行一下转换然后输出
	                        default:
	                            text = _this11._getKeyDataOfObject(text);
	                            newText = item.render ? _this11.__analysis(item.render(text, record, index)) : text;
	                            break;
	                    }
	                    return newText;
	                };
	            }
	            // 支持传入type，自定义数据展示组件
	            // if (item.type) {
	            //     let oriRender = defaultColumn.render;
	            //     defaultColumn.render = (text, record, index) => {
	            //         let oriResult = oriRender ? oriRender(text, record, index) : text;
	            //         return this.__analysis(Object.assign({content: oriResult}, item.type));
	            //     }
	            // }
	            // 根据是否可编辑状态来判断是否包裹编辑组件
	            if (item.editable) {
	                // 声明获取前面设置过的配置
	                var oRender = defaultColumn.render;
	                defaultColumn.render = function (text, record, index) {
	                    var displayStr = !oRender ? text : oRender(text, record, index);
	                    var editableConf = item.editable;
	                    // 支持配置为一个函数
	                    if (_utils.Utils.typeof(editableConf, 'function')) {
	                        editableConf = editableConf(text, record, index);
	                    }
	                    // 如果editableConf返回为false，则直接返回原render
	                    if (!editableConf) {
	                        return displayStr;
	                    }
	                    return _react2.default.createElement(_Edit2.default, { parent: _this11, _factory: _this11._factory,
	                        value: text,
	                        columnChild: displayStr,
	                        editConf: editableConf,
	                        api: editableConf.api,
	                        cellSubmit: _this11._cellSubmit.bind(_this11, record[_this11.rowKey], defaultColumn.dataIndex)
	                    });
	                };
	            }
	            // 处理 cellColSpan 和 cellRowSpan 参数
	            defaultColumn = this.colSpanHandler(defaultColumn, item);
	            // 处理表头合并,如果有children字段，则进行递归处理
	            if (!!item.children) {
	                defaultColumn.children = [];
	                for (var k in item.children) {
	                    defaultColumn.children.push(this.getColumnConfig(item.children[k]));
	                }
	            }
	            return defaultColumn;
	        }
	    }, {
	        key: 'renderColumns',
	        value: function renderColumns() {
	            var _this12 = this;

	            // 列功能相关
	            var antdColumnConfig = [];
	            for (var i in this.columns) {
	                var item = this.columns[i];
	                // 如果列为枚举类型，则进行枚举转换
	                if (item.enum) {
	                    item = this.enum.handleColumn(item);
	                }
	                // 2018-12-24，增加权限控制，可以直接给表格每一列绑定权限点
	                if (!this.state.showAllTags && item.display === false || !this.__authority(item)) {
	                    // 在展示部分字段下过滤掉不展示的列数据
	                    continue;
	                }
	                antdColumnConfig.push(this.getColumnConfig(item));
	            }
	            // 提示信息，主要用于行不可选是勾选框那里的提示
	            if (this.__props.rowTooltips) {
	                antdColumnConfig.unshift({
	                    title: '',
	                    key: '_tooltips',
	                    className: 'uf-row-tooltips',
	                    render: function render() {
	                        var _props;

	                        var content = (_props = _this12.__props).rowTooltips.apply(_props, arguments);
	                        if (content) {
	                            return _react2.default.createElement(
	                                'span',
	                                { className: 'uf-row-tooltips-content' },
	                                _react2.default.createElement(
	                                    _antd.Tooltip,
	                                    { title: content, placement: 'right' },
	                                    _react2.default.createElement(_antd.Icon, { type: _this12.__props.rowTooltipsIcon || 'question-circle' })
	                                )
	                            );
	                        }
	                        return '';
	                    }
	                });
	            }
	            return antdColumnConfig;
	        }
	        // 处理 cellColSpan 和 cellRowSpan 参数

	    }, {
	        key: 'colSpanHandler',
	        value: function colSpanHandler(defaultColumn, _ref) {
	            var cellColSpan = _ref.cellColSpan,
	                cellRowSpan = _ref.cellRowSpan;

	            if (cellColSpan || cellRowSpan) {
	                var origin = defaultColumn.render;
	                defaultColumn.render = function (text, row, index) {
	                    var obj = {
	                        children: origin ? origin(text, row, index) : text,
	                        props: {}
	                    };
	                    if (_utils.Utils.typeof(cellColSpan, 'function')) {
	                        obj.props.colSpan = cellColSpan(text, row, index);
	                    }
	                    if (_utils.Utils.typeof(cellRowSpan, 'function')) {
	                        obj.props.rowSpan = cellRowSpan(text, row, index);
	                    }
	                    return obj;
	                };
	            }
	            return defaultColumn;
	        }
	    }, {
	        key: 'renderRowSelection',
	        value: function renderRowSelection() {
	            var _this13 = this;

	            if (!this.rowSelection) {
	                return null;
	            }
	            var rowSelection = {
	                type: 'checkbox',
	                hideDefaultSelections: true
	            };
	            getNeedObject(rowSelection, this.rowSelection);
	            // 对行进行受控选择
	            rowSelection.selectedRowKeys = this.state.selectedRowKeys;
	            if (this.rowSelection.disabledRow) {
	                rowSelection.getCheckboxProps = function (record) {
	                    return { disabled: _this13.rowSelection.disabledRow(record) };
	                };
	            }
	            // 任何一行的选择与否都会触发改方法
	            rowSelection.onChange = this.rowOnChange.bind(this);
	            rowSelection.onSelect = this.rowSelection.onSelect;
	            rowSelection.onSelectAll = this.rowSelection.onSelectAll;
	            rowSelection.onSelectInvert = this.rowSelection.onSelectInvert;
	            if (this.rowSelection.selections) {
	                // 在自定义选择项中增加全选功能
	                rowSelection.selections = [{
	                    key: 'uf-table-select-all',
	                    text: '全选',
	                    onSelect: this._selectAllData.bind(this, true)
	                }];
	                if (_utils.Utils.typeof(this.rowSelection.selections, 'array')) {
	                    rowSelection.selections.push(this.rowSelection.selections);
	                }
	            }

	            return rowSelection;
	        }
	    }, {
	        key: 'renderPagination',
	        value: function renderPagination() {
	            if (!this.__props.pagination) {
	                return false;
	            }
	            var pagination = {
	                pageSize: null,
	                showSizeChanger: false,
	                pageSizeOptions: null,
	                showQuickJumper: false,
	                size: '',
	                simple: false,
	                showTotal: function showTotal(total) {
	                    return _react2.default.createElement(
	                        'span',
	                        null,
	                        '共' + total + '条数据'
	                    );
	                },
	                current: 1,
	                total: 0,
	                onShowSizeChange: null,
	                onChange: null
	            };
	            getNeedObject(pagination, this.pagination);
	            this._inject(pagination, 'onChange', this.onPageChange.bind(this));
	            this._inject(pagination, 'onShowSizeChange', this.onShowSizeChange.bind(this));
	            return pagination;
	        }
	    }, {
	        key: 'renderTitle',
	        value: function renderTitle() {
	            var _this14 = this;

	            return [
	            // 增删改查
	            _react2.default.createElement(
	                _Crud2.default,
	                { key: 'crud', _factory: this._factory, parent: this, 'enum': this.enum,
	                    ref: function ref(ele) {
	                        return _this14.crudRef = ele;
	                    },
	                    config: this.__props.crud || {} },
	                _react2.default.createElement(_Title2.default, { key: 'title', _factory: this._factory, parent: this, config: this.title,
	                    ref: function ref(ele) {
	                        return _this14.titleRef = ele;
	                    } })
	            ),
	            // 导出功能
	            _react2.default.createElement(_Export2.default, { key: 'export', parent: this, wrappedComponentRef: function wrappedComponentRef(ele) {
	                    return _this14.exportRef = ele;
	                } })];
	        }
	    }, {
	        key: 'getClassName',
	        value: function getClassName() {
	            var className = 'uf-table';
	            className += this.state.fullScreen ? ' uf-fullscreen' : '';
	            // 额外加一个mini类型的size和一个crowd类型的size
	            var size = this.state.antdConfig.size;
	            if (size === 'mini' || size === 'crowd') {
	                className += ' uf-table-' + size;
	            }
	            if (this.pagination && this.pagination.layout) {
	                if (this.pagination.layout === 'left') {
	                    className += ' uf-table-pagination-left';
	                } else if (this.pagination.layout === 'center') {
	                    className += ' uf-table-pagination-center';
	                }
	            }
	            if (!this.title) {
	                className += ' uf-table-no-title';
	            }
	            // 当同时有提示信息且有复选框时，修改样式节省空间
	            if (this.__props.rowTooltips && this.rowSelection) {
	                className += ' uf-table-special-tooltips';
	            }
	            return className;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this15 = this;

	            // 额外加一个mini类型的size和一个crowd类型的size
	            var size = this.state.antdConfig.size;
	            if (size === 'mini' || size === 'crowd') {
	                size = 'small';
	            }
	            var _expandedRowRender = this.state.antdConfig.expandedRowRender;
	            var expandedRowKeys = this.state.expandedRowKeys;
	            var _footer = this.state.antdConfig.footer;
	            return _react2.default.createElement(
	                'div',
	                this.__getCommonProps({ className: this.getClassName() }),
	                _react2.default.createElement(_antd.Table, _extends({}, this.state.antdConfig, { size: size,
	                    title: function title() {
	                        return _this15.renderTitle();
	                    },
	                    onExpandedRowsChange: this.onExpandedRowsChange.bind(this)
	                }, _expandedRowRender && { expandedRowRender: function expandedRowRender(row) {
	                        return _this15.__analysis(_expandedRowRender(row));
	                    } }, expandedRowKeys && { expandedRowKeys: expandedRowKeys }, _footer && (_utils.Utils.typeof(_footer, 'function') ? { footer: function footer(currentPageData) {
	                        return _this15.__analysis(_footer(currentPageData));
	                    } } : { footer: function footer(v) {
	                        return _this15.__analysis(_footer);
	                    } }), {
	                    dataSource: this.__props.data,
	                    columns: this.renderColumns(),
	                    rowSelection: this.renderRowSelection(),
	                    pagination: this.renderPagination(),
	                    loading: this.state.loading }))
	            );
	        }
	    }]);

	    return NewTable;
	}(_base.BaseComponent);

	exports.default = NewTable;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(111);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table扩展 - 增删改查等功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	


	var Crud = function (_BaseComponent) {
	    _inherits(Crud, _BaseComponent);

	    function Crud(props) {
	        _classCallCheck(this, Crud);

	        // 其本身无需初始化组件
	        // this.__init();
	        var _this = _possibleConstructorReturn(this, (Crud.__proto__ || Object.getPrototypeOf(Crud)).call(this, props, { type: 'table-crud' }));

	        _this.parent = props.parent;
	        _this.enum = props.enum;
	        // 存储table的全部字段名称对应关系，以在form中复用
	        _this.columnName = {};
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = _this.parent.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;

	                _this.columnName[v.dataIndex] = v.title;
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        _this.configBefore = null;
	        _this.configAfter = null;
	        _this.oConfig = null;
	        _this.init();
	        return _this;
	    }
	    // 不必多次刷新


	    _createClass(Crud, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            if (this.refresh) {
	                this.refresh = false;
	                return true;
	            }
	            return false;
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var newEnum = JSON.stringify(nextProps.enum.data);
	            var newConf = JSON.stringify(nextProps.config);
	            // TODO: 这里如果函数变化是检测不到的
	            if (newEnum !== this.currentEnum || newConf !== this.currentConf) {
	                this.currentEnum = newEnum;
	                this.currentConf = newConf;
	                this.refresh = true;
	                this.init(nextProps);
	            }
	        }
	    }, {
	        key: 'init',
	        value: function init(nextProps) {
	            var _this2 = this;

	            var props = nextProps || this.props;
	            this.enum = props.enum;
	            // 批量导入/编辑的表单配置
	            var batchAddFormConf = {
	                layout: {
	                    type: 'vertical'
	                },
	                items: [{
	                    type: 'textarea', name: 'data', default: '', required: true,
	                    rows: 6, style: { width: '100%' }
	                }]
	            };
	            var config = props.config || {};
	            var result = {};
	            // 额外存储的临时配置，用于配置复用
	            var tempConf = {};

	            var _loop = function _loop(i) {
	                var item = _this2.__getConf(_utils.Utils.clone(config[i]));
	                var action = _this2._getAction(i);
	                // api属性不能复用
	                item.api = _utils.Utils.varietyFormat(item.api, 'url');
	                switch (action) {
	                    // 新增弹框的配置
	                    case 'add':
	                        // add 可以复用 edit 的配置，可以减少配置书写
	                        item.title = item.title || '新增：';
	                        tempConf['edit'] && (item = Object.assign(_utils.Utils.clone(tempConf['edit']), item));
	                        item.okText = item.okText || '提交';
	                        item.api.method = item.api.method || 'post';
	                        break;
	                    // 编辑弹框的配置
	                    case 'edit':
	                        // 处理复用相关参数
	                        item.title = item.title || '编辑：';
	                        item.okText = item.okText || '提交';
	                        item.api.method = item.api.method || 'put';
	                        // paramsHandler 执行之前执行
	                        // 过滤掉翻译字段 xxx.fyi
	                        item.api._paramsHandler = function (params) {
	                            for (var _i in _this2.enum.data) {
	                                delete params[_i + '.fyi'];
	                            }
	                            return params;
	                        };
	                        item = _this2.handleReuse(item, tempConf['add']);
	                        break;
	                    // 搜索弹框的配置
	                    case 'search':
	                        // 点击搜索时，对Table进行赋值操作
	                        _this2._inject(item, 'onSubmit', function (params) {
	                            _this2.parent.set({ params: params });
	                        });
	                        // 如果没定义type，则使用默认处理逻辑
	                        if (!item.type) {
	                            // 处理复用相关参数
	                            item.title = item.title || '高级查询：';
	                            item.okText = item.okText || '查询';
	                            item = _this2.handleReuse(item, tempConf['add']);
	                            // 移除必填限制以及校验规则
	                            if (item.form) {
	                                item.form.items.forEach(function (v) {
	                                    delete v.disabled;
	                                    delete v.rules;
	                                    delete v.required;
	                                });
	                            }
	                        }
	                        break;
	                    // 删除确认框的配置
	                    case 'delete':
	                        // 默认把参数处理为：只返回 id（rowKey对应的字段）
	                        item.title = item.title || '删除：';
	                        item.api.method = item.api.method || 'delete';
	                        item.api.paramsHandler = item.api.paramsHandler || function (params) {
	                            return _defineProperty({}, _this2.parent.rowKey, params[_this2.parent.rowKey]);
	                        };
	                        item.render = item.render || function () {
	                            return '确定要删除吗？';
	                        };
	                        item.okText = item.okText || '删除';
	                        break;
	                    // 批量查询
	                    case 'batchSearch':
	                        // 点击搜索时，对Table进行赋值操作
	                        _this2._inject(item, 'onSubmit', function (params) {
	                            _this2.parent.set({ params: params });
	                        });
	                        item.okText = item.okText || '查询';
	                        break;
	                    // 批量展示table中选中的数据
	                    case 'batchShow':
	                        item.okText = item.okText || '关闭';
	                        item.footer = item.footer !== undefined ? item.footer : [{
	                            type: 'button', mode: 'primary', action: 'cancel', content: item.okText
	                        }];
	                        break;
	                    // 批量新增弹框的配置
	                    case 'batchAdd':
	                        item.okText = item.okText || '提交';
	                        // form 需用指定的，此弹框用户传入的form配置无效
	                        item.form = _utils.Utils.clone(batchAddFormConf);
	                        item.api.method = item.api.method || 'post';
	                        _this2._bindParamsHandler(i, item);
	                        break;
	                    // 批量新增弹框的配置
	                    case 'batchEdit':
	                        item.okText = item.okText || '提交';
	                        // form 需用指定的，此弹框用户传入的form配置无效
	                        item.form = _utils.Utils.clone(batchAddFormConf);
	                        item.api.method = item.api.method || 'put';
	                        _this2._bindParamsHandler(i, item);
	                        // batchEdit 可以复用 batchAdd 的配置，可以减少配置书写
	                        item = _this2.handleReuse(item, tempConf['batchAdd']);
	                        break;
	                    // 批量删除确认框的配置
	                    case 'batchDelete':
	                        // 默认把参数处理为：只返回英文逗号分隔的 id[s]（rowKey对应的字段）如：{ids: 123,456}
	                        item.api.method = item.api.method || 'delete';
	                        item.api.paramsHandler = item.api.paramsHandler || function (params) {
	                            return _defineProperty({}, _this2.parent.rowKey + 's', params.map(function (v) {
	                                return v[_this2.parent.rowKey];
	                            }).join(','));
	                        };
	                        item.render = item.render || function () {
	                            return '确定要执行『 批量删除 』操作吗？';
	                        };
	                        break;
	                    // 详情框的配置
	                    case 'details':
	                        item = _this2.handleDetails(item);
	                        // 详情页以右侧抽屉形式展示
	                        item.type = item.type || 'drawer';
	                        if (item.list) {
	                            var list = item.list;
	                            item.render = function (row) {
	                                return Object.assign({
	                                    type: 'list',
	                                    bordered: false,
	                                    data: row
	                                }, list);
	                            };
	                            delete item.list;
	                        }
	                    // break;
	                    // 展示信息弹框配置。会在render中传入当前数据
	                    case 'show':
	                    default:
	                        item.okText = item.okText || '关闭';
	                        item.footer = item.footer !== undefined ? item.footer : [{
	                            type: 'button', mode: 'primary', action: 'cancel', content: item.okText
	                        }];
	                        break;
	                }
	                if (item.position && item.type !== 'modal') {
	                    item.type = item.type || 'dashboard';
	                }
	                item.type = item.type || 'modal';
	                item.name = _this2._getModalName(i);
	                item.key = item.name;
	                // 默认点击提交时自动刷新表格。
	                if (item.autoReload !== false) {
	                    // 不用this.parent._inject，edit复用add的配置时，这里回把两个同样的函数合并到一起，导致table刷新两次
	                    _this2._inject(item, 'onSuccess', function () {
	                        return new Promise(function (resolve, reject) {
	                            // 删除数据时，当删除最后一页数据后，分页应该往前调1页
	                            var pageNum = _this2.getLastPageNum(item, action);
	                            setTimeout(function () {
	                                _this2.parent.getData(pageNum);
	                                resolve();
	                            }, +item.autoReload || 0);
	                        });
	                    });
	                }
	                // 如果存在form，则对items进行处理
	                if (item.form && item.form.items) {
	                    item.form.items = _this2.handleFormItems(item.form.items);
	                }
	                if (item.type === 'form' && item.items) {
	                    item.key = _utils.Utils.uniqueId();
	                    item.items = _this2.handleFormItems(item.items);
	                }
	                result[i] = item;
	                // 存储的复用配置用action做区分
	                tempConf[action] = item;
	            };

	            for (var i in config) {
	                _loop(i);
	            }
	            this.oConfig = result;
	            this.configBefore = Object.values(result).filter(function (v) {
	                return v.position === 'beforeHeader';
	            });
	            this.configAfter = Object.values(result).filter(function (v) {
	                return v.position !== 'beforeHeader';
	            });
	        }
	    }, {
	        key: 'getLastPageNum',
	        value: function getLastPageNum(item, action) {
	            var pagination = this.parent.pagination;
	            var pageNum = pagination.current;
	            if (action.indexOf('elete') > -1) {
	                var lastPageNum = Math.ceil(pagination.total / pagination.pageSize);
	                var deleteNum = 0;
	                if (pagination.current >= lastPageNum) {
	                    if (action === 'delete') {
	                        deleteNum = 1;
	                    } else if (action === 'batchDelete') {
	                        deleteNum = this.parent.getSelected().length;
	                    }
	                    var newLastPageNum = Math.ceil((pagination.total - deleteNum) / pagination.pageSize);
	                    if (newLastPageNum < lastPageNum) {
	                        pageNum = newLastPageNum;
	                    }
	                }
	            }
	            return pageNum;
	        }
	        // 如果存在form，则对items进行处理

	    }, {
	        key: 'handleFormItems',
	        value: function handleFormItems(items) {
	            // 如果没写label，则复用table的title
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var v = _step2.value;

	                    var _getConf = this.__getConf(v),
	                        label = _getConf.label,
	                        name = _getConf.name;

	                    if (!label && this.columnName[name]) {
	                        v.label = this.columnName[name];
	                        v.label += v.label.indexOf(':') > -1 ? '' : ': ';
	                    }
	                }
	                // 处理新增/编辑的 form.items 配置，枚举类型转自动添加options
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            items = this.enum.handleForm(items);
	            return items;
	        }
	        // 处理配置复用相关参数

	    }, {
	        key: 'handleReuse',
	        value: function handleReuse(item, reuseConf) {
	            // 可以复用的配置，以减少配置书写
	            if (reuseConf) {
	                item = Object.assign(_utils.Utils.clone(reuseConf), item);
	                // 如果未配置api.url，则复用api配置
	                if (!item.api.url) {
	                    item.api = Object.assign({}, reuseConf.api, item.api);
	                }
	            }

	            // 可以通过forbidden字段指定编辑的时候哪些字段不可编辑。便于复用add的form时
	            if (item.forbidden && item.form) {
	                item.form.forbidden = item.forbidden.split(',');
	                delete item.forbidden;
	            }
	            // 在form.items中过滤掉需要删除的属性
	            if (item.remove && item.form) {
	                item.form.items = item.form.items.filter(function (v) {
	                    return item.remove.split(',').indexOf(v.name) === -1;
	                });
	                delete item.remove;
	            }
	            return item;
	        }
	        // 详情框配置处理

	    }, {
	        key: 'handleDetails',
	        value: function handleDetails(item) {
	            // 如果详情框既没有配置list，又没有配置render，则复用table的column部分属性
	            if (!item.list && !item.render) {
	                var columns = [];
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = this.parent.columns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var v = _step3.value;

	                        var column = { title: v.title, dataIndex: v.dataIndex, render: v.render };
	                        if (v.dataIndex === '_operation') {
	                            continue;
	                        }
	                        // 如果是翻译字段，则将dataIndex改为翻译后的字段
	                        if (v.enum && !v.render) {
	                            column.dataIndex = column.dataIndex + '.fyi';
	                            column.render = function (i) {
	                                return i;
	                            };
	                        }
	                        // 去掉长字符串折叠
	                        if (v.ellipsis || !column.render) {
	                            delete column.render;
	                        }
	                        columns.push(column);
	                    }
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }

	                item.list = { columns: columns };
	            }
	            return item;
	        }

	        // 展示各种弹框框

	    }, {
	        key: 'showCrud',
	        value: function showCrud(key, record) {
	            var visible = arguments.length <= 3 ? undefined : arguments[3];
	            var action = this._getAction(key);
	            var modal = this.__getComponent(this._getModalName(key));
	            if (modal) {
	                // 除批量编辑需要额外操作，其他都是直接展示即可
	                switch (action) {
	                    case 'batchEdit':
	                        this._showBatchEdit(key, visible);
	                        break;
	                    case 'batchDelete':
	                        this._showBatchDelete(key, visible);
	                        break;
	                    case '_showBatchShow':
	                        this._showBatchShow(key, visible);
	                        break;
	                    default:
	                        modal.show(record, visible);
	                }
	            }
	        }

	        // 获取crud中某项配置的action属性：如果没有action属性，则返回配置的key值

	    }, {
	        key: '_getAction',
	        value: function _getAction(key) {
	            var config = this.props.config;
	            // COMPAT: action 参数为兼容以前用法，不可删除
	            return config[key] && (config[key].mode || config[key].action) || key;
	        }
	        // 生成弹框名称，唯一，table的key+crud的key

	    }, {
	        key: '_getModalName',
	        value: function _getModalName(key) {
	            // 如果用户自己配了name，使用用户的name
	            var config = this.props.config;
	            if (config[key] && config[key].name) {
	                return config[key].name;
	            }
	            return '__' + this.parent.key + '-' + key;
	        }
	        // 生成批量编辑的字符串

	    }, {
	        key: '_getStrByList',
	        value: function _getStrByList(key, datas) {
	            var conf = this.oConfig[key];
	            var keys = conf.keys.split(',');
	            // 源数据转换成字符串展示到页面的批量编辑框时，对每个字段的处理逻辑
	            var handler = conf.keysHandler && conf.keysHandler.stringify;
	            var list = this.enum.encodeEnum(datas, keys);
	            var str = '';
	            list.forEach(function (row, index) {
	                var tmp = [];
	                var _iteratorNormalCompletion4 = true;
	                var _didIteratorError4 = false;
	                var _iteratorError4 = undefined;

	                try {
	                    for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                        var v = _step4.value;

	                        var value = row[v];
	                        // 留有口子，可分别对每个字段进行自定义处理
	                        handler && (value = handler(v, value, datas[index]));
	                        // 当数据为对象或数组时，格式化成字符串
	                        if (_utils.Utils.typeof(value, ['object', 'array'])) {
	                            tmp.push(JSON.stringify(value));
	                        } else if (value === undefined || value === null) {
	                            tmp.push('');
	                        } else {
	                            tmp.push(value);
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError4 = true;
	                    _iteratorError4 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                            _iterator4.return();
	                        }
	                    } finally {
	                        if (_didIteratorError4) {
	                            throw _iteratorError4;
	                        }
	                    }
	                }

	                str += tmp.join(',') + '\n';
	            });
	            return str;
	        }
	        // 根据字符串转换成要提交的数据对象

	    }, {
	        key: '_getListByStr',
	        value: function _getListByStr(key, str) {
	            var conf = this.oConfig[key];
	            var keys = conf.keys.split(',');
	            // 对用户输入的数据进行解析转换，将每个字段转换成提交给后端的数据
	            var handler = conf.keysHandler && conf.keysHandler.parse;
	            var strArr = str.split('\n');
	            var result = [];
	            var error = [];
	            strArr.forEach(function (row, index) {
	                row = row.trim();
	                if (row) {
	                    // 处理包含json串的情况
	                    // 目前只支持结构比较简单的json串
	                    var jsonReg = /\[.*?\]|\{.*?\}/g;
	                    var jsonHolder = {};
	                    var count = 0;
	                    row = row.replace(jsonReg, function (str) {
	                        var tmpName = '$jsonHolder' + ++count;
	                        jsonHolder[tmpName] = str;
	                        return tmpName;
	                    });
	                    var _strArr = row.split(',');
	                    if (_strArr.length !== keys.length) {
	                        var gap = _strArr.length - keys.length;
	                        error.push('\u7B2C\u3010' + (index + 1) + '\u3011\u884C\u6570\u636E\u5B57\u6BB5\u4F4D\u6570\u4E0D\u6B63\u786E(' + ((gap > 0 ? '多出' : '缺失') + gap) + '\u4E2A\u5B57\u6BB5)\uFF0C\u8BF7\u68C0\u67E5\uFF01');
	                    }
	                    // 分离后再把占位符复原
	                    var values = _strArr.map(function (text, index) {
	                        if (text.indexOf('$jsonHolder') > -1) {
	                            // 并把json转换为原数据格式
	                            text = jsonHolder[text];
	                            // 如果有处理函数则只需处理函数，否则执行默认的json解析
	                            // 因为没法和原数据行对齐，所以不传递原数据
	                            text = handler ? handler(keys[index], text) : JSON.parse(text);
	                        } else {
	                            handler && (text = handler(keys[index], text));
	                        }
	                        return text;
	                    });
	                    var _item = {};
	                    var _iteratorNormalCompletion5 = true;
	                    var _didIteratorError5 = false;
	                    var _iteratorError5 = undefined;

	                    try {
	                        for (var _iterator5 = keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                            var v = _step5.value;

	                            _item[v] = values.shift();
	                        }
	                    } catch (err) {
	                        _didIteratorError5 = true;
	                        _iteratorError5 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                                _iterator5.return();
	                            }
	                        } finally {
	                            if (_didIteratorError5) {
	                                throw _iteratorError5;
	                            }
	                        }
	                    }

	                    result.push(_item);
	                }
	            });
	            if (error.length > 0) {
	                _antd.Modal.error({
	                    title: '注意：',
	                    content: error.join('\n')
	                });
	                return false;
	            }
	            return result;
	        }
	        // 展示批量编辑框

	    }, {
	        key: '_showBatchEdit',
	        value: function _showBatchEdit(key) {
	            var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            var datas = this.parent.getSelected();
	            if (!(datas && datas.length > 0)) {
	                _antd.message.warning('请先在表格中选择至少一条数据，再执行操作。', 3.5);
	                return;
	            }
	            if (this.oConfig[key] && this.oConfig[key].keys) {
	                var str = this._getStrByList(key, datas);
	                var modal = this.__getComponent(this._getModalName(key));
	                if (modal) {
	                    // 在modal上存储一份源数据
	                    modal.set({ oriData: visible ? datas : '' });
	                    modal.show({ data: str }, visible);
	                }
	            } else {
	                console.error('there is no property "batchEdit" or "batchEdit.keys" in table config');
	            }
	        }
	        // 绑定校验逻辑

	    }, {
	        key: '_bindParamsHandler',
	        value: function _bindParamsHandler(key, item) {
	            var _this3 = this;

	            item.api._paramsHandler = function (params) {
	                var datas = _this3._getListByStr(key, params.data);
	                if (!datas) {
	                    return false;
	                }
	                var result = _this3.enum.decodeEnum(datas);
	                if (!result) {
	                    return false;
	                }
	                console.log(result);
	                // 数据格式为 {data: 'json'}
	                return { data: JSON.stringify(result) };
	            };
	        }
	        // 展示批量删除框

	    }, {
	        key: '_showBatchDelete',
	        value: function _showBatchDelete(key, visible) {
	            var datas = this.parent.getSelected();
	            if (!(datas && datas.length > 0)) {
	                _antd.message.warning('请先在表格中选择至少一条数据，再执行操作。', 3.5);
	                return;
	            }
	            var modal = this.__getComponent(this._getModalName(key));
	            modal && modal.show(datas, visible);
	        }
	        // 批量展示数据。即展示表格中的选中的数据

	    }, {
	        key: '_showBatchShow',
	        value: function _showBatchShow(key, visible) {
	            var datas = this.parent.getSelected();
	            if (!(datas && datas.length > 0)) {
	                _antd.message.warning('请先在表格中选择至少一条数据，再执行操作。', 3.5);
	                return;
	            }
	            var modal = this.__getComponent(this._getModalName(key));
	            modal && modal.show(datas, visible);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-table-crud' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'uf-table-crud-before' },
	                    this.parent.__analysis(this.configBefore)
	                ),
	                this.props.children,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'uf-table-crud-after' },
	                    this.parent.__analysis(this.configAfter)
	                )
	            );
	        }
	    }]);

	    return Crud;
	}(_base.BaseComponent);

	exports.default = Crud;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	var _Filters = __webpack_require__(193);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table扩展 - 表格上方的title以及其全部可选控件实现
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	

	var CheckboxGroup = _antd.Checkbox.Group;
	var MenuItem = _antd.Menu.Item;

	var Title = function (_BaseComponent) {
	    _inherits(Title, _BaseComponent);

	    function Title(props) {
	        _classCallCheck(this, Title);

	        // 其本身无需初始化组件
	        // this.__init();
	        // 缓存展示字段名称组件的cacheName
	        var _this = _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).call(this, props, { type: 'table-title' }));

	        _this.cacheName = props.parent.insName + props.parent.key;
	        _this.useCache = true;
	        _this.state = {
	            antdConfig: null,
	            // table表头右侧设置按钮的下拉框是否展示
	            showTableMenu: false,
	            // 是否展示全部字段
	            showAllTags: false,
	            showSetTagsModal: false
	        };
	        _this.init(props);
	        return _this;
	    }

	    _createClass(Title, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.init(nextProps);
	        }
	        // title为crud的子组件，但是crud存阻止刷新的逻辑，所以需要title刷新时，手动调用此函数

	    }, {
	        key: 'refreshTitleConf',
	        value: function refreshTitleConf(conf) {
	            var confStr = JSON.stringify(conf);
	            if (confStr !== this.currentConfStr) {
	                this.currentConfStr = confStr;
	                this.title = conf;
	                this.forceUpdate();
	            }
	        }
	    }, {
	        key: 'init',
	        value: function init(props) {
	            this.parent = props.parent;
	            this.title = props.config;
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.useCache) {
	                // 当有缓存时，使用缓存的选中列
	                var cache = _utils.Utils.getCache(this.cacheName);
	                if (cache) {
	                    this.columnsCheckedValues = cache;
	                    this.setTableColumns();
	                }
	            }
	        }
	    }, {
	        key: 'clearState',
	        value: function clearState() {
	            this.refs.filter && this.refs.filter.clearState();
	            this.hideMenuDropdown();
	        }

	        /* 内部函数 ****************************************************************************/
	        // // 表头生成-包括文字标题及自定义控件

	    }, {
	        key: 'titleGenerate',
	        value: function titleGenerate() {
	            if (!this.title) {
	                return null;
	            }
	            var _title = this.title,
	                _title$text = _title.text,
	                text = _title$text === undefined ? '' : _title$text,
	                extra = _title.extra;

	            var result = [];
	            // 表头标题
	            if (text) {
	                result.push(_react2.default.createElement(
	                    'div',
	                    { key: 'table-title', className: 'uf-header' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        this.parent.__analysis(text)
	                    )
	                ));
	            }
	            // 标题之后额外自定义内容
	            if (extra) {
	                var extraConf = this.parent.handleAction(extra);
	                result.push(_react2.default.createElement(
	                    'div',
	                    { key: 'table-extra', className: 'uf-extra' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        this.parent.__analysis(extraConf)
	                    )
	                ));
	            }
	            // 以下为一些控件的生成，全部保存在divList里
	            // 直接展示在表头的控件
	            var divList = this.getBasicWidghts();
	            // 展示在menu下拉列表中的控件
	            var gearsList = this.getMenuWidghts();
	            if (gearsList) {
	                divList.push(gearsList);
	            }
	            result.push(_react2.default.createElement(
	                'div',
	                { key: 'table-widget', className: 'uf-header-widget-con' },
	                divList
	            ));
	            return result;
	        }
	        // 基本控件

	    }, {
	        key: 'getBasicWidghts',
	        value: function getBasicWidghts() {
	            var _this2 = this;

	            // 因为使用频率较高，暂时保留原参数，后续版本中移除
	            var arrBasic = this.title.basicWidget || this.title.basicControls;
	            var result = [];
	            if (!arrBasic) {
	                return result;
	            }
	            var showText = this.title.showText;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                var _loop = function _loop() {
	                    var v = _step.value;

	                    // 全部转化为对象
	                    if (_utils.Utils.typeof(v, 'string')) {
	                        v = { name: v };
	                    }
	                    switch (v.name) {
	                        case 'filter':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-widget filter no-hover', key: 'uf-header-widget' },
	                                v.label && _react2.default.createElement(
	                                    'label',
	                                    null,
	                                    v.label
	                                ),
	                                _react2.default.createElement(_Filters.FuzzyFilter, _extends({ ref: 'filter', parent: _this2.parent }, {
	                                    others: _utils.Utils.filter(v, ['paramIndex', 'text', 'label', 'whitelist', 'blacklist']),
	                                    placeholder: v.text || '模糊搜索',
	                                    paramIndex: v.paramIndex,
	                                    globalFilterList: {
	                                        whitelist: v.whitelist,
	                                        blacklist: v.blacklist
	                                    }
	                                }))
	                            ));
	                            break;
	                        case 'refresh':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-widget', key: 'refresh',
	                                    title: v.text || '刷新',
	                                    onClick: function onClick() {
	                                        _this2.parent.refreshTable();
	                                    } },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'retweet' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '刷新'
	                                )
	                            ));
	                            break;
	                        case 'fullScreen':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-widget', key: 'fullscreen',
	                                    title: !_this2.parent.state.fullScreen ? v.text || '全屏' : v.text || '退出全屏',
	                                    onClick: _this2.parent.toggleFullScreen },
	                                !_this2.parent.state.fullScreen ? _react2.default.createElement(_antd.Icon, { type: v.text || 'arrows-alt' }) : _react2.default.createElement(_antd.Icon, { type: v.text || 'shrink' }),
	                                showText && (!_this2.parent.state.fullScreen ? _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '全屏'
	                                ) : _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    '退出' + (v.text || '全屏')
	                                ))
	                            ));
	                            break;
	                        case 'export':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-widget', key: 'export',
	                                    title: v.text || '导出',
	                                    onClick: _this2.parent._handleExport },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'download' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '导出'
	                                )
	                            ));
	                            break;
	                        case 'switchTags':
	                            if (v.cache === false) {
	                                _this2.useCache = false;
	                            }
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { className: 'uf-header-widget', key: 'switchTags',
	                                    title: v.text || '展示字段',
	                                    onClick: _this2.showSwitchTags.bind(_this2) },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'setting' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '展示字段'
	                                )
	                            ));
	                            break;
	                        case 'showAllTags':
	                            result.push(_react2.default.createElement(
	                                'div',
	                                { key: 'showAllTags',
	                                    title: v.text || '展示全部',
	                                    className: 'uf-header-widget ' + (_this2.parent.state.showAllTags ? 'active' : ''),
	                                    onClick: _this2.parent.toShowAllTags },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'eye-o' }),
	                                showText && _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || '展示全部'
	                                )
	                            ));
	                            break;
	                        case 'setPageSize':
	                            result.push(_react2.default.createElement(
	                                _antd.Popconfirm,
	                                { placement: 'top', key: 'basic-setPageSize',
	                                    title: _this2.renderPageInput('basic'),
	                                    onConfirm: _this2.getPageSizeSetting.bind(_this2, 'basic'),
	                                    okText: 'Yes', cancelText: 'No' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'uf-header-widget',
	                                        title: v.text || '分页设置',
	                                        onClick: _this2.showSetPageSize.bind(_this2, 'basic') },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'switcher' }),
	                                    showText && _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '分页设置'
	                                    )
	                                )
	                            ));
	                            break;
	                        default:
	                            // 如果设置了type，则按照用户的意愿进行展示，否则使用默认的展示形式
	                            if (v.type) {
	                                v.key = v.key || _utils.Utils.hash(v);
	                                result.push(_this2.parent.__analysis(v));
	                            } else {
	                                var onClick = v.onClick && v.onClick.bind(null, _this2.parent);
	                                if (v.action) {
	                                    onClick = function onClick() {
	                                        _this2.parent.showCrud(v.action);
	                                    };
	                                }
	                                result.push(_react2.default.createElement(
	                                    'div',
	                                    { key: v.name || _utils.Utils.hash(v), className: 'uf-header-widget ' + (v.name || ''),
	                                        title: v.text,
	                                        onClick: onClick },
	                                    _react2.default.createElement(_antd.Icon, { key: 'icon', type: v.icon || 'file-unknown' }),
	                                    showText && _react2.default.createElement(
	                                        'span',
	                                        { key: 'text' },
	                                        v.text || ''
	                                    )
	                                ));
	                            }
	                    }
	                };

	                for (var _iterator = arrBasic[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return result;
	        }
	        // 下拉列表中的控件

	    }, {
	        key: 'getMenuWidghts',
	        value: function getMenuWidghts() {
	            var _this3 = this;

	            // COMPAT: 因为使用频率较高，暂时保留原参数，后续版本中移除
	            var arrMenus = this.title.menuWidget || this.title.menuControls;
	            var result = null;
	            var gearsList = [];
	            if (!arrMenus) {
	                return result;
	            }
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                var _loop2 = function _loop2() {
	                    var v = _step2.value;

	                    // 全部转化为对象
	                    if (_utils.Utils.typeof(v, 'string')) {
	                        v = { name: v };
	                    }
	                    switch (v.name) {
	                        case 'refresh':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'refresh1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this3.parent.refreshTable();
	                                            _this3.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'retweet', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '刷新表格'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'fullScreen':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'fullScreen1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this3.parent.toggleFullScreen();
	                                            _this3.hideMenuDropdown();
	                                        } },
	                                    !_this3.parent.state.fullScreen ? _react2.default.createElement(_antd.Icon, { type: v.text || 'arrows-alt', className: 'menu-item-icon' }) : _react2.default.createElement(_antd.Icon, { type: v.text || 'shrink', className: 'menu-item-icon' }),
	                                    !_this3.parent.state.fullScreen ? _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        (v.text || '全屏') + '显示'
	                                    ) : _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        '退出' + (v.text || '全屏')
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'export':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'export1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this3.parent._handleExport();
	                                            _this3.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'download', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '导出数据'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'switchTags':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'switchTags1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this3.showSwitchTags();
	                                            _this3.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'setting', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '展示字段'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'showAllTags':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'showAllTags1' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { onClick: function onClick() {
	                                            _this3.parent.toShowAllTags();
	                                            _this3.hideMenuDropdown();
	                                        } },
	                                    _react2.default.createElement(_antd.Icon, { type: v.icon || 'eye-o', className: 'menu-item-icon' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        v.text || '展示全部'
	                                    )
	                                )
	                            ));
	                            break;
	                        case 'setPageSize':
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: 'basic-setPageSize1' },
	                                _react2.default.createElement(
	                                    _antd.Popconfirm,
	                                    { placement: 'left',
	                                        title: _this3.renderPageInput('menu'),
	                                        onConfirm: _this3.getPageSizeSetting.bind(_this3, 'menu'),
	                                        onCancel: _this3.hideMenuDropdown.bind(_this3),
	                                        okText: 'Yes', cancelText: 'No' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { onClick: _this3.showSetPageSize.bind(_this3, 'menu') },
	                                        _react2.default.createElement(_antd.Icon, { type: v.icon || 'switcher', className: 'menu-item-icon' }),
	                                        _react2.default.createElement(
	                                            'span',
	                                            null,
	                                            v.text || '分页设置'
	                                        )
	                                    )
	                                )
	                            ));
	                            break;
	                        default:
	                            gearsList.push(_react2.default.createElement(
	                                MenuItem,
	                                { key: v.name, onClick: function onClick() {
	                                        var _v;

	                                        for (var _len = arguments.length, p = Array(_len), _key = 0; _key < _len; _key++) {
	                                            p[_key] = arguments[_key];
	                                        }

	                                        (_v = v).onClick.apply(_v, [_this3.parent].concat(p));
	                                        _this3.hideMenuDropdown();
	                                    } },
	                                _react2.default.createElement(_antd.Icon, { type: v.icon || 'file-unknown', className: 'menu-item-icon' }),
	                                _react2.default.createElement(
	                                    'span',
	                                    null,
	                                    v.text || ''
	                                )
	                            ));
	                    }
	                };

	                for (var _iterator2 = arrMenus[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    _loop2();
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            if (gearsList.length > 0) {
	                result = _react2.default.createElement(
	                    _antd.Dropdown,
	                    { trigger: ['click'], key: 'uf-table-menu',
	                        overlay: _react2.default.createElement(
	                            _antd.Menu,
	                            { className: 'uf-table-menu' },
	                            gearsList
	                        ),
	                        onVisibleChange: this.switchMenuList.bind(this),
	                        placement: 'bottomRight',
	                        visible: this.state.showTableMenu },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'uf-header-widget menu ' + (this.state.showTableMenu ? 'active' : ''),
	                            title: '\u83DC\u5355' },
	                        this.state.showTableMenu ? _react2.default.createElement(_antd.Icon, { type: 'menu-unfold' }) : _react2.default.createElement(_antd.Icon, { type: 'menu-fold' }),
	                        this.title.showText && _react2.default.createElement(
	                            'span',
	                            null,
	                            '\u83DC\u5355'
	                        )
	                    )
	                );
	            }
	            return result;
	        }

	        /* 模糊搜索 **********************************************************************/

	        // 若有html，则剥掉标签

	    }, {
	        key: 'handleString',
	        value: function handleString(string) {
	            var pattern1 = /<(\w+).*?>(.*?)<\/\1>/g; // 匹配是否有闭合标签
	            if (pattern1.test(string)) {
	                return string.replace(/<([/]?\w+).*?>/g, ''); // 剥掉所有标签
	            } else {
	                return string;
	            }
	        }

	        /* 展示字段设置 **********************************************************************/

	        // 显示’展示字段‘设置弹框

	    }, {
	        key: 'showSwitchTags',
	        value: function showSwitchTags() {
	            this.setState({ showSetTagsModal: true });
	        }
	        // 自定义展示某些列

	    }, {
	        key: 'setTableColumns',
	        value: function setTableColumns() {
	            // 根据this.columnsCheckedValues中存储的用户的选择进行展示
	            var showColumns = this.columnsCheckedValues;
	            var allColumns = this.parent.columns;

	            var _loop3 = function _loop3(i) {
	                if (showColumns.some(function (v) {
	                    return allColumns[i].dataIndex === v;
	                })) {
	                    allColumns[i].display = true;
	                } else {
	                    allColumns[i].display = false;
	                }
	            };

	            for (var i in allColumns) {
	                _loop3(i);
	            }
	            // 缓存配置
	            _utils.Utils.setCache(this.cacheName, showColumns);
	            this.setState({ showSetTagsModal: false });
	            // 需更新 __props，否则表格刷新时会被重置
	            // this.parent.forceUpdate();
	            this.parent.__setProps({ columns: allColumns });
	        }
	    }, {
	        key: 'onSetColumnsCheckboxChange',
	        value: function onSetColumnsCheckboxChange(checkedValues) {
	            this.columnsCheckedValues = checkedValues;
	        }
	    }, {
	        key: 'cancleSetTableColumns',
	        value: function cancleSetTableColumns() {
	            this.setState({ showSetTagsModal: false });
	        }
	        // 生成弹框中的checkbox组，以选择展示哪些列

	    }, {
	        key: 'generateColumnsCheckboxGroup',
	        value: function generateColumnsCheckboxGroup() {
	            var options = [];
	            var defaultValue = [];
	            var allColumns = this.parent.columns;
	            for (var item in allColumns) {
	                var option = {
	                    label: allColumns[item].title,
	                    value: allColumns[item].dataIndex
	                };
	                options.push(option);
	                if (allColumns[item].display !== false) {
	                    defaultValue.push(allColumns[item].dataIndex);
	                }
	            }
	            this.columnsCheckedValues = defaultValue;
	            if (options.length > 0) {
	                return _react2.default.createElement(CheckboxGroup, { options: options,
	                    defaultValue: defaultValue,
	                    onChange: this.onSetColumnsCheckboxChange.bind(this) });
	            }
	        }

	        /* 设置分页条数 **********************************************************************/

	    }, {
	        key: 'renderPageInput',
	        value: function renderPageInput(name) {
	            // return <Input placeholder="输入每页数据条数" refs={`pageSizeInput${name}`}
	            //     value={this.parent.pagination.pageSize}
	            //     onChange={this.changePageSize.bind(this)}/>;
	            return _react2.default.createElement(_antd.Input, { ref: 'pageSizeInput' + name,
	                placeholder: '\u8F93\u5165\u6BCF\u9875\u6570\u636E\u6761\u6570',
	                defaultValue: this.parent.pagination.pageSize });
	        }
	        // 展示每页展示条数

	    }, {
	        key: 'getPageSizeSetting',
	        value: function getPageSizeSetting(name) {
	            var value = this.refs['pageSizeInput' + name].refs.input.value;
	            var pageSize = parseInt(value, 10);
	            if (isNaN(pageSize)) {
	                pageSize = 10;
	            }
	            this.parent.pagination.pageSize = pageSize;
	            this.parent.__setProps({ pagination: { pageSize: pageSize } });
	            this.parent.refreshTable();
	            this.setState({ showTableMenu: false });
	        }
	        // 展示分页设置输入框时，使得输入框获取焦点

	    }, {
	        key: 'showSetPageSize',
	        value: function showSetPageSize(name) {
	            var _this4 = this;

	            // 设定延迟的原因，this[`pageSizeInput${name}`]以提示框的形式渲染到页面
	            // 而此函数触发时还未渲染完毕，输入框无法获得焦点，输入框手动获取焦点会引起menu下拉列表关闭
	            setTimeout(function () {
	                var obj = _this4['pageSizeInput' + name];
	                obj && obj.focus();
	            }, 10);
	        }

	        /* menu 菜单 **********************************************************************/

	        // 展示头部隐藏菜单

	    }, {
	        key: 'switchMenuList',
	        value: function switchMenuList(visible) {
	            this.setState({ showTableMenu: visible });
	        }
	    }, {
	        key: 'showTableMenu',
	        value: function showTableMenu() {
	            this.setState({ showTableMenu: true });
	        }
	        // menu下拉列表隐藏

	    }, {
	        key: 'hideMenuDropdown',
	        value: function hideMenuDropdown() {
	            this.setState({ showTableMenu: false });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'uf-table-title' },
	                this.titleGenerate(),
	                _react2.default.createElement(
	                    _antd.Modal,
	                    { title: '\u5C55\u793A\u5B57\u6BB5', className: 'uf-table-modal', key: 'uf-table-modal',
	                        visible: this.state.showSetTagsModal,
	                        onOk: this.setTableColumns.bind(this),
	                        onCancel: this.cancleSetTableColumns.bind(this) },
	                    this.generateColumnsCheckboxGroup()
	                )
	            );
	        }
	    }]);

	    return Title;
	}(_base.BaseComponent);

	exports.default = Title;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.FuzzyFilter = exports.Filter = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table扩展 - 搜索/过滤相关逻辑实现
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * */


	/* 自定义单字段过滤-通过输入筛选 *************************************************************************************/

	var FilterInput = function (_Component) {
	    _inherits(FilterInput, _Component);

	    function FilterInput(props) {
	        _classCallCheck(this, FilterInput);

	        var _this = _possibleConstructorReturn(this, (FilterInput.__proto__ || Object.getPrototypeOf(FilterInput)).call(this, props));

	        _this.parent = props.parent;
	        _this.state = {
	            value: props.value
	        };
	        return _this;
	    }

	    _createClass(FilterInput, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (this.state.value !== nextProps.value) {
	                this.setState({ value: nextProps.value });
	            }
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var value = e.target.value;
	            this.setState({ value: value });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return _react2.default.createElement(_antd.Input, { placeholder: 'Search',
	                value: this.state.value || '',
	                onChange: this.onChange.bind(this),
	                onPressEnter: function onPressEnter() {
	                    _this2.props.onPressEnter(_this2.state.value);
	                }
	            });
	        }
	    }]);

	    return FilterInput;
	}(_react.Component);

	/* 过滤工具类 (原生过滤附带的一些逻辑) *************************************************************************************/

	var Filter = exports.Filter = function () {
	    function Filter(parent) {
	        _classCallCheck(this, Filter);

	        this.parent = parent;
	        this.filterParams = null;
	        this.filterConditions = {};
	        this.oldFilterConditions = {};
	    }

	    _createClass(Filter, [{
	        key: 'clearState',
	        value: function clearState() {
	            this.filterConditions = {};
	        }

	        // 当过滤选项发生变化时，如果是后端分页，则增加相应参数

	    }, {
	        key: 'handleChange',
	        value: function handleChange(filterParams) {
	            var oldFilterParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	            var newParams = _utils.Utils.copy(filterParams);
	            var oParams = this.parent.__filtered.source.params || {};
	            // 移除无效参数
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = Object.keys(oldFilterParams).concat(Object.keys(newParams))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var i = _step.value;

	                    if (!_utils.Utils.empty(newParams[i])) {
	                        if (_utils.Utils.typeof(newParams[i], 'array')) {
	                            newParams[i] = newParams[i].join(',');
	                        }
	                        oParams[i] = newParams[i];
	                    } else {
	                        delete oParams[i];
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (this.parent.__filtered.source.params || !_utils.Utils.empty(oParams)) {
	                // 直接修改 this.parent.__filtered 上的值，过滤变化时本身会触发onPageChange，表格会刷新，无需再重新set
	                // TODO: 感觉这样不是很优雅
	                // this.parent.set({params: newParams});
	                this.parent.__filtered.source.params = oParams;
	            }
	        }

	        // 处理单行过滤相关配置参数

	    }, {
	        key: 'handleFilterConf',
	        value: function handleFilterConf(filter, dataIndex) {
	            if (!filter.type) {
	                // 若没有配置type则直接返回
	                return;
	            }
	            if (filter.type === 'checkbox' || filter.type === 'radio') {
	                // 多选框或单选框筛选
	                var filterObj = {
	                    options: null,
	                    filterMultiple: false,
	                    onFilter: null
	                };
	                if (!!filter.options) {
	                    // 用户配置了options,则将用户配置进行转换
	                    filterObj.filters = _utils.Utils.toOptions(filter.options).map(function (o) {
	                        return { text: o.label, value: o.value };
	                    });
	                } else {
	                    // 用户没有配置options，则将该字段的所有可能值展示出来
	                    filterObj.filters = this.getAllFilterValue(dataIndex);
	                }
	                filterObj.filterMultiple = filter.type === 'checkbox' ? true : false;
	                filterObj.onFilter = function (value, record) {
	                    return record[dataIndex].indexOf(value) !== -1;
	                };
	                return filterObj;
	            } else if (filter.type === 'input') {
	                // 通过输入筛选
	                var _filterObj = {
	                    filterDropdown: null,
	                    filterIcon: _react2.default.createElement(_antd.Icon, { type: 'filter',
	                        style: { color: !!this.filterConditions[dataIndex] ? '#108ee9' : '#aaa' }
	                    })
	                };
	                _filterObj.filterDropdown = _react2.default.createElement(
	                    'div',
	                    { className: 'custom-filter-dropdown' },
	                    _react2.default.createElement(FilterInput, { value: this.filterConditions[dataIndex],
	                        onPressEnter: this.onFilterData.bind(this, dataIndex) })
	                );
	                return _filterObj;
	            }
	        }
	        // 过滤

	    }, {
	        key: 'onFilterData',
	        value: function onFilterData(dataIndex, value) {
	            // 对查询值进行存储
	            this.filterConditions[dataIndex] = value;
	            if (this.parent.serverPaging) {
	                var oldFilterParams = _utils.Utils.copy(this.oldFilterConditions);
	                var newParams = _utils.Utils.copy(this.filterConditions);
	                this.oldFilterConditions = newParams;
	                this.handleChange(newParams, oldFilterParams);
	                this.parent.getData(1);
	                return;
	            }
	            var data = this.parent.state.completeData;
	            // 对数据进行单列过滤
	            if (!_utils.Utils.empty(this.filterConditions)) {
	                data = this.handleFilterData(data);
	            }
	            this.parent.__setProps({ data: data });
	        }
	    }, {
	        key: 'handleFilterData',
	        value: function handleFilterData(filteredData) {
	            var _this3 = this;

	            var data = [];
	            var needFilterData = !!filteredData ? filteredData : this.parent.state.completeData;
	            // 如果传入filteredData,则在filteredData基础上筛选
	            // 如果没有传入如果传入filteredData，则在全量数据上进行筛选
	            data = needFilterData.filter(function (record) {
	                var flag = true;
	                for (var cdit in _this3.filterConditions) {
	                    if (record[cdit].toString().indexOf(_this3.filterConditions[cdit]) === -1) {
	                        flag = false;
	                        break;
	                    }
	                }
	                return flag;
	            });
	            return data;
	        }
	    }, {
	        key: 'getAllFilterValue',
	        value: function getAllFilterValue(dataIndex) {
	            var obj = {};
	            var result = [];
	            var data = this.parent.state.completeData;
	            for (var i = 0; i < data.length; i++) {
	                // 用obj存储所有可能的字段
	                if (data[i][dataIndex] && !obj[data[i][dataIndex]]) {
	                    obj[data[i][dataIndex]] = 1;
	                }
	            }
	            // 将obj转换为数组
	            for (var key in obj) {
	                result.push({ text: key, value: key });
	            }
	            return result;
	        }
	    }]);

	    return Filter;
	}();

	/* 模糊搜索功能 ****************************************************************************************************/

	var FuzzyFilter = exports.FuzzyFilter = function (_Component2) {
	    _inherits(FuzzyFilter, _Component2);

	    function FuzzyFilter(props) {
	        _classCallCheck(this, FuzzyFilter);

	        var _this4 = _possibleConstructorReturn(this, (FuzzyFilter.__proto__ || Object.getPrototypeOf(FuzzyFilter)).call(this, props));

	        _this4.parent = props.parent;
	        // 过滤字段黑名单/白名单
	        _this4.globalFilterList = props.globalFilterList;
	        _this4.state = {
	            // 存储模糊搜索输入的值
	            filterValue: ''
	        };
	        // 模糊搜索时，延迟150ms执行
	        _this4.onFilterData = _utils.Utils.debounce(_this4.onFilterData, 150);
	        return _this4;
	    }

	    _createClass(FuzzyFilter, [{
	        key: 'clearState',
	        value: function clearState() {
	            this.setState({ filterValue: '' });
	        }

	        // 过滤输入框点回车搜索时 (用于后端分页)

	    }, {
	        key: 'onFilterSearch',
	        value: function onFilterSearch(value) {
	            // 如果为后端分页，则不立刻搜索，onSearch 时才会搜索
	            if (!this.parent.serverPaging) {
	                return;
	            }
	            // 在原有参数基础上，追加一个search参数
	            // let oParams = this.parent.__filtered.source.params || {};
	            var oParams = this.parent.__props.params || {};
	            // 默认参数名称为search，可修改
	            oParams[this.props.paramIndex || 'search'] = value;
	            this.parent.set({ params: oParams });
	        }
	        // 过滤输入框变化时(用于前端分页)

	    }, {
	        key: 'onFilterChange',
	        value: function onFilterChange(e) {
	            var iVal = e.target.value;
	            this.setState({ filterValue: iVal });
	            // 如果为后端分页，则不立刻搜索，onSearch 时才会搜索
	            if (this.parent.serverPaging) {
	                return;
	            }
	            this.onFilterData();
	        }
	    }, {
	        key: 'onFilterData',
	        value: function onFilterData() {
	            // 过滤
	            var data = this.parent.state.completeData;
	            // @bugfix at 2018/01/31 15:38，展示模糊搜索内容时，分页条数及当前分页使用模糊搜索自己的；取消模糊搜索时还原之前的状态
	            // Table.js 中的 this.pagination 和 this.parant.__props.pagination 是同一个东西
	            var pagination = this.parent.__props.pagination;
	            var total = pagination && pagination.total;
	            var current = pagination && pagination.current;
	            // 对数据进行全局过滤
	            if (this.state.filterValue.length !== 0) {
	                data = this.doFilterData(this.state.filterValue, data);
	                this.cacheTotal = this.cacheTotal || total;
	                this.cacheCurrent = this.cacheCurrent || current;
	                total = data.length;
	                current = 1;
	            } else {
	                total = this.cacheTotal;
	                current = this.cacheCurrent;
	                this.cacheTotal = null;
	                this.cacheCurrent = null;
	            }
	            var newProps = { data: data };
	            if (pagination) {
	                newProps.pagination = { total: total, current: current };
	            }
	            this.parent.__setProps(newProps);
	        }
	        // 全局搜索数据

	    }, {
	        key: 'doFilterData',
	        value: function doFilterData(iVal, content) {
	            var strVal = iVal.toLowerCase().replace(/(^\s*)|(\s*$)/g, '').replace(/\s+/g, ' ');
	            // 过滤使用的数据，如果是有传入的数据则进行过滤，没有则需要进行
	            if (strVal) {
	                var arrFilterData = [];
	                // 字段黑名单/白名单
	                var filterlist = this.globalFilterList;
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                    for (var _iterator2 = content[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                        var oRow = _step2.value;

	                        var row = {};
	                        var data = [];
	                        // 按照展示的字段过滤，自定义render字段无效，问题比较大
	                        for (var i in oRow) {
	                            // 把数据的key也全部转换成纯小写
	                            row[i.toLowerCase()] = oRow[i];
	                            // 如果不在白名单里或者在黑名单里，则跳过此字段
	                            if (filterlist && filterlist['whitelist'] && filterlist['whitelist'].indexOf(i) === -1) {
	                                continue;
	                            } else if (filterlist && filterlist['blacklist'] && filterlist['blacklist'].indexOf(i) !== -1) {
	                                continue;
	                            }
	                            var value = oRow[i];
	                            if (_utils.Utils.typeof(value, 'string')) {
	                                data.push(this.handleString(value));
	                            } else if (_utils.Utils.typeof(value, ['object', 'array'])) {
	                                data.push(this.parent._getKeyDataOfObject(value));
	                            } else if (value) {
	                                data.push(value.toString ? value.toString() : value);
	                            }
	                        }

	                        var str = data.join('\n').toLowerCase();
	                        // 输入值不是字符串，而是几个词，要拆分后分别查找
	                        var result = true;
	                        var keys = strVal.split(/\s+/);
	                        var _iteratorNormalCompletion3 = true;
	                        var _didIteratorError3 = false;
	                        var _iteratorError3 = undefined;

	                        try {
	                            for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                                var key = _step3.value;

	                                // update by liuzechun@baidu.com @2016-12-11
	                                var orResult = false;
	                                // 支持指定字段过滤(如 id:123)，先选出关键词对应的字段，再对字段内容进行检索

	                                var _key$split = key.split(':'),
	                                    _key$split2 = _slicedToArray(_key$split, 2),
	                                    kWord = _key$split2[0],
	                                    kVal = _key$split2[1];
	                                // kv为当前搜索的字段值，如果没有指定字段，则kv为全部字段拼成的字符串


	                                var kv = '';
	                                if (kVal) {
	                                    // 如果关键词字段直接为数据的key
	                                    if (row[kWord] !== undefined) {
	                                        kv = row[kWord] || '';
	                                        // 否则在配置的tag里匹配每个tag的中文名
	                                    } else {
	                                        var _iteratorNormalCompletion4 = true;
	                                        var _didIteratorError4 = false;
	                                        var _iteratorError4 = undefined;

	                                        try {
	                                            for (var _iterator4 = this.parent.columns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                                                var item = _step4.value;

	                                                if (kWord === item.title.toLowerCase()) {
	                                                    kv = row[item.dataIndex.toLowerCase()];
	                                                }
	                                            }
	                                        } catch (err) {
	                                            _didIteratorError4 = true;
	                                            _iteratorError4 = err;
	                                        } finally {
	                                            try {
	                                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                                                    _iterator4.return();
	                                                }
	                                            } finally {
	                                                if (_didIteratorError4) {
	                                                    throw _iteratorError4;
	                                                }
	                                            }
	                                        }
	                                    }
	                                    if (typeof kv !== 'string') {
	                                        kv = (typeof kv === 'undefined' ? 'undefined' : _typeof(kv)) === 'object' && kv.title || JSON.stringify(kv);
	                                    }
	                                    kv = (kv || '').toLowerCase();
	                                } else {
	                                    kv = str;
	                                    kVal = key;
	                                }
	                                // 支持使用|搜索，实现或的关系
	                                var _iteratorNormalCompletion5 = true;
	                                var _didIteratorError5 = false;
	                                var _iteratorError5 = undefined;

	                                try {
	                                    for (var _iterator5 = kVal.split(/\|+/)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                                        var k = _step5.value;

	                                        // 一旦有一个能匹配到，则结果true
	                                        (!k || kv.indexOf(k) !== -1) && (orResult = true);
	                                    }
	                                    // 如果都匹配不到，则此关键字无效，整条数据无效
	                                } catch (err) {
	                                    _didIteratorError5 = true;
	                                    _iteratorError5 = err;
	                                } finally {
	                                    try {
	                                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                                            _iterator5.return();
	                                        }
	                                    } finally {
	                                        if (_didIteratorError5) {
	                                            throw _iteratorError5;
	                                        }
	                                    }
	                                }

	                                !orResult && (result = false);
	                            }
	                        } catch (err) {
	                            _didIteratorError3 = true;
	                            _iteratorError3 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                                    _iterator3.return();
	                                }
	                            } finally {
	                                if (_didIteratorError3) {
	                                    throw _iteratorError3;
	                                }
	                            }
	                        }

	                        if (result) {
	                            arrFilterData.push(oRow);
	                        }
	                    }
	                    // return Utils.clone(arrFilterData);
	                } catch (err) {
	                    _didIteratorError2 = true;
	                    _iteratorError2 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                            _iterator2.return();
	                        }
	                    } finally {
	                        if (_didIteratorError2) {
	                            throw _iteratorError2;
	                        }
	                    }
	                }

	                return arrFilterData;
	            }
	            // 清除已勾选内容
	            // this.parent.clearSelect();
	            return content;
	        }
	        // 若有html，则剥掉标签

	    }, {
	        key: 'handleString',
	        value: function handleString(string) {
	            var pattern1 = /<(\w+).*?>(.*?)<\/\1>/g; // 匹配是否有闭合标签
	            if (pattern1.test(string)) {
	                return string.replace(/<([/]?\w+).*?>/g, ''); // 剥掉所有标签
	            } else {
	                return string;
	            }
	        }
	        // 非React组件，需手动调用

	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_antd.Input.Search, _extends({ name: 'filter',
	                placeholder: this.props.placeholder
	            }, this.props.others, {
	                value: this.state.filterValue,
	                onChange: this.onFilterChange.bind(this),
	                onSearch: this.onFilterSearch.bind(this)
	            }));
	        }
	    }]);

	    return FuzzyFilter;
	}(_react.Component);

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file: Table扩展 - 单元格内编辑等功能
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author: JihangGuo
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @last Modified time: 2018-04-25 22:56:04
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @email: guojihang@baidu.com
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	// 为每个单元格创建一个包装父类组件
	var TableEdit = function (_BaseComponent) {
	    _inherits(TableEdit, _BaseComponent);

	    function TableEdit(props) {
	        _classCallCheck(this, TableEdit);

	        // 自己制定组件类型
	        var _this = _possibleConstructorReturn(this, (TableEdit.__proto__ || Object.getPrototypeOf(TableEdit)).call(this, props, { type: 'table-edit' }));

	        _this.__init();

	        // 设置组件数据state
	        _this.state = {
	            value: _this.props.value, // 单元格的值
	            columnChild: _this.props.columnChild, // 复杂类型的单元格的值
	            editable: false, // 是否显示编辑框
	            valueSource: _this.props.value, // 修改前的单元格的值
	            editConf: _this.props.editConf // 对编辑组件的个性化配置
	        };
	        return _this;
	    }

	    _createClass(TableEdit, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 当单元格值改变时强制更新
	            if (nextProps.value !== this.props.value) {
	                this.setState({
	                    columnChild: nextProps.columnChild,
	                    value: nextProps.value
	                });
	            }
	        }
	        // 提交触发函数

	    }, {
	        key: 'submit',
	        value: function submit() {
	            var _this2 = this;

	            // 获取单元格名称
	            var cellName = this.state.editConf['name'];
	            // 获取表格数据
	            var formData = this.form.getValues();
	            var value = formData[cellName];
	            // 判断输入值是否改变
	            if (value !== this.state.valueSource) {
	                // 对修改后的数据进行提交，提交的配置再 config/components.js 中 table-cell
	                // this.__filtered.api.params = formData;
	                _utils.Utils.merge(this.__filtered.api.params, formData);
	                var result = this.__props.onSubmit && this.__props.onSubmit();
	                // 不管是否为Promise，成功与失败逻辑如下
	                this.__compatePromise(result, function (success) {
	                    // 上传修改结果到父组件
	                    _this2.props.cellSubmit(value);
	                    _this2.setState({
	                        value: value,
	                        editable: false,
	                        valueSource: value
	                    });
	                });
	            } else {
	                this.setState({
	                    value: value,
	                    editable: false,
	                    valueSource: value
	                });
	            }
	        }
	        // 点击编辑/关闭图标触发函数

	    }, {
	        key: 'editChange',
	        value: function editChange(type) {
	            var value = this.state.value;
	            return this.setState({
	                editable: !!type,
	                value: !!type ? value : this.state.valueSource
	            });
	        }
	        // 将用户定义UF配置转换为组件

	    }, {
	        key: 'initInput',
	        value: function initInput(formConf) {
	            return this.props.parent.__analysis(formConf);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;

	            var _state = this.state,
	                value = _state.value,
	                editable = _state.editable,
	                columnChild = _state.columnChild,
	                editConf = _state.editConf;
	            // 解析配置 icon api editable
	            // 图标默认配置 采用UF书写方式

	            var cellIcon = {
	                editIcon: {
	                    mode: 'edit'
	                },
	                submitIcon: {
	                    mode: 'check-circle',
	                    style: {
	                        color: '#0b8235'
	                    }
	                },
	                closeIcon: {
	                    mode: 'close-circle',
	                    style: {
	                        color: 'red'
	                    }
	                }
	            };
	            // 根据icon配置情况进行解析赋值操作 不配置为默认图标,配置null为删除
	            if (_utils.Utils.typeof(editConf['icon'], 'object')) {
	                var iconConf = editConf['icon'];
	                for (var key in iconConf) {
	                    _utils.Utils.typeof(iconConf[key], 'null') ? cellIcon[key] = null : cellIcon[key] = iconConf[key];
	                }
	            } else if (_utils.Utils.typeof(editConf['icon'], 'null')) {
	                cellIcon['submitIcon'] = null;
	                cellIcon['closeIcon'] = null;
	            }
	            // 如果去除勾选图标则添加自动聚焦属性
	            editConf['default'] = value;
	            if (_utils.Utils.typeof(cellIcon['submitIcon'], 'null')) {
	                editConf['onBlur'] = function () {
	                    return _this3.editChange(false);
	                };
	            }
	            editConf['autoFocus'] = true;
	            // 整合配置
	            var formConf = {
	                type: 'form',
	                layout: { type: 'vertical' },
	                wrappedComponentRef: function wrappedComponentRef(ele) {
	                    _this3.form = ele;
	                },
	                items: [editConf],
	                onSubmit: function onSubmit(data) {
	                    return _this3.submit();
	                }
	            };
	            return editable ? _react2.default.createElement(
	                'div',
	                { className: 'editable-cell-input-wrapper' },
	                this.initInput(formConf),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'editable-icon-group' },
	                    !!cellIcon['submitIcon'] && _react2.default.createElement(_antd.Icon, _extends({}, cellIcon['submitIcon'], {
	                        type: cellIcon['submitIcon']['mode'],
	                        className: 'editable-cell-icon-check',
	                        onClick: this.submit.bind(this)
	                    })),
	                    cellIcon['closeIcon'] && _react2.default.createElement(_antd.Icon, _extends({}, cellIcon['closeIcon'], {
	                        type: cellIcon['closeIcon']['mode'],
	                        className: 'editable-cell-icon-close',
	                        onClick: function onClick() {
	                            return _this3.editChange(false);
	                        }
	                    }))
	                )
	            ) : _react2.default.createElement(
	                'div',
	                { className: 'editable-cell-text-wrapper' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'edit-cell' },
	                    columnChild || value
	                ),
	                cellIcon['editIcon'] && _react2.default.createElement(_antd.Icon, _extends({}, cellIcon['editIcon'], {
	                    type: cellIcon['editIcon']['mode'],
	                    className: 'editable-cell-icon-edit',
	                    onClick: function onClick() {
	                        return _this3.editChange(true);
	                    }
	                }))
	            );
	        }
	    }]);

	    return TableEdit;
	}(_base.BaseComponent);

	exports.default = TableEdit;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	file Table扩展 - 枚举类型字段翻译相关逻辑实现
	author liuzechun@baidu.com
	

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Enum = function () {
	    function Enum(tools) {
	        _classCallCheck(this, Enum);

	        this.tools = tools;
	        // 是否正在加载数据
	        this.loading = false;
	        this.requestCount = 0;
	        // 存储全部枚举数据，{[key || id]: [value]}
	        this.data = {};
	        // 如果value是字符串或数字，再存储一份反向关系，{[value]: [key]}
	        this.dataReverse = {};

	        // 实时翻译相关属性，为避免相互影响，参数尽量分开
	        this.realtimeConfs = {};
	    }
	    // 传入 columns 配置，判断是否有枚举类型字段并做相应处理


	    _createClass(Enum, [{
	        key: 'init',
	        value: function init(columns) {
	            var _this = this;

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                var _loop = function _loop() {
	                    var item = _step.value;

	                    if (item.enum) {
	                        // 已经穷举，无需获取。格式为 enum: [{key: value}]
	                        if (_utils.Utils.typeof(item.enum, 'array')) {
	                            _this.save(item.dataIndex, item.enum);
	                            // 实时翻译
	                        } else if (_utils.Utils.typeof(item.enum, 'object') && item.enum.realtime) {
	                            var others = {
	                                // 参数属性
	                                key: 'ids',
	                                // 是否逗号分隔
	                                comma: true
	                            };
	                            if (_utils.Utils.typeof(item.enum.realtime, 'object')) {
	                                Object.assign(others, item.enum.realtime);
	                            }

	                            var conf = _utils.Utils.clone(item.enum);
	                            if (!conf.paramsHandler) {
	                                conf.paramsHandler = function (params) {
	                                    if (params.list) {
	                                        var values = params.list.map(function (v) {
	                                            return v[item.dataIndex];
	                                        }).filter(function (v) {
	                                            return !!v;
	                                        });
	                                        // 去重
	                                        values = _utils.Utils.distinct(values);
	                                        params[others.key] = others.comma ? values.join(',') : values;
	                                        delete params.list;
	                                        // 如果没需要翻译的key值，则不再调用接口
	                                        if (params[others.key] === '') {
	                                            return false;
	                                        }
	                                    }
	                                    return params;
	                                };
	                            }
	                            _this.realtimeConfs[item.dataIndex] = conf;
	                            // 全量枚举
	                        } else {
	                            _this.save(item.dataIndex, []);
	                            // 需要异步获取数据的情况
	                            _this.start();
	                            _this.tools.execAjax(_extends({
	                                // 默认开启缓存
	                                cache: true
	                            }, _utils.Utils.varietyFormat(item.enum, 'url'), {
	                                success: function success(data) {
	                                    _this.save(item.dataIndex, data);
	                                    _this.complete();
	                                },
	                                error: function error(err) {
	                                    _this.complete();
	                                }
	                            }));
	                        }
	                    }
	                };

	                for (var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'start',
	        value: function start() {
	            this.loading = true;
	            this.requestCount++;
	        }
	    }, {
	        key: 'complete',
	        value: function complete() {
	            this.requestCount--;
	            this.finish();
	        }
	        // 请求完成

	    }, {
	        key: 'finish',
	        value: function finish() {
	            if (this.requestCount <= 0) {
	                this.loading = false;
	                this.tools.continue();
	            }
	        }
	        // 把数组格式化成键值对并存储

	    }, {
	        key: 'save',
	        value: function save(dataIndex, list) {
	            var saveReverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	            // 如果原来有值，则再原列表上追加
	            var result = this.data[dataIndex] || {};
	            // 不管数据格式怎样，通过toOptions转换为一种格式
	            list = _utils.Utils.toOptions(list);
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _v = _step2.value;

	                    result[_v.value] = _v.label;
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            this.data[dataIndex] = result;
	            // 是否存储逆向翻译数据。实时翻译的接口数据，saveReverse === false
	            if (saveReverse) {
	                var reverseResult = this.dataReverse[dataIndex] || {};
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var v = _step3.value;

	                        if (_utils.Utils.typeof(v.label, ['string', 'number', 'boolean'])) {
	                            reverseResult[v.label] = v.value;
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }

	                this.dataReverse[dataIndex] = reverseResult;
	            }
	        }

	        /*** Table.js 中的功能 ******************************************************************* */
	        // 处理列配置，进行枚举替换

	    }, {
	        key: 'handleColumn',
	        value: function handleColumn(item) {
	            var _this2 = this;

	            if (this.data[item.dataIndex] && !item._enumed) {
	                // 标记为已处理，无需重复处理
	                item._enumed = true;
	                // 如果原本已存在render，则需要执行原render
	                var orender = item.render;
	                item.render = function (v, row) {
	                    for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	                        params[_key - 2] = arguments[_key];
	                    }

	                    var display = _this2.data[item.dataIndex][v];
	                    // 无法翻译是是否允许为空，默认无法翻译是展示空
	                    if (display === undefined) {
	                        if (_utils.Utils.typeof(item.enum, 'object') && item.enum.allowEmpty === false) {
	                            display = v;
	                        } else {
	                            display = '';
	                        }
	                    }
	                    // 将翻译后的结果存入行数据中
	                    row[item.dataIndex + '.fyi'] = display;
	                    return orender ? orender.apply(undefined, [display, row].concat(params)) : display;
	                };
	            }
	            return item;
	        }
	        // 实时翻译

	    }, {
	        key: 'realtimeTrans',
	        value: function realtimeTrans(list) {
	            var _this3 = this;

	            return new Promise(function (resolve) {
	                if (_utils.Utils.empty(_this3.realtimeConfs)) {
	                    resolve();
	                }
	                var count = 0;
	                var finish = function finish() {
	                    --count === 0 && resolve();
	                };

	                var _loop2 = function _loop2(i) {
	                    count++;
	                    var conf = _this3.realtimeConfs[i];
	                    _this3.tools.execAjax(_extends({
	                        // 默认开启缓存
	                        cache: true
	                    }, conf, {
	                        paramsHandler: function paramsHandler(params) {
	                            // 不调用实时翻译，也需要调用一下finish
	                            conf.paramsHandler && (params = conf.paramsHandler(params));
	                            if (params === false) {
	                                finish();
	                            }
	                            return params;
	                        },
	                        params: Object.assign(conf.params || {}, {
	                            list: list
	                        }),
	                        success: function success(data) {
	                            _this3.save(i, data, false);
	                            finish();
	                        },
	                        error: finish
	                    }));
	                };

	                for (var i in _this3.realtimeConfs) {
	                    _loop2(i);
	                }
	            });
	        }

	        /*** Crud.js 中功能 ******************************************************************* */
	        // 处理新增/编辑的 form.items 配置，自动增加options

	    }, {
	        key: 'handleForm',
	        value: function handleForm(items) {
	            var _this4 = this;

	            return (items || []).map(function (item) {
	                if (item) {
	                    // if (Utils.typeof(item, 'object')) {
	                    // 支持使用自定义组件，会取最终的根类型进行判断
	                    var _tools$getConf = _this4.tools.getConf(item),
	                        type = _tools$getConf.type,
	                        name = _tools$getConf.name;

	                    if (['select', 'radio', 'checkbox-group'].indexOf(type) > -1 && _utils.Utils.empty(item.options) && _this4.data[name]) {
	                        item.options = _utils.Utils.toOptions(_this4.data[name]);
	                    }
	                    // } else {
	                    //     item = this.handleForm(item)
	                    // }
	                }
	                return item;
	            });
	        }
	        // 把一个数据列表中的枚举字段的id转换为枚举的值，key => value
	        // 如果没有传 keys 字段，则处理全部字段

	    }, {
	        key: 'encodeEnum',
	        value: function encodeEnum(list, keys) {
	            var _this5 = this;

	            var error = [];
	            var result = (list || []).map(function (item, index) {
	                if (!keys) {
	                    keys = Object.keys(item);
	                }
	                return _utils.Utils.each(_utils.Utils.pick(item, keys), function (v, i) {
	                    if (v !== '' && _this5.data[i]) {
	                        if (_this5.data[i][v] !== undefined) {
	                            return _this5.data[i][v];
	                        } else {
	                            error.push('\u7B2C\u3010' + (index + 1) + '\u3011\u884C\u5B57\u6BB5\u3010' + i + '\u3011\u7684\u6570\u636E\u3010' + v + '\u3011\u89E3\u6790\u65F6\u51FA\u73B0\u9519\u8BEF\uFF0C\u5DF2\u7559\u7A7A\uFF0C\u5982\u6709\u9700\u8981\u8BF7\u8FDB\u884C\u66F4\u65B0\uFF01');
	                            return '';
	                        }
	                    }
	                    return v;
	                });
	            });
	            if (error.length > 0) {
	                // 使报错弹框晚于原来弹框的创建
	                setTimeout(function () {
	                    _antd.Modal.warning({
	                        title: '注意：',
	                        content: error.join('\n')
	                    });
	                }, 10);
	            }
	            return result;
	        }
	        // 把一个数据列表中的枚举字段的值转换为id，value => key

	    }, {
	        key: 'decodeEnum',
	        value: function decodeEnum(list) {
	            var _this6 = this;

	            var error = [];
	            var result = (list || []).map(function (item, index) {
	                return _utils.Utils.each(item, function (v, i) {
	                    if (_this6.dataReverse[i]) {
	                        if (_this6.dataReverse[i][v] !== undefined) {
	                            return _this6.dataReverse[i][v];
	                        } else {
	                            error.push('\u7B2C\u3010' + (index + 1) + '\u3011\u884C\u7B2C\u3010' + i + '\u3011\u4E2A\u5B57\u6BB5\u6570\u636E\u7684\u503C\u3010' + v + '\u3011\u65E0\u6548\uFF0C\u8BF7\u68C0\u67E5\uFF01');
	                            return '';
	                        }
	                    }
	                    return v;
	                });
	            });
	            if (error.length > 0) {
	                _antd.Modal.error({
	                    title: '注意：',
	                    content: error.join('\n')
	                });
	                return false;
	            }
	            return result;
	        }
	    }]);

	    return Enum;
	}();

	exports.default = Enum;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _export = __webpack_require__(185);

	var _export2 = _interopRequireDefault(_export);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table扩展 - 导出组件配置处理逻辑
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * */


	var TableExport = function (_Component) {
	    _inherits(TableExport, _Component);

	    function TableExport(props) {
	        _classCallCheck(this, TableExport);

	        var _this = _possibleConstructorReturn(this, (TableExport.__proto__ || Object.getPrototypeOf(TableExport)).call(this, props));

	        _this.parent = props.parent;
	        return _this;
	    }

	    _createClass(TableExport, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 把export组件抛出，供外部调用
	            this.props.wrappedComponentRef && this.props.wrappedComponentRef(this.exportRef);
	        }
	        // 从title配置中查找export组件配置

	    }, {
	        key: 'findTitleExportConf',
	        value: function findTitleExportConf() {
	            if (this.parent.titleExportAll !== undefined) {
	                return this.parent.titleExportAll;
	            }
	            // 从title中查找export组件配置
	            var exportConf = {};
	            if (this.parent.title && (this.parent.title.basicWidget || this.parent.title.basicControls)) {
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = (this.parent.title.basicWidget || this.parent.title.basicControls)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var v = _step.value;

	                        if (_utils.Utils.typeof(v, 'object') && v.name === 'export') {
	                            exportConf = v;
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            if (this.parent.title && (this.parent.title.menuWidget || this.parent.title.menuControls)) {
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                    for (var _iterator2 = (this.parent.title.menuWidget || this.parent.title.menuControls)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                        var _v = _step2.value;

	                        if (_utils.Utils.typeof(_v, 'object') && _v.name === 'export') {
	                            exportConf = _v;
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError2 = true;
	                    _iteratorError2 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                            _iterator2.return();
	                        }
	                    } finally {
	                        if (_didIteratorError2) {
	                            throw _iteratorError2;
	                        }
	                    }
	                }
	            }
	            var exportAll = false;
	            if (exportConf.exportAll) {
	                exportAll = true;
	            }
	            this.parent.titleExportAll = exportAll;
	            return exportAll;
	        }
	        // 获取要下载导出数据的配置

	    }, {
	        key: '_getExportConfig',
	        value: function _getExportConfig() {
	            var columns = this.parent.columns;
	            var headers = [];
	            var exportAll = this.findTitleExportConf();
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = columns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var column = _step3.value;

	                    // 只导出展示的字段，如果配置了exportAll，则导出时导出全部
	                    if (exportAll || column.display !== false || this.parent.titleRef && this.parent.titleRef.state.showAllTags) {
	                        // 考虑表头行合并的情况，及column中含有children,则需要取出children中内容
	                        if (!!column.children) {
	                            headers = headers.concat(this.getExportHeader(column.children, column.title));
	                        } else {
	                            var item = {
	                                key: column.dataIndex || column.key,
	                                title: column.title
	                            };
	                            // 导出专用render函数
	                            if (column.exportRender) {
	                                item.render = column.exportRender;
	                            }
	                            headers.push(item);
	                        }
	                    }
	                }
	                // 如果为后端分页，则传递 source 配置
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            if (this.parent.serverPaging) {
	                return {
	                    type: 'asyn',
	                    headers: headers,
	                    source: _extends({}, this.parent.__filtered.source, {
	                        params: this.parent.getSourceParams()
	                    }),
	                    total: this.parent.pagination.total || 0
	                };
	            }
	            // 否则传递 data
	            var data = this.parent.__props.data || [];
	            // 考虑数据有树形关系，在此进行关系打平，将子节点与父节点放在同一级
	            var newData = this.generateExportSyncData(data);
	            return {
	                type: 'sync',
	                headers: headers,
	                data: newData,
	                total: data.length
	            };
	        }

	        // 取出数据中children部分

	    }, {
	        key: 'generateExportSyncData',
	        value: function generateExportSyncData(nowData) {
	            var exportData = [];
	            for (var i in nowData) {
	                exportData.push(nowData[i]);
	                if (!!nowData[i].children && nowData[i].children.length > 0) {
	                    exportData = exportData.concat(this.generateExportSyncData(nowData[i].children));
	                }
	            }
	            return exportData;
	        }
	        // 取出columns中配置的表头，用作导出headers

	    }, {
	        key: 'getExportHeader',
	        value: function getExportHeader(columnChildren, preTitle) {
	            var exportHeader = [];
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = columnChildren[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var item = _step4.value;

	                    if (!!item.children) {
	                        var childrenRes = this.getExportHeader(item.children, preTitle + '-' + item['title']);
	                        exportHeader = exportHeader.concat(childrenRes);
	                    } else {
	                        var itemConf = {
	                            title: preTitle + '-' + item['title'],
	                            key: item['dataIndex'] || item['key']
	                        };
	                        // 导出专用render函数
	                        if (item.exportRender) {
	                            itemConf.render = item.exportRender;
	                        }
	                        exportHeader.push(itemConf);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }

	            return exportHeader;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return _react2.default.createElement(_export2.default, _extends({ key: 'export', _factory: this.parent._factory, style: { display: 'none' },
	                ref: function ref(ele) {
	                    return _this2.exportRef = ele;
	                }
	            }, this._getExportConfig()));
	        }
	    }]);

	    return TableExport;
	}(_react.Component);

	exports.default = TableExport;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Form组件入口文件
	 * **/

	// module.exports = require('./Form.js').default;
	// module.exports = require('./Forms.js').default;
	module.exports = {
	  Form: __webpack_require__(198).default,
	  Forms: __webpack_require__(199).default
	};
	// const Form = require('./Form.js');
	// const Forms = require('./Forms.js');

	// module.exports = {Form, Forms};

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.OriginForm = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(119);

	var _DataEntry = __webpack_require__(167);

	var _DataEntry2 = _interopRequireDefault(_DataEntry);

	var _utils = __webpack_require__(121);

	var _moment = __webpack_require__(125);

	var _moment2 = _interopRequireDefault(_moment);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 可配置表单
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var OriginForm = exports.OriginForm = function (_BaseComponent) {
	    _inherits(OriginForm, _BaseComponent);

	    function OriginForm(props) {
	        _classCallCheck(this, OriginForm);

	        // 过滤掉Form.create传入的form属性
	        var _this = _possibleConstructorReturn(this, (OriginForm.__proto__ || Object.getPrototypeOf(OriginForm)).call(this, props));

	        _this._filter.push('form');
	        _this._innerFilter.push('form');
	        _this._openApi.push('getValues', 'resetValues', 'clearValues', 'resetItem', 'getDisplayValues');
	        // 不复杂的属性，即无需merge处理直接覆盖的属性
	        _this._uncomplex.push('formData');
	        _this.__init();
	        _this.state = {
	            loading: false
	        };
	        // this.props.form; Antd.Form封装的函数
	        _this.form = props.form;
	        // 用于存储子Form的引用（因为无法直接拿到refs）
	        _this.formRef = {};
	        // 用于存储表单元素的引用
	        _this.itemRef = {};
	        // 组件原有配置中的 default 值
	        _this.oriDefaultValues = {};
	        // 组件传入的或者reset的值
	        _this.defaultValues = {};
	        // 用于记录当前form是否变换过（原来单个form通过复制新增等变为了多个）
	        // this.isArrayForm = false;
	        _this.init();
	        _this.itemsCache = {};
	        return _this;
	    }

	    _createClass(OriginForm, [{
	        key: 'init',
	        value: function init(nextProps) {
	            var _this2 = this;

	            // 过滤掉Form.create传入的form属性
	            var props = this.__props;
	            if (nextProps) {
	                props = _utils.Utils.merge({}, props, nextProps);
	            }
	            // this.__props = props;
	            props = _utils.Utils.filter(props, 'form');
	            this.formItemLayout = this.getLayout(props.layout);
	            // 使之成为受控组件，实现Form嵌套
	            if (props.formData && !_utils.Utils.equals(this.defaultValues, props.formData)) {
	                var data = this._formDataHandler(props.formData);
	                this.setDefaultValues(data);
	                nextProps && this.initValues();
	            }
	            // 如果items改变了，则把变化更新到 this.itemsCache 中
	            if (nextProps && nextProps.items && !_utils.Utils.equals(this.props.items, nextProps.items)) {
	                var oldItems = {};
	                this.props.items && this.props.items.forEach(function (item) {
	                    item && item.name && (oldItems[item.name] = item);
	                });
	                // 分别对每一项进行对比，仅更新需要更新的选项
	                nextProps.items.forEach(function (item) {
	                    if (item && item.name && _this2.itemsCache[item.name] && !_utils.Utils.isChange(item, oldItems[item.name])) {
	                        var changedConf = _utils.Utils.getChange(item, oldItems[item.name]);
	                        // 如果有type，需要重新处理type
	                        changedConf.type && (changedConf = _this2.__getConf(changedConf));
	                        _utils.Utils.merge(_this2.itemsCache[item.name], changedConf);
	                    }
	                });
	            }
	            nextProps && this.forceUpdate();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                this.init(nextProps);
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 把this抛出，供外部调用，因为使用refs找不到包装前的OriginForm对象
	            this.props.wrappedComponentRef && this.props.wrappedComponentRef(this);
	            // 当组件didmount前执行了resetValues时，不再次执行initValues
	            this.initValues();
	        }
	        // 保存初始值

	    }, {
	        key: 'setDefaultValues',
	        value: function setDefaultValues(data) {
	            // 防止改变原值
	            this.defaultValues = _utils.Utils.clone(data || {});
	        }
	        // 把数据格式化成需要的格式
	        // 调用 setFieldsValue 时，如果多传了字段，会报 warning，所以这里只返回可用的表单项的值
	        // Warning: Cannot use `setFieldsValue` until you use `getFieldDecorator` or `getFieldProps` to register it.

	    }, {
	        key: '_encodeValues',
	        value: function _encodeValues(values) {
	            var result = {};
	            for (var i in values) {
	                var item = this.itemsCache[i];
	                if (item && item.display !== false && item.type !== 'button') {
	                    result[i] = values[i];
	                    // 数字类型表单
	                    if (item.type === 'number') {
	                        result[i] = +result[i];
	                    }
	                    if (item.type === 'checkbox' || item.type === 'switch') {
	                        result[i] = !!+result[i];
	                    }
	                }
	            }
	            return result;
	        }
	        // 把数据格式化成正常的格式

	    }, {
	        key: '_formatValues',
	        value: function _formatValues(values) {
	            var result = {};
	            for (var i in values) {
	                var item = this.itemsCache[i];
	                // datepicker等返回的是moment对象，返回前先格式化成字符串
	                // 理论上已经不存在这种情况，暂时先保留
	                if (values[i] instanceof _moment2.default) {
	                    if (this.itemsCache[i] && this.itemsCache[i].format) {
	                        values[i] = values[i].format(this.itemsCache[i].format);
	                    }
	                    // 用 format 把数据格式化成 rules.type 要求的格式
	                } else if (item.rules && item.rules.type) {
	                    values[i] = _utils.Utils.format(values[i], item.rules.type);
	                }
	                if (item && item.type !== 'button') {
	                    result[i] = values[i];
	                }
	            }
	            return result;
	        }

	        /* 外部调用函数 **********************************************************************/

	    }, {
	        key: 'getValues',
	        value: function getValues() {
	            var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            // 校验数据
	            if (validate && this.validateFields()) {
	                return;
	            }
	            var values = this.form.getFieldsValue();
	            values = this._formatValues(values);
	            values = Object.assign({}, this.defaultValues, values);
	            if (this.__props.beforeSubmit) {
	                values = this.__props.beforeSubmit(values);
	            }
	            return values;
	        }
	        // 设置表单的值

	    }, {
	        key: 'setValues',
	        value: function setValues(data) {
	            this.form.setFieldsValue(data);
	        }
	    }, {
	        key: 'resetValues',
	        value: function resetValues(o) {
	            // 如果传入的值为空或者未设置的字段，则使用组件配置的default的值对组件进行初始化
	            var resetVal = Object.assign({}, this.oriDefaultValues, o);
	            var newData = _utils.Utils.clone(this._formDataHandler(resetVal));
	            this.setDefaultValues(newData);
	            this.initValues(newData);
	        }
	        // 清除表单。有别于重置

	    }, {
	        key: 'clearValues',
	        value: function clearValues() {
	            var values = this.getClearValues();
	            this.form.setFieldsValue(values);
	        }
	        // 更新某个表单项的配置

	    }, {
	        key: 'resetItem',
	        value: function resetItem(target, conf) {
	            // let targetConf = this.itemsCache[target];
	            // if (targetConf) {
	            //     this.itemRef[target].set(conf);
	            //     this.__mergeProps(targetConf, conf);
	            // }
	            this.joinSetValue(target, conf);
	            this.forceUpdate();
	        }
	        // 获取表单中输入/选择完成后端展示内容

	    }, {
	        key: 'getDisplayValues',
	        value: function getDisplayValues() {
	            var _this3 = this;

	            var result = _utils.Utils.each(Object.assign({}, this.itemRef, this.formRef), function (item, name) {
	                var getDisplay = item.getDisplayValue || item.getDisplayValues;
	                return getDisplay ? getDisplay() : _this3.form.getFieldValue(name);
	            });
	            return result;
	        }

	        /* 组件内部逻辑 **********************************************************************/
	        // 获取全部字段清空数据

	    }, {
	        key: 'getClearValues',
	        value: function getClearValues() {
	            var encode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            var values = {};
	            for (var i in this.itemsCache) {
	                values[i] = undefined;
	            }
	            if (encode) {
	                values = this._encodeValues(values);
	            }
	            return values;
	        }
	        // 上传文件回调

	    }, {
	        key: 'normFile',
	        value: function normFile(e) {
	            if (Array.isArray(e)) {
	                return e;
	            }
	            return e && e.fileList;
	        }
	        // 校验数据

	    }, {
	        key: 'validateFields',
	        value: function validateFields() {
	            var haveErr = false;
	            this.form.validateFields(function (err, values) {
	                err && (haveErr = true);
	            });
	            // 校验子form
	            var childForms = this.formRef;
	            if (childForms) {
	                for (var i in childForms) {
	                    if (childForms[i].validateFields()) {
	                        haveErr = true;
	                    }
	                }
	            }
	            return haveErr;
	        }
	        // 根据传入的 formData 设置初始值
	        // TODO: 新数据传入，要重设全部字段？

	    }, {
	        key: 'initValues',
	        value: function initValues(values) {
	            values = values || this.defaultValues;
	            // 清空未设置的值
	            values = Object.assign({}, this.getClearValues(false), values);
	            values = this._encodeValues(values);
	            if (values && !_utils.Utils.empty(values)) {
	                // 设置初始值前对传入的 formData 格式化
	                if (this.__props.beforeSetValues) {
	                    values = this.__props.beforeSetValues(values);
	                }
	                this.form.setFieldsValue(values);
	                // 如果设置了联动属性，均要触发onChange事件
	                for (var i in values) {
	                    var item = this.itemsCache[i];
	                    if (item && item.display !== false) {
	                        this.onChange(item, values[i]);
	                    }
	                }
	            }
	        }
	        // 对传入参数进行格式化

	    }, {
	        key: '_formDataHandler',
	        value: function _formDataHandler(data) {
	            if (this.__props.formDataHandler) {
	                data = this.__props.formDataHandler(data);
	            }
	            return data;
	        }
	        // 实现联动功能

	    }, {
	        key: 'onChange',
	        value: function onChange(item, val, string) {
	            if (string !== undefined) {
	                val = string;
	            } else if (_utils.Utils.typeof(val, 'object') && val.target) {
	                if (val.target.value !== undefined) {
	                    val = val.target.value;
	                } else if (val.target.checked !== undefined) {
	                    val = val.target.checked;
	                }
	            }
	            // 实现联动
	            if (item.join) {
	                for (var i in item.join) {
	                    // 本组件的ref
	                    var self = this.itemRef[item.name];
	                    this.joinSetValue(i, item.join[i], val, self);
	                }
	                // this.forceUpdate();
	            }
	        }
	        // 前两个参数必填，后两个参数选填

	    }, {
	        key: 'joinSetValue',
	        value: function joinSetValue(name, props, val, self) {
	            // 如果目标组件名称中间使用了.进行了分隔，则目标为一个复杂的组件（最终操作的目标不在同级）
	            var nameArr = name.split('.');
	            var isComplex = nameArr.length > 1;
	            var parentName = nameArr[0];
	            var attrName = nameArr[1];
	            var parentTarget = this.formRef[parentName];

	            // 处理属性
	            var newConf = {};
	            for (var j in props) {
	                // 目标组件的ref
	                var target = this.itemRef[name];
	                // 属性结果
	                var attrVal = props[j];
	                var oValue = void 0;
	                target && (oValue = target.get(j));
	                if (_utils.Utils.typeof(attrVal, 'function')) {
	                    // 参数依次为：当前组件值，目标组件原值，目标组件ref，当前组件ref
	                    // attrVal = attrVal(val, oValue, target || parentTarget, self);
	                    // 参数依次为：当前组件值，目标组件原值，其他（包括目标组件ref、当前组件ref、Form的引用等）
	                    attrVal = attrVal(val, oValue, { target: target, parentTarget: parentTarget, self: self, form: this });
	                }
	                // 特殊值处理，:value/:label
	                if (_utils.Utils.typeof(attrVal, 'string') && (attrVal.indexOf(':value') > -1 || attrVal.indexOf(':checked') > -1 || attrVal.indexOf(':label') > -1 || attrVal.indexOf(':old') > -1)) {
	                    var label = self.getDisplayValue ? self.getDisplayValue() : '';
	                    // 支持使用表达式
	                    attrVal = eval(attrVal.replace(':value', JSON.stringify(val)).replace(':checked', JSON.stringify(val)).replace(':label', JSON.stringify(label)).replace(':old', JSON.stringify(oValue)));
	                }
	                switch (j) {
	                    case 'checked':
	                    case 'value':
	                        {
	                            if (isComplex) {
	                                parentTarget.resetValues(_defineProperty({}, attrName, attrVal));
	                            } else {
	                                if (this.itemRef[name] || this.formRef[name]) {
	                                    this.form.setFieldsValue(_defineProperty({}, name, attrVal));
	                                }
	                                this.onChange(this.itemsCache[name], attrVal);
	                            }
	                            break;
	                        }
	                    case 'display':
	                        // 如果是从不展示到进行展示转变，则把默认值一并填上
	                        if (attrVal) {
	                            if (this.defaultValues[name] !== undefined) {
	                                newConf['default'] = this.defaultValues[name];
	                                // 当组件已存在时（存在display为false但组件未来得及销毁的情况），设置default无效，需使用form api设置
	                                if (this.itemRef[name] || this.formRef[name]) {
	                                    this.form.setFieldsValue(_defineProperty({}, name, newConf['default']));
	                                }
	                            }
	                        }
	                    // break;
	                    default:
	                        {
	                            // newConf[j] = attrVal;
	                            // j 支持使用多层级属性，例如：source.params.type
	                            _utils.Utils.toObject(newConf, j, attrVal);
	                            break;
	                        }
	                }
	            }
	            if (isComplex) {
	                parentTarget.resetItem(attrName, newConf);
	            } else {
	                // 保证能引起组件刷新（例如重新获取数据）
	                // 设置display属性由false变为true时，组件不存在
	                this.itemRef[name] && this.itemRef[name].set(newConf);
	                this.__mergeProps(this.itemsCache[name], newConf);
	            }
	        }
	        // 根据布局参数生成布局配置

	    }, {
	        key: 'getLayout',
	        value: function getLayout(layout) {
	            return {
	                labelCol: { span: layout.labelCol },
	                wrapperCol: { span: layout.wrapperCol }
	            };
	        }
	        // TODO: 函数太长了，需要整理下
	        // 生成单个表单项
	        // key 为表单name后缀，表单项循环时需要使用

	    }, {
	        key: 'getFormItem',
	        value: function getFormItem(oitem) {
	            var _this4 = this;

	            var okey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	            // 增加权限过滤
	            if (!oitem || !oitem.type || oitem.type === 'empty' || !this.__authority(oitem)) {
	                return;
	            }
	            if (!oitem.name) {
	                // 这里只有第一次进入而且没name的时候才会进到这里，后面重新render回跳过这儿
	                oitem = this.__getConf(oitem);
	            }
	            if (!oitem.name) {
	                // button类型可以不写name，这里生成一个随机的
	                if (oitem.type === 'button') {
	                    oitem.name = _utils.Utils.uniqueId();
	                } else {
	                    // 支持form中使用其他非录入数据功能的组件（无name）（展示类型的组件）
	                    // ！！注：一个组件是否是一个FormItem是通过是否有name判断的，没name的全部直接渲染
	                    // 遍历content，以支持展示类组件内部嵌套表单组件
	                    if (oitem.content) {
	                        oitem.children = _utils.Utils.traverse(oitem.content, function (content) {
	                            // 非对象的不再解析直接返回
	                            if (_utils.Utils.typeof(content, 'object')) {
	                                return _this4.getFormItem(content);
	                            }
	                            return content;
	                        });
	                    }
	                    return this.__analysis(_utils.Utils.filter(oitem, 'content'));
	                }
	            }
	            okey = okey !== null ? '-' + okey : '';
	            var name = oitem.name;
	            var key = oitem.name + okey;
	            // 把表单项额外存起来，方便后面各种联动的控制（需要改配置里的参数）
	            if (this.itemsCache[key]) {
	                oitem = this.itemsCache[key];
	            } else {
	                // items中的表单项可能使用了模板，需提前处理。因为部分属性form也需要使用
	                oitem = this.__getConf(oitem);
	                this.itemsCache[key] = oitem;
	            }
	            if (oitem.display === false) {
	                delete this.itemRef[key];
	                delete this.formRef[key];
	                return;
	            }
	            var getFieldDecorator = this.form.getFieldDecorator;
	            var itemLayout = void 0;
	            // 每个表单的布局可以独立控制
	            if (oitem.layout) {
	                itemLayout = this.getLayout(oitem.layout);
	            } else {
	                itemLayout = this.__props.layout.type === 'horizontal' ? this.formItemLayout : null;
	            }
	            var item = Object.assign({ rules: {} }, oitem);
	            if (_utils.Utils.typeof(item.rules, 'array')) {
	                item.rules = item.rules[0] || {};
	            }
	            delete item.layout;
	            // 如果rules外单独设置了required属性，则以此值为准
	            if (item.required !== undefined) {
	                item.rules['required'] = item.required;
	            }
	            // form中不允许表单域使用value，所以如果有value值，把值转换到default上
	            item.default = item.value || item.default;
	            if (item.default !== undefined) {
	                this.oriDefaultValues[item.name] = item.default;
	            }
	            // 过滤掉一些字段后，剩余的就是组件本身需要的参数
	            var itemProps = _utils.Utils.filter(item, ['label', 'default', 'value', 'help', 'extra', 'rules', 'join', 'regionConfig']);
	            // 额外配置的禁止更改的字段，设置disabled
	            if ((this.__props.forbidden || []).indexOf(itemProps.name) > -1) {
	                itemProps.disabled = true;
	            }
	            // 可以统一控制输入框等的大小
	            if (this.__props.size) {
	                itemProps.size = itemProps.size || this.__props.size;
	            }
	            // 触发Change时实现联动功能
	            this._inject(itemProps, 'onChange', this.onChange.bind(this, item), true);
	            // 存储ref
	            itemProps.ref = function (inst) {
	                return _this4.itemRef[key] = inst;
	            };
	            var otherOptions = {};
	            switch (item.type) {
	                case 'group':
	                case 'forms':
	                case 'form':
	                    if (item.type === 'group') {
	                        itemProps.type = 'form';
	                        // 子form如果使用group的type则去掉label
	                        itemLayout = { labelCol: { span: 0 }, wrapperCol: { span: 24 } };
	                    } else if (item.type === 'forms') {
	                        // forms组件的formData为一个数组
	                        item.rules['type'] = item.rules['type'] || 'array';
	                        item.default = item.default || item.formData || [{}];
	                    }
	                    // 三种组件的通用个逻辑
	                    itemProps.wrappedComponentRef = function (inst) {
	                        return _this4.formRef[key] = inst;
	                    };
	                    delete itemProps.ref;
	                    otherOptions = {
	                        valuePropName: 'formData'
	                    };
	                    item.default = item.default || item.formData || {};
	                    delete itemProps.formData;
	                    item.rules['type'] = item.rules['type'] || 'object';
	                    break;
	                case 'input':
	                    // 输入框增加回车事件监听
	                    if (itemProps.onPressEnter === undefined) {
	                        itemProps.onPressEnter = this.handleSubmit.bind(this);
	                    }
	                    // 收集值的时机改为onBlur
	                    otherOptions.trigger = 'onBlur';
	                    otherOptions.validateTrigger = 'onBlur';
	                    break;
	                case 'input-number':
	                    // 数字输入框
	                    item.rules['type'] = item.rules['type'] || 'number';
	                    // 收集值的时机改为onBlur，防止强制转换导致的不可输入情况
	                    otherOptions.trigger = 'onBlur';
	                    // 可减少一些输入过程中的报错信息
	                    otherOptions.validateTrigger = 'onBlur';
	                    break;
	                case 'select':
	                case 'radio':
	                    if (item.type === 'select') {
	                        if (item.mode && item.mode !== 'combobox') {
	                            item.rules['type'] = item.rules['type'] || 'array';
	                        }
	                        // 当有required时，再加message，否则会产生默认type为string
	                        if (item.rules['required']) {
	                            item.rules['message'] = item.rules['message'] || '\u8BF7\u9009\u62E9' + (item.label || '');
	                        }
	                        // 默认选中第一个
	                        if (!item.default && item.defaultFirst) {
	                            item.default = _utils.Utils.getFirstOption(item.options);
	                        }
	                        // 限制使用clear按钮
	                        if (item.rules['required']) {
	                            itemProps.allowClear = false;
	                        }
	                    }
	                    // 两种组件的通用逻辑
	                    // 更改获onchange时form获取组件值的逻辑，把数据格式化为需要的格式
	                    otherOptions = {
	                        getValueFromEvent: function getValueFromEvent(e, value) {
	                            if (value === '' || value === undefined) {
	                                return value;
	                            }
	                            // 如果没有设置类型，则根据default定义类型做转换
	                            var type = item.rules.type || (item.default !== undefined ? _utils.Utils.getType(item.default) : null);
	                            return type ? _utils.Utils.format(value, type) : value;
	                        }
	                    };
	                    // update at 2018/10/10 需避免无故增加的验证
	                    // 两种组件的通用逻辑
	                    // 更改获onchange时form获取组件值的逻辑，把数据格式化为需要的格式
	                    // otherOptions = {
	                    //     getValueFromEvent(e, value) {
	                    //         return (item.rules.type && value !== '' && value !== undefined) ? Utils.format(value) : value;
	                    //     }
	                    // };
	                    // 如果没有设置类型，则根据default定义类型
	                    // if (!item.rules['type'] && item.default !== null) {
	                    //     let type = Utils.getType(item.default);
	                    //     if (['number', 'string', 'boolean', 'array'].indexOf(type) > -1) {
	                    //         item.rules['type'] = type;
	                    //     }
	                    // }
	                    break;
	                case 'checkbox':
	                case 'switch':
	                    itemProps.content = itemProps.content || itemProps.placeholder;
	                    otherOptions = {
	                        valuePropName: 'checked'
	                    };
	                    item.rules['type'] = item.rules['type'] || 'boolean';
	                    break;
	                case 'checkbox-group':
	                    // 复选框组
	                    item.rules['type'] = item.rules['type'] || 'array';
	                    break;
	                case 'ueditor':
	                    // ueditor 输入框
	                    otherOptions = {
	                        valuePropName: 'data'
	                    };
	                    break;
	                case 'cascader':
	                    // 级联选择
	                    itemProps = Object.assign({
	                        showSearch: true
	                    }, itemProps);
	                    item.rules['type'] = item.rules['type'] || 'array';
	                    item.rules['message'] = item.rules['message'] || '\u8BF7\u9009\u62E9' + (item.label || '');
	                    // 限制使用clear按钮
	                    if (item.rules['required']) {
	                        itemProps.allowClear = false;
	                    }
	                    break;
	                case 'upload':
	                    {
	                        // 文件上传
	                        var isDisabled = {};
	                        // 可根据limit属性限制上传文件个数
	                        var limit = itemProps.limit;
	                        if (limit) {
	                            var list = this.form.getFieldValue(key) || [];
	                            itemProps.disabled = list.length >= limit;
	                        }
	                        otherOptions = {
	                            valuePropName: 'fileList',
	                            getValueFromEvent: this.normFile.bind(this)
	                        };
	                        break;
	                    }
	                case 'range-picker':
	                    // range-picker 组件的value为一个数组
	                    item.rules['type'] = item.rules['type'] || 'array';
	                    // current转换为当前时间
	                    if (!_utils.Utils.empty(item.default) && _utils.Utils.typeof(item.default, 'array')) {
	                        item.default = item.default.map(function (val) {
	                            // current转换为当前时间
	                            if (val === 'current') {
	                                return _utils.Utils.moment({}).format(item.format || 'YYYY-MM-DD HH:mm:ss');
	                            } else {
	                                return val;
	                            }
	                        });
	                    }
	                case 'date-picker':
	                case 'month-picker':
	                case 'time-picker':
	                    // 更改获onchange时form获取组件值的逻辑，传出的为字符串
	                    otherOptions = {
	                        // 对从组件内传出的数据进行处理，直接取时间字符串
	                        getValueFromEvent: function getValueFromEvent(date, string) {
	                            return string;
	                        }
	                    };
	                    // current转换为当前时间
	                    if (item.default === 'current') {
	                        item.default = _utils.Utils.moment({}).format(item.format || 'YYYY-MM-DD HH:mm:ss');
	                    }
	                    // 限制使用clear按钮
	                    if (item.rules['required']) {
	                        itemProps.allowClear = false;
	                    }
	                    break;
	                case 'button':
	                    // 带有各种功能的按钮
	                    itemProps.content = itemProps.content || item.label;
	                    return this.getButtonItem(itemProps, okey);
	                default:
	                    var Item = this._factory.getComp(item);
	                    // 如果不是输入型组件，且没有content属性，设置受控属性为content
	                    // 则将组件受控属性设置为children(content)，即当Form中的item.name对应的字段值变化时，展示的内容随着变化
	                    if (!_utils.Utils.isExtendsOf(Item, _DataEntry2.default) && itemProps.content === undefined) {
	                        otherOptions.valuePropName = 'children';
	                    }
	                    break;
	            }
	            // 通用的默认错误提示信息
	            if (item.rules['required']) {
	                item.rules['message'] = item.rules['message'] || (item.label || '') + '\u4E0D\u80FD\u4E3A\u7A7A';
	            }
	            // 进行类型进行强制转换
	            // 只有 trigger 为 onChange/onBlur 有效
	            var type = item.rules['type'];
	            var trigger = item.regionConfig && item.regionConfig.trigger || otherOptions.trigger;
	            if (['number', 'string', 'boolean'].indexOf(type) > -1 && ['onChange', 'onBlur', undefined].indexOf(trigger) > -1) {
	                otherOptions.getValueFromEvent = function (e, value) {
	                    return _utils.Utils.format(value, type);
	                };
	            }
	            // 保存默认值，以form渲染完成后执行initValues
	            if (item.default !== undefined) {
	                item.default = _utils.Utils.format(item.default, type);
	                // this.oriDefaultValues[item.name] = item.default;
	                if (this.defaultValues[item.name] === undefined) {
	                    this.defaultValues[item.name] = item.default;
	                }
	            }
	            var fieldProps = {
	                key: key,
	                label: !item.help ? item.label : _react2.default.createElement(
	                    'span',
	                    null,
	                    item.label,
	                    '\xA0',
	                    _react2.default.createElement(
	                        _antd.Tooltip,
	                        { title: item.help },
	                        _react2.default.createElement(_antd.Icon, { type: 'question-circle-o' })
	                    )
	                ),
	                extra: item.extra
	            };
	            return _react2.default.createElement(
	                _antd.Form.Item,
	                _extends({}, fieldProps, itemLayout),
	                getFieldDecorator(key, Object.assign({
	                    initialValue: item.default,
	                    rules: !_utils.Utils.empty(item.rules) ? [item.rules] : undefined
	                    // 更改收集数据/验证触发事件为失去焦点时
	                    // onBlur在radio，datepicker中不好用
	                    // trigger: 'onBlur',
	                }, otherOptions, item.regionConfig))(
	                // 作为子组件解析
	                this.__analysis(itemProps))
	            );
	        }
	    }, {
	        key: 'handleSubmit',
	        value: function handleSubmit(e, callback) {
	            var _this5 = this;

	            // 否则阻止提交按钮默认事件
	            e && e.preventDefault();
	            var onSubmit = callback || this.__props.onSubmit;
	            // 如果没有传入callback且没有props.onSubmit回调函数，则submit没有被捕获，不阻止提交（方便后面增加 action 扩展提交功能）
	            if (!onSubmit) {
	                return true;
	            }
	            var values = this.getValues();
	            if (values) {
	                var result = onSubmit(values, this);
	                // 如果回调函数返回了promise实例，则展示按钮上的loading效果，防止多次点击
	                if (result instanceof Promise) {
	                    this.setState({ loading: true });
	                    result.catch(function () {}).finally(function (resolve) {
	                        return _this5.setState({ loading: false });
	                    });
	                }
	            }
	        }
	        // submit按钮不进行处理，转移到 handleSubmit 函数上处理，在 handleSubmit 函数上判断是否需要阻止提交按钮默认事件

	    }, {
	        key: 'submitClick',
	        value: function submitClick(callback, e) {
	            this.handleSubmit(e, callback);
	        }
	    }, {
	        key: 'resetClick',
	        value: function resetClick(callback) {
	            this.resetValues();
	            callback && callback(this);
	        }
	    }, {
	        key: 'clearClick',
	        value: function clearClick(callback) {
	            this.clearValues();
	            callback && callback(this);
	        }
	        // 自定义按钮点击事件，返回表单数据

	    }, {
	        key: 'customClick',
	        value: function customClick(callback) {
	            var values = this.getValues(false);
	            callback && callback(values, this);
	        }
	        // 其他

	    }, {
	        key: 'othersClick',
	        value: function othersClick(callback) {
	            callback && callback(this);
	        }
	        // 获取表单项中的 button 类型的按钮

	    }, {
	        key: 'getButtonItem',
	        value: function getButtonItem(item, key) {
	            var handleClick = void 0;
	            var icon = void 0;
	            switch (item.action) {
	                case 'clear':
	                    icon = 'delete';
	                    handleClick = this.clearClick.bind(this, item.onClick, key);
	                    break;
	                case 'reset':
	                    icon = 'reload';
	                    handleClick = this.resetClick.bind(this, item.onClick, key);
	                    break;
	                case 'submit':
	                    icon = 'search';
	                    handleClick = this.handleSubmit.bind(this, null, item.onClick, key);
	                    break;
	                default:
	                    handleClick = this.othersClick.bind(this, item.onClick);
	                    break;
	            }
	            var oriOnClick = item.onClick;
	            var props = Object.assign({
	                key: item.name,
	                type: item.mode,
	                icon: icon,
	                style: { marginLeft: '8px' }
	            }, item, {
	                onClick: handleClick
	            });
	            return this.__analysis(props);
	        }
	        // 处理表单组

	    }, {
	        key: 'generateFormItemsGroup',
	        value: function generateFormItemsGroup(gitem, key) {
	            var _this6 = this;

	            if (!gitem.length) {
	                return;
	            }
	            var result = [];
	            // this.__props.layout.column;
	            var layout = { span: 24 / gitem.length };
	            gitem.forEach(function (item, index) {
	                if (!item) {
	                    return;
	                }
	                var formItem = void 0;
	                if (item instanceof Array) {
	                    formItem = _react2.default.createElement(
	                        _antd.Row,
	                        null,
	                        _this6.generateFormItemsGroup(item, key)
	                    );
	                } else {
	                    formItem = _this6.getFormItem(item, key);
	                    item.type === 'button' && (layout = null);
	                }
	                result.push(!!layout ? _react2.default.createElement(
	                    _antd.Col,
	                    _extends({ key: item.name || index }, layout),
	                    formItem
	                ) : formItem);
	            });
	            return result;
	        }
	        // 生成表单项列表

	    }, {
	        key: 'generateFormItems',
	        value: function generateFormItems(items, key) {
	            var result = [];
	            var index = 0;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var item = _step.value;

	                    if (item instanceof Array) {
	                        result.push(_react2.default.createElement(
	                            _antd.Row,
	                            { key: 'items-' + index },
	                            this.generateFormItemsGroup(item, key)
	                        ));
	                    } else {
	                        result.push(this.getFormItem(item, key));
	                    }
	                    index++;
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return result;
	        }
	        // 生成表单内容

	    }, {
	        key: 'renderItems',
	        value: function renderItems() {
	            var column = this.__props.layout.column;
	            var items = this.__props.items;
	            if (column) {
	                var merge = [];
	                items.forEach(function (v, i) {
	                    var index = Math.floor(i / column);
	                    merge[index] = merge[index] || [];
	                    // 如果v为null或空等，则不在加入到这一行，和{type: 'empty'}有区别：
	                    // 前者直接移除，布局会调整；后者依然在布局的逻辑中，剩余的表单项和其他表单项布局一致
	                    v && merge[index].push(v);
	                });
	                // 最后一行，如果列不够自动补齐
	                var lastArr = merge[merge.length - 1];
	                while (lastArr.length < column) {
	                    // 如果最后一项这是了layout，则证明用户想要自己布局，无需再做处理
	                    var lastItem = lastArr[lastArr.length - 1];
	                    if (lastItem && lastItem.layout) {
	                        break;
	                    }
	                    lastArr.push({ type: 'empty' });
	                }
	                items = merge;
	            }
	            return this.generateFormItems(items);
	        }
	        // 解析 Button 的配置，格式化成统一格式

	    }, {
	        key: 'analysisButtonConfig',
	        value: function analysisButtonConfig() {
	            var buttonsCfg = this.__props.buttons;
	            if (!buttonsCfg) {
	                return;
	            }
	            var formatCfg = {
	                layout: {
	                    type: 'center'
	                }
	            };
	            if (buttonsCfg instanceof Array) {
	                formatCfg.items = buttonsCfg;
	            } else {
	                if (!!buttonsCfg.layout) {
	                    if (typeof buttonsCfg.layout === 'string') {
	                        formatCfg.layout.type = buttonsCfg.layout;
	                    } else {
	                        formatCfg.layout = buttonsCfg.layout;
	                    }
	                }
	                formatCfg.items = buttonsCfg.items;
	            }
	            return formatCfg;
	        }
	        // 生成按钮

	    }, {
	        key: 'renderButtons',
	        value: function renderButtons() {
	            var _this7 = this;

	            var buttonsCfg = this.analysisButtonConfig();
	            if (!buttonsCfg) {
	                return;
	            }
	            return _react2.default.createElement(
	                _antd.Row,
	                { type: 'flex', justify: buttonsCfg.layout.type },
	                _react2.default.createElement(
	                    _antd.Col,
	                    buttonsCfg.layout,
	                    _react2.default.createElement(
	                        _antd.Form.Item,
	                        { key: 'buttons' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'form-buttons' },
	                            buttonsCfg.items.map(function (item) {
	                                var value = item.value || item.content && _this7.__analysis(item.content);
	                                item.mode && (item.type = item.mode);
	                                switch (item.action) {
	                                    case 'submit':
	                                        if (item.icon === undefined) {
	                                            item.icon = 'search';
	                                        }
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: 'submit' }, item, {
	                                                loading: _this7.state.loading,
	                                                onClick: _this7.submitClick.bind(_this7, item.onClick) }),
	                                            value
	                                        );
	                                    case 'reset':
	                                        if (item.icon === undefined) {
	                                            item.icon = 'reload';
	                                        }
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: 'reset' }, item, {
	                                                onClick: _this7.resetClick.bind(_this7, item.onClick) }),
	                                            value
	                                        );
	                                    case 'clear':
	                                        if (item.icon === undefined) {
	                                            item.icon = 'delete';
	                                        }
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: 'clear' }, item, {
	                                                onClick: _this7.clearClick.bind(_this7, item.onClick) }),
	                                            value
	                                        );
	                                    default:
	                                        return _react2.default.createElement(
	                                            _antd.Button,
	                                            _extends({ key: item.value || _utils.Utils.hash(item, 8) }, item, {
	                                                onClick: _this7.customClick.bind(_this7, item.onClick) }),
	                                            value
	                                        );
	                                }
	                            })
	                        )
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var className = 'uf-form ';
	            if (this.__props.layout.type === 'inline') {
	                className += 'uf-form-inline ';
	            }
	            if (this.__props.size) {
	                className += 'uf-form-' + this.__props.size + ' ';
	            }
	            if (this.__props.layout.column) {
	                className += 'uf-form-multiseriate ';
	            }
	            var style = {
	                className: className + (this.__props.className || ''),
	                style: this.__props.style
	            };
	            // 当没有配置header是，省略外层的div标签
	            return !this.__props.header ? _react2.default.createElement(
	                _antd.Form,
	                _extends({}, style, { layout: this.__props.layout.type, onSubmit: this.handleSubmit.bind(this) }),
	                this.renderItems(),
	                this.renderButtons()
	            ) : _react2.default.createElement(
	                'div',
	                style,

	                // header 可以是字符串，也可以是一个组件配置
	                _utils.Utils.typeof(this.__props.header, 'string') ? _react2.default.createElement(
	                    'div',
	                    { className: 'form-header' },
	                    _react2.default.createElement(
	                        'h5',
	                        null,
	                        this.__props.header
	                    ),
	                    _react2.default.createElement('hr', null)
	                ) : _react2.default.createElement(
	                    'div',
	                    { className: 'form-header' },
	                    this.__analysis(this.__props.header)
	                ),
	                _react2.default.createElement(
	                    _antd.Form,
	                    { layout: this.__props.layout.type, onSubmit: this.handleSubmit.bind(this) },
	                    this.renderItems(),
	                    this.renderButtons()
	                )
	            );
	        }
	    }]);

	    return OriginForm;
	}(_base.BaseComponent);

	var ReactForm = _antd.Form.create({
	    onValuesChange: function onValuesChange(props, values) {
	        // Should provide an event to pass values to Form.
	        if (props.onChange) {
	            if (_typeof(props.formData) === 'object') {
	                if (_utils.Utils.isChange(values, props.formData) || props.onChange.valuesStr !== JSON.stringify(values)) {
	                    // 缓存上传传入的结果
	                    props.onChange.valuesStr = JSON.stringify(values);
	                    props.onChange(Object.assign({}, props.formData, values));
	                }
	            } else {
	                props.onChange(values);
	            }
	        }
	    }
	})(OriginForm);

	// Update at 2017/10/26，使组件类型统一，在组件外增加一层壳子
	// Form.create生成的组件是非BaseComponent类型的，需要外面再包一层壳子。
	// 注意壳子只是用来声明组件类型的，不需要对参数进行任何处理，所以无需调用 __init() 函数

	var NewForm = function (_BaseComponent2) {
	    _inherits(NewForm, _BaseComponent2);

	    function NewForm() {
	        _classCallCheck(this, NewForm);

	        return _possibleConstructorReturn(this, (NewForm.__proto__ || Object.getPrototypeOf(NewForm)).apply(this, arguments));
	    }

	    _createClass(NewForm, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(ReactForm, this.props);
	        }
	    }]);

	    return NewForm;
	}(_base.BaseComponent);

	exports.default = NewForm;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(121);

	var _antd = __webpack_require__(111);

	var _Form = __webpack_require__(198);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 可提供表单复制新增的组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author susisi@baidu.com 2018-05-12
	

	// 继承Form组件，以复用其逻辑
	// export default class Forms extends BaseComponent {
	var Forms = function (_OriginForm) {
	    _inherits(Forms, _OriginForm);

	    function Forms(props) {
	        _classCallCheck(this, Forms);

	        // __init 由父组件执行
	        // this.__init();
	        var _this = _possibleConstructorReturn(this, (Forms.__proto__ || Object.getPrototypeOf(Forms)).call(this, props));

	        _this.setDefaultValues();
	        _this.formRef = {}; // 用于存储子Form的引用（因为无法直接拿到refs）
	        return _this;
	    }

	    _createClass(Forms, [{
	        key: '_beforeInit',
	        value: function _beforeInit() {
	            var _get2;

	            for (var _len = arguments.length, p = Array(_len), _key = 0; _key < _len; _key++) {
	                p[_key] = arguments[_key];
	            }

	            _get(Forms.prototype.__proto__ || Object.getPrototypeOf(Forms.prototype), '_beforeInit', this) && (_get2 = _get(Forms.prototype.__proto__ || Object.getPrototypeOf(Forms.prototype), '_beforeInit', this)).call.apply(_get2, [this].concat(p));
	            this._filter.push('operation');
	        }
	        // 覆盖原Form初始化逻辑

	    }, {
	        key: 'init',
	        value: function init() {}
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // 把this抛出，供外部调用，因为使用refs找不到包装前的ReactForm对象
	            this.props.wrappedComponentRef && this.props.wrappedComponentRef(this);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (this.__shouldUpdate(this.props, nextProps)) {
	                // 使之成为受控组件，实现与Form嵌套
	                if (!_utils.Utils.equals(this.__prevProps.formData, nextProps.formData)) {
	                    this.setDefaultValues(nextProps.formData);
	                    this.forceUpdate();
	                }
	            }
	        }
	        // 设置 formData 并保证 formData 不会为空

	    }, {
	        key: 'setDefaultValues',
	        value: function setDefaultValues(formData) {
	            formData = formData || this.__props.formData || [];
	            if (_utils.Utils.typeof(formData, 'object')) {
	                formData = [formData];
	            }
	            // if (formData.length === 0) {
	            //     formData = [{}];
	            // }
	            this.__props.formData = formData;
	        }
	        /* 外部调用函数 **********************************************************************/

	        // 获取所有表单的值

	    }, {
	        key: 'getValues',
	        value: function getValues() {
	            for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                params[_key2] = arguments[_key2];
	            }

	            return _utils.Utils.map(this.formRef, function (item) {
	                return item.getValues.apply(item, params);
	            });
	        }
	        // 重置所有表单的值

	    }, {
	        key: 'resetValues',
	        value: function resetValues(o) {
	            // 如果是数组，则直接重置全部内容，数组有几项就展示几个表单
	            // 否则认为传入的是重置各个表单的某些值，即循环各个表单，并把内容设置进去
	            if (_utils.Utils.typeof(o, 'array')) {
	                this.__setProps({ formData: o });
	            } else {
	                _utils.Utils.each(this.formRef, function (item) {
	                    item.resetValues(o);
	                });
	            }
	        }
	    }, {
	        key: 'clearValues',
	        value: function clearValues() {
	            for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                params[_key3] = arguments[_key3];
	            }

	            return _utils.Utils.map(this.formRef, function (item) {
	                return item.clearValues.apply(item, params);
	            });
	        }
	    }, {
	        key: 'resetItem',
	        value: function resetItem() {
	            for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                params[_key4] = arguments[_key4];
	            }

	            return _utils.Utils.map(this.formRef, function (item) {
	                return item.resetItem.apply(item, params);
	            });
	        }
	    }, {
	        key: 'getDisplayValues',
	        value: function getDisplayValues() {
	            for (var _len5 = arguments.length, params = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	                params[_key5] = arguments[_key5];
	            }

	            return _utils.Utils.map(this.formRef, function (item) {
	                return item.getDisplayValues.apply(item, params);
	            });
	        }

	        /* 组件内部逻辑 **********************************************************************/

	        // 校验数据

	    }, {
	        key: 'validateFields',
	        value: function validateFields() {
	            var haveErr = false;
	            // 校验子form
	            var childForms = this.formRef;
	            if (childForms) {
	                for (var i in childForms) {
	                    if (childForms[i].validateFields()) {
	                        haveErr = true;
	                    }
	                }
	            }
	            return haveErr;
	        }
	        // 同步给父组件

	    }, {
	        key: 'onChange',
	        value: function onChange() {
	            var _props;

	            this.__props.onChange && (_props = this.__props).onChange.apply(_props, arguments);
	        }
	        // 复制新增

	    }, {
	        key: 'copyForm',
	        value: function copyForm(index) {
	            // 获取已经填写的form内容
	            var formData = this.getValues(false);
	            // 为formData增加一个元素并重新渲染
	            formData.splice(index + 1, 0, formData[index]);
	            this.__setProps({ formData: formData });
	            this.onChange(formData);
	        }
	        // 简单新增

	    }, {
	        key: 'addForm',
	        value: function addForm(index) {
	            // 获取已经填写的form内容
	            var formData = this.getValues(false);
	            if (!index && index !== 0) {
	                index = formData.length;
	            }
	            // 新增的form的formdata为一个空对象
	            formData.splice(index + 1, 0, {});
	            this.__setProps({ formData: formData });
	            this.onChange(formData);
	        }
	        // 删除表单

	    }, {
	        key: 'deleteForm',
	        value: function deleteForm(index) {
	            // 为formData减少一个元素并重新渲染
	            var formData = this.__props.formData;
	            formData.splice(index, 1);
	            this.__setProps({ formData: formData });
	            this.onChange(formData);
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(index, data) {
	            if (this.__props.formData[index]) {
	                this.__props.formData[index] = data;
	            }
	            this.onChange(this.__props.formData);
	        }
	        // 默认展示形式

	    }, {
	        key: 'renderForms',
	        value: function renderForms() {
	            var _this2 = this;

	            var formData = this.__props.formData;
	            // 清空原来记录的formRef，因为index会变
	            this.formRef = {};
	            // 渲染多个form
	            // 如果没有数据，则只展示一个加号
	            return formData.length === 0 ? _react2.default.createElement(_antd.Button, { type: 'dashed', className: 'add-form-icon',
	                icon: 'plus-circle-o',
	                onClick: this.addForm.bind(this, null) }) : formData.map(function (v, index) {
	                var key = _this2.key + '-' + index;
	                // form 属性被Form组件过滤到了 __filtered 中
	                var formConfig = Object.assign({}, _this2.__filtered.form, {
	                    type: 'form',
	                    key: key,
	                    wrappedComponentRef: function wrappedComponentRef(inst) {
	                        return _this2.formRef[key] = inst;
	                    },
	                    onChange: _this2.handleChange.bind(_this2, index),
	                    formData: v
	                });
	                return _react2.default.createElement(
	                    'div',
	                    { key: _this2.key + '-' + index, className: 'uf-forms-item' },
	                    _this2.__analysis(formConfig),
	                    _this2.__props.addType !== false && _this2.__analysis({
	                        type: 'div',
	                        className: 'forms-icons',
	                        content: _this2.operationHandler(v, index, [{
	                            type: 'button',
	                            key: 'add',
	                            mode: 'dashed',
	                            icon: 'plus-circle-o',
	                            className: 'add-form-icon',
	                            action: _this2.__props.addType === 'add' ? 'add' : 'copy'
	                        }, {
	                            type: 'button',
	                            key: 'delete',
	                            mode: 'dashed',
	                            icon: 'minus-circle-o',
	                            className: 'delete-form-icon',
	                            action: 'delete'
	                        }])
	                    })
	                );
	            });
	        }

	        // 使用表格的方式展示

	    }, {
	        key: 'renderTableForms',
	        value: function renderTableForms() {
	            var _this3 = this;

	            var formData = this.__props.formData;
	            // form 属性被Form组件过滤到了 __filtered 中
	            var formConfig = Object.assign({}, this.__filtered.form);
	            // 如果items中有数组嵌套，使用drawLevel打平
	            formConfig.items = _utils.Utils.drawLevel(formConfig.items);
	            // 清空原来记录的formRef，因为index会变
	            this.formRef = {};
	            return _react2.default.createElement(
	                'div',
	                { className: 'table-forms' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'thead-div' },
	                    formConfig.items.map(function (item, index) {
	                        return _react2.default.createElement(
	                            'div',
	                            { key: index, className: 'th-div' },
	                            item.label
	                        );
	                    }),
	                    this.__props.addType !== false && _react2.default.createElement(
	                        'div',
	                        { key: 'operate', className: 'th-div' },
	                        '\u64CD\u4F5C',
	                        this.__filtered.operation === undefined && _react2.default.createElement(_antd.Icon, { type: 'plus-square-o', className: 'operate-add',
	                            onClick: this.addForm.bind(this, null) })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'tbody-div' },
	                    formData.map(function (v, index) {
	                        var key = _this3.key + '-' + index;
	                        return _this3.__analysis(Object.assign({}, formConfig, {
	                            type: 'form',
	                            layout: { type: 'inline' },
	                            key: key,
	                            wrappedComponentRef: function wrappedComponentRef(inst) {
	                                return _this3.formRef[key] = inst;
	                            },
	                            onChange: _this3.handleChange.bind(_this3, index),
	                            formData: v,
	                            // 增加操作列
	                            items: formConfig.items.concat(_this3.__props.addType === false ? [] : {
	                                type: 'div',
	                                key: _this3.key + '-' + index,
	                                className: 'operate',
	                                content: _this3.operationHandler(v, index, [{
	                                    type: 'icon',
	                                    key: 'add',
	                                    mode: 'plus-circle',
	                                    action: _this3.__props.addType === 'add' ? 'add' : 'copy'
	                                }, {
	                                    type: 'icon',
	                                    key: 'delete',
	                                    mode: 'minus-circle',
	                                    action: 'delete'
	                                }])
	                            })
	                        }));
	                    })
	                )
	            );
	        }
	        // 处理自定义的操作按钮参数

	    }, {
	        key: 'operationHandler',
	        value: function operationHandler(row, index, defaultBtns) {
	            var _this4 = this;

	            if (this.__props.addType === false) {
	                return [];
	            }
	            // operation属性为一个函数，如果函数返回false，则不展示操作按钮，否则展示返回的结果
	            var operateBtns = this.__filtered.operation && this.__filtered.operation(row, index);
	            if (operateBtns === false) {
	                operateBtns = [];
	            }
	            // 如果没有operateBtns，则使用默认的
	            if (!_utils.Utils.typeof(operateBtns, 'array')) {
	                operateBtns = defaultBtns;
	            }
	            return operateBtns.map(function (v) {
	                var item = _utils.Utils.clone(v);
	                switch (v.action) {
	                    case 'add':
	                        item.onClick = function (e) {
	                            _this4.addForm(index);
	                            v.onClick && v.onClick(e, row, index);
	                        };
	                        break;
	                    case 'copy':
	                        item.onClick = function (e) {
	                            _this4.copyForm(index);
	                            v.onClick && v.onClick(e, row, index);
	                        };
	                        break;
	                    case 'delete':
	                        item.onClick = function (e) {
	                            _this4.deleteForm(index);
	                            v.onClick && v.onClick(e, row, index);
	                        };
	                        break;
	                    default:
	                        item.onClick = function (e) {
	                            v.onClick && v.onClick(e, row, index);
	                        };
	                        break;
	                }
	                return item;
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                this.__getCommonProps({ className: 'uf-forms' }),
	                this.__props.mode === 'table' ? this.renderTableForms() : this.renderForms(),
	                this.renderButtons()
	            );
	        }
	    }]);

	    return Forms;
	}(_Form.OriginForm);

	exports.default = Forms;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// module.exports = require('./Modal.js').default;
	module.exports = {
	    Modal: __webpack_require__(201).default,
	    Dashboard: __webpack_require__(202).default,
	    Drawer: __webpack_require__(203).default
	};

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _instance = __webpack_require__(158);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file ReactModal 适用于弹出层快速提交表单
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	


	var NewModal = function (_BaseComponent) {
	    _inherits(NewModal, _BaseComponent);

	    function NewModal(props) {
	        _classCallCheck(this, NewModal);

	        var _this = _possibleConstructorReturn(this, (NewModal.__proto__ || Object.getPrototypeOf(NewModal)).call(this, props));

	        _this.class.push('modal');
	        // 开放给用户使用的 Api，需处理下
	        _this._openApi.push('show', 'close');
	        _this.__init();
	        return _this;
	    }

	    _createClass(NewModal, [{
	        key: '_beforeInit',
	        value: function _beforeInit() {
	            _get(NewModal.prototype.__proto__ || Object.getPrototypeOf(NewModal.prototype), '_beforeInit', this).call(this);
	            // 增加一些默认的事件处理函数
	            this.__props = Object.assign({
	                onCancel: this._defaultCancelHandler.bind(this)
	            }, this.__props);
	        }
	    }, {
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            var _this2 = this;

	            _get(NewModal.prototype.__proto__ || Object.getPrototypeOf(NewModal.prototype), '_afterSetProps', this).call(this);
	            // footer的按钮点击时增加一些默认处理逻辑
	            if (this.__props.footer) {
	                var buttons = this._handleButtons(this.__props.footer);
	                this.__props.footerContent = this.__analysis(buttons);
	                delete this.__props.footer;
	            }
	            // 如果有form属性，说明是form弹框，做额外处理
	            if (this.__props.form) {
	                var formConf = this.__props.form;
	                if (_utils.Utils.typeof(formConf, 'function')) {
	                    formConf = formConf();
	                    // 如果form为函数，则认为用户想要每次都刷新form整个配置，所以此处给form.key一个随机值，使form强制刷新
	                    if (formConf.key === undefined) {
	                        formConf.key = _utils.Utils.uniqueId();
	                    }
	                } else {
	                    delete this.__props.form;
	                }
	                // form配置
	                formConf = Object.assign({
	                    type: 'form',
	                    wrappedComponentRef: function wrappedComponentRef(inst) {
	                        _this2.formRef = inst;
	                    }
	                }, formConf);
	                // 兼容 formData 置于不同位置
	                formConf.formData = formConf.formData || this.__props.params;
	                // 可以写其他内容在content中，置于form之上
	                this.__props.formContent = this.__analysis(formConf);
	            }
	        }

	        /********** 外部调用函数 *************************************************/
	        // 展示弹框

	    }, {
	        key: 'show',
	        value: function show(data, active) {
	            var _this3 = this;

	            var newProps = { visible: true };
	            // 保存传入的值
	            if (data) {
	                newProps.params = data;
	            }
	            // title当为函数时，为跟随show传入的数据动态配置
	            if (_utils.Utils.typeof(this.__props.title, 'function')) {
	                newProps.titleContent = this.__analysis(this.__props.title(data));
	            }
	            // 重新执行 render 函数
	            if (_utils.Utils.typeof(this.__props.render, 'function')) {
	                newProps.renderContent = this.__analysis(this.__props.render(data));
	            }
	            this.__setProps(newProps, function () {
	                // 如果是form弹框，填充form内容为data或重置
	                _this3.formRef && _this3.formRef.resetValues(data);
	            });
	        }
	        // 关闭弹框

	    }, {
	        key: 'close',
	        value: function close() {
	            var _this4 = this;

	            this.__setProps({ visible: false }, function () {
	                if (_this4.formRef && !_this4.formRef.unmounted) {
	                    // 如果是form弹框，重置form内容
	                    _this4.formRef.clearValues();
	                } else {
	                    delete _this4.formRef;
	                }
	            });
	        }

	        /********** 内部调用函数 *************************************************/
	        // 默认点击取消时的处理逻辑

	    }, {
	        key: '_defaultCancelHandler',
	        value: function _defaultCancelHandler() {
	            this.close();
	        }
	        // 获取参数函数，可能会在新子组件中重写

	    }, {
	        key: '_getParams',
	        value: function _getParams() {
	            // 如果是form弹框，返回form内容
	            if (this.formRef) {
	                var values = this.formRef.getValues();
	                if (values) {
	                    return values;
	                }
	                // 如果验证失败，返回null，阻止提交数据
	                return null;
	                // 否则返回params
	            } else {
	                return this.__props.params || this.__filtered.api.params || {};
	            }
	        }
	        // onSubmit 以此函数为入口

	    }, {
	        key: '_submitHandler',
	        value: function _submitHandler() {
	            var _props,
	                _this5 = this;

	            var params = this._getParams();
	            if (!params) {
	                return;
	            }
	            // 由于复用 BaseComponent 通用发送数据逻辑，从Form中获取到的数据直接放到 api.params 中，供action注册的onSubmit取用
	            // this.__filtered.api.params 可能等于 undefined，此时merge无效
	            // Utils.merge(this.__filtered.api.params, params);
	            this.__filtered.api.params = params;
	            // this.__props.onSubmit 有可能是用户自定义的，也有可能是action注册上去的

	            for (var _len = arguments.length, op = Array(_len), _key = 0; _key < _len; _key++) {
	                op[_key] = arguments[_key];
	            }

	            var result = this.__props.onSubmit && (_props = this.__props).onSubmit.apply(_props, [params].concat(op));
	            // 如果回调函数返回了promise实例，则展示按钮上的loading效果，防止多次点击
	            if (result instanceof Promise) {
	                this.__setProps({ confirmLoading: true });
	            }
	            // 不管是否为Promise，成功与失败逻辑如下
	            this.__compatePromise(result, function (success) {
	                var finish = _this5._successHandler(result);
	                _this5.__compatePromise(finish, function (success) {
	                    _this5.__setProps({ confirmLoading: false });
	                    _this5.close();
	                });
	            }, function (error) {
	                _this5.__setProps({ confirmLoading: false });
	            });
	        }
	    }, {
	        key: '_successHandler',
	        value: function _successHandler() {
	            var _props2;

	            return this.__props.onSuccess && (_props2 = this.__props).onSuccess.apply(_props2, arguments);
	        }
	        // 处理 footer 按钮

	    }, {
	        key: '_handleButtons',
	        value: function _handleButtons(items) {
	            var _this6 = this;

	            if (!_utils.Utils.typeof(items, 'array')) {
	                items = [items];
	            }
	            var result = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    var item = _utils.Utils.copy(v);
	                    delete item.action;
	                    switch (v.action) {
	                        case 'submit':
	                            // action === 'submit' 的按钮和默认的确认按钮等价（onClick === onSubmit）
	                            this.__props.onSubmit = v.onClick || this.__props.onSubmit;
	                            item.onClick = this._submitHandler.bind(this);
	                            break;
	                        case 'reset':
	                            item.onClick = function () {
	                                _this6.formRef && _this6.formRef.resetValues();
	                            };
	                            break;
	                        case 'clear':
	                            item.onClick = function () {
	                                _this6.formRef && _this6.formRef.clearValues();
	                            };
	                            break;
	                        case 'cancel':
	                            // action === 'cancel' 的按钮和默认的取消按钮等价（onClick === onCancel)
	                            if (item.onClick) {
	                                this.__props.onCancel = v.onClick;
	                            } else {
	                                item.onClick = this.__props.onCancel;
	                            }
	                            break;
	                        default:
	                            break;
	                    }
	                    result.push(item);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return result;
	        }
	        // 根据用户配置的 posRank 对展示内容进行排序
	        // 默认顺序是：render|content|form

	    }, {
	        key: 'getChildrenRank',
	        value: function getChildrenRank() {
	            var map = {
	                render: this.__props.renderContent,
	                content: this.__props.children,
	                form: this.__props.formContent
	            };
	            var rank = ['render', 'content', 'form'];
	            if (this.__props.posRank) {
	                var arr = this.__props.posRank.split('|');
	                // 去重并取后三个，防止用户传入非规定的字符串导致程序异常
	                rank = _utils.Utils.distinct(arr.concat(rank)).splice(-3);
	            }
	            return rank.map(function (v) {
	                return map[v];
	            });
	        }
	        // 可供子组件继承/重写

	    }, {
	        key: 'handleSelfProps',
	        value: function handleSelfProps() {
	            // footer是在组件中解析的，解析后放置在footerContent中
	            var selfProps = this.__getCommonProps({ className: 'uf-modal' });
	            selfProps.onOk = this._submitHandler.bind(this);
	            if (this.__props.footerContent) {
	                selfProps.footer = this.__props.footerContent;
	            }
	            return selfProps;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // 获取排序后的结果
	            var children = this.getChildrenRank();
	            return _react2.default.createElement(
	                _antd.Modal,
	                _extends({}, _utils.Utils.filter(this.__props, ['children', 'title']), this.handleSelfProps(), {
	                    title: _utils.Utils.typeof(this.__props.title, 'function') ? this.__props.titleContent : this.__props.title }),
	                children[0],
	                children[1],
	                children[2]
	            );
	        }
	    }]);

	    return NewModal;
	}(_base.BaseComponent);

	/**** Modal静态类调用函数 *************************************************************************/

	// 可随时随地用来创建新的弹框，且创建完成后返回destroy函数用于销毁弹框


	NewModal.create = function (insName, config) {
	    config.type = 'modal';
	    config.visible = config.visible || true;
	    // 增加关闭弹窗删除dom节点逻辑
	    return ((0, _instance.getInstance)(insName) || _src2.default)._append(config, null, 'onCancel');
	};

	/**** Modal自带快捷调用函数 *************************************************************************/

	// 统一处理config（某些属性需要二次解析）
	function showMessage(type, insName, config) {
	    var _arr = ['title', 'content'];

	    for (var _i = 0; _i < _arr.length; _i++) {
	        var v = _arr[_i];
	        if (config[v] && !_utils.Utils.typeof(config[v], 'string')) {
	            config[v] = ((0, _instance.getInstance)(insName) || _src2.default).render(config[v]);
	        }
	    }
	    config.className = 'uf-modal ' + (config.className ? config.className : '');
	    return _antd.Modal[type](config);
	}

	NewModal.info = showMessage.bind(null, 'info');
	NewModal.success = showMessage.bind(null, 'success');
	NewModal.error = showMessage.bind(null, 'error');
	NewModal.warning = showMessage.bind(null, 'warning');
	NewModal.confirm = showMessage.bind(null, 'confirm');

	exports.default = NewModal;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _Modal = __webpack_require__(201);

	var _Modal2 = _interopRequireDefault(_Modal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Dashboard 自己造一个使用modal处理逻辑但是不是弹框而是直接放在页面上的组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	


	var Dashboard = function (_NewModal) {
	    _inherits(Dashboard, _NewModal);

	    function Dashboard() {
	        _classCallCheck(this, Dashboard);

	        return _possibleConstructorReturn(this, (Dashboard.__proto__ || Object.getPrototypeOf(Dashboard)).apply(this, arguments));
	    }

	    _createClass(Dashboard, [{
	        key: 'show',

	        // 当传入visible时，根据visible控制是否展示
	        // 未传入visible时，根据当前的状态切换是否展示
	        // 即show同时包含了展示和隐藏的功能
	        value: function show(data) {
	            var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            if (!visible || this.__props.visible) {
	                this._close();
	            } else {
	                var _get2;

	                for (var _len = arguments.length, p = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	                    p[_key - 2] = arguments[_key];
	                }

	                (_get2 = _get(Dashboard.prototype.__proto__ || Object.getPrototypeOf(Dashboard.prototype), 'show', this)).call.apply(_get2, [this, data, visible].concat(p));
	            }
	        }
	    }, {
	        key: '_close',
	        value: function _close() {
	            this.__props.onClose && this.__props.onClose();
	            return _get(Dashboard.prototype.__proto__ || Object.getPrototypeOf(Dashboard.prototype), 'close', this).call(this);
	        }
	        // 覆盖原来关闭弹框的函数，防止页面隐藏

	    }, {
	        key: 'close',
	        value: function close() {}
	    }, {
	        key: 'render',
	        value: function render() {
	            // 获取排序后的结果
	            var children = this.getChildrenRank();
	            var body = _react2.default.createElement(
	                'div',
	                this.__getCommonProps(),
	                children[0],
	                children[1],
	                children[2],
	                _react2.default.createElement(
	                    'div',
	                    { style: { overflow: 'hidden' } },
	                    this.__props.footerContent
	                )
	            );
	            return !this.__props.visible ? null : !this.__props.title && !this.__props.closable ? body : _react2.default.createElement(
	                _antd.Collapse,
	                _extends({ activeKey: 'active', bordered: !!this.__props.bordered
	                }, this.__getCommonProps({ className: 'uf-dashboard' })),
	                _react2.default.createElement(
	                    _antd.Collapse.Panel,
	                    { key: 'active', header: _react2.default.createElement(
	                            'div',
	                            { style: { overflow: 'hidden' } },
	                            this.__analysis(this._handleButtons(this.__props.title)),
	                            this.__props.closable && _react2.default.createElement(
	                                _antd.Button,
	                                { size: 'small', style: { float: 'right' }, type: 'danger',
	                                    onClick: this._close.bind(this) },
	                                '\u5173\u95ED'
	                            )
	                        ) },
	                    body
	                )
	            );
	        }
	    }]);

	    return Dashboard;
	}(_Modal2.default);

	exports.default = Dashboard;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _Modal = __webpack_require__(201);

	var _Modal2 = _interopRequireDefault(_Modal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Drawer 抽屉组件，属性及功能和Modal一致，展示效果为侧拉展示
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun@baidu.com
	


	var Drawer = function (_NewModal) {
	    _inherits(Drawer, _NewModal);

	    function Drawer(props) {
	        _classCallCheck(this, Drawer);

	        return _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, props));
	        // this.containerId = 'uf-drawer-container';
	        // this.containerEle = document.body;
	    }
	    // componentWillMount() {
	    //     // 创建一个元素承载所有的抽屉弹框，方便控制样式
	    //     if (!document.getElementById(this.containerId)) {
	    //         let container = document.createElement('div');
	    //         container.setAttribute('id', this.containerId);
	    //         container.setAttribute('class', this.containerId);
	    //         document.body.append(container);
	    //         this.containerEle = container;
	    //     }
	    // }
	    // 继承父组件


	    _createClass(Drawer, [{
	        key: 'handleSelfProps',
	        value: function handleSelfProps() {
	            var selfProps = _get(Drawer.prototype.__proto__ || Object.getPrototypeOf(Drawer.prototype), 'handleSelfProps', this).call(this);
	            // 处理抽屉组件的样式
	            var className = ' uf-drawer';
	            if (this.__props.placement) {
	                className += ' ' + this.__props.placement;
	            }
	            if (this.__props.footer === undefined || !!this.__props.footer) {
	                className += ' has-ft';
	            }
	            if (!!this.__props.title) {
	                className += ' has-tl';
	            }
	            selfProps.className += className;
	            // 增加盛放抽屉的容器
	            // selfProps.getContainer = () => this.containerEle;
	            return selfProps;
	        }
	    }]);

	    return Drawer;
	}(_Modal2.default);

	exports.default = Drawer;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    Ueditor: __webpack_require__(205).default,
	    UeditorParse: __webpack_require__(206).default
	};

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Ueditor封装
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// export default class Ueditor extends React.PureComponent {
	var Ueditor = function (_BaseComponent) {
	    _inherits(Ueditor, _BaseComponent);

	    function Ueditor(props) {
	        _classCallCheck(this, Ueditor);

	        // 在form组件中使用时，会额外传入一个 data-__meta 字段
	        var _this = _possibleConstructorReturn(this, (Ueditor.__proto__ || Object.getPrototypeOf(Ueditor)).call(this, props));

	        _this._filter.push('data-__meta');
	        _this.name = _this._getTransmitName();
	        _this.ueditor = null;
	        // 保证每次实例化都有一个唯一的id
	        _this.ueditorId = (_this.name || 'create_editor') + '_' + Date.now();
	        _this.data = props.data;
	        return _this;
	    }

	    _createClass(Ueditor, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // Should be a controlled component.
	            if ('data' in nextProps) {
	                if (this.data !== nextProps.data) {
	                    this.data = nextProps.data;
	                    this.ueSetData(nextProps.data);
	                }
	            }
	        }
	    }, {
	        key: 'ueSetData',
	        value: function ueSetData(value) {
	            var _this2 = this;

	            // 临时解决方案。ueditor内不是用iframe实现，iframe加载需要时间，所以直接调用setContent会报错
	            // 这里重试5次，间隔300ms
	            _utils.Utils.retry(function () {
	                if (!_this2.ue.body) {
	                    return false;
	                }
	                _this2.ue.setContent(value);
	            }, 300, 5);
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this3 = this;

	            this._factory.$requirejs(['ueditor'], function (UE) {
	                // ueditor未做umd兼容，而且不知为何 requirejs shim 无效，只能从window上拿
	                _this3.ueditor = window.UE;
	                _this3.initUeditor();
	                _this3.ueSetData(_this3.data);
	            });
	        }
	    }, {
	        key: 'initUeditor',
	        value: function initUeditor() {
	            var _this4 = this;

	            // 初始化
	            var config = {
	                autoHeightEnabled: true,
	                autoFloatEnabled: true,
	                elementPathEnabled: false,
	                wordCount: false,
	                zIndex: 0,
	                fontsize: [12, 14, 16, 18, 20, 24],
	                toolbars: [['source', '|', 'undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikethrough', '|', 'paragraph', 'fontfamily', 'fontsize', '|', 'superscript', 'subscript', '|', 'forecolor', 'backcolor', '|', 'removeformat', '|', 'insertorderedlist', 'insertunorderedlist', 'inserttable', '|', 'selectall', 'cleardoc', '|', 'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'link', 'unlink', '|', 'map', '|', 'horizontal', 'print', 'preview', 'fullscreen', 'drafts', 'formula', '|', 'cusUpload']]
	            };
	            // 简版，适合给普通用户使用
	            // 默认为简版
	            if (this.props.simple === undefined || this.props.simple) {
	                config['toolbars'] = [['undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikethrough', '|', 'fontsize', 'forecolor', 'removeformat', '|', 'insertorderedlist', 'insertunorderedlist', 'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|', 'link', 'fullscreen', 'cusUpload']];
	            }
	            Object.assign(config, _utils.Utils.filter(this.props, this._filter));
	            console.log(config);
	            this.ue = this.ueditor.getEditor(this.ueditorId, config);
	            // 同步数据
	            var contentChange = _utils.Utils.debounce(function () {
	                var newValue = _this4.ue.getContent();
	                _this4.triggerChange(newValue);
	            }, 150);
	            this.ue.addListener('contentChange', contentChange);
	            this._transmitComponent();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            // 需要销毁，否则再次渲染本组件，ueditor渲染不出来
	            this.ue.destroy();
	            this._unsetTransmitComponent();
	        }
	        // 共享组件

	    }, {
	        key: '_transmitComponent',
	        value: function _transmitComponent() {
	            if (!!this.name) {
	                this._factory.$components.set(this.name, this.ue);
	            }
	        }
	        // 解除共享

	    }, {
	        key: '_unsetTransmitComponent',
	        value: function _unsetTransmitComponent() {
	            if (!!this.name) {
	                this._factory.$components.del(this.name);
	            }
	        }
	    }, {
	        key: 'triggerChange',
	        value: function triggerChange(changedValue) {
	            if (this.data !== changedValue) {
	                this.data = changedValue;
	                // Should provide an event to pass value to Form.
	                this.props.onChange && this.props.onChange(changedValue);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var style = Object.assign({ width: '100%', height: '220px', lineHeight: 'initial' }, this.props.style);
	            return _react2.default.createElement('script', { type: 'text/plain', id: this.ueditorId, style: style });
	        }
	    }]);

	    return Ueditor;
	}(_base.BaseComponent);

	exports.default = Ueditor;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _dom = __webpack_require__(117);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Ueditor内容解析器，对ueditor编辑的内容进行展示
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var UeditorParse = function (_Html) {
	    _inherits(UeditorParse, _Html);

	    function UeditorParse(props) {
	        _classCallCheck(this, UeditorParse);

	        var _this = _possibleConstructorReturn(this, (UeditorParse.__proto__ || Object.getPrototypeOf(UeditorParse)).call(this, props));

	        _this.type = 'div';
	        return _this;
	    }
	    // 解析


	    _createClass(UeditorParse, [{
	        key: 'parse',
	        value: function parse() {
	            window.uParse('#' + this.ueditorId, {
	                rootPath: window.UEDITOR_HOME_URL
	            });
	        }
	    }, {
	        key: '_beforeInit',
	        value: function _beforeInit() {
	            _get(UeditorParse.prototype.__proto__ || Object.getPrototypeOf(UeditorParse.prototype), '_beforeInit', this).call(this);
	            // 保证每次实例化都有一个唯一的id
	            this.ueditorId = (this._getTransmitName() || 'editor_parse') + '_' + Date.now();
	            this.__props.id = this.ueditorId;
	        }
	        // 加载ueditor相关文件

	    }, {
	        key: '_componentDidMount',
	        value: function _componentDidMount() {
	            var _this2 = this;

	            _get(UeditorParse.prototype.__proto__ || Object.getPrototypeOf(UeditorParse.prototype), '_componentDidMount', this).call(this);
	            this._factory.$requirejs(['ueditor'], function (UE) {
	                _this2.parse();
	            });
	        }
	    }, {
	        key: '_componentDidUpdate',
	        value: function _componentDidUpdate(prevProps, prevState) {
	            _get(UeditorParse.prototype.__proto__ || Object.getPrototypeOf(UeditorParse.prototype), '_componentDidUpdate', this).call(this);
	            this.parse();
	        }
	    }]);

	    return UeditorParse;
	}(_dom.Html);

	exports.default = UeditorParse;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Echarts 入口
	 */

	module.exports = __webpack_require__(208).default;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Echarts封装
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var Echarts = function (_BaseComponent) {
	    _inherits(Echarts, _BaseComponent);

	    function Echarts(props) {
	        _classCallCheck(this, Echarts);

	        var _this = _possibleConstructorReturn(this, (Echarts.__proto__ || Object.getPrototypeOf(Echarts)).call(this, props));

	        _this._filter.push('type');
	        // 保证每次实例化都有一个唯一的id
	        _this.chartId = (props.__key || 'create_echarts') + '_' + _utils.Utils.uniqueId();
	        _this.echarts;
	        _this.chart;
	        _this.chartOptionsQueue = [];
	        _this.__init();
	        return _this;
	    }

	    _createClass(Echarts, [{
	        key: '_afterSetProps',
	        value: function _afterSetProps() {
	            _get(Echarts.prototype.__proto__ || Object.getPrototypeOf(Echarts.prototype), '_afterSetProps', this).call(this);
	            // 改变生命周期
	            if (this.__filtered.afterCreate) {
	                this.__filtered.oriAfterCreate = this.__filtered.afterCreate;
	                delete this.__filtered.afterCreate;
	            }
	        }
	    }, {
	        key: 'setOption',
	        value: function setOption(nextProps) {
	            if (this.chart) {
	                this.chart.setOption(this.__filterProps(nextProps));
	                this.__setProps(this.chart.getOption());
	            } else {
	                // 如果set时还没有创建chart，则先将内容缓存起来，等chart创建后再进行set处理
	                this.chartOptionsQueue.push(nextProps);
	                this.startTry();
	            }
	        }
	        // 尝试获取this.chart，直到获取到

	    }, {
	        key: 'startTry',
	        value: function startTry() {
	            var _this2 = this;

	            // 这里重试10次，间隔200ms
	            _utils.Utils.retry(function () {
	                if (!_this2.chart) {
	                    return false;
	                }
	                // 将队列里的值依次set一遍
	                _this2.chartOptionsQueue.forEach(function (props) {
	                    _this2.setOption(props);
	                });
	                // 清空队列
	                _this2.chartOptionsQueue = [];
	            }, 200, 10);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // if (Utils.isChange(this.__prevProps, this.__filterProps(nextProps))) {
	            //     this.chart.setOption(this.__filterProps(nextProps));
	            // }
	            this.setOption(nextProps);
	        }
	        // 修改获取数据的时机，初始化时不进行数据获取，等chart初始化完成后

	    }, {
	        key: '_handleAsyncData',
	        value: function _handleAsyncData() {
	            if (this.chart) {
	                this.waitToGetData = false;
	                _get(Echarts.prototype.__proto__ || Object.getPrototypeOf(Echarts.prototype), '_handleAsyncData', this).call(this);
	            } else {
	                this.waitToGetData = true;
	            }
	        }
	    }, {
	        key: '_trueHandleAsyncData',
	        value: function _trueHandleAsyncData() {
	            if (this.waitToGetData) {
	                this._handleAsyncData();
	            }
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState) {
	            // 只有className/style变，才刷新当前组件，否则只进行setOption处理就行了
	            if (_utils.Utils.isChange({ className: nextProps.className, style: nextProps.style }, this.__prevProps)) {
	                return true;
	            }
	            return false;
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this3 = this;

	            // 执行的时候再获取
	            var echarts = window.echarts;
	            if (echarts) {
	                this.echarts = echarts;
	                this.initEcharts();
	            } else {
	                // 惰性加载
	                // echarts 的路径见 src/config/default/index.js 中的配置
	                this._factory.$requirejs(['echarts'], function (echarts) {
	                    _this3.echarts = echarts;
	                    _this3.initEcharts();
	                });
	            }
	        }
	    }, {
	        key: 'initEcharts',
	        value: function initEcharts() {
	            if (this.echarts) {
	                // 初始化
	                var chart = this.echarts.init(document.getElementById(this.chartId));
	                chart.setOption(this.__props);
	                this.chart = chart;
	                this._transmitComponent();

	                // 把echarts的api全部转移到当前组件上
	                this._agencyFunction(chart);
	                this._agencyFunction(Object.getPrototypeOf(chart));

	                // 真正创建完echarts时再异步获取数据
	                this._trueHandleAsyncData();
	                // 真正创建完echarts时再执行用户配置的afterCreate逻辑
	                this.__filtered.oriAfterCreate && this.__filtered.oriAfterCreate();
	            } else {
	                _utils.Utils.defer(console.error, 'There is no echarts, please check.');
	            }
	        }
	    }, {
	        key: '_agencyFunction',
	        value: function _agencyFunction(origin) {
	            var _this4 = this;

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                var _loop = function _loop() {
	                    var i = _step.value;

	                    if (_utils.Utils.typeof(origin[i], 'function')) {
	                        _this4._inject(_this4, i, function () {
	                            var _chart;

	                            return (_chart = _this4.chart)[i].apply(_chart, arguments);
	                        });
	                    }
	                };

	                for (var _iterator = Object.keys(origin)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            // 销毁组件
	            this.chart && this.chart.dispose();
	            // this._unsetTransmitComponent();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { id: this.chartId, className: this.props.className, style: this.props.style });
	        }
	    }]);

	    return Echarts;
	}(_base.BaseComponent);

	exports.default = Echarts;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file Fieldset组件入口
	 * **/

	module.exports = __webpack_require__(210).default;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _base = __webpack_require__(119);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file fieldset 封装
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var Fieldset = function (_BaseComponent) {
	    _inherits(Fieldset, _BaseComponent);

	    function Fieldset(props) {
	        _classCallCheck(this, Fieldset);

	        var _this = _possibleConstructorReturn(this, (Fieldset.__proto__ || Object.getPrototypeOf(Fieldset)).call(this, props));

	        _this.__init();
	        return _this;
	    }

	    _createClass(Fieldset, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'fieldset',
	                this.__getCommonProps({ className: 'uf-fieldset' }),
	                _react2.default.createElement(
	                    'legend',
	                    null,
	                    this.__props.title
	                ),
	                this.__props.children
	            );
	        }
	    }]);

	    return Fieldset;
	}(_base.BaseComponent);

	exports.default = Fieldset;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @file 组件入口
	 * **/

	module.exports = __webpack_require__(212).default;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _base = __webpack_require__(119);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 封装
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var List = function (_BaseComponent) {
	    _inherits(List, _BaseComponent);

	    function List(props) {
	        _classCallCheck(this, List);

	        var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));

	        _this.state = {};
	        _this.__init();
	        return _this;
	    }

	    _createClass(List, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var _props = this.__props,
	                _props$data = _props.data,
	                data = _props$data === undefined ? {} : _props$data,
	                _props$columns = _props.columns,
	                columns = _props$columns === undefined ? [] : _props$columns,
	                _props$layout = _props.layout,
	                layout = _props$layout === undefined ? {} : _props$layout;
	            var labelCol = layout.labelCol,
	                valueCol = layout.valueCol,
	                labelStyle = layout.labelStyle,
	                valueStyle = layout.valueStyle;

	            var className = 'uf-list';
	            className += this.__props.bordered ? ' show-border' : '';
	            className += this.__props.interleave ? ' show-bg' : '';

	            return _react2.default.createElement(
	                'div',
	                this.__getCommonProps({ className: className }),
	                columns.map(function (item) {
	                    return _react2.default.createElement(
	                        _antd.Row,
	                        { key: item.dataIndex, className: 'uf-list-row' },
	                        _react2.default.createElement(
	                            _antd.Col,
	                            { key: 'label', span: labelCol, style: labelStyle, className: 'uf-list-label' },
	                            item.title
	                        ),
	                        _react2.default.createElement(
	                            _antd.Col,
	                            { key: 'value', span: valueCol, style: valueStyle, className: 'uf-list-value' },
	                            !item.render ? data[item.dataIndex] : _this2.__analysis(item.render(data[item.dataIndex], data))
	                        )
	                    );
	                })
	            );
	        }
	    }]);

	    return List;
	}(_base.BaseComponent);

	exports.default = List;

/***/ }),
/* 213 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * @file 程序中引用的环境相关变量
	 * @author liuzechun
	 * Created Date: 2018-07-30 12:46:16
	 */

	var hostname = window.location.hostname;
	var isProd = !['epc.baidu.com', 'yf-sys-ump-ur-fe.yf01.baidu.com'].some(function (v) {
	    return hostname.indexOf(v) > -1;
	});

	module.exports = {
	    production: isProd,
	    basePath: isProd ? 'http://uf.baidu.com' : 'http://antd.uf.baidu.com:8099',
	    pluginPath: isProd ? 'http://uf.baidu.com/v/plugins/' : 'http://antd.uf.baidu.com:8099/v/plugins/'
	};

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	module.exports = window.DLL.moment_zh_cn;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _config = __webpack_require__(216);

	var _config2 = _interopRequireDefault(_config);

	var _components = __webpack_require__(220);

	var _components2 = _interopRequireDefault(_components);

	var _model = __webpack_require__(221);

	var _model2 = _interopRequireDefault(_model);

	var _ajax = __webpack_require__(222);

	var _ajax2 = _interopRequireDefault(_ajax);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// module.exports = {Config, ComponentsCache, ModelCache};

	module.exports = {
	    init: function init(insName) {
	        var obj = {};

	        obj.Config = _config2.default.init(insName);
	        (0, _instance.setConfig)(insName, obj.Config);

	        obj.ComponentsCache = _components2.default.init(insName);
	        (0, _instance.setComponentCache)(insName, obj.ComponentsCache);

	        obj.ModelCache = _model2.default.init(insName);
	        (0, _instance.setModelCache)(insName, obj.ModelCache);

	        obj.AjaxCache = _ajax2.default.init(insName);
	        (0, _instance.setAjaxCache)(insName, obj.AjaxCache);

	        return obj;
	    }
	};

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _BaseCache2 = __webpack_require__(159);

	var _BaseCache3 = _interopRequireDefault(_BaseCache2);

	var _default = __webpack_require__(217);

	var _default2 = _interopRequireDefault(_default);

	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 默认配置
	可以用于配置各个组件通用的默认参数
	用户可以使用 `UF.config()` 来更改或者自定义任何默认参数
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-11 01:40:57
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Last Modified: 2017-10-11 01:42:17
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Modified By: liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Config = function (_BaseCache) {
	    _inherits(Config, _BaseCache);

	    function Config() {
	        _classCallCheck(this, Config);

	        return _possibleConstructorReturn(this, (Config.__proto__ || Object.getPrototypeOf(Config)).apply(this, arguments));
	    }

	    _createClass(Config, [{
	        key: 'get',
	        value: function get(names) {
	            var result = _get(Config.prototype.__proto__ || Object.getPrototypeOf(Config.prototype), 'get', this).call(this, names);
	            // 组件全局配置components为引用类型，组件使用时对配置进行更改会影响全局，需要clone一份
	            if (names && names.split('.')[0] === 'components') {
	                result = _utils2.default.clone(result);
	            }
	            return result;
	        }
	    }]);

	    return Config;
	}(_BaseCache3.default);

	// export default (new Config(Default));

	exports.default = (0, _instance.generate)(function () {
	    return new Config(_utils2.default.clone(_default2.default));
	});

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _env = __webpack_require__(213);

	var _env2 = _interopRequireDefault(_env);

	var _baseComponents = __webpack_require__(218);

	var _baseComponents2 = _interopRequireDefault(_baseComponents);

	var _components = __webpack_require__(219);

	var _components2 = _interopRequireDefault(_components);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 指定ueditor资源路径，否则css等加载路径不对
	window.UEDITOR_HOME_URL = _env2.default.basePath + '/third_party/ueditor/'; /**
	                                                                             * @file 全局默认配置
	                                                                             * @author liuzechun
	                                                                             * Created Date: 2018-01-30 10:55:45
	                                                                             */

	exports.default = {
	    // 模块引入相关配置
	    modules: {
	        // 加载模块时是否展示loading
	        showLoading: false,
	        paths: {
	            'echarts': _env2.default.basePath + '/third_party/echarts/echarts' + (_env2.default.production ? '.min' : ''),
	            'ueditor': _env2.default.basePath + '/third_party/ueditor/ueditor.all' + (_env2.default.production ? '.min' : ''),
	            'ueditorconfig': _env2.default.basePath + '/third_party/ueditor/ueditor.config' + (_env2.default.production ? '.min' : ''),
	            'zeroclipboard': _env2.default.basePath + '/third_party/ueditor/ZeroClipboard' + (_env2.default.production ? '.min' : ''),
	            'ueditorparse': _env2.default.basePath + '/third_party/ueditor/ueditor.parse' + (_env2.default.production ? '.min' : '')
	        },
	        shim: {
	            'ueditor': ['zeroclipboard', 'ueditorconfig', 'ueditorparse'],
	            'echarts': {
	                exports: 'echarts'
	            }
	        }
	    },
	    // 全局系统配置
	    global: {
	        // 设置文档域 document.domain，默认为原始值
	        domain: document.domain,
	        // ajax 的全局配置，可更改全部 ajax 规则（例如报错规则）
	        ajax: {}
	    },
	    // 组件默认配置
	    components: Object.assign(_baseComponents2.default, _components2.default),
	    // 权限点，用户有权限的权限点列表
	    // key（权限点） => value（boolen/object）
	    authority: {}
	};

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * @file 基类默认配置，即一类组件通用配置
	 *
	 * Author: liuzechun (liuzechun@baidu.com)
	 * Created: 2019-01-11 14:07:12
	 */

	exports.default = {
	    'base-component': {
	        control: {
	            trigger: 'onClick'
	        },
	        source: {
	            // 如果组件没有设置target，则
	            // target: 'content',
	            // 默认自动移除空参数
	            removeEmptyParams: true
	        },
	        api: {
	            showLoading: true,
	            trigger: 'onClick',
	            method: 'post'
	        }
	    },
	    'antd': {},
	    'data-entry': {
	        api: {
	            trigger: 'onChange'
	        },
	        source: {
	            // 获取数据时展示loading
	            showLoading: false,
	            target: 'value'
	        },
	        control: {
	            trigger: 'onChange',
	            handler: function handler() {
	                for (var _len = arguments.length, p = Array(_len), _key = 0; _key < _len; _key++) {
	                    p[_key] = arguments[_key];
	                }

	                return p[p.length - 1].getValue();
	            }
	        }
	    },

	    /*************************************************************************************/
	    /*********************** 其他PC、移动端共用组件  ****************************************/
	    /*************************************************************************************/

	    'router': {
	        history: 'hashHistory'
	    },
	    'iframe': {
	        mode: 'auto',
	        delay: 0,
	        showLoading: true
	    },
	    'echarts': {
	        style: {
	            width: '100%',
	            height: 400
	        }
	    }

	};

/***/ }),
/* 219 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * @file 普通组件默认配置
	 * @author liuzechun
	 * Created Date: 2017-10-12 03:23:12
	 *
	 * Last Modified: 2017-10-12 03:23:16
	 * Modified By: liuzechun
	 */

	exports.default = {
	    'auto-complete': {
	        style: { minWidth: 160 },
	        mode: 'combobox',
	        options: [],
	        startSign: 1,
	        source: {
	            showLoading: 'simple'
	        }
	    },
	    'breadcrumb': {
	        style: { padding: '12px 24px', lineHeight: '18px' }
	    },
	    'cascader': {
	        source: {
	            target: 'options'
	        }
	    },
	    'checkbox': {
	        source: {
	            target: 'checked'
	        }
	    },
	    'checkbox-group': {
	        source: {
	            target: 'options'
	        }
	    },
	    'input': {
	        api: {
	            trigger: 'onPressEnter'
	        },
	        control: {
	            trigger: 'onPressEnter'
	        }
	    },
	    'textarea': {
	        style: { minHeight: '2em' }
	    },
	    'radio': {
	        source: {
	            target: 'options'
	        }
	    },
	    'loading': {
	        delay: 150
	    },
	    'select': {
	        optionFilterProp: 'children',
	        source: {
	            target: 'options'
	        },
	        // 默认充满全部
	        style: { width: '100%', minWidth: 50 },
	        // 搜索时忽略大小写
	        filterOption: function filterOption(v, opt) {
	            return opt.props.children !== undefined && opt.props.children.toLowerCase().indexOf(v.toLowerCase()) > -1;
	        }
	    },
	    'switch': {
	        source: {
	            target: 'checked'
	        }
	    },
	    'date-picker': {
	        format: 'YYYY-MM-DD'
	    },
	    'range-picker': {
	        format: 'YYYY-MM-DD'
	    },
	    'month-picker': {
	        format: 'YYYY-MM'
	    },
	    'time-picker': {
	        format: 'HH:mm:ss'
	    },
	    'menu': {
	        // 默认高亮随路由一起变换
	        followRoute: true
	    },
	    'upload': {
	        source: {
	            target: 'fileList'
	        }
	    },

	    /****************************************************************************************/
	    /***** 自定义组件默认配置 ******************************************************************/
	    /****************************************************************************************/
	    'form': {
	        items: [],
	        buttons: null,
	        layout: {
	            type: 'horizontal',
	            labelCol: 6,
	            wrapperCol: 14
	        },
	        source: {
	            target: 'formData'
	        },
	        api: {
	            trigger: 'onSubmit'
	        },
	        control: {
	            trigger: 'onSubmit',
	            handler: function handler(v) {
	                return v;
	            }
	        }
	    },
	    'forms': {
	        addType: 'copy'
	    },
	    'table': {
	        rowKey: 'id',
	        pagination: {
	            current: 1,
	            pageSize: 10,
	            pageType: 'client',
	            total: 0
	        },
	        source: {
	            // 自动加载数据
	            autoLoad: true,
	            autoReload: true
	        },
	        data: []
	    },
	    // table 的编辑插件
	    'table-edit': {
	        api: {
	            trigger: 'onSubmit'
	        }
	    },
	    'modal': {
	        visible: false,
	        maskClosable: false,
	        closable: true,
	        api: {
	            trigger: 'onSubmit'
	        },
	        control: {
	            trigger: 'onSubmit',
	            handler: function handler(v) {
	                return v;
	            }
	        }
	    },
	    'dashboard': {
	        closable: false
	    },
	    'drawer': {
	        placement: 'right',
	        width: '40%',
	        height: '40%'
	    },
	    'tree': {
	        source: {
	            autoLoad: true,
	            autoReload: false,
	            target: 'data'
	        }
	    },
	    'tree-select': {
	        source: {
	            autoLoad: true,
	            autoReload: false,
	            target: 'treeData'
	        }
	    },
	    'list': {
	        interleave: true,
	        bordered: true,
	        layout: {
	            labelCol: 6,
	            labelStyle: {},
	            valueCol: 18,
	            valueStyle: {}
	        }
	    }
	};

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _BaseCache2 = __webpack_require__(159);

	var _BaseCache3 = _interopRequireDefault(_BaseCache2);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 组件实例缓存
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-24 01:40:57
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Component = function (_BaseCache) {
	    _inherits(Component, _BaseCache);

	    function Component() {
	        _classCallCheck(this, Component);

	        return _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).apply(this, arguments));
	    }

	    _createClass(Component, [{
	        key: 'set',
	        value: function set(target, component) {
	            var isCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	            // 检查name是否冲突
	            // 升级完router再看能不能用
	            // if (isCheck) {
	            //     let theSame = this.get(target);
	            //     if (theSame && theSame.key !== component.key) {
	            //         console.error(`Warning: The prop "name" should be unique. `
	            //             + `Check the component \`${component.type}\` named "${component.cacheName}" `
	            //             + `which has the same name as the other component \`${theSame.type}\``
	            //         );
	            //     }
	            // }
	            _get(Component.prototype.__proto__ || Object.getPrototypeOf(Component.prototype), 'set', this).call(this, target, component);
	        }
	    }]);

	    return Component;
	}(_BaseCache3.default);

	// export default (new Component());

	// export default generate(new Component());

	exports.default = (0, _instance.generate)(function () {
	    return new Component();
	});

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(121);

	var _BaseCache = __webpack_require__(159);

	var _BaseCache2 = _interopRequireDefault(_BaseCache);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// export default (new Models(_cache));

	exports.default = (0, _instance.generate)(function () {
	  return new _BaseCache2.default();
	}); /**
	     * @file 组件实例缓存
	     * @author liuzechun
	     * Created Date: 2017-10-24 01:40:57
	     */

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseCache2 = __webpack_require__(159);

	var _BaseCache3 = _interopRequireDefault(_BaseCache2);

	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file ajax 数据缓存
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created Date: 2017-10-24 01:40:57
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	exports.default = (0, _instance.generate)(['Config'], function (Config) {
	    var AjaxCache = function (_BaseCache) {
	        _inherits(AjaxCache, _BaseCache);

	        function AjaxCache() {
	            _classCallCheck(this, AjaxCache);

	            // 只检测请求携带的参数
	            var _this = _possibleConstructorReturn(this, (AjaxCache.__proto__ || Object.getPrototypeOf(AjaxCache)).call(this));

	            _this.paramList = ['url', 'params', 'method', 'type', 'contentType'];
	            return _this;
	        }
	        // 检查是否需要缓存返回数据，如果需要，则根据config取hash值，并返回；否则返回null


	        _createClass(AjaxCache, [{
	            key: 'getCacheKey',
	            value: function getCacheKey(config) {
	                var cacheApis = Config.get('global.cacheApis');
	                // 开启cache的方式有两种：1、config中配置cache属性为true; 2、UF.config()中配置global.cacheApis
	                if (config.cache || cacheApis && cacheApis.indexOf(config.url) > -1) {
	                    return _utils2.default.hash(_utils2.default.pass(config, this.paramList), 32);
	                }
	                return null;
	            }

	            // 向缓存池中设置缓存数据

	        }, {
	            key: 'setCacheData',
	            value: function setCacheData(key, res) {
	                // key 通过调用处传入，保证一致性
	                // let key = this.getCacheKey(config);
	                if (key) {
	                    this.set(key, _utils2.default.clone(res));
	                }
	            }

	            // 从缓存池中获取缓存数据

	        }, {
	            key: 'getCacheData',
	            value: function getCacheData(key) {
	                // key 通过调用处传入，保证一致性
	                // let key = this.getCacheKey(config);
	                if (key) {
	                    return this.get(key);
	                }
	                return null;
	            }

	            /******* 永久缓存 *******************************************/
	            /******* 永久缓存 *******************************************/
	            /******* 永久缓存 *******************************************/

	            // 获取 localstorage 存储时所需的key

	        }, {
	            key: 'getLocalStorageKey',
	            value: function getLocalStorageKey(config) {
	                if (config.localStorage !== undefined && config.localStorage !== false) {
	                    // 如果config.localStorage为一个字符串，则给key增加后缀再进行存储
	                    var salt = _utils2.default.typeof(config.localStorage, 'string') ? config.localStorage : '';
	                    return _utils2.default.hash(_utils2.default.pass(config, this.paramList), 32) + ('-' + salt);
	                }
	                return null;
	            }

	            // 向 localStorage 中设置缓存数据

	        }, {
	            key: 'setLocalStorageData',
	            value: function setLocalStorageData(key, res) {
	                if (key) {
	                    _utils2.default.setCache(key, res);
	                }
	            }

	            // 从 localStorage 中获取缓存数据

	        }, {
	            key: 'getLocalStorageData',
	            value: function getLocalStorageData(key) {
	                if (key) {
	                    return _utils2.default.getCache(key);
	                }
	                return null;
	            }
	        }]);

	        return AjaxCache;
	    }(_BaseCache3.default);

	    return new AjaxCache();
	});

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(121);

	var _loader = __webpack_require__(224);

	var _loader2 = _interopRequireDefault(_loader);

	var _adaptor = __webpack_require__(225);

	var _adaptor2 = _interopRequireDefault(_adaptor);

	var _authority = __webpack_require__(160);

	var _authority2 = _interopRequireDefault(_authority);

	var _validator = __webpack_require__(226);

	var _validator2 = _interopRequireDefault(_validator);

	var _whitelist = __webpack_require__(161);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 解析配置，生成页面
	主要负责调度各个解析工具，并生成组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author liuzechun
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	// 所有使用Factory的地方，都需要传入一个insName属性
	// Factory根据insName获取各个工具实例
	var Factory = function (_PureComponent) {
	    _inherits(Factory, _PureComponent);

	    function Factory(props) {
	        _classCallCheck(this, Factory);

	        // 应用名称
	        var _this = _possibleConstructorReturn(this, (Factory.__proto__ || Object.getPrototypeOf(Factory)).call(this, props));

	        _this.insName = props.insName || '_$default';
	        // ajax 实例
	        _this.$ajax = (0, _instance.getAjax)(_this.insName);
	        // cache实例
	        _this.$config = (0, _instance.getConfig)(_this.insName);
	        _this.$components = (0, _instance.getComponentsCache)(_this.insName);
	        _this.$requirejs = (0, _instance.getRequirejs)(_this.insName);

	        _this.state = {};
	        // 解析结果缓存
	        _this.__cache = {};
	        return _this;
	    }

	    _createClass(Factory, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 如果配置变化，清空保存的解析结果，重新解析
	            if (!_utils.Utils.equals(this.props, nextProps)) {
	                this._cacheContent = null;
	            }
	        }

	        // 解析组件配置，生成组件

	    }, {
	        key: 'generateItem',
	        value: function generateItem(item) {
	            // 如果模块是一个函数，先执行函数得到返回的配置
	            if (_utils.Utils.typeof(item, 'function')) {
	                // 如果组件想要获取到路由等信息，则可以返回一个函数，函数的参数即为路由相关信息
	                var _props = this.props,
	                    params = _props.params,
	                    location = _props.location,
	                    route = _props.route,
	                    routes = _props.routes;
	                // 第一个参数为路由携带的参数，第二个参数为其余路由信息

	                item = item(params, { params: params, location: location, route: route, routes: routes });
	                if (_utils.Utils.typeof(item, 'array')) {
	                    return this.generateElement(item);
	                }
	            }
	            // 如果不是对象或不是配置对象 直接返回
	            if (!_utils.Utils.typeof(item, 'object') || Object.isFrozen(item)) {
	                return item;
	            }
	            // 检验是否有缓存
	            // let key = Utils.hash(item);
	            // if (this.__cache[key]) {
	            //     let {Item, props} = this.__cache[key];
	            //     return <Item {...props} />;
	            // }

	            // 校验对象是否有 type 属性，如果没有直接跳过解析
	            if (!_validator2.default.check(item, 'type', 'string')) {
	                return null;
	            }
	            // 临时存储的变量，供各个tools使用
	            item.insName = this.insName;
	            // 整合组件的全部配置（包括通用配置，自定义组件配置等）
	            item = this.getConf(item);

	            // 校验权限，没权限的元素返回 null
	            if (!_authority2.default.check(item)) {
	                return null;
	            }

	            // 如果是 html 类型，使用 html 模板解析器来解析，然后直接返回
	            // if (item.type === 'html') {
	            //     // 按照正常流程走
	            //     item.type = 'section';
	            //     item.className = 'uf-html ' + (item.className || '');
	            //     item.dangerouslySetInnerHTML = {__html: item.content};
	            //     delete item.content;
	            // }
	            // 从loader中获取到相应的组件
	            var Item = _loader2.default.get(item);
	            if (!Item) {
	                return;
	            }

	            // 把 factory 的 this 传给每个组件方便组件内部进行配置解析和使用外部的props等
	            item._factory = this;

	            var props = this.handleProps(item);

	            // Update at 2018-03-13 17:02:46. 使用完后，要把在原配置中增加的多余的属性删除掉
	            delete item._factory;

	            // 有bug，路由切换了，页面无法刷新
	            // this.__cache[key] = {Item, props};

	            return _react2.default.createElement(Item, props);
	        }
	        // 获取完整的组件配置

	    }, {
	        key: 'getConf',
	        value: function getConf(item) {
	            return _loader2.default.getConf(item, this.insName);
	        }
	    }, {
	        key: 'getComp',
	        value: function getComp(item) {
	            return _loader2.default.get(item);
	        }

	        // 处理用户配置的参数，并生成组件需要使用的 props

	    }, {
	        key: 'handleProps',
	        value: function handleProps(item) {
	            // 通过适配器把参数转换成标准格式，剔除掉一些无用属性等
	            var props = _adaptor2.default.get(item);
	            // 判断其他需要额外进一步解析的属性并进行解析
	            props = this.analysisAgain(props, item.type);
	            // 处理children属性
	            props = this.handleChildren(props, item.childrenHolder);
	            return props;
	        }
	        // 在组件配置中，childrenHolder属性指定把子页面放在父组件的哪个位置

	    }, {
	        key: 'handleChildren',
	        value: function handleChildren(props, hasChildrenHolder) {
	            // 此处把通过路由传入的子组件放在当前配置树的定义了 childrenHolder 的节点下作为组件的子组件
	            // this.props.children 是通过路由传入的子组件
	            if (hasChildrenHolder && this.props.children) {
	                if (!props.children) {
	                    props.children = this.props.children;
	                } else {
	                    // 已经存在children的情况下，把children合并。兼容处理
	                    !_utils.Utils.typeof(props.children, 'array') && (props.children = [props.children]);
	                    props.children.push(this.props.children);
	                }
	            }
	            return props;
	        }

	        // 拆分多个config，分离成组件的配置

	    }, {
	        key: 'generateElement',
	        value: function generateElement(config) {
	            // 如果是字符串直接返回
	            if (_utils.Utils.typeof(config, ['string', 'number'])) {
	                return config;
	            }
	            var result = void 0;
	            if (_utils.Utils.typeof(config, 'array')) {
	                // 如果是数组，则检查数组项中每一项是否有key，如果没有则尝试添加
	                _adaptor2.default.checkArrayItems(config);
	                result = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = config[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var item = _step.value;

	                        result.push(this.generateElement(item));
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            } else {
	                result = this.generateItem(config);
	            }
	            return result;
	        }

	        // 
	        // 有些属性可以是ReactNode，也就是也可以配置成一个组件，所以需要再次把这些属性解析为组件

	    }, {
	        key: 'analysisAgain',
	        value: function analysisAgain(props, type) {
	            var list = _whitelist2.default.get(props, type);
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var v = _step2.value;

	                    props[v] = this.generateElement(props[v]);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return props;
	        }

	        // 获取模块配置。
	        // 如果模块为异步模块，则做异步处理

	    }, {
	        key: 'getConfig',
	        value: function getConfig() {
	            var _this2 = this;

	            var config = this.props.config;
	            if (_utils.Utils.typeof(config, 'string')) {
	                var path = this.props.config;
	                // 先检查缓存配置中是否已存在，如果不存在再重新获取
	                config = this.state[path];
	                if (!config) {
	                    this.$requirejs([path], function (foo) {
	                        // 删除缓存，保证配置刷新
	                        _this2._cacheContent = null;
	                        // 缓存获取回来的配置
	                        _this2.setState(_defineProperty({}, path, foo));
	                    });
	                    var showLoading = this.$config.get('modules.showLoading');
	                    if (_utils.Utils.typeof(showLoading, 'array')) {
	                        // config 此时为模块名称
	                        showLoading = showLoading.indexOf(config) !== -1;
	                    }
	                    config = {
	                        type: 'loading',
	                        loading: !!showLoading
	                    };
	                }
	            }
	            return config;
	        }
	    }, {
	        key: 'getContent',
	        value: function getContent() {
	            this._cacheContent = this._cacheContent || this.generateElement(this.getConfig());
	            return this._cacheContent;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // 如果是配置是数组则需要在外层增加一个div标签，非数组的情况下可以把多余的div去掉
	            var result = this.getContent();
	            return _utils.Utils.typeof(result, 'array') ? _react2.default.createElement(
	                'div',
	                null,
	                result
	            ) : result;
	        }
	    }]);

	    return Factory;
	}(_react.PureComponent);

	exports.default = Factory;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _lib = __webpack_require__(116);

	var _lib2 = _interopRequireDefault(_lib);

	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _dom = __webpack_require__(117);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @file 载入组件，供 Factory 获取
	 *      根据配置的 type，转换成对应组件并返回
	 * @author liuzechun@baidu.com
	 */
	exports.default = {
	    component: Object.assign(_lib2.default),

	    // 添加组件
	    add: function add(components) {
	        Object.assign(this.component, components);
	    },


	    // 根据 type 获取组件
	    get: function get(item) {
	        var type = item.type;
	        var name = _utils.Utils.toPascal(type);
	        // 如果按照name查找不到则尝试使用转换前的type进行匹配（plugins加载过来的组件）
	        var result = this.component[name] || this.component[type];
	        // 支持动态组件，即组件仅为一个函数，函数根据参数不同返回不同的组件类
	        // if (!Utils.isExtendsOf(result, BaseComponent) && Utils.typeof(result, 'function')) {
	        //     result = result(item);
	        // }
	        if (!result) {
	            // 通过使用 o-table 来强制使用原生标签
	            if (type.indexOf('o-') === 0) {
	                type = type.substr(2);
	            }
	            // 检查是否为React原生元素
	            if (_react2.default.DOM.hasOwnProperty(type)) {
	                // 如果是Uf组件，则使用Dom组件，否则用原生的增强性能
	                if (this.isUfComponent(item)) {
	                    result = _dom.Dom;
	                } else {
	                    result = type;
	                }
	            } else {
	                this.error(type);
	            }
	        }
	        return result;
	    },


	    // 获取完整的组件配置
	    // 1、普通组件本身配置了默认属性，此处进行属性合并
	    // 2、组件的type可能为一个自定义组件，这里将其转化为普通可用的组件
	    getConf: function getConf(item) {
	        var insName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : item.insName;

	        // undefined/null/''等都能兼容处理
	        item = item || {};
	        var oType = item.type;
	        var conf = (0, _instance.getConfig)(insName).get('components.' + oType);
	        if (conf) {
	            if (_utils.Utils.typeof(conf, 'function')) {
	                conf = conf(item);
	                // 函数配置完全使用函数返回的内容，如果需要其他参数，在函数中自行合并
	                item = _utils.Utils.merge({}, conf, { type: conf.type || oType });
	            } else {
	                item = _utils.Utils.merge({}, conf, item, { type: conf.type || oType });
	            }
	        }
	        // 如果type进行了变换，则再次进行配置获取
	        if (oType !== item.type) {
	            item = this.getConf(item, insName);
	        }
	        return item;
	    },


	    // 是否是UF组件
	    // 1、如果有name，说明用户想要操作组件；
	    // 2、如果使用了数据绑定：使用Dom组件进行封装，实现组件缓存和刷新
	    // 3、如果配置了具有特殊功能的属性
	    isUfComponent: function isUfComponent(item) {
	        // return item.name || Model.if(item) || Utils.isIntersection(BaseConf.FilterProps, Object.keys(item));
	        return item.name || _utils.Utils.isIntersection(_base.BaseConf.FilterProps, Object.keys(item));
	    },


	    // 打印错误信息
	    error: function error(type) {
	        console.error('Uncaught TypeError: type \'' + type + '\' is invalid.');
	    }
	};

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
	file 适配器，把组件配置转换为统一规范格式
	author liuzechun
	

	// import Model from './model.js';


	var _base = __webpack_require__(119);

	var _utils = __webpack_require__(121);

	var _Antd = __webpack_require__(168);

	var _Antd2 = _interopRequireDefault(_Antd);

	var _loader = __webpack_require__(224);

	var _loader2 = _interopRequireDefault(_loader);

	var _whitelist = __webpack_require__(161);

	var _whitelist2 = _interopRequireDefault(_whitelist);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 不属于config的参数，适配用户配置的参数时使用
	var KeyWord = ['name', 'type', 'content', 'childrenHolder'];
	var hashKeys = {};

	exports.default = {
	    get: function get(item) {
	        // 移到 factory.analysisAgain 时处理
	        // item.key = item.key || item.name || Utils.hash(item, null, 4);
	        // update at 2018/08/10, checkArrayItems 无法覆盖模块为函数的情况，所以此处需再次进行额外处理
	        item.key = item.key || item.name;

	        var Item = _loader2.default.get(item);
	        var props = _utils.Utils.filter(item, KeyWord);
	        // 将用户传入的函数的执行环境固定成item本身，待观察
	        props = _utils.Utils.batchBind(props, item);
	        // 把 content 转化成 children。
	        // update at 2017/10/25,如果没有content,则使用原来的children
	        // update at 2018/01/11,如果只有原来有值，才执行赋值操作
	        // if (item.content || props.children) {
	        //     props.children = item.content || props.children;
	        // }
	        if (item.content !== undefined) {
	            props.children = item.content;
	        }
	        // 格式化 class 和 style
	        props = this.formatCS(props);
	        // 如果是基于BaseComponent的组件内部要用到的属性处理
	        if (_utils.Utils.isExtendsOf(Item, _base.BaseComponent)) {
	            props['__type'] = item.type;
	            props['__key'] = props['key'];
	            // 如果有name的话，把组件放到缓存池里
	            if (item.name) {
	                props['__cache'] = item.name;
	            }
	            // if (props['__key']) {
	            //     if (Model.if(item)) {
	            //         props['__cache'] = props['__key'];
	            //     }
	            // }
	            // 由于 type 关键字把原antd等的 type 覆盖掉了，配置里用 mode 字段代替
	            // 实例化组件时，还要把 type 还原
	            if (_utils.Utils.isExtendsOf(Item, _Antd2.default)) {
	                if (props.mode) {
	                    props.type = props.mode;
	                }
	            }
	            // 因为后面要对白名单里的属性进行二次解析并覆盖属性，这里把配置转存一份，并会在BaseComponent中filter掉
	            var list = _whitelist2.default.get(props, item.type);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    props['_' + v] = props[v];
	                }
	                // 非 BaseComponent 组件 _factory 等属性无效
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        } else {
	            props.name = item.name;
	            delete props._factory;
	        }
	        // 删除供各个tools使用的临时变量 insName
	        delete props.insName;
	        // props = this.formatOthers(props);

	        return props;
	    },

	    // 供 BaseComponent 使用，在 set 之前
	    beforeSet: function beforeSet(component, options) {
	        this.formatCS(options);
	        // 实例化组件时，还要把 type 还原
	        if (component instanceof _Antd2.default) {
	            if (options.mode) {
	                options.type = options.mode;
	            }
	        }
	        return options;
	    },

	    // 把 class、style 转换为 react 需要的 className、style对象
	    formatCS: function formatCS(props) {
	        if (props.class) {
	            props.className += ' ' + props.class;
	            delete props.class;
	        }
	        if (props.style && _utils.Utils.typeof(props.style, 'string')) {
	            props.style = this.toCamalObj(props.style);
	        }
	        return props;
	    },

	    // 把 字符串style 转换为 react 需要的对象
	    toCamalObj: function toCamalObj(style) {
	        var arr = style.split(';');
	        var obj = {};
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var v = _step2.value;

	                var _v$split = v.split(':'),
	                    _v$split2 = _slicedToArray(_v$split, 2),
	                    key = _v$split2[0],
	                    value = _v$split2[1];
	                // 可以再优化下


	                var newKey = key.split('-').map(function (i) {
	                    return i.replace(/^\w/g, function (v) {
	                        return v.toUpperCase();
	                    });
	                }).join('').replace(/^\w/g, function (v) {
	                    return v.toLowerCase();
	                });
	                obj[newKey] = value;
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }

	        return obj;
	    },

	    // 检查数组项中每一项是否有值，如果没有则尝试添加
	    checkArrayItems: function checkArrayItems(items) {
	        var existKeys = {};
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	            for (var _iterator3 = items[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var item = _step3.value;

	                if (_utils.Utils.typeof(item, 'object') && item.key === undefined) {
	                    item.key = item.key || item.name;
	                    if (item.key === undefined) {
	                        // 每个组件都要有key。同步设置在用户传入的config上，使key一旦设置即不再变化
	                        // 但是当配置为函数动态产生时，同步设置无效，所以使用hash值保证产生的配置相同时，key也相同
	                        // 为保证生成的key在数组中不重复，循环时临时保存生成的key，并对比当新生成的key已存在则不再进行赋值
	                        var genkey = _utils.Utils.hash(item, null, 4);
	                        if (!existKeys[genkey]) {
	                            item.key = genkey;
	                            existKeys[genkey] = true;
	                        }
	                    }
	                }
	            }
	        } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                }
	            } finally {
	                if (_didIteratorError3) {
	                    throw _iteratorError3;
	                }
	            }
	        }
	    },


	    /****** 针对组件的参数处理 ****************************************************************/

	    formatOthers: function formatOthers(props) {
	        switch (props.type) {}
	        return props;
	    }
	};

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _utils = __webpack_require__(121);

	exports.default = {
	    // 检查对象上的某个(些)属性是否符合指定类型
	    // 属性可以是单个字符串或数组
	    check: function check(item, name, type) {
	        type = type || 'undefined';
	        // 如果不是数组，转换为数组
	        if (_utils.Utils.typeof(name, 'string')) {
	            name = [name];
	        }
	        if (_utils.Utils.typeof(item, 'object')) {
	            var flag = true;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = name[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var v = _step.value;

	                    if (!_utils.Utils.typeof(item[name], type)) {
	                        this.error(item, name, type);
	                        flag = false;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return flag;
	        }
	        return false;
	    },

	    // 打印错误信息
	    error: function error(item, name, type) {
	        _utils.Utils.defer(function () {
	            console.error('Uncaught TypeError: ' + name + ' is ' + ('' + (type ? 'not ' + type : 'undefined')) + (' in item\'s config "' + JSON.stringify(item) + '"'));
	        });
	    }
	}; /**
	    * @file 数据校验器
	    * @author liuzechun
	    */

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _ajax = __webpack_require__(126);

	var _ajax2 = _interopRequireDefault(_ajax);

	var _requirejs = __webpack_require__(228);

	var _requirejs2 = _interopRequireDefault(_requirejs);

	var _precondition = __webpack_require__(229);

	var _precondition2 = _interopRequireDefault(_precondition);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = {
	    init: function init(insName) {
	        var obj = {};

	        // ajax 实例
	        obj.Ajax = _ajax2.default.init(insName);
	        (0, _instance.setAjax)(insName, obj.Ajax);

	        // requirejs 实例
	        obj.Requirejs = _requirejs2.default.init(insName);
	        (0, _instance.setRequirejs)(insName, obj.Requirejs);

	        // precondition 实例
	        obj.Precondition = _precondition2.default.init(insName);
	        (0, _instance.setPrecondition)(insName, obj.Precondition);

	        return obj;
	    }
	};

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * @file reuqirejs 2.3.5
	                                                                                                                                                                                                                                                                               *      为了方便统一管理，拷贝了一份requirejs的代码，并在最后把requirejs export出去
	                                                                                                                                                                                                                                                                               * vim: et:ts=4:sw=4:sts=4
	                                                                                                                                                                                                                                                                               * @license RequireJS 2.3.5 Copyright jQuery Foundation and other contributors.
	                                                                                                                                                                                                                                                                               * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE
	                                                                                                                                                                                                                                                                               */
	//Not using strict: uneven strict support in browsers, #392, and causes
	//problems with requirejs.exec()/transpiler plugins that may not be strict.
	/*jslint regexp: true, nomen: true, sloppy: true */
	/*global window, navigator, document, importScripts, setTimeout, opera */

	var _utils = __webpack_require__(122);

	var _utils2 = _interopRequireDefault(_utils);

	var _instance = __webpack_require__(158);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// 保证只有一份
	var globalDefine = window.globalDefine = window.globalDefine || [];

	exports.default = (0, _instance.generate)(function (insName) {

	    // 把 insName 转化成 hashName 并缓存起来
	    // var hashName = Utils.hash(insName, 4);
	    // appList[hashName] = insName;

	    var requirejs, require, define;
	    (function (global, setTimeout) {
	        var req,
	            s,
	            head,
	            baseElement,
	            dataMain,
	            src,
	            interactiveScript,
	            currentlyAddingScript,
	            mainScript,
	            subPath,
	            version = '2.3.5',
	            commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
	            cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
	            jsSuffixRegExp = /\.js$/,
	            currDirRegExp = /^\.\//,
	            op = Object.prototype,
	            ostring = op.toString,
	            hasOwn = op.hasOwnProperty,
	            isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
	            isWebWorker = !isBrowser && typeof importScripts !== 'undefined',

	        //PS3 indicates loaded and complete, but need to wait for complete
	        //specifically. Sequence is 'loading', 'loaded', execution,
	        // then 'complete'. The UA check is unfortunate, but not sure how
	        //to feature test w/o causing perf issues.
	        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ? /^complete$/ : /^(complete|loaded)$/,
	            defContextName = '_',

	        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
	        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
	            contexts = {},
	            cfg = {},
	            globalDefQueue = [],
	            useInteractive = false;

	        //Could match something like ')//comment', do not lose the prefix to comment.
	        function commentReplace(match, singlePrefix) {
	            return singlePrefix || '';
	        }

	        function isFunction(it) {
	            return ostring.call(it) === '[object Function]';
	        }

	        function isArray(it) {
	            return ostring.call(it) === '[object Array]';
	        }

	        /**
	         * Helper function for iterating over an array. If the func returns
	         * a true value, it will break out of the loop.
	         */
	        function each(ary, func) {
	            if (ary) {
	                var i;
	                for (i = 0; i < ary.length; i += 1) {
	                    if (ary[i] && func(ary[i], i, ary)) {
	                        break;
	                    }
	                }
	            }
	        }

	        /**
	         * Helper function for iterating over an array backwards. If the func
	         * returns a true value, it will break out of the loop.
	         */
	        function eachReverse(ary, func) {
	            if (ary) {
	                var i;
	                for (i = ary.length - 1; i > -1; i -= 1) {
	                    if (ary[i] && func(ary[i], i, ary)) {
	                        break;
	                    }
	                }
	            }
	        }

	        function hasProp(obj, prop) {
	            return hasOwn.call(obj, prop);
	        }

	        function getOwn(obj, prop) {
	            return hasProp(obj, prop) && obj[prop];
	        }

	        /**
	         * Cycles over properties in an object and calls a function for each
	         * property value. If the function returns a truthy value, then the
	         * iteration is stopped.
	         */
	        function eachProp(obj, func) {
	            var prop;
	            for (prop in obj) {
	                if (hasProp(obj, prop)) {
	                    if (func(obj[prop], prop)) {
	                        break;
	                    }
	                }
	            }
	        }

	        /**
	         * Simple function to mix in properties from source into target,
	         * but only if target does not already have a property of the same name.
	         */
	        function mixin(target, source, force, deepStringMixin) {
	            if (source) {
	                eachProp(source, function (value, prop) {
	                    if (force || !hasProp(target, prop)) {
	                        if (deepStringMixin && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value && !isArray(value) && !isFunction(value) && !(value instanceof RegExp)) {

	                            if (!target[prop]) {
	                                target[prop] = {};
	                            }
	                            mixin(target[prop], value, force, deepStringMixin);
	                        } else {
	                            target[prop] = value;
	                        }
	                    }
	                });
	            }
	            return target;
	        }

	        //Similar to Function.prototype.bind, but the 'this' object is specified
	        //first, since it is easier to read/figure out what 'this' will be.
	        function bind(obj, fn) {
	            return function () {
	                return fn.apply(obj, arguments);
	            };
	        }

	        function scripts() {
	            return document.getElementsByTagName('script');
	        }

	        function defaultOnError(err) {
	            throw err;
	        }

	        //Allow getting a global that is expressed in
	        //dot notation, like 'a.b.c'.
	        function getGlobal(value) {
	            if (!value) {
	                return value;
	            }
	            var g = global;
	            each(value.split('.'), function (part) {
	                g = g[part];
	            });
	            return g;
	        }

	        /**
	         * Constructs an error with a pointer to an URL with more information.
	         * @param {String} id the error ID that maps to an ID on a web page.
	         * @param {String} message human readable error.
	         * @param {Error} [err] the original error, if there is one.
	         *
	         * @returns {Error}
	         */
	        function makeError(id, msg, err, requireModules) {
	            var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
	            e.requireType = id;
	            e.requireModules = requireModules;
	            if (err) {
	                e.originalError = err;
	            }
	            return e;
	        }

	        if (typeof define !== 'undefined') {
	            //If a define is already in play via another AMD loader,
	            //do not overwrite.
	            return;
	        }

	        if (typeof requirejs !== 'undefined') {
	            if (isFunction(requirejs)) {
	                //Do not overwrite an existing requirejs instance.
	                return;
	            }
	            cfg = requirejs;
	            requirejs = undefined;
	        }

	        //Allow for a require config object
	        if (typeof require !== 'undefined' && !isFunction(require)) {
	            //assume it is a config object.
	            cfg = require;
	            require = undefined;
	        }

	        function newContext(contextName) {
	            var inCheckLoaded,
	                Module,
	                context,
	                handlers,
	                checkLoadedTimeoutId,
	                _config = {
	                //Defaults. Do not set a default for map
	                //config to speed up normalize(), which
	                //will run faster if there is no default.
	                waitSeconds: 7,
	                baseUrl: './',
	                paths: {},
	                bundles: {},
	                pkgs: {},
	                shim: {},
	                config: {}
	            },
	                registry = {},

	            //registry of just enabled modules, to speed
	            //cycle breaking code when lots of modules
	            //are registered, but not activated.
	            enabledRegistry = {},
	                undefEvents = {},
	                defQueue = [],
	                _defined = {},
	                urlFetched = {},
	                bundlesMap = {},
	                requireCounter = 1,
	                unnormalizedCounter = 1;

	            /**
	             * Trims the . and .. from an array of path segments.
	             * It will keep a leading path segment if a .. will become
	             * the first path segment, to help with module name lookups,
	             * which act like paths, but can be remapped. But the end result,
	             * all paths that use this function should look normalized.
	             * NOTE: this method MODIFIES the input array.
	             * @param {Array} ary the array of path segments.
	             */
	            function trimDots(ary) {
	                var i, part;
	                for (i = 0; i < ary.length; i++) {
	                    part = ary[i];
	                    if (part === '.') {
	                        ary.splice(i, 1);
	                        i -= 1;
	                    } else if (part === '..') {
	                        // If at the start, or previous value is still ..,
	                        // keep them so that when converted to a path it may
	                        // still work when converted to a path, even though
	                        // as an ID it is less than ideal. In larger point
	                        // releases, may be better to just kick out an error.
	                        if (i === 0 || i === 1 && ary[2] === '..' || ary[i - 1] === '..') {
	                            continue;
	                        } else if (i > 0) {
	                            ary.splice(i - 1, 2);
	                            i -= 2;
	                        }
	                    }
	                }
	            }

	            /**
	             * Given a relative module name, like ./something, normalize it to
	             * a real name that can be mapped to a path.
	             * @param {String} name the relative name
	             * @param {String} baseName a real name that the name arg is relative
	             * to.
	             * @param {Boolean} applyMap apply the map config to the value. Should
	             * only be done if this normalization is for a dependency ID.
	             * @returns {String} normalized name
	             */
	            function normalize(name, baseName, applyMap) {
	                var pkgMain,
	                    mapValue,
	                    nameParts,
	                    i,
	                    j,
	                    nameSegment,
	                    lastIndex,
	                    foundMap,
	                    foundI,
	                    foundStarMap,
	                    starI,
	                    normalizedBaseParts,
	                    baseParts = baseName && baseName.split('/'),
	                    map = _config.map,
	                    starMap = map && map['*'];

	                //Adjust any relative paths.
	                if (name) {
	                    name = name.split('/');
	                    lastIndex = name.length - 1;

	                    // If wanting node ID compatibility, strip .js from end
	                    // of IDs. Have to do this here, and not in nameToUrl
	                    // because node allows either .js or non .js to map
	                    // to same file.
	                    if (_config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                        name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                    }

	                    // Starts with a '.' so need the baseName
	                    if (name[0].charAt(0) === '.' && baseParts) {
	                        //Convert baseName to array, and lop off the last part,
	                        //so that . matches that 'directory' and not name of the baseName's
	                        //module. For instance, baseName of 'one/two/three', maps to
	                        //'one/two/three.js', but we want the directory, 'one/two' for
	                        //this normalization.
	                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
	                        name = normalizedBaseParts.concat(name);
	                    }

	                    trimDots(name);
	                    name = name.join('/');
	                }

	                //Apply map config if available.
	                if (applyMap && map && (baseParts || starMap)) {
	                    nameParts = name.split('/');

	                    outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
	                        nameSegment = nameParts.slice(0, i).join('/');

	                        if (baseParts) {
	                            //Find the longest baseName segment match in the config.
	                            //So, do joins on the biggest to smallest lengths of baseParts.
	                            for (j = baseParts.length; j > 0; j -= 1) {
	                                mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

	                                //baseName segment has config, find if it has one for
	                                //this name.
	                                if (mapValue) {
	                                    mapValue = getOwn(mapValue, nameSegment);
	                                    if (mapValue) {
	                                        //Match, update name to the new value.
	                                        foundMap = mapValue;
	                                        foundI = i;
	                                        break outerLoop;
	                                    }
	                                }
	                            }
	                        }

	                        //Check for a star map match, but just hold on to it,
	                        //if there is a shorter segment match later in a matching
	                        //config, then favor over this star map.
	                        if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
	                            foundStarMap = getOwn(starMap, nameSegment);
	                            starI = i;
	                        }
	                    }

	                    if (!foundMap && foundStarMap) {
	                        foundMap = foundStarMap;
	                        foundI = starI;
	                    }

	                    if (foundMap) {
	                        nameParts.splice(0, foundI, foundMap);
	                        name = nameParts.join('/');
	                    }
	                }

	                // If the name points to a package's name, use
	                // the package main instead.
	                pkgMain = getOwn(_config.pkgs, name);

	                return pkgMain ? pkgMain : name;
	            }

	            function removeScript(name) {
	                if (isBrowser) {
	                    each(scripts(), function (scriptNode) {
	                        if (scriptNode.getAttribute('data-requiremodule') === name && scriptNode.getAttribute('data-requirecontext') === context.contextName) {
	                            scriptNode.parentNode.removeChild(scriptNode);
	                            return true;
	                        }
	                    });
	                }
	            }

	            function hasPathFallback(id) {
	                var pathConfig = getOwn(_config.paths, id);
	                if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
	                    //Pop off the first array value, since it failed, and
	                    //retry
	                    pathConfig.shift();
	                    context.require.undef(id);

	                    //Custom require that does not do map translation, since
	                    //ID is "absolute", already mapped/resolved.
	                    context.makeRequire(null, {
	                        skipMap: true
	                    })([id]);

	                    return true;
	                }
	            }

	            //Turns a plugin!resource to [plugin, resource]
	            //with the plugin being undefined if the name
	            //did not have a plugin prefix.
	            function splitPrefix(name) {
	                var prefix,
	                    index = name ? name.indexOf('!') : -1;
	                if (index > -1) {
	                    prefix = name.substring(0, index);
	                    name = name.substring(index + 1, name.length);
	                }
	                return [prefix, name];
	            }

	            /**
	             * Creates a module mapping that includes plugin prefix, module
	             * name, and path. If parentModuleMap is provided it will
	             * also normalize the name via require.normalize()
	             *
	             * @param {String} name the module name
	             * @param {String} [parentModuleMap] parent module map
	             * for the module name, used to resolve relative names.
	             * @param {Boolean} isNormalized: is the ID already normalized.
	             * This is true if this call is done for a define() module ID.
	             * @param {Boolean} applyMap: apply the map config to the ID.
	             * Should only be true if this map is for a dependency.
	             *
	             * @returns {Object}
	             */
	            function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
	                var url,
	                    pluginModule,
	                    suffix,
	                    nameParts,
	                    prefix = null,
	                    parentName = parentModuleMap ? parentModuleMap.name : null,
	                    originalName = name,
	                    isDefine = true,
	                    normalizedName = '';

	                //If no name, then it means it is a require call, generate an
	                //internal name.
	                if (!name) {
	                    isDefine = false;
	                    name = '_@r' + (requireCounter += 1);
	                }

	                nameParts = splitPrefix(name);
	                prefix = nameParts[0];
	                name = nameParts[1];

	                if (prefix) {
	                    prefix = normalize(prefix, parentName, applyMap);
	                    pluginModule = getOwn(_defined, prefix);
	                }

	                //Account for relative paths if there is a base name.
	                if (name) {
	                    if (prefix) {
	                        if (isNormalized) {
	                            normalizedName = name;
	                        } else if (pluginModule && pluginModule.normalize) {
	                            //Plugin is loaded, use its normalize method.
	                            normalizedName = pluginModule.normalize(name, function (name) {
	                                return normalize(name, parentName, applyMap);
	                            });
	                        } else {
	                            // If nested plugin references, then do not try to
	                            // normalize, as it will not normalize correctly. This
	                            // places a restriction on resourceIds, and the longer
	                            // term solution is not to normalize until plugins are
	                            // loaded and all normalizations to allow for async
	                            // loading of a loader plugin. But for now, fixes the
	                            // common uses. Details in #1131
	                            normalizedName = name.indexOf('!') === -1 ? normalize(name, parentName, applyMap) : name;
	                        }
	                    } else {
	                        //A regular module.
	                        normalizedName = normalize(name, parentName, applyMap);

	                        //Normalized name may be a plugin ID due to map config
	                        //application in normalize. The map config values must
	                        //already be normalized, so do not need to redo that part.
	                        nameParts = splitPrefix(normalizedName);
	                        prefix = nameParts[0];
	                        normalizedName = nameParts[1];
	                        isNormalized = true;

	                        url = context.nameToUrl(normalizedName);
	                    }
	                }

	                //If the id is a plugin id that cannot be determined if it needs
	                //normalization, stamp it with a unique ID so two matching relative
	                //ids that may conflict can be separate.
	                suffix = prefix && !pluginModule && !isNormalized ? '_unnormalized' + (unnormalizedCounter += 1) : '';

	                return {
	                    prefix: prefix,
	                    name: normalizedName,
	                    parentMap: parentModuleMap,
	                    unnormalized: !!suffix,
	                    url: url,
	                    originalName: originalName,
	                    isDefine: isDefine,
	                    id: (prefix ? prefix + '!' + normalizedName : normalizedName) + suffix
	                };
	            }

	            function getModule(depMap) {
	                var id = depMap.id,
	                    mod = getOwn(registry, id);

	                if (!mod) {
	                    mod = registry[id] = new context.Module(depMap);
	                }

	                return mod;
	            }

	            function on(depMap, name, fn) {
	                var id = depMap.id,
	                    mod = getOwn(registry, id);

	                if (hasProp(_defined, id) && (!mod || mod.defineEmitComplete)) {
	                    if (name === 'defined') {
	                        fn(_defined[id]);
	                    }
	                } else {
	                    mod = getModule(depMap);
	                    if (mod.error && name === 'error') {
	                        fn(mod.error);
	                    } else {
	                        mod.on(name, fn);
	                    }
	                }
	            }

	            function onError(err, errback) {
	                var ids = err.requireModules,
	                    notified = false;

	                if (errback) {
	                    errback(err);
	                } else {
	                    each(ids, function (id) {
	                        var mod = getOwn(registry, id);
	                        if (mod) {
	                            //Set error on module, so it skips timeout checks.
	                            mod.error = err;
	                            if (mod.events.error) {
	                                notified = true;
	                                mod.emit('error', err);
	                            }
	                        }
	                    });

	                    if (!notified) {
	                        req.onError(err);
	                    }
	                }
	            }

	            /**
	             * Internal method to transfer globalQueue items to this context's
	             * defQueue.
	             */
	            function takeGlobalQueue() {
	                //Push all the globalDefQueue items into the context's defQueue
	                if (globalDefQueue.length) {
	                    each(globalDefQueue, function (queueItem) {
	                        var id = queueItem[0];
	                        if (typeof id === 'string') {
	                            context.defQueueMap[id] = true;
	                        }
	                        defQueue.push(queueItem);
	                    });
	                    globalDefQueue = [];
	                }
	            }

	            handlers = {
	                'require': function require(mod) {
	                    if (mod.require) {
	                        return mod.require;
	                    } else {
	                        return mod.require = context.makeRequire(mod.map);
	                    }
	                },
	                'exports': function exports(mod) {
	                    mod.usingExports = true;
	                    if (mod.map.isDefine) {
	                        if (mod.exports) {
	                            return _defined[mod.map.id] = mod.exports;
	                        } else {
	                            return mod.exports = _defined[mod.map.id] = {};
	                        }
	                    }
	                },
	                'module': function module(mod) {
	                    if (mod.module) {
	                        return mod.module;
	                    } else {
	                        return mod.module = {
	                            id: mod.map.id,
	                            uri: mod.map.url,
	                            config: function config() {
	                                return getOwn(_config.config, mod.map.id) || {};
	                            },
	                            exports: mod.exports || (mod.exports = {})
	                        };
	                    }
	                }
	            };

	            function cleanRegistry(id) {
	                //Clean up machinery used for waiting modules.
	                delete registry[id];
	                delete enabledRegistry[id];
	            }

	            function breakCycle(mod, traced, processed) {
	                var id = mod.map.id;

	                if (mod.error) {
	                    mod.emit('error', mod.error);
	                } else {
	                    traced[id] = true;
	                    each(mod.depMaps, function (depMap, i) {
	                        var depId = depMap.id,
	                            dep = getOwn(registry, depId);

	                        //Only force things that have not completed
	                        //being defined, so still in the registry,
	                        //and only if it has not been matched up
	                        //in the module already.
	                        if (dep && !mod.depMatched[i] && !processed[depId]) {
	                            if (getOwn(traced, depId)) {
	                                mod.defineDep(i, _defined[depId]);
	                                mod.check(); //pass false?
	                            } else {
	                                breakCycle(dep, traced, processed);
	                            }
	                        }
	                    });
	                    processed[id] = true;
	                }
	            }

	            function checkLoaded() {
	                var err,
	                    usingPathFallback,
	                    waitInterval = _config.waitSeconds * 1000,

	                //It is possible to disable the wait interval by using waitSeconds of 0.
	                expired = waitInterval && context.startTime + waitInterval < new Date().getTime(),
	                    noLoads = [],
	                    reqCalls = [],
	                    stillLoading = false,
	                    needCycleCheck = true;

	                //Do not bother if this call was a result of a cycle break.
	                if (inCheckLoaded) {
	                    return;
	                }

	                inCheckLoaded = true;

	                //Figure out the state of all the modules.
	                eachProp(enabledRegistry, function (mod) {
	                    var map = mod.map,
	                        modId = map.id;

	                    //Skip things that are not enabled or in error state.
	                    if (!mod.enabled) {
	                        return;
	                    }

	                    if (!map.isDefine) {
	                        reqCalls.push(mod);
	                    }

	                    if (!mod.error) {
	                        //If the module should be executed, and it has not
	                        //been inited and time is up, remember it.
	                        if (!mod.inited && expired) {
	                            if (hasPathFallback(modId)) {
	                                usingPathFallback = true;
	                                stillLoading = true;
	                            } else {
	                                noLoads.push(modId);
	                                removeScript(modId);
	                            }
	                        } else if (!mod.inited && mod.fetched && map.isDefine) {
	                            stillLoading = true;
	                            if (!map.prefix) {
	                                //No reason to keep looking for unfinished
	                                //loading. If the only stillLoading is a
	                                //plugin resource though, keep going,
	                                //because it may be that a plugin resource
	                                //is waiting on a non-plugin cycle.
	                                return needCycleCheck = false;
	                            }
	                        }
	                    }
	                });

	                if (expired && noLoads.length) {
	                    //If wait time expired, throw error of unloaded modules.
	                    err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
	                    err.contextName = context.contextName;
	                    return onError(err);
	                }

	                //Not expired, check for a cycle.
	                if (needCycleCheck) {
	                    each(reqCalls, function (mod) {
	                        breakCycle(mod, {}, {});
	                    });
	                }

	                //If still waiting on loads, and the waiting load is something
	                //other than a plugin resource, or there are still outstanding
	                //scripts, then just try back later.
	                if ((!expired || usingPathFallback) && stillLoading) {
	                    //Something is still waiting to load. Wait for it, but only
	                    //if a timeout is not already in effect.
	                    if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
	                        checkLoadedTimeoutId = setTimeout(function () {
	                            checkLoadedTimeoutId = 0;
	                            checkLoaded();
	                        }, 50);
	                    }
	                }

	                inCheckLoaded = false;
	            }

	            Module = function Module(map) {
	                this.events = getOwn(undefEvents, map.id) || {};
	                this.map = map;
	                this.shim = getOwn(_config.shim, map.id);
	                this.depExports = [];
	                this.depMaps = [];
	                this.depMatched = [];
	                this.pluginMaps = {};
	                this.depCount = 0;

	                /* this.exports this.factory
	                this.depMaps = [],
	                this.enabled, this.fetched
	                */
	            };

	            Module.prototype = {
	                init: function init(depMaps, factory, errback, options) {
	                    options = options || {};

	                    //Do not do more inits if already done. Can happen if there
	                    //are multiple define calls for the same module. That is not
	                    //a normal, common case, but it is also not unexpected.
	                    if (this.inited) {
	                        return;
	                    }

	                    this.factory = factory;

	                    if (errback) {
	                        //Register for errors on this module.
	                        this.on('error', errback);
	                    } else if (this.events.error) {
	                        //If no errback already, but there are error listeners
	                        //on this module, set up an errback to pass to the deps.
	                        errback = bind(this, function (err) {
	                            this.emit('error', err);
	                        });
	                    }

	                    //Do a copy of the dependency array, so that
	                    //source inputs are not modified. For example
	                    //"shim" deps are passed in here directly, and
	                    //doing a direct modification of the depMaps array
	                    //would affect that config.
	                    this.depMaps = depMaps && depMaps.slice(0);

	                    this.errback = errback;

	                    //Indicate this module has be initialized
	                    this.inited = true;

	                    this.ignore = options.ignore;

	                    //Could have option to init this module in enabled mode,
	                    //or could have been previously marked as enabled. However,
	                    //the dependencies are not known until init is called. So
	                    //if enabled previously, now trigger dependencies as enabled.
	                    if (options.enabled || this.enabled) {
	                        //Enable this module and dependencies.
	                        //Will call this.check()
	                        this.enable();
	                    } else {
	                        this.check();
	                    }
	                },

	                defineDep: function defineDep(i, depExports) {
	                    //Because of cycles, defined callback for a given
	                    //export can be called more than once.
	                    if (!this.depMatched[i]) {
	                        this.depMatched[i] = true;
	                        this.depCount -= 1;
	                        this.depExports[i] = depExports;
	                    }
	                },

	                fetch: function fetch() {
	                    if (this.fetched) {
	                        return;
	                    }
	                    this.fetched = true;

	                    context.startTime = new Date().getTime();

	                    var map = this.map;

	                    //If the manager is for a plugin managed resource,
	                    //ask the plugin to load it now.
	                    if (this.shim) {
	                        context.makeRequire(this.map, {
	                            enableBuildCallback: true
	                        })(this.shim.deps || [], bind(this, function () {
	                            return map.prefix ? this.callPlugin() : this.load();
	                        }));
	                    } else {
	                        //Regular dependency.
	                        return map.prefix ? this.callPlugin() : this.load();
	                    }
	                },

	                load: function load() {
	                    var url = this.map.url;

	                    //Regular dependency.
	                    if (!urlFetched[url]) {
	                        urlFetched[url] = true;
	                        context.load(this.map.id, url);
	                    }
	                },

	                /**
	                 * Checks if the module is ready to define itself, and if so,
	                 * define it.
	                 */
	                check: function check() {
	                    if (!this.enabled || this.enabling) {
	                        return;
	                    }

	                    var err,
	                        cjsModule,
	                        id = this.map.id,
	                        depExports = this.depExports,
	                        exports = this.exports,
	                        factory = this.factory;

	                    if (!this.inited) {
	                        // Only fetch if not already in the defQueue.
	                        if (!hasProp(context.defQueueMap, id)) {
	                            this.fetch();
	                        }
	                    } else if (this.error) {
	                        this.emit('error', this.error);
	                    } else if (!this.defining) {
	                        //The factory could trigger another require call
	                        //that would result in checking this module to
	                        //define itself again. If already in the process
	                        //of doing that, skip this work.
	                        this.defining = true;

	                        if (this.depCount < 1 && !this.defined) {
	                            if (isFunction(factory)) {
	                                //If there is an error listener, favor passing
	                                //to that instead of throwing an error. However,
	                                //only do it for define()'d  modules. require
	                                //errbacks should not be called for failures in
	                                //their callbacks (#699). However if a global
	                                //onError is set, use that.
	                                if (this.events.error && this.map.isDefine || req.onError !== defaultOnError) {
	                                    try {
	                                        exports = context.execCb(id, factory, depExports, exports);
	                                    } catch (e) {
	                                        err = e;
	                                    }
	                                } else {
	                                    exports = context.execCb(id, factory, depExports, exports);
	                                }

	                                // Favor return value over exports. If node/cjs in play,
	                                // then will not have a return value anyway. Favor
	                                // module.exports assignment over exports object.
	                                if (this.map.isDefine && exports === undefined) {
	                                    cjsModule = this.module;
	                                    if (cjsModule) {
	                                        exports = cjsModule.exports;
	                                    } else if (this.usingExports) {
	                                        //exports already set the defined value.
	                                        exports = this.exports;
	                                    }
	                                }

	                                if (err) {
	                                    err.requireMap = this.map;
	                                    err.requireModules = this.map.isDefine ? [this.map.id] : null;
	                                    err.requireType = this.map.isDefine ? 'define' : 'require';
	                                    return onError(this.error = err);
	                                }
	                            } else {
	                                //Just a literal value
	                                exports = factory;
	                            }

	                            this.exports = exports;

	                            if (this.map.isDefine && !this.ignore) {
	                                _defined[id] = exports;

	                                if (req.onResourceLoad) {
	                                    var resLoadMaps = [];
	                                    each(this.depMaps, function (depMap) {
	                                        resLoadMaps.push(depMap.normalizedMap || depMap);
	                                    });
	                                    req.onResourceLoad(context, this.map, resLoadMaps);
	                                }
	                            }

	                            //Clean up
	                            cleanRegistry(id);

	                            this.defined = true;
	                        }

	                        //Finished the define stage. Allow calling check again
	                        //to allow define notifications below in the case of a
	                        //cycle.
	                        this.defining = false;

	                        if (this.defined && !this.defineEmitted) {
	                            this.defineEmitted = true;
	                            this.emit('defined', this.exports);
	                            this.defineEmitComplete = true;
	                        }
	                    }
	                },

	                callPlugin: function callPlugin() {
	                    var map = this.map,
	                        id = map.id,

	                    //Map already normalized the prefix.
	                    pluginMap = makeModuleMap(map.prefix);

	                    //Mark this as a dependency for this plugin, so it
	                    //can be traced for cycles.
	                    this.depMaps.push(pluginMap);

	                    on(pluginMap, 'defined', bind(this, function (plugin) {
	                        var load,
	                            normalizedMap,
	                            normalizedMod,
	                            bundleId = getOwn(bundlesMap, this.map.id),
	                            name = this.map.name,
	                            parentName = this.map.parentMap ? this.map.parentMap.name : null,
	                            localRequire = context.makeRequire(map.parentMap, {
	                            enableBuildCallback: true
	                        });

	                        //If current map is not normalized, wait for that
	                        //normalized name to load instead of continuing.
	                        if (this.map.unnormalized) {
	                            //Normalize the ID if the plugin allows it.
	                            if (plugin.normalize) {
	                                name = plugin.normalize(name, function (name) {
	                                    return normalize(name, parentName, true);
	                                }) || '';
	                            }

	                            //prefix and name should already be normalized, no need
	                            //for applying map config again either.
	                            normalizedMap = makeModuleMap(map.prefix + '!' + name, this.map.parentMap, true);
	                            on(normalizedMap, 'defined', bind(this, function (value) {
	                                this.map.normalizedMap = normalizedMap;
	                                this.init([], function () {
	                                    return value;
	                                }, null, {
	                                    enabled: true,
	                                    ignore: true
	                                });
	                            }));

	                            normalizedMod = getOwn(registry, normalizedMap.id);
	                            if (normalizedMod) {
	                                //Mark this as a dependency for this plugin, so it
	                                //can be traced for cycles.
	                                this.depMaps.push(normalizedMap);

	                                if (this.events.error) {
	                                    normalizedMod.on('error', bind(this, function (err) {
	                                        this.emit('error', err);
	                                    }));
	                                }
	                                normalizedMod.enable();
	                            }

	                            return;
	                        }

	                        //If a paths config, then just load that file instead to
	                        //resolve the plugin, as it is built into that paths layer.
	                        if (bundleId) {
	                            this.map.url = context.nameToUrl(bundleId);
	                            this.load();
	                            return;
	                        }

	                        load = bind(this, function (value) {
	                            this.init([], function () {
	                                return value;
	                            }, null, {
	                                enabled: true
	                            });
	                        });

	                        load.error = bind(this, function (err) {
	                            this.inited = true;
	                            this.error = err;
	                            err.requireModules = [id];

	                            //Remove temp unnormalized modules for this module,
	                            //since they will never be resolved otherwise now.
	                            eachProp(registry, function (mod) {
	                                if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
	                                    cleanRegistry(mod.map.id);
	                                }
	                            });

	                            onError(err);
	                        });

	                        //Allow plugins to load other code without having to know the
	                        //context or how to 'complete' the load.
	                        load.fromText = bind(this, function (text, textAlt) {
	                            /*jslint evil: true */
	                            var moduleName = map.name,
	                                moduleMap = makeModuleMap(moduleName),
	                                hasInteractive = useInteractive;

	                            //As of 2.1.0, support just passing the text, to reinforce
	                            //fromText only being called once per resource. Still
	                            //support old style of passing moduleName but discard
	                            //that moduleName in favor of the internal ref.
	                            if (textAlt) {
	                                text = textAlt;
	                            }

	                            //Turn off interactive script matching for IE for any define
	                            //calls in the text, then turn it back on at the end.
	                            if (hasInteractive) {
	                                useInteractive = false;
	                            }

	                            //Prime the system by creating a module instance for
	                            //it.
	                            getModule(moduleMap);

	                            //Transfer any config to this other module.
	                            if (hasProp(_config.config, id)) {
	                                _config.config[moduleName] = _config.config[id];
	                            }

	                            try {
	                                req.exec(text);
	                            } catch (e) {
	                                return onError(makeError('fromtexteval', 'fromText eval for ' + id + ' failed: ' + e, e, [id]));
	                            }

	                            if (hasInteractive) {
	                                useInteractive = true;
	                            }

	                            //Mark this as a dependency for the plugin
	                            //resource
	                            this.depMaps.push(moduleMap);

	                            //Support anonymous modules.
	                            context.completeLoad(moduleName);

	                            //Bind the value of that module to the value for this
	                            //resource ID.
	                            localRequire([moduleName], load);
	                        });

	                        //Use parentName here since the plugin's name is not reliable,
	                        //could be some weird string with no path that actually wants to
	                        //reference the parentName's path.
	                        plugin.load(map.name, localRequire, load, _config);
	                    }));

	                    context.enable(pluginMap, this);
	                    this.pluginMaps[pluginMap.id] = pluginMap;
	                },

	                enable: function enable() {
	                    enabledRegistry[this.map.id] = this;
	                    this.enabled = true;

	                    //Set flag mentioning that the module is enabling,
	                    //so that immediate calls to the defined callbacks
	                    //for dependencies do not trigger inadvertent load
	                    //with the depCount still being zero.
	                    this.enabling = true;

	                    //Enable each dependency
	                    each(this.depMaps, bind(this, function (depMap, i) {
	                        var id, mod, handler;

	                        if (typeof depMap === 'string') {
	                            //Dependency needs to be converted to a depMap
	                            //and wired up to this module.
	                            depMap = makeModuleMap(depMap, this.map.isDefine ? this.map : this.map.parentMap, false, !this.skipMap);
	                            this.depMaps[i] = depMap;

	                            handler = getOwn(handlers, depMap.id);

	                            if (handler) {
	                                this.depExports[i] = handler(this);
	                                return;
	                            }

	                            this.depCount += 1;

	                            on(depMap, 'defined', bind(this, function (depExports) {
	                                if (this.undefed) {
	                                    return;
	                                }
	                                this.defineDep(i, depExports);
	                                this.check();
	                            }));

	                            if (this.errback) {
	                                on(depMap, 'error', bind(this, this.errback));
	                            } else if (this.events.error) {
	                                // No direct errback on this module, but something
	                                // else is listening for errors, so be sure to
	                                // propagate the error correctly.
	                                on(depMap, 'error', bind(this, function (err) {
	                                    this.emit('error', err);
	                                }));
	                            }
	                        }

	                        id = depMap.id;
	                        mod = registry[id];

	                        //Skip special modules like 'require', 'exports', 'module'
	                        //Also, don't call enable if it is already enabled,
	                        //important in circular dependency cases.
	                        if (!hasProp(handlers, id) && mod && !mod.enabled) {
	                            context.enable(depMap, this);
	                        }
	                    }));

	                    //Enable each plugin that is used in
	                    //a dependency
	                    eachProp(this.pluginMaps, bind(this, function (pluginMap) {
	                        var mod = getOwn(registry, pluginMap.id);
	                        if (mod && !mod.enabled) {
	                            context.enable(pluginMap, this);
	                        }
	                    }));

	                    this.enabling = false;

	                    this.check();
	                },

	                on: function on(name, cb) {
	                    var cbs = this.events[name];
	                    if (!cbs) {
	                        cbs = this.events[name] = [];
	                    }
	                    cbs.push(cb);
	                },

	                emit: function emit(name, evt) {
	                    each(this.events[name], function (cb) {
	                        cb(evt);
	                    });
	                    if (name === 'error') {
	                        //Now that the error handler was triggered, remove
	                        //the listeners, since this broken Module instance
	                        //can stay around for a while in the registry.
	                        delete this.events[name];
	                    }
	                }
	            };

	            function callGetModule(args) {
	                //Skip modules already defined.
	                if (!hasProp(_defined, args[0])) {
	                    getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
	                }
	            }

	            function removeListener(node, func, name, ieName) {
	                //Favor detachEvent because of IE9
	                //issue, see attachEvent/addEventListener comment elsewhere
	                //in this file.
	                if (node.detachEvent && !isOpera) {
	                    //Probably IE. If not it will throw an error, which will be
	                    //useful to know.
	                    if (ieName) {
	                        node.detachEvent(ieName, func);
	                    }
	                } else {
	                    node.removeEventListener(name, func, false);
	                }
	            }

	            /**
	             * Given an event from a script node, get the requirejs info from it,
	             * and then removes the event listeners on the node.
	             * @param {Event} evt
	             * @returns {Object}
	             */
	            function getScriptData(evt) {
	                //Using currentTarget instead of target for Firefox 2.0's sake. Not
	                //all old browsers will be supported, but this one was easy enough
	                //to support and still makes sense.
	                var node = evt.currentTarget || evt.srcElement;

	                //Remove the listeners once here.
	                removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
	                removeListener(node, context.onScriptError, 'error');

	                return {
	                    node: node,
	                    id: node && node.getAttribute('data-requiremodule')
	                };
	            }

	            function intakeDefines() {
	                var args;

	                //Any defined modules in the global queue, intake them now.
	                takeGlobalQueue();

	                //Make sure any remaining defQueue items get properly processed.
	                while (defQueue.length) {
	                    args = defQueue.shift();
	                    if (args[0] === null) {
	                        return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
	                    } else {
	                        //args are id, deps, factory. Should be normalized by the
	                        //define() function.
	                        callGetModule(args);
	                    }
	                }
	                context.defQueueMap = {};
	            }

	            context = {
	                config: _config,
	                contextName: contextName,
	                registry: registry,
	                defined: _defined,
	                urlFetched: urlFetched,
	                defQueue: defQueue,
	                defQueueMap: {},
	                Module: Module,
	                makeModuleMap: makeModuleMap,
	                nextTick: req.nextTick,
	                onError: onError,

	                /**
	                 * Set a configuration for the context.
	                 * @param {Object} cfg config object to integrate.
	                 */
	                configure: function configure(cfg) {
	                    //Make sure the baseUrl ends in a slash.
	                    if (cfg.baseUrl) {
	                        if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
	                            cfg.baseUrl += '/';
	                        }
	                    }

	                    // Convert old style urlArgs string to a function.
	                    if (typeof cfg.urlArgs === 'string') {
	                        var urlArgs = cfg.urlArgs;
	                        cfg.urlArgs = function (id, url) {
	                            return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
	                        };
	                    }

	                    //Save off the paths since they require special processing,
	                    //they are additive.
	                    var shim = _config.shim,
	                        objs = {
	                        paths: true,
	                        bundles: true,
	                        config: true,
	                        map: true
	                    };

	                    eachProp(cfg, function (value, prop) {
	                        if (objs[prop]) {
	                            if (!_config[prop]) {
	                                _config[prop] = {};
	                            }
	                            mixin(_config[prop], value, true, true);
	                        } else {
	                            _config[prop] = value;
	                        }
	                    });

	                    //Reverse map the bundles
	                    if (cfg.bundles) {
	                        eachProp(cfg.bundles, function (value, prop) {
	                            each(value, function (v) {
	                                if (v !== prop) {
	                                    bundlesMap[v] = prop;
	                                }
	                            });
	                        });
	                    }

	                    //Merge shim
	                    if (cfg.shim) {
	                        eachProp(cfg.shim, function (value, id) {
	                            //Normalize the structure
	                            if (isArray(value)) {
	                                value = {
	                                    deps: value
	                                };
	                            }
	                            if ((value.exports || value.init) && !value.exportsFn) {
	                                value.exportsFn = context.makeShimExports(value);
	                            }
	                            shim[id] = value;
	                        });
	                        _config.shim = shim;
	                    }

	                    //Adjust packages if necessary.
	                    if (cfg.packages) {
	                        each(cfg.packages, function (pkgObj) {
	                            var location, name;

	                            pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;

	                            name = pkgObj.name;
	                            location = pkgObj.location;
	                            if (location) {
	                                _config.paths[name] = pkgObj.location;
	                            }

	                            //Save pointer to main module ID for pkg name.
	                            //Remove leading dot in main, so main paths are normalized,
	                            //and remove any trailing .js, since different package
	                            //envs have different conventions: some use a module name,
	                            //some use a file name.
	                            _config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main').replace(currDirRegExp, '').replace(jsSuffixRegExp, '');
	                        });
	                    }

	                    //If there are any "waiting to execute" modules in the registry,
	                    //update the maps for them, since their info, like URLs to load,
	                    //may have changed.
	                    eachProp(registry, function (mod, id) {
	                        //If module already has init called, since it is too
	                        //late to modify them, and ignore unnormalized ones
	                        //since they are transient.
	                        if (!mod.inited && !mod.map.unnormalized) {
	                            mod.map = makeModuleMap(id, null, true);
	                        }
	                    });

	                    //If a deps array or a config callback is specified, then call
	                    //require with those args. This is useful when require is defined as a
	                    //config object before require.js is loaded.
	                    if (cfg.deps || cfg.callback) {
	                        context.require(cfg.deps || [], cfg.callback);
	                    }
	                },

	                makeShimExports: function makeShimExports(value) {
	                    function fn() {
	                        var ret;
	                        if (value.init) {
	                            ret = value.init.apply(global, arguments);
	                        }
	                        return ret || value.exports && getGlobal(value.exports);
	                    }
	                    return fn;
	                },

	                makeRequire: function makeRequire(relMap, options) {
	                    options = options || {};

	                    function localRequire(deps, callback, errback) {
	                        var id, map, requireMod;

	                        if (options.enableBuildCallback && callback && isFunction(callback)) {
	                            callback.__requireJsBuild = true;
	                        }

	                        if (typeof deps === 'string') {
	                            if (isFunction(callback)) {
	                                //Invalid call
	                                return onError(makeError('requireargs', 'Invalid require call'), errback);
	                            }

	                            //If require|exports|module are requested, get the
	                            //value for them from the special handlers. Caveat:
	                            //this only works while module is being defined.
	                            if (relMap && hasProp(handlers, deps)) {
	                                return handlers[deps](registry[relMap.id]);
	                            }

	                            //Synchronous access to one module. If require.get is
	                            //available (as in the Node adapter), prefer that.
	                            if (req.get) {
	                                return req.get(context, deps, relMap, localRequire);
	                            }

	                            //Normalize module name, if it contains . or ..
	                            map = makeModuleMap(deps, relMap, false, true);
	                            id = map.id;

	                            if (!hasProp(_defined, id)) {
	                                return onError(makeError('notloaded', 'Module name "' + id + '" has not been loaded yet for context: ' + contextName + (relMap ? '' : '. Use require([])')));
	                            }
	                            return _defined[id];
	                        }

	                        //Grab defines waiting in the global queue.
	                        intakeDefines();

	                        //Mark all the dependencies as needing to be loaded.
	                        context.nextTick(function () {
	                            //Some defines could have been added since the
	                            //require call, collect them.
	                            intakeDefines();

	                            requireMod = getModule(makeModuleMap(null, relMap));

	                            //Store if map config should be applied to this require
	                            //call for dependencies.
	                            requireMod.skipMap = options.skipMap;

	                            requireMod.init(deps, callback, errback, {
	                                enabled: true
	                            });

	                            checkLoaded();
	                        });

	                        return localRequire;
	                    }

	                    mixin(localRequire, {
	                        isBrowser: isBrowser,

	                        /**
	                         * Converts a module name + .extension into an URL path.
	                         * *Requires* the use of a module name. It does not support using
	                         * plain URLs like nameToUrl.
	                         */
	                        toUrl: function toUrl(moduleNamePlusExt) {
	                            var ext,
	                                index = moduleNamePlusExt.lastIndexOf('.'),
	                                segment = moduleNamePlusExt.split('/')[0],
	                                isRelative = segment === '.' || segment === '..';

	                            //Have a file extension alias, and it is not the
	                            //dots from a relative path.
	                            if (index !== -1 && (!isRelative || index > 1)) {
	                                ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
	                                moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
	                            }

	                            return context.nameToUrl(normalize(moduleNamePlusExt, relMap && relMap.id, true), ext, true);
	                        },

	                        defined: function defined(id) {
	                            return hasProp(_defined, makeModuleMap(id, relMap, false, true).id);
	                        },

	                        specified: function specified(id) {
	                            id = makeModuleMap(id, relMap, false, true).id;
	                            return hasProp(_defined, id) || hasProp(registry, id);
	                        }
	                    });

	                    //Only allow undef on top level require calls
	                    if (!relMap) {
	                        localRequire.undef = function (id) {
	                            //Bind any waiting define() calls to this context,
	                            //fix for #408
	                            takeGlobalQueue();

	                            var map = makeModuleMap(id, relMap, true),
	                                mod = getOwn(registry, id);

	                            mod.undefed = true;
	                            removeScript(id);

	                            delete _defined[id];
	                            delete urlFetched[map.url];
	                            delete undefEvents[id];

	                            //Clean queued defines too. Go backwards
	                            //in array so that the splices do not
	                            //mess up the iteration.
	                            eachReverse(defQueue, function (args, i) {
	                                if (args[0] === id) {
	                                    defQueue.splice(i, 1);
	                                }
	                            });
	                            delete context.defQueueMap[id];

	                            if (mod) {
	                                //Hold on to listeners in case the
	                                //module will be attempted to be reloaded
	                                //using a different config.
	                                if (mod.events.defined) {
	                                    undefEvents[id] = mod.events;
	                                }

	                                cleanRegistry(id);
	                            }
	                        };
	                    }

	                    return localRequire;
	                },

	                /**
	                 * Called to enable a module if it is still in the registry
	                 * awaiting enablement. A second arg, parent, the parent module,
	                 * is passed in for context, when this method is overridden by
	                 * the optimizer. Not shown here to keep code compact.
	                 */
	                enable: function enable(depMap) {
	                    var mod = getOwn(registry, depMap.id);
	                    if (mod) {
	                        getModule(depMap).enable();
	                    }
	                },

	                /**
	                 * Internal method used by environment adapters to complete a load event.
	                 * A load event could be a script load or just a load pass from a synchronous
	                 * load call.
	                 * @param {String} moduleName the name of the module to potentially complete.
	                 */
	                completeLoad: function completeLoad(moduleName) {
	                    var found,
	                        args,
	                        mod,
	                        shim = getOwn(_config.shim, moduleName) || {},
	                        shExports = shim.exports;

	                    takeGlobalQueue();

	                    while (defQueue.length) {
	                        args = defQueue.shift();
	                        if (args[0] === null) {
	                            args[0] = moduleName;
	                            //If already found an anonymous module and bound it
	                            //to this name, then this is some other anon module
	                            //waiting for its completeLoad to fire.
	                            if (found) {
	                                break;
	                            }
	                            found = true;
	                        } else if (args[0] === moduleName) {
	                            //Found matching define call for this script!
	                            found = true;
	                        }

	                        callGetModule(args);
	                    }
	                    context.defQueueMap = {};

	                    //Do this after the cycle of callGetModule in case the result
	                    //of those calls/init calls changes the registry.
	                    mod = getOwn(registry, moduleName);

	                    if (!found && !hasProp(_defined, moduleName) && mod && !mod.inited) {
	                        if (_config.enforceDefine && (!shExports || !getGlobal(shExports))) {
	                            if (hasPathFallback(moduleName)) {
	                                return;
	                            } else {
	                                return onError(makeError('nodefine', 'No define call for ' + moduleName, null, [moduleName]));
	                            }
	                        } else {
	                            //A script that does not call define(), so just simulate
	                            //the call for it.
	                            callGetModule([moduleName, shim.deps || [], shim.exportsFn]);
	                        }
	                    }

	                    checkLoaded();
	                },

	                /**
	                 * Converts a module name to a file path. Supports cases where
	                 * moduleName may actually be just an URL.
	                 * Note that it **does not** call normalize on the moduleName,
	                 * it is assumed to have already been normalized. This is an
	                 * internal API, not a public one. Use toUrl for the public API.
	                 */
	                nameToUrl: function nameToUrl(moduleName, ext, skipExt) {
	                    var paths,
	                        syms,
	                        i,
	                        parentModule,
	                        url,
	                        parentPath,
	                        bundleId,
	                        pkgMain = getOwn(_config.pkgs, moduleName);

	                    if (pkgMain) {
	                        moduleName = pkgMain;
	                    }

	                    bundleId = getOwn(bundlesMap, moduleName);

	                    if (bundleId) {
	                        return context.nameToUrl(bundleId, ext, skipExt);
	                    }

	                    //If a colon is in the URL, it indicates a protocol is used and it is just
	                    //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
	                    //or ends with .js, then assume the user meant to use an url and not a module id.
	                    //The slash is important for protocol-less URLs as well as full paths.
	                    if (req.jsExtRegExp.test(moduleName)) {
	                        //Just a plain path, not module name lookup, so just return it.
	                        //Add extension if it is included. This is a bit wonky, only non-.js things pass
	                        //an extension, this method probably needs to be reworked.
	                        url = moduleName + (ext || '');
	                    } else {
	                        //A module that needs to be converted to a path.
	                        paths = _config.paths;

	                        syms = moduleName.split('/');
	                        //For each module name segment, see if there is a path
	                        //registered for it. Start with most specific name
	                        //and work up from it.
	                        for (i = syms.length; i > 0; i -= 1) {
	                            parentModule = syms.slice(0, i).join('/');

	                            parentPath = getOwn(paths, parentModule);
	                            if (parentPath) {
	                                //If an array, it means there are a few choices,
	                                //Choose the one that is desired
	                                if (isArray(parentPath)) {
	                                    parentPath = parentPath[0];
	                                }
	                                syms.splice(0, i, parentPath);
	                                break;
	                            }
	                        }

	                        //Join the path parts together, then figure out if baseUrl is needed.
	                        url = syms.join('/');
	                        // update at 2018-07-11, 支持用户自己写.js文件后缀，如：require('path/to/app.js');
	                        url += ext || (/^data\:|^blob\:|\?/.test(url) || skipExt || jsSuffixRegExp.test(url) ? '' : '.js');
	                        url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : _config.baseUrl) + url;
	                        // update at 2018-07-14, url上额外传递参数 hashName 到每次请求中
	                        // 以供 define 函数确认当前是哪个应用调用 require 的
	                        // url += (url.indexOf('?') === -1 ? '?' : '&') + 'okey=' + hashName
	                    }

	                    return _config.urlArgs && !/^blob\:/.test(url) ? url + _config.urlArgs(moduleName, url) : url;
	                },

	                //Delegates to req.load. Broken out as a separate function to
	                //allow overriding in the optimizer.
	                load: function load(id, url) {
	                    req.load(context, id, url);
	                },

	                /**
	                 * Executes a module callback function. Broken out as a separate function
	                 * solely to allow the build system to sequence the files in the built
	                 * layer in the right sequence.
	                 *
	                 * @private
	                 */
	                execCb: function execCb(name, callback, args, exports) {
	                    // update at 2018-07-10 by liuzechun
	                    // 当符合以下条件时：
	                    //     1、不为依赖注入写法（define(['foo'], function(foo){})），此处的体现是name格式为`_@r5`
	                    //     2、不是仅包含require的回调函数
	                    // define(($uf, require)=>{}) 函数中，额外传入一个参数`$uf`供模块使用
	                    var cbStr = callback.toString().slice(0, 50);
	                    if (name.indexOf('_@r') === -1 && cbStr.indexOf('(require)') === -1 && cbStr.indexOf('(exports)') === -1 && cbStr.indexOf('require=>') === -1 && cbStr.indexOf('require =>') === -1) {
	                        var uf = (0, _instance.getInstance)(insName);
	                        args.unshift(uf);
	                    }
	                    return callback.apply(exports, args);
	                },

	                /**
	                 * callback for script loads, used to check status of loading.
	                 *
	                 * @param {Event} evt the event from the browser for the script
	                 * that was loaded.
	                 */
	                onScriptLoad: function onScriptLoad(evt) {
	                    //Using currentTarget instead of target for Firefox 2.0's sake. Not
	                    //all old browsers will be supported, but this one was easy enough
	                    //to support and still makes sense.
	                    if (evt.type === 'load' || readyRegExp.test((evt.currentTarget || evt.srcElement).readyState)) {
	                        //Reset interactive script so a script node is not held onto for
	                        //to long.
	                        interactiveScript = null;

	                        // update at 2018-07-15 by liuzechun
	                        // TODO: 待观察效果，多个requirejs同时执行时，且这里是异步会不会出错
	                        //   此处实现认为 globalDefine 中只暂存一种define内容，紧接着会在这里取走并清空
	                        //      如果define执行之后立即（同步）触发事件，不会有问题；
	                        //      如果存在 globalDefine 中出现两个不同requirejs实例存入的内容，则会出错
	                        // 从 globalDefine 中取走全部加载完成后使用全局 define 函数初始化的模块
	                        // while(globalDefine.length) {
	                        //     define.apply(undefined, globalDefine.shift());
	                        // }
	                        // update at 2018-07-31, 当有其余模块
	                        // TODO: 继续待观察
	                        //   因为使用script引入带umd检查的文件时，文件内容会通过define注册到globalDefine中
	                        //      出现多余的模块会导致整个requirejs内部模块混乱
	                        //   所以改为每次触发onScriptLoad时从堆栈中获取一个，剩余的作为僵尸模块（永远存在堆栈的底部）
	                        define.apply(undefined, globalDefine.pop());

	                        //Pull out the name of the module and the context.
	                        var data = getScriptData(evt);
	                        context.completeLoad(data.id);
	                    }
	                },

	                /**
	                 * Callback for script errors.
	                 */
	                onScriptError: function onScriptError(evt) {
	                    var data = getScriptData(evt);
	                    if (!hasPathFallback(data.id)) {
	                        var parents = [];
	                        eachProp(registry, function (value, key) {
	                            if (key.indexOf('_@r') !== 0) {
	                                each(value.depMaps, function (depMap) {
	                                    if (depMap.id === data.id) {
	                                        parents.push(key);
	                                        return true;
	                                    }
	                                });
	                            }
	                        });
	                        return onError(makeError('scripterror', 'Script error for "' + data.id + (parents.length ? '", needed by: ' + parents.join(', ') : '"'), evt, [data.id]));
	                    }
	                }
	            };

	            context.require = context.makeRequire();
	            return context;
	        }

	        /**
	         * Main entry point.
	         *
	         * If the only argument to require is a string, then the module that
	         * is represented by that string is fetched for the appropriate context.
	         *
	         * If the first argument is an array, then it will be treated as an array
	         * of dependency string names to fetch. An optional function callback can
	         * be specified to execute when all of those dependencies are available.
	         *
	         * Make a local req variable to help Caja compliance (it assumes things
	         * on a require that are not standardized), and to give a short
	         * name for minification/local scope use.
	         */
	        req = requirejs = function requirejs(deps, callback, errback, optional) {

	            //Find the right context, use default
	            var context,
	                config,
	                contextName = defContextName;

	            // Determine if have config object in the call.
	            if (!isArray(deps) && typeof deps !== 'string') {
	                // deps is a config object
	                config = deps;
	                if (isArray(callback)) {
	                    // Adjust args if there are dependencies
	                    deps = callback;
	                    callback = errback;
	                    errback = optional;
	                } else {
	                    deps = [];
	                }
	            }

	            if (config && config.context) {
	                contextName = config.context;
	            }

	            context = getOwn(contexts, contextName);
	            if (!context) {
	                context = contexts[contextName] = req.s.newContext(contextName);
	            }

	            if (config) {
	                context.configure(config);
	            }

	            return context.require(deps, callback, errback);
	        };

	        /**
	         * Support require.config() to make it easier to cooperate with other
	         * AMD loaders on globally agreed names.
	         */
	        req.config = function (config) {
	            // if the config is false, then prevent load requirejs to window
	            // update at 2018-03-19 18:47 by liuzechun
	            if (!!config) {
	                window['define'] = window['_define'];
	            }
	            return req(config);
	        };

	        /**
	         * Execute something after the current tick
	         * of the event loop. Override for other envs
	         * that have a better solution than setTimeout.
	         * @param  {Function} fn function to execute later.
	         */
	        req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
	            setTimeout(fn, 4);
	        } : function (fn) {
	            fn();
	        };

	        /**
	         * Export require as a global, but only if it does not already exist.
	         */
	        if (!require) {
	            require = req;
	        }

	        req.version = version;

	        //Used to filter out dependencies that are already paths.
	        // update by liuzechun at 2018-07-17, 传入的.js也认为是模块id处理
	        // req.jsExtRegExp = /^\/|:|\?|\.js$/;
	        req.jsExtRegExp = /^\/|:|\?/;
	        req.isBrowser = isBrowser;
	        s = req.s = {
	            contexts: contexts,
	            newContext: newContext
	        };

	        //Create default context.
	        req({});

	        //Exports some context-sensitive methods on global require.
	        each(['toUrl', 'undef', 'defined', 'specified'], function (prop) {
	            //Reference from contexts instead of early binding to default context,
	            //so that during builds, the latest instance of the default context
	            //with its config gets used.
	            req[prop] = function () {
	                var ctx = contexts[defContextName];
	                return ctx.require[prop].apply(ctx, arguments);
	            };
	        });

	        if (isBrowser) {
	            head = s.head = document.getElementsByTagName('head')[0];
	            //If BASE tag is in play, using appendChild is a problem for IE6.
	            //When that browser dies, this can be removed. Details in this jQuery bug:
	            //http://dev.jquery.com/ticket/2709
	            baseElement = document.getElementsByTagName('base')[0];
	            if (baseElement) {
	                head = s.head = baseElement.parentNode;
	            }
	        }

	        /**
	         * Any errors that require explicitly generates will be passed to this
	         * function. Intercept/override it if you want custom error handling.
	         * @param {Error} err the error object.
	         */
	        req.onError = defaultOnError;

	        /**
	         * Creates the node for the load command. Only used in browser envs.
	         */
	        req.createNode = function (config, moduleName, url) {
	            var node = config.xhtml ? document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') : document.createElement('script');
	            node.type = config.scriptType || 'text/javascript';
	            node.charset = 'utf-8';
	            node.async = true;
	            return node;
	        };

	        /**
	         * Does the request to load a module for the browser case.
	         * Make this a separate function to allow other environments
	         * to override it.
	         *
	         * @param {Object} context the require context to find state.
	         * @param {String} moduleName the name of the module.
	         * @param {Object} url the URL to the module.
	         */
	        req.load = function (context, moduleName, url) {
	            var config = context && context.config || {},
	                node;
	            if (isBrowser) {
	                //In the browser so use a script tag
	                node = req.createNode(config, moduleName, url);

	                node.setAttribute('data-requirecontext', context.contextName);
	                node.setAttribute('data-requiremodule', moduleName);

	                //Set up load listener. Test attachEvent first because IE9 has
	                //a subtle issue in its addEventListener and script onload firings
	                //that do not match the behavior of all other browsers with
	                //addEventListener support, which fire the onload event for a
	                //script right after the script execution. See:
	                //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
	                //UNFORTUNATELY Opera implements attachEvent but does not follow the script
	                //script execution mode.
	                if (node.attachEvent &&
	                //Check if node.attachEvent is artificially added by custom script or
	                //natively supported by browser
	                //read https://github.com/requirejs/requirejs/issues/187
	                //if we can NOT find [native code] then it must NOT natively supported.
	                //in IE8, node.attachEvent does not have toString()
	                //Note the test for "[native code" with no closing brace, see:
	                //https://github.com/requirejs/requirejs/issues/273
	                !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) && !isOpera) {
	                    //Probably IE. IE (at least 6-8) do not fire
	                    //script onload right after executing the script, so
	                    //we cannot tie the anonymous define call to a name.
	                    //However, IE reports the script as being in 'interactive'
	                    //readyState at the time of the define call.
	                    useInteractive = true;

	                    node.attachEvent('onreadystatechange', context.onScriptLoad);
	                    //It would be great to add an error handler here to catch
	                    //404s in IE9+. However, onreadystatechange will fire before
	                    //the error handler, so that does not help. If addEventListener
	                    //is used, then IE will fire error before load, but we cannot
	                    //use that pathway given the connect.microsoft.com issue
	                    //mentioned above about not doing the 'script execute,
	                    //then fire the script load event listener before execute
	                    //next script' that other browsers do.
	                    //Best hope: IE10 fixes the issues,
	                    //and then destroys all installs of IE 6-9.
	                    //node.attachEvent('onerror', context.onScriptError);
	                } else {
	                    node.addEventListener('load', context.onScriptLoad, false);
	                    node.addEventListener('error', context.onScriptError, false);
	                }
	                node.src = url;

	                //Calling onNodeCreated after all properties on the node have been
	                //set, but before it is placed in the DOM.
	                if (config.onNodeCreated) {
	                    config.onNodeCreated(node, config, moduleName, url);
	                }

	                //For some cache cases in IE 6-8, the script executes before the end
	                //of the appendChild execution, so to tie an anonymous define
	                //call to the module name (which is stored on the node), hold on
	                //to a reference to this node, but clear after the DOM insertion.
	                currentlyAddingScript = node;
	                if (baseElement) {
	                    head.insertBefore(node, baseElement);
	                } else {
	                    head.appendChild(node);
	                }
	                currentlyAddingScript = null;

	                return node;
	            } else if (isWebWorker) {
	                try {
	                    //In a web worker, use importScripts. This is not a very
	                    //efficient use of importScripts, importScripts will block until
	                    //its script is downloaded and evaluated. However, if web workers
	                    //are in play, the expectation is that a build has been done so
	                    //that only one script needs to be loaded anyway. This may need
	                    //to be reevaluated if other use cases become common.

	                    // Post a task to the event loop to work around a bug in WebKit
	                    // where the worker gets garbage-collected after calling
	                    // importScripts(): https://webkit.org/b/153317
	                    setTimeout(function () {}, 0);
	                    importScripts(url);

	                    //Account for anonymous modules
	                    context.completeLoad(moduleName);
	                } catch (e) {
	                    context.onError(makeError('importscripts', 'importScripts failed for ' + moduleName + ' at ' + url, e, [moduleName]));
	                }
	            }
	        };

	        function getInteractiveScript() {
	            if (interactiveScript && interactiveScript.readyState === 'interactive') {
	                return interactiveScript;
	            }

	            eachReverse(scripts(), function (script) {
	                if (script.readyState === 'interactive') {
	                    return interactiveScript = script;
	                }
	            });
	            return interactiveScript;
	        }

	        //Look for a data-main script attribute, which could also adjust the baseUrl.
	        if (isBrowser && !cfg.skipDataMain) {
	            //Figure out baseUrl. Get it from the script tag with require.js in it.
	            eachReverse(scripts(), function (script) {
	                //Set the 'head' where we can append children by
	                //using the script's parent.
	                if (!head) {
	                    head = script.parentNode;
	                }

	                //Look for a data-main attribute to set main script for the page
	                //to load. If it is there, the path to data main becomes the
	                //baseUrl, if it is not already set.
	                dataMain = script.getAttribute('data-main');
	                if (dataMain) {
	                    //Preserve dataMain in case it is a path (i.e. contains '?')
	                    mainScript = dataMain;

	                    //Set final baseUrl if there is not already an explicit one,
	                    //but only do so if the data-main value is not a loader plugin
	                    //module ID.
	                    if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
	                        //Pull off the directory of data-main for use as the
	                        //baseUrl.
	                        src = mainScript.split('/');
	                        mainScript = src.pop();
	                        subPath = src.length ? src.join('/') + '/' : './';

	                        cfg.baseUrl = subPath;
	                    }

	                    //Strip off any trailing .js since mainScript is now
	                    //like a module name.
	                    mainScript = mainScript.replace(jsSuffixRegExp, '');

	                    //If mainScript is still a path, fall back to dataMain
	                    if (req.jsExtRegExp.test(mainScript)) {
	                        mainScript = dataMain;
	                    }

	                    //Put the data-main script in the files to load.
	                    cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

	                    return true;
	                }
	            });
	        }

	        /**
	         * The function that handles definitions of modules. Differs from
	         * require() in that a string for the module should be the first argument,
	         * and the function to execute after dependencies are loaded should
	         * return a value to define the module corresponding to the first argument's
	         * name.
	         */
	        define = function define(name, deps, callback) {
	            var node, context;

	            //Allow for anonymous modules
	            if (typeof name !== 'string') {
	                //Adjust args appropriately
	                callback = deps;
	                deps = name;
	                name = null;
	            }

	            //This module may not have dependencies
	            if (!isArray(deps)) {
	                callback = deps;
	                deps = null;
	            }

	            //If no name, and callback is a function, then figure out if it a
	            //CommonJS thing with dependencies.
	            if (!deps && isFunction(callback)) {
	                deps = [];
	                //Remove comments from the callback string,
	                //look for require calls, and pull them into the dependencies,
	                //but only if there are function args.
	                if (callback.length) {
	                    callback.toString().replace(commentRegExp, commentReplace).replace(cjsRequireRegExp, function (match, dep) {
	                        deps.push(dep);
	                    });

	                    //May be a CommonJS thing even without require calls, but still
	                    //could use exports, and module. Avoid doing exports and module
	                    //work though if it just needs require.
	                    //REQUIRES the function to expect the CommonJS variables in the
	                    //order listed below.
	                    deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
	                }
	            }

	            //If in IE 6-8 and hit an anonymous define() call, do the interactive
	            //work.
	            if (useInteractive) {
	                node = currentlyAddingScript || getInteractiveScript();
	                if (node) {
	                    if (!name) {
	                        name = node.getAttribute('data-requiremodule');
	                    }
	                    context = contexts[node.getAttribute('data-requirecontext')];
	                }
	            }

	            //Always save off evaluating the def call until the script onload handler.
	            //This allows multiple modules to be in a file without prematurely
	            //tracing dependencies, and allows for anonymous module support,
	            //where the module name is not known until the script onload event
	            //occurs. If no context, use the global queue, and get it processed
	            //in the onscript load callback.
	            if (context) {
	                context.defQueue.push([name, deps, callback]);
	                context.defQueueMap[name] = true;
	            } else {
	                globalDefQueue.push([name, deps, callback]);
	            }
	        };

	        define.amd = {
	            jQuery: true
	        };

	        /**
	         * Executes the text. Normally just uses eval, but can be modified
	         * to use a better, environment-specific call. Only used for transpiling
	         * loader plugins, not for plain JS modules.
	         * @param {String} text the text to execute/evaluate.
	         */
	        req.exec = function (text) {
	            /*jslint evil: true */
	            return eval(text);
	        };

	        //Set up with config info.
	        req(cfg);
	    })(this, typeof setTimeout === 'undefined' ? undefined : setTimeout);

	    // 保证引用，防止销毁
	    requirejs.require = require;
	    requirejs.define = define;

	    return requirejs;
	});

	// export default requirejs;

	// 重写define函数
	// 由于多个require实例的define也有多个（执行环境不同，globalDefQueue有多个）
	// 所以重写一个define函数，把模块先置于一个公共缓存池里，后续各requirejs实例主动从池中去取各自的模块

	var define = function define(name, deps, callback) {
	    globalDefine.push([name, deps, callback]);
	};
	// 供umd识别
	define.amd = {
	    jQuery: true
	};

	// update at 2018-03-19 18:41:28 by liuzechun
	// define 函数临时放在 window._define 上，防止三方模块中的define函数检查。当config有内容时，才放到 window.define 上正常使用。（见line 1807）
	window['_define'] = define;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _antd = __webpack_require__(111);

	var _instance = __webpack_require__(158);

	/**
	 * @file 执行阻塞页面加载的函数（init之前执行的函数，多为调用api）
	 * @author liuzechun
	 * Created Date: 2017-12-18 07:48:32
	 */

	exports.default = (0, _instance.generate)(function (insName) {
	    return {
	        count: 0,
	        // 设置预处理超时时间 30s
	        delay: 60000,
	        timer: null,
	        reduce: function reduce() {},
	        success: function success() {
	            if (this.count > 0 && --this.count === 0) {
	                clearTimeout(this.timer);
	                // 全部执行完成后执行再执行init初始化页面
	                (0, _instance.getInstance)(insName)._reInit();
	            }
	        },
	        error: function error(err) {
	            _antd.notification.error({
	                top: 24,
	                message: '页面载入时出错，请联系平台管理员',
	                duration: 0,
	                description: JSON.stringify(err)
	            });
	        },
	        handle: function handle(arr) {
	            var _this = this;

	            this.waiting = true;
	            this.count += arr.length;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var func = _step.value;

	                    func(this.success.bind(this), this.error.bind(this));
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            clearTimeout(this.timer);
	            this.timer = setTimeout(function () {
	                _this.count = 0;
	                _this.error('预加载数据超时！');
	            }, this.delay);
	        }
	    };
	});

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * @file 新功能提示
	 */
	exports.default = {
	    '0.3.0': [{
	        title: '',
	        description: '',
	        config: __webpack_require__(231).demo5
	    }]
	};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.demo5 = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '按钮类型',
	    description: '按钮有四种类型：主按钮、次按钮、虚线按钮、危险按钮。主按钮在同一个操作区域最多出现一次',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: ['Primary', {
	            type: 'html',
	            name: 'test-html',
	            style: { display: 'inline' },
	            content: '2'
	        }],
	        onClick: function onClick() {
	            (0, _src2.default)('test-html').set({ content: Date.now().toString().slice(-1) });
	        }
	    }, {
	        type: 'button',
	        mode: 'default',
	        name: 'test-button2',
	        content: 'Default',
	        onClick: function onClick() {
	            console.log(1);
	        }
	    }, {
	        type: 'button',
	        mode: 'dashed',
	        content: 'Dashed',
	        onClick: function onClick() {
	            // 测试更新函数属性是否有效
	            (0, _src2.default)('test-button2').set({
	                onClick: function onClick() {
	                    console.log(2);
	                }
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'danger',
	        content: 'Danger',
	        api: 'docs/php/submit.php'
	    }]
	};
	var demo2 = {
	    title: '图标按钮',
	    description: '当需要在 Button 内嵌入 Icon 时，可以设置 icon 属性，或者直接在 Button 内使用 Icon 组件。',
	    config: [{
	        type: 'button',
	        shape: 'circle',
	        mode: 'primary',
	        icon: 'search'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        icon: 'search',
	        content: 'Search'
	    }, {
	        type: 'button',
	        shape: 'circle',
	        icon: 'search'
	    }, {
	        type: 'button',
	        icon: 'search',
	        content: 'Search'
	    }]
	};

	var demo3 = {
	    title: '组合按钮',
	    description: '可以将多个 `button` 放入 `button-group` 的容器中，使按钮作为一组展示。',
	    config: [{
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            mode: 'primary',
	            content: [{
	                type: 'icon',
	                mode: 'left'
	            }, 'Backward']
	        }, {
	            type: 'button',
	            mode: 'primary',
	            content: ['Forward', {
	                type: 'icon',
	                mode: 'right'
	            }]
	        }]
	    }, {
	        type: 'button-group',
	        style: { marginLeft: 10 },
	        size: 'small',
	        content: [{
	            type: 'button',
	            mode: 'primary',
	            content: [{
	                type: 'icon',
	                mode: 'left'
	            }, 'Backward']
	        }, {
	            type: 'button',
	            mode: 'primary',
	            content: ['Forward', {
	                type: 'icon',
	                mode: 'right'
	            }]
	        }]
	    }, {
	        type: 'div',
	        style: { marginTop: 10 }
	    }, {
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            content: 'A'
	        }, {
	            type: 'button',
	            disabled: true,
	            content: 'B'
	        }, {
	            type: 'button',
	            mode: 'dashed',
	            content: 'C'
	        }, {
	            type: 'button',
	            mode: 'danger',
	            content: 'D'
	        }]
	    }]
	};
	var demo4 = {
	    title: '加载中状态',
	    description: '添加 loading 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        loading: true,
	        content: 'Loading'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        size: 'small',
	        loading: true,
	        content: 'Loading'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        size: 'mini',
	        loading: true,
	        content: 'Loading'
	    }, {
	        type: 'button',
	        shape: 'circle',
	        loading: true
	    }, {
	        type: 'button',
	        mode: 'primary',
	        shape: 'circle',
	        loading: true
	    }, {
	        type: 'div',
	        style: { marginTop: 10 }
	    }, {
	        type: 'button',
	        name: 'my-button1',
	        mode: 'primary',
	        content: 'Click me!',
	        onClick: function onClick() {
	            (0, _src2.default)('my-button1').set({
	                loading: true
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        name: 'my-button2',
	        icon: 'poweroff',
	        content: 'Click me!',
	        onClick: function onClick() {
	            // 也可以直接调用loading函数
	            (0, _src2.default)('my-button2').loading();
	        }
	    }]
	};
	var demo5 = exports.demo5 = {
	    title: '激活态/非激活态',
	    description: '`active`系列属性使按钮具备了两种状态：激活态/非激活态。需设置`actived`为`true`其余属性才能生效',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        actived: true,
	        content: 'Default'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        actived: true,
	        activedChildren: {
	            icon: 'down',
	            content: '展示查询条件',
	            onClick: function onClick() {
	                console.log('open');
	            }
	        },
	        unActivedChildren: {
	            icon: 'up',
	            content: '收起查询条件',
	            onClick: function onClick() {
	                console.log('close');
	            }
	        }
	    }]
	};

	var Button = function (_BaseDoc) {
	    _inherits(Button, _BaseDoc);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this.doc = 'antd-button.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Button, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Button;
	}(_BaseDoc3.default);

	exports.default = Button;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(111);

	var _Markdown = __webpack_require__(233);

	var _Markdown2 = _interopRequireDefault(_Markdown);

	var _Demo = __webpack_require__(299);

	var _Demo2 = _interopRequireDefault(_Demo);

	var _DemoMobile = __webpack_require__(300);

	var _DemoMobile2 = _interopRequireDefault(_DemoMobile);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 文档基类
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	function getDemoUrl() {
	    var urlPrefix = location.origin + location.pathname;
	    var hash = location.hash;
	    return urlPrefix + 'docs/demo/mobile.php' + hash;
	}

	var BaseDoc = function (_React$Component) {
	    _inherits(BaseDoc, _React$Component);

	    function BaseDoc(props) {
	        _classCallCheck(this, BaseDoc);

	        var _this = _possibleConstructorReturn(this, (BaseDoc.__proto__ || Object.getPrototypeOf(BaseDoc)).call(this, props));

	        _this.state = {};
	        // 日志页面需要增加更多样式
	        _this.className = '';
	        // 标志是不是移动端demo展示页，由定义router处传入
	        _this.isDemo = _this.props.route && _this.props.route.isDemo;
	        try {
	            _this.isMobile = 'Mobile' === _this.props.location.pathname.slice(1).split('/')[0];
	        } catch (e) {
	            _this.isMobile = false;
	        }
	        return _this;
	    }

	    _createClass(BaseDoc, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.scrollToPos(nextProps);
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.scrollToPos(this.props);
	            this.switchTitle();
	        }

	        // 二维码

	    }, {
	        key: 'makeQrcode',
	        value: function makeQrcode(visible) {
	            if (visible && !this.haveQrcode) {
	                var qrcode = new QRCode(_reactDom2.default.findDOMNode(this.qrcodeRef), {
	                    width: 120,
	                    height: 120,
	                    correctLevel: QRCode.CorrectLevel.M
	                });
	                qrcode.makeCode(getDemoUrl());
	                this.haveQrcode = true;
	            }
	        }
	    }, {
	        key: 'scrollToPos',
	        value: function scrollToPos(props) {
	            // 增加定位到页面指定位置的逻辑，根据id查找
	            var pos = props.params.pos;
	            var offset = 0;
	            if (pos && document.getElementById(pos)) {
	                offset = document.getElementById(pos).offsetTop + 100;
	            }
	            // window.scrollTo(0, offset);
	            offset && window.scrollTo(0, offset);
	        }
	    }, {
	        key: 'switchTitle',
	        value: function switchTitle() {
	            var name = this.props.route.name;
	            var title = document.head.getElementsByTagName('title')[0];
	            title.innerHTML = 'UF2.0 - ' + name;
	        }
	    }, {
	        key: '__init',
	        value: function __init() {
	            var originRender = this.render;
	            this.render = function () {
	                return this._render(originRender);
	            };
	        }

	        // 两列展示demo

	    }, {
	        key: '__getDemo',
	        value: function __getDemo() {
	            for (var _len = arguments.length, list = Array(_len), _key = 0; _key < _len; _key++) {
	                list[_key] = arguments[_key];
	            }

	            return _react2.default.createElement(_Demo2.default, { list: list });
	        }

	        // 单列展示demo

	    }, {
	        key: '__getDemoSingle',
	        value: function __getDemoSingle() {
	            for (var _len2 = arguments.length, list = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                list[_key2] = arguments[_key2];
	            }

	            return _react2.default.createElement(_Demo2.default, { list: list, single: true });
	        }

	        // 移动版Demo

	    }, {
	        key: '__getMobileDemo',
	        value: function __getMobileDemo() {
	            for (var _len3 = arguments.length, list = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                list[_key3] = arguments[_key3];
	            }

	            return _react2.default.createElement(_DemoMobile2.default, { list: list, isDemo: this.isDemo });
	        }

	        // 整体框架在父类里实现，继承此父类的组件，均可使用

	    }, {
	        key: '_render',
	        value: function _render(render) {
	            var _this2 = this;

	            return this.isDemo ? render.call(this) : _react2.default.createElement(
	                'div',
	                { className: 'umpui-component' },
	                _react2.default.createElement(
	                    'h1',
	                    { className: 'umpui-layer umpui-title' },
	                    this.props.route.name,
	                    this.isMobile && _react2.default.createElement(
	                        _antd.Popover,
	                        { placement: 'bottom', trigger: 'hover', arrowPointAtCenter: true,
	                            content: _react2.default.createElement(
	                                'div',
	                                { style: { padding: '6px' } },
	                                _react2.default.createElement(
	                                    'p',
	                                    { style: { fontWeight: 700, marginBottom: '10px' } },
	                                    '\u626B\u4E8C\u7EF4\u7801\u67E5\u770B\u6F14\u793A\u6548\u679C: '
	                                ),
	                                _react2.default.createElement('div', { ref: function ref(ele) {
	                                        return _this2.qrcodeRef = ele;
	                                    } })
	                            ),
	                            onVisibleChange: this.makeQrcode.bind(this) },
	                        _react2.default.createElement(_antd.Icon, { type: 'qrcode', className: 'qrcode-icon' })
	                    )
	                ),
	                render && render.call(this),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'umpui-layer umpui-block markdown ' + this.className },
	                    _react2.default.createElement(_Markdown2.default, { doc: this.doc })
	                )
	            );
	        }
	    }]);

	    return BaseDoc;
	}(_react2.default.Component);

	exports.default = BaseDoc;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _marked = __webpack_require__(114);

	var _marked2 = _interopRequireDefault(_marked);

	var _markdown = __webpack_require__(234);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 生成MarkDown样式，text是通过require引入的
	


	// import requirejs from 'src/tools/requirejs.js';
	// import {switchCode} from './Demo.js';
	var config = __webpack_require__(298);

	var Markdown = function (_React$Component) {
	    _inherits(Markdown, _React$Component);

	    function Markdown(props) {
	        _classCallCheck(this, Markdown);

	        var _this = _possibleConstructorReturn(this, (Markdown.__proto__ || Object.getPrototypeOf(Markdown)).call(this, props));

	        _marked2.default.setOptions({
	            gfm: true,
	            tables: true,
	            breaks: false,
	            pedantic: false,
	            sanitize: true,
	            smartLists: true,
	            smartypants: false
	        });
	        // this.replaceTemplate = {};
	        return _this;
	    }

	    _createClass(Markdown, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: (0, _marked2.default)(
	                    // markdown 中可以使用变量（package.json中定义的属性）
	                    (this.props.doc && _markdown2.default[this.props.doc] ? _markdown2.default[this.props.doc] : this.props.doc).replace(/%\{(.+?)\}%/g, function (s, v) {
	                        if (config[v]) {
	                            return config[v];
	                        }
	                        // 支持使用表达式
	                        try {
	                            return eval(v);
	                        } catch (e) {
	                            return s;
	                        }
	                    })) } });
	        }

	        // 增加异步引用文件功能
	        // 用法：%{require=docs/demo/config/router-page.2.js}%
	        //   暂时弃置，因为只有模块也是用requirejs写法书写时才能这样用
	        // refresh() {
	        //     for (let i in this.replaceTemplate) {
	        //         if (!this.replaceTemplate[i]) {
	        //             return;
	        //         }
	        //     }
	        //     this.forceUpdate();
	        // }
	        // render() {
	        //     return (this.props.doc && mdfile[this.props.doc])
	        //         ? <div dangerouslySetInnerHTML={{__html: marked(
	        //             // markdown 中可以使用变量（package.json中定义的属性）
	        //             mdfile[this.props.doc].replace(/\%\{(.+?)\}\%/g, (s, v)=>{
	        //                 // %{require=xxx}% 可异步引入模块代码
	        //                 if (v.indexOf('require=') === 0) {
	        //                     // 如果已经获取到模块文件，直接替换
	        //                     if (this.replaceTemplate[s]) {
	        //                         return this.replaceTemplate[s];
	        //                     // 否则，使用requirejs获取文件，并储存
	        //                     } else {
	        //                         this.replaceTemplate[s] = null;
	        //                         requirejs([v.replace(/require=/g, '')], (foo, a)=>{
	        //                             this.replaceTemplate[s] = switchCode(foo);
	        //                             this.refresh();
	        //                         });
	        //                         return s;
	        //                     }
	        //                 }
	        //                 return config[v] || s;
	        //             })
	        //         )}}></div>
	        //         : <div dangerouslySetInnerHTML={{__html: marked(this.props.doc)}}></div>;
	        // }

	    }]);

	    return Markdown;
	}(_react2.default.Component);

	exports.default = Markdown;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	module.exports = _extends({
	    'standard.md': __webpack_require__(235),
	    'third-party.md': __webpack_require__(236),
	    'introduction.md': __webpack_require__(237),
	    'guide.md': __webpack_require__(238),

	    'configure-install.md': __webpack_require__(239),
	    'configure-layout.md': __webpack_require__(240),
	    'configure-call.md': __webpack_require__(241),
	    'configure-join.md': __webpack_require__(242),
	    'configure-page.md': __webpack_require__(243),

	    'develop-install.md': __webpack_require__(244),
	    'develop-config.md': __webpack_require__(245),
	    'develop-modules.md': __webpack_require__(246),
	    'develop-others.md': __webpack_require__(247),
	    'develop-build.md': __webpack_require__(248),

	    'api.md': __webpack_require__(249),
	    'params.md': __webpack_require__(250),
	    'lifecycle.md': __webpack_require__(251),
	    'load.md': __webpack_require__(252),
	    'others.md': __webpack_require__(253),
	    'update-log.md': __webpack_require__(254)

	}, __webpack_require__(255), _defineProperty({

	    // 移动版文档
	    'mobile-guide.md': __webpack_require__(297)
	}, 'mobile-guide.md', __webpack_require__(297)));

/***/ }),
/* 235 */
/***/ (function(module, exports) {

	module.exports = "## 加入我们\n\n* Hi 群： 1615792   \n* 邮件组： umpfe@baidu.com  \n* 接口人： 刘泽春（liuzechun@baidu.com）  \n\n## 开发标准\n> 技术标准: ES6编码标准，React+npm+Webpack技术  \n\n在实际项目开发中，你会需要对ES2015|ES2016|JSX代码进行构建，调试，代理，打包部署等一系列工程化的需求,这里提供npm+webpack的工具链来辅助开发\n\n> 样式标准: antd.css + sass\n\n本框架是基于Antd开发的，大量引用了antd的样式，详见：http://antd.uf.baidu.com\n\n## 项目结构\n```\nuf\n|-- dist                // 构建好的组件代码，供线上使用\n|-- docs                // 文档代码\n|   |-- app             // 组件 Demo。全部继承`BaseDoc.js`\n|   |-- markdown        // 组件 markdown 文档。其中`index.js`把全部md文件整合到一起\n|   |-- php             // 某些组件依赖后端接口，这里用来模拟后端接口返回模拟数据\n|   `-- entry.js        // 文档入口\n|-- lib                 // 编译后的代码，根据src代码生成，暂时用不到\n|-- public              // 打包生成的文档代码\n|-- src                 // 组件源代码\n|   |-- component       // 公共组件，例如：BaseComponent\n|   |-- utils           // 公共工具，例如：Ajax、Cache、Utils 等\n|   `-- 其他组件         // 其他组件\n|-- index.php           // 页面入口\n|-- package.json\n`-- webpack.config.js   // 构建公共库文件\n\n```\n\n## 文件组织：\nsrc 中，每个组件一个文件夹，里面包含：\n> js代码  \n> less代码 - style.less  \n> 引入文件 - index.js  \n\n\n## 组件开发\n\n### UF组件引入：\n`import Export from 'src/export';`\n> uf对应的是src文件夹，export即export组件的文件夹，因为存在index.js，所以无需指定组件名  \n\n### 组件继承：\n`import {BaseComponent} from 'src/component';`  \n`export default class Table extends BaseComponent {}`\n> 为了方便后面对组件通用功能进行拓展，自己开发的组件全部继承`BaseComponent`\n\n### 组件初始化：\n`this.__init();`\n> 组件的`constructor`构造函数里，执行完`super(props);`之后，紧接着需调用`this.__init();`函数对组件进行初始化，此函数再BaseComponent里实现，用于做通用处理\n\n### 组件命名：\n* 组件名和文件名一致，均采用帕斯卡命名法（即全部首字母大写）\n* 组件名要尽量简短易懂，尽量用一个单词\n\n### 通用字段命名\n```\ndata        数据\nparams      参数对象\nsource      异步请求获取数据接口\napi         异步提交数据接口\n```\n\n### 特殊字段\n以下关键字解析时会有额外操作   \ncontent     子内容\n\n\n### 组件开发规范\n1. 除antd外，尽量不要引入其他第三方组件\n2. 接口及配置项命名需语义化，统一采用驼峰命名\n3. 语义化不是把中文转换成英文，命名时，在能表达清楚意思的前提下，名称要尽量短\n4. 组件顶层的配置项尽量少，分为三类：\n> config: 不变的配置，比如组件如何展示，需要调用那些控件等  \n> data:   组件所需的数据列表  \n> params: 组件调用接口时传递的参数（经常变化的参数，如果是静态的，也可以放到config中）  \n> 组件暴露出的事件（回调函数）直接放到组件的props上\n5. 代码注释\n> 开发时，养成随手写注释的习惯  \n> 至少每个函数需要注释说明是函数的作用，注释多多益善  \n> console.log 使用完要删除，不要到处留下 console.log\n\n---\n## BaseComponent 开发及使用\n这里的规范不仅限于BaseComponent，其他基础抽象类也使用以下规范\n\n### 开发规范\n开发时难免会遇到需要覆盖父类函数的情况，比如要在父类定义过的`__init`函数上追加处理逻辑，则需要即执行父类的原函数（super），又要执行新写入的逻辑，用法如下：  \n```javascript\n__init() {\n    super.__init.call(this);\n    this._setProps();\n}\n```\n\n如需要在React的生命周期的5个函数中增加处理逻辑，可以使用`_componentWillReceiveProps`这种名称之前加下划线的形式，组件调用__init函数时会自动把这几个函数的内容插入到对应的函数最前面执行：  \n```javascript\n_componentWillReceiveProps = (nextProps, ...params) => {\n    super._componentWillReceiveProps && super._componentWillReceiveProps();\n    this._initPorps();\n}\n```\n> 需要注意的是：为了防止覆盖父类的函数，需在函数里面加入 `super._xxx`来优先调用一下父类的函数  \n> 其次需要注意的有两点： \n> * 主要保证把全部参数传递给原函数  \n> * 调用顺序为 父类函数 > 当前函数 > 子类函数\n\n### 命名规范  \n直接给用户调用的通用属性或函数，使用正常的驼峰命名，符合用户习惯  \n**`property`、`function`**  \n> 各个组件通用的函数，可在基础类中实现，例如各种表单组件的获取数据函数：getValue()\n\n为了防止基础类里面的函数及变量被子组件覆盖，不对用户可见的变量和函数全部用特殊的命名方式，如下：  \n**`_property`、`_function`**  \n> 私有属性和方法，均使用单下划线开头  \n\n**`__property`、`__function`**  \n> 供子组件调用的函数，使用双下划线开头，且命名要尽量简短易懂。例如：`this.__init()`\n\n### 功能列表\n\n##### **`__props`**  \n定义默认的props参数。  \n在开发组件时，一些不需要做额处理的默认参数，可以直接在`constructor()`里`this.__init()`之前在`this.__props`上增加值（BaseComponent的构造函数中已经初始化并赋值，这里不能直接覆盖）。【推荐直接在config.js中配置】  \n也可以在`config.js`中定义默认参数，见`config.js`文件【推荐】\n> 具体示例可见 `Iframe` 组件的 mode 参数默认值声明用法\n\n##### **`__init()`**  \n初始化BaseComponent里的功能，例如共享组件、注册自动解除共享等功能。每个继承 BaseComponent 的组件都必须在构造函数中调用此函数  \n> 注意本函数的调用时机，应该是在设置父类属性之后（如：`this.__controlled`属性），执行组件本身逻辑之前\n\n##### **`__setProps(props[, follow])`**  \n用于在组件开发中更新__props，类似于setState，只不过是在刷新 __props  \n也可以传入待刷新完成后执行自己想要执行的逻辑（比如Modal，需弹框显示后才能执行其他操作）  \n默认会刷新组件；也可以把第二个参数设为 false 阻止刷新\n\n##### **`__mergeProps(...objs)`**  \n合并默认配置和用户传入的配置，使后续代码中无需再判断属性值是否存在。支持传多个参数  \n以第一个对象为目标，依次把后面的对象merge到上去，支持深层的merge，类似于一个深层的 Object.assign()  \n> tips: 如果把 defaultProps 放在第一位，merge完成后defaultProps的值会变成merge后的数据，如果defaultProps需多次使用，会出问题，针对此问题，可以第一个参数放一个空对象，类似于Object.assign的用法   \n\n##### **`__filterProps(obj, string/array)`**  \n从 obj 中过滤掉某些属性，可以是多个字符串参数，也可以是一个数组\n\n##### **`__shouldUpdate(this.props, nextProps)`**  \n用于 componentWillReceiveProps 中，判断是否需要刷新。这里使用的是正真的 props 和 nextProps   \n具体有如下两种特殊场景：  \n如果是单纯因为父组件属性导致子组件的 cwr 函数被调用，两次的props是相同的，没必要刷新；  \n如果是set导致的，则两次的props肯定会有不同，需刷新  \n还有：需要把_filter中定义的属性全部过滤掉，这些属性是额外定义的，对判断结果会有影响  \n\n\n##### **`__filterProps(props, arr)`**  \n过滤props中的某些属性，返回一个新的props对象。用于过滤例如原始标签上不支持的属性，防止会报很多warning。  \n> arr即可以为一个数组，也可以直接为一个字符串，如果只需要过滤掉一个属性，则可直接传入一个字符串\n\n##### **`__ajax(obj)`**\n通用的 `ajax` 函数。参数为一个对象。\n> 常用参数有：url、method、data、type、onchange、success、error\n\n##### **`__analysis(config)`**\n解析某个属性的配置。方便开发组件时解析一些可以为配置的属性\n\n##### **`__authority(item)`**\n判断是否为权限点 && 是否有权限\n\n##### **`__getComponent(item)`**\n获取缓存中的组件\n\n##### **`__getSourceData(config)`**\n从`source`接口获取数据  \n使用`source`系列参数获取数据时，可调用此函数，函数内部已经把source的各种处理做好（比如paramsHandler、handler等调用），只需传入对应的成功和失败处理函数即可。函数内部会在数据返回后经过`handler`处理的结果传递给`success`函数  \n传入的`config`包含`success`和`error`，source一系列处理完成后最终数据才会传给 `success`\n\n\n\n---\n## 文档编写规范\n1. 每个文档至少包含 4/5 部分\n> 组件示例：尽量把所有的功能在示例里展现出来  \n> 配置参数：解释每个参数的意义，注明是否必填和默认值。可写多个配置参数模块  \n> 回调函数：绑定到组件上的事件的回调函数，如：绑在`Input`组件上的`onChange`  \n> 调用接口：可供用户调用的接口，如暴露给用户的更改某些状态的函数  \n> 示例代码：实现`组件示例`所需代码，用户只需拷贝示例代码就可以在本地实现示例中的效果。(把配置抽离出来)\n2. 其他扩展部分：\n> 组件功能及特点介绍  \n> 组件高级用法、截图等\n\n"

/***/ }),
/* 236 */
/***/ (function(module, exports) {

	module.exports = "\n为了各个项目引用方便，先把一些常用的组件/库汇总到了一起。\n\n### Preloading.css\n`0.0.1`  \n提供多种页面加载前的loading效果，且效果可以组合使用。\n```\nhttp://uf.baidu.com/third_party/preloading.css\n```\n\n例如： \n```\n<div class=\"preloading goafter2\"></div>\n```\n\n可选项：`overturn`、`scaleout`、`rotate`、`goafter`、`goafter2`、`cubemove`、`cubemove2`、`dot`、\n\n\n### jQuery\n`3.2.1`\n```\nhttp://uf.baidu.com/third_party/jquery/jquery-3.2.1.js\nhttp://uf.baidu.com/third_party/jquery/jquery-3.2.1.min.js\n```\n\n\n### Echarts4\n`4.0.4`\n\n```\nhttp://uf.baidu.com/third_party/echarts4/echarts.js\nhttp://uf.baidu.com/third_party/echarts4/echarts.min.js\nhttp://uf.baidu.com/third_party/echarts4/echarts.simple.min.js\nhttp://uf.baidu.com/third_party/echarts4/echarts.common.min.js\n```\n\n\n### Echarts\n`3.6.2`\n\n```\nhttp://uf.baidu.com/third_party/echarts/echarts.js\nhttp://uf.baidu.com/third_party/echarts/echarts.min.js\nhttp://uf.baidu.com/third_party/echarts/echarts.simple.min.js\nhttp://uf.baidu.com/third_party/echarts/echarts.common.min.js\n```\n\n> * echarts.js：包含所有图表组件，且是未压缩代码，建议不要在线上环境使用（2.44M）\n> * echarts.min.js：包含所有图表组件，压缩（644k）\n> * echarts.simple.min.js： 只包含基础图表 - 折 柱 饼（254K）\n> * echarts.common.min.js：包含常用的图表组件 - 折 柱 饼 散点 图例、工具栏 标注/线/域、数据区域缩放（387K）\n\n\n### Echarts2\n`2.2.7`\n\n```\nhttp://uf.baidu.com/third_party/echarts2/echarts.js\nhttp://uf.baidu.com/third_party/echarts2/echarts-all.js\n```\n\n\n### Amaze-UI \n\n`2.7.2`\n\n```\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.css\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.min.css\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.flat.css\nhttp://uf.baidu.com/third_party/amazeui/css/amazeui.flat.min.css\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.min.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.ie8polyfill.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.ie8polyfill.min.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.widgets.helper.js\nhttp://uf.baidu.com/third_party/amazeui/js/amazeui.widgets.helper.min.js\n```\n\n> * amazeui.css / amazeui.js：包含 Amaze UI 所有的 CSS、JS。\n> * amazeui.flat.css：圆角版 Amaze UI CSS\n> * amazeui.ie8polyfill.js：IE8 polyfill\n> * amazeui.widgets.helper.js： 供使用 Handlebars 的用户使用，其他用户请忽略，内含 Web 组件必须的 Handlebars helper 及 Web 组件模板 partials。\n\n以上每个文件都有对应的 minified 文件。\n\n### UEditor\n`1.4.3-utf8-php`\n\n```\nhttp://uf.baidu.com/third_party/ueditor/js.php\n```\n\n> 本来需要引入一堆js，通过 `js.php` 集成到了一起\n\n\n### UMEditor\n`1.2.3-utf8-php`\n\n类似 UEditor，但是比UEditor轻\n\n```\nhttp://uf.baidu.com/third_party/umeditor/style.min.css\nhttp://uf.baidu.com/third_party/umeditor/js.php\n```\n\n> 本来需要引入一堆js，通过 `js.php` 集成到了一起\n\n\n"

/***/ }),
/* 237 */
/***/ (function(module, exports) {

	module.exports = "\n## 零门槛\n\n无需搭建环境，直接写html、js文件即可使用。\n\n## 灵活布局\n\n框架支持了常用的布局方式，配置时，使用布局模块相互组合，即可得到不同的布局效果。\n\n![Alt](public/img/docs/image2018-3-1220_27_2.png)\n\n\n## 数据展示、增删改查\n\n常见的数据展示表格，附带了排序、增删改查、批量增删改查、数据导出等功能，满足大部分日常数据展示需求。\n\n![Alt](public/img/docs/image2018-3-514_21_27.png)\n\n\n## 自由灵活的表单\n\n提供了丰富的表单类型，满足各种日常数据录入需求。自带数据校验功能、自动异步获取数据功能、提交数据功能等。可以与弹框配合，形成弹框表单。\n\n![Alt](public/img/docs/image2018-3-514_21_35.png)\n\n\n## 弹框无限下钻\n\n弹框配合Table，可展示更多内容，满足更复杂的需求场景。\n\n![Alt](public/img/docs/image2018-3-514_21_41.png)\n\n\n## 权限控制系统\n\n权限控制可以小到元素级组件，也可以大到页面/模块，都可以使用相同的方式来做权限控制。任何一个元素都可以关联一个权限点，当存在当前权限点是，才会展示给用户当前元素。权限点为后端控制，加载页面时把当前用户有的权限点全部返回即可。\n\n如下面例子：不同用户，导航条及右侧页面都有所不同\n\n![Alt](public/img/docs/image2018-3-514_28_2.png)\n![Alt](public/img/docs/image2018-3-514_27_35.png)\n\n\n## 多主题样式\n\n提供了多种主题样式，快速满足多样化的品牌诉求。\n\n![Alt](public/img/docs/image2018-3-514_21_58.png)\n![Alt](public/img/docs/image2018-3-514_22_4.png)\n\n\n## 常用三方扩展\n\nueditor、echarts"

/***/ }),
/* 238 */
/***/ (function(module, exports) {

	module.exports = "## 什么是 UF？\n\nUF 框架是一个面向RD（不仅是FE）的自助配置框架，RD 直接通过简单的 JSON 配置即能生成页面。\n\nUF 致力于解放业务中各类简单枯燥的前端交互开发工作。直接书写页面上需要的组件的配置并调用 API 初始化他们，即可生成整个页面；并能通过指定 API 完成更加定制化的业务需求。\n\nDemo 演示请点击左侧各组件示例\n\n> 如有疑问可以加群 **`1615792`** 咨询。\n\n## 特性\n\n##### 1、界面配置化\n\n用配置的 JSON 声明你需要一个什么样的页面，包含什么交互，框架帮你具体实现。\n\n> 框架中包含有 50 余种组件，从元素级到页面级的组件都有，可轻松满足多数日常使用场景。\n\n\n##### 2、学习成本低\n框架整合了各种交互场景，抽象成了一个简单的定理。何为组件交互？一个组件改变另一个组件，即为交互。\n\n基于此，框架了统一的API来完成各种组件的不同的操作。\n\n##### 3、开发成本低\n* 无需搭建前端环境\n* 无需关注UI风格，后续还会提供多种主题样式，可自由切换\n* 更少的业务逻辑实现\n\n\n\n## 浏览器支持\n现代浏览器和 IE9 及以上。\n\n\n## 版本\n* 开发版：dev - [查看最新功能](http://antd.uf.baidu.com:8000/uf/#/UpdateLog)\n* Beta版：%{version}%\n* 稳定版：%{stableVersion}%\n\n\n## 浏览器引入\n> 以下库文件分为三个版本：\n> * dev 版：为当前研发版本，可对遇到的问题进行及时响应并修复，前期推荐使用dev版。\n> * beta 版：新上线的版本，不会频繁迭代，稳定性有待检测。\n> * stable 版：屏蔽了 warning 及部分 error 问题，使代码尽量可以执行。同时，代码进行了压缩，文件较小，报错及问题定位较困难。\n\n#### UF组件库\n\ndev:\n* http://antd.uf.baidu.com:8099/v/dev/theme.css\n* http://antd.uf.baidu.com:8099/v/dev/dll.js\n* http://antd.uf.baidu.com:8099/v/dev/antd.js\n* http://antd.uf.baidu.com:8099/v/dev/uf.js\n\nbeta:\n* http://uf.baidu.com/v/%{version}%/theme.css\n* http://uf.baidu.com/v/%{version}%/dll.js\n* http://uf.baidu.com/v/%{version}%/antd.js\n* http://uf.baidu.com/v/%{version}%/uf.js\n\nstable:\n* http://uf.baidu.com/v/%{stableVersion}%/theme.min.css\n* http://uf.baidu.com/v/%{stableVersion}%/dll.min.js\n* http://uf.baidu.com/v/%{stableVersion}%/antd.min.js\n* http://uf.baidu.com/v/%{stableVersion}%/uf.min.js\n\n\n## 加入我们\n\n欢迎各位大神贡献自己的代码，框架/组件开发请联系[`Umpfe`](mailto:umpfe@baidu.com?cc=liuzechun@baidu.com)、[`Hi`](baidu://message/?id=861260447)\n"

/***/ }),
/* 239 */
/***/ (function(module, exports) {

	module.exports = "UF 致力于提供给 RD 愉悦的页面开发体验\n\n使用此组件，您无需提前安装任何环境。\n\n## 1.组件引入\n\n直接复制如下内容到页面的`<head>`标签里即可：\n\n```html\n<link rel=\"stylesheet\" href=\"http://uf.baidu.com/v/%{version}%/theme.min.css\" />\n<script src=\"http://uf.baidu.com/v/%{version}%/dll.min.js\"></script>\n<script src=\"http://uf.baidu.com/v/%{version}%/antd.min.js\"></script>\n<script src=\"http://uf.baidu.com/v/%{version}%/uf.min.js\"></script>\n```\n\n> 注：以上文件引入的是压缩版本，适合线上使用，在开发过程中，可以引入开发版本，以查看更多报错信息，即去掉 `.min` 后缀\n\n如果需要兼容比较老的浏览器，可以引入如下文件实现兼容\n```html\n<script src=\"http://uf.baidu.com/dist/browser-polyfill.min.js\"></script>\n```\n\n\n## 2.组件使用\n\n第一个例子：\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/v/%{version}%/theme.min.css\" />\n        <script src=\"http://uf.baidu.com/v/%{version}%/dll.min.js\"></script>\n        <script src=\"http://uf.baidu.com/v/%{version}%/antd.min.js\"></script>\n        <script src=\"http://uf.baidu.com/v/%{version}%/uf.min.js\"></script>\n        <title>代码测试</title>\n    </head>\n    <body>\n        <!-- 页面组件承载元素，使用id作为参数  -->\n        <div id=\"demo\"></div>\n        <!-- 此处为直接从左侧任意一组件demo中拷贝过来的demo，可见 `Layout 布局` 尝试配置整个页面  -->\n        <script>\n            var config = {\n                type: \"card\",\n                title: \"Card title\",\n                loading: true,\n                content: \"包含标题、内容、操作区域的卡片内容区域\"\n            };\n            UF.init(config, '#demo');\n        </script>\n    </body>\n</html>\n\n```\n\n第一步：在 `<head>`标签中引入库文件\n\n第二步：书写页面的配置参数\n\n第三步：最后调用`UF.init`函数在`id=\"demo\"`的元素上按照config初始化页面\n\nconfig 此处为一个组件的配置，也可以是整个页面的配置，具体可见[`页面示例`](#/Usage/Page)中的示例。\n\n更多`UF`上的函数可见[`组件交互`](#/Api)\n\n\n"

/***/ }),
/* 240 */
/***/ (function(module, exports) {

	module.exports = "\n## 概述\n\n要开发一个页面，都离不开页面的布局。框架提供了5种类型的布局组件，几种组件按照一定的规则自由组合，即可得到一些常见的页面布局效果。\n\n## 布局组件类型\n\n- `Layout`：布局容器，其下可嵌套 `Header` `Sider` `Content` `Footer` 或 `Layout` 本身，可以放在任何父容器中。\n- `Header`：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Sider`：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Content`：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Footer`：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n\n## 例子\n\n如下配置，即可得到一个包含导航条、侧边栏等的上中下布局：\n\n```javascript\n{\n    type: 'layout',\n    style: {marginTop: 30},\n    content: [\n        {\n            type: 'header',\n            style: {background: '#7dbcea', color: '#fff', textAlign: 'center'},\n            content: 'Header'\n        },\n        {\n            type: 'content',\n            content: {\n                type: 'layout',\n                content: [\n                    {\n                        type: 'sider',\n                        style: {background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px'},\n                        content: 'Sider'\n                    },\n                    {\n                        type: 'content',\n                        style: {background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px'},\n                        content: 'Content'\n                    }\n                ]\n            }\n        },\n        {\n            type: 'footer',\n            style: {background: '#7dbcea', color: '#fff', textAlign: 'center'},\n            content: 'Footer'\n        }\n    ]\n}\n```\n\n日常应用中，把`content`的字符串内容用组件配置填充，即可得到使用当前布局的界面。\n\n更详细的用法，可见[页面布局](#/General/Layout)"

/***/ }),
/* 241 */
/***/ (function(module, exports) {

	module.exports = "\n## 引言\n\n所谓组件交互，抽象来讲，就是一个组件操作/调用另一个组件。要想达到这个目的，首先要能获取到要操作的组件，其次，要操作的组件要暴露出可供调用的方法。\n\n## 一个例子\n\n可以先从一个例子开始了解组件的操作过程。如下配置，可以产生一个进度条和加减按钮，点击加减按钮，进度条会随之一起增减。\n\n```javascript\n[\n    {\n        type: \"progress\",\n        name: \"my-progress2\",\n        percent: 10\n    },\n    {\n        type: \"button-group\",\n        style: {\n            marginTop: 10\n        },\n        content: [\n            {\n                type: \"button\",\n                icon: \"minus\",\n                onClick: function onClick(v) {\n\t                var progress = UF('my-progress2');\n\t                var current = progress.get('percent');\n\t                progress.set({\n\t                    percent: current - 10\n\t                });\n\t            }\n            },\n            {\n                type: \"button\",\n                icon: \"plus\",\n                onClick: function onClick(v) {\n\t                var progress = UF('my-progress2');\n\t                var current = progress.get('percent');\n\t                progress.set({\n\t                    percent: current + 10\n\t                });\n\t            }\n            }\n        ]\n    }\n]\n```\n\n读`onClick`函数体可知，函数中应用了`UF`函数来获取一个name名为 my-progress2 的组件，并调用了组件的`get`函数来获取进度条组件的当前的进度值，再调用组件的`set`函数给组件设置新值。\n\n* 使用`UF`函数根据组件名称获取组件，可以类比为jQuery的`$`符号\n* 组件具有 `get`/`set` 函数来获取/设置组件属性\n\n其他更复杂的交互场景，其中心思想和上面的demo一致。\n\n除了以上用到的函数外，框架还提供了丰富的交互Api来满足日常使用，更多内容可见：[交互API](#/Api)\n\n"

/***/ }),
/* 242 */
/***/ (function(module, exports) {

	module.exports = "很多组件可以嵌套子组件，那么在配置中如何实现组件嵌套呢？\n\n## content 属性\n\n所有组件都有`content`属性，此属性可以是一个子组件的配置，也可以是多个子组件配置组成的一个数组。例如：\n```javascript\n{\n    type: \"button\",\n    mode: \"primary\",\n    content: [\n        {\n            type: \"icon\",\n            mode: \"left\"\n        },\n        \"Backward\"\n    ]\n}\n```\n> Tips: 如上，任何时候，需要一个组件配置的位置均可以使用一个简单的字符串代替\n\n\n## 组件的特殊属性\n\n有些组件的某些属性也可以为一个子组件的配置，例如`Card`组件的`title`属性，文档中的类型为`string|config`，则`title`属性即可以为字符串，又可以为一个子组件配置。其他组件亦如此。"

/***/ }),
/* 243 */
/***/ (function(module, exports) {

	module.exports = "这里，我们应用了前面介绍的页面布局来构建页面整体架构，用content来实现组件的嵌套关系，用`UF.set`等api来完成组件交互，即初步开发出了一个页面。\n\n这里只是单个页面配置的示例，具体整个项目怎么开发见 [项目示例](#/Develop/Install)"

/***/ }),
/* 244 */
/***/ (function(module, exports) {

	module.exports = "一个项目包含有多个页面，通过前端路由控制各个页面的跳转，即形成一个单页应用。\n\n\n## 开始\n\n\n### 1、准备 html 文件\n\n首先准备一个`demo.html`文件。\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/v/%{version}%/theme.min.css\">\n        <script src=\"http://uf.baidu.com/v/%{version}%/dll.min.js\"></script>\n        <script src=\"http://uf.baidu.com/v/%{version}%/antd.min.js\"></script>\n        <script src=\"http://uf.baidu.com/v/%{version}%/uf.min.js\"></script>\n        <title>一个简单的项目示例</title>\n    </head>\n    <body>\n        <div id=\"main\"></div>\n        <script>\n            UF.config({\n                modules: {\n                    baseUrl: './',\n                    paths: {\n                        Router: 'router',\n                        App: 'app',\n                        Page1: 'page1',\n                        Page2: 'page2'\n                    }\n                }\n            });\n            UF.init('Router', '#main');\n        </script>\n    </body>\n</html>\n```\n以上html文件做了三件事：  \n##### 一、首先引入了依赖的库文件\n##### 二、然后配置项目全部模块路径\npaths里面定义了四个模块的路径，这里省略了文件的后缀，例如：Router模块对应的文件为`./router.js`。  \n> 更多`UF.config()`的用法可见 [全局配置](#/Develop/Config)\n\n##### 三、初始化页面\n使用路由模块对页面进行初始化。\n\n\n### 2、入口模块\n\n新建一个`router.js`文件，作为项目入口文件，指定路由及对应模块的关系。\n\n```javascript\ndefine(function(require) {\n    var App = require('App');\n    var Page1 = require('Page1');\n    return {\n        type: 'router',\n        routes: [\n            {\n                path: '/',\n                component: App,\n                breadcrumbName: '首页',\n                indexRoute: {component: Page1.Card1},\n                childRoutes: [\n                    {path: 'card', breadcrumbName: '卡片', component: Page1.Card1},\n                    {path: 'card2', breadcrumbName: '卡片2', component: Page1.Card2,\n                        childRoutes: [\n                            {path: 'card3', breadcrumbName: '卡片3', component: 'Page2'}\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n});\n```\nrouter模块主要用于配置路由和各个模块间的关系。`router`组件的用法见组件[Router 路由](#/General/Router)。\n\n和其他模块相同，每一个模块均为`define(function(){ ... })`，define包含的函数中需`return {...};`返回当前模块的配置。\n\n`require()`用来引入当前模块依赖的其他模块，框架会先加载全部依赖的模块再执行下面的逻辑。`require`函数的返回值为定义模块时`return {...}`返回来的配置。\n\n> 更多关于模块如何组织、开发，可见 [模块开发](#/Develop/Modules)\n\n\n### 3、App模块\n\nApp模块为整个项目的框架，其中定义了页面的布局、子模块位置等。从router.js的配置中也可以看出，App模块是页面的根模块，全部页面的入口。\n\n新建一个`app.js`文件。\n```javascript\ndefine(function() {\n    return [\n        {\n            type: \"menu\",\n            mode: \"horizontal\",\n            theme: \"dark\",\n            items: [\n                {\n                    key: \"mail\",\n                    link: '/card',\n                    icon: 'mail',\n                    title: 'Navigation One'\n                },\n                {\n                    key: \"sub\",\n                    icon: 'setting',\n                    title: 'Navigation Two - Submenu',\n                    childItems: [\n                        {\n                            key: \"setting:1\",\n                            link: '/card2',\n                            title: 'Option 1'\n                        },\n                        {\n                            key: \"setting:2\",\n                            link: '/card2/card3',\n                            title: 'Option 2'\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            type: 'breadcrumb',\n            style: {margin: '12px 24px'}\n        },\n        {\n            type: 'div',\n            style: {background: '#eee', padding: '35px'},\n            childrenHolder: true,\n            content: {\n                type: 'div',\n                style: {background: '#ddd', padding: '25px'}\n            }\n        }\n    ];\n});\n\n```\n此模块使用基本组件的组合搭配实现页面的布局等。值得注意的是，靠底部的部分有个`childrenHolder`属性，配合路由使用，声明模块所在路由中 子路由对应的组件 会渲染到当前模块的 childrenHolder 所处位置\n\n\n### 4、Page1模块、Page2模块\n\nPage1模块`page1.js`实现如下：\n\n```javascript\ndefine(function() {\n    var Card1 = {\n        type: 'card',\n        title: 'Card title',\n        bordered: false,\n        loading: true\n    };\n    var Card2 = {\n        type: 'card',\n        title: 'Card title',\n        bordered: false,\n        childrenHolder: true\n    };\n    return {\n        Card1: Card1,\n        Card2: Card2\n    };\n});\n```\n\nPage2模块`page2.js`实现如下：\n\n```javascript\ndefine({\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n});\n```\n\n至此，配置上面demo的工作就完成了。可以在浏览器上打开刚开始定义的`demo.html`查看效果。\n"

/***/ }),
/* 245 */
/***/ (function(module, exports) {

	module.exports = "\n全局配置主要用于页面初始化之前，对页面整体进行一些设置、渲染页面之前的请求或处理等等，全部就绪后才会进行页面初始化。\n\n此处主要讲解**`UF.config()`**函数的作用以及其参数的详细用法。\n\n## 使用场景\n\n* 项目开发时，用于给各个模块命名，类似于给模块路径一个别名，其他一些 [requirejs](http://requirejs.org/docs/api.html#config) 的高级用法不做赘述\n* 给组件配置一些全局的、通用的默认参数，减少开发时多次书写重复的配置\n* 配置ajax处理逻辑，可以把后端返回数据统一格式化成一样的格式\n* 配置声明对接口数据进行缓存，防止重复请求\n* 执行异步逻辑（例如通过ajax获取页面初始化时需要用到的数据，如用户名等），阻塞页面初始化\n* 进行页面权限控制相关配置\n\n\n## 具体用法\n\n一般在页面初始化之前调用`UF({})`产生一个uf实例时，或者调用`UF.config({})`初始化uf实例时，做一些全局的配置。其参数为一个对象，参数如下：\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nname | 实例名称，根据不同的名称产生不同的实例 | String | default | \n[modules](#/Develop/Config/-modules) | 模块相关的各种配置，具体见下表：`modules`表 | Object |  | \n[components](#/Develop/Config/-components) | 用于给组件声明一些全局的、通用的默认参数，减少开发时多次书写重复的配置。 | Object |  | \n[plugins](#/Develop/Config/-plugins) | 额外加载插件。见：`plugins` | Object[]&#124;String[] |  | \n[global](#/Develop/Config/-global) | 其他一些全局配置。见：`global`表 | Object |  | \n[data](#/Develop/Config/-data) | 用于存放一些全局的公用数据，可以直接在组件中使用，或**作为url的动态参数使用** | Object |  | \n[authority](#/Develop/Config/-authority) | 权限控制。见：`authority`表 | Object |  | \n[precondition](#/Develop/Config/-precondition) | 预加载函数列表，会阻塞页面初始化（init之前执行的函数，多为调用api获取基础数据），列表中的函数全部执行完成后才会执行页面初始化。见：`precondition` | Function[] |  | \n\n\n### # modules\n\n一般用于配置模块路径映射。例如 快速上手 中的如下配置：\n\n```javascript\nUF.config({\n    modules: {\n        baseUrl: './',\n        paths: {\n            Router: 'router',\n            App: 'app',\n            Page1: 'page1',\n            Page2: 'page2'\n        }\n    }\n});\n```\n全部参数说明如下：\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nbaseUrl | 用于所有模块查找的根路径 | string |  | \npaths | 模块名称的路径映射。路径设置被假定为相对于baseUrl，除非路径设置从“/”开始，或者在其中有一个URL协议(“如http:”)。 | Object |  | \nwaitSeconds | 单个模块加载超时时间（单位：s）。将其设置为 0 将禁用超时。默认值是 7 秒。 | string | 7 | \nurlArgs | 模块加载时的后缀。可以通过增加时间戳来防止模块文件缓存：`urlArgs: 'suffix=' + Date.now()` | string &#124; function |  | \nshowLoading | 使用懒加载的方式加载模块时是否展示Loading。一般加载模块速度很快，无需展示Loading。如有特殊情况，可以设置为`true`全部模块都有loading；或者设置为一个模块名数组，当加载到数组中的模块时才会展示loading（推荐） | boolean &#124; Array | false | \n\n\n其他更多配置可见：[这里](http://requirejs.org/docs/api.html#config)\n\n> 只有`modules`有内容或者为`true`时，才会加载requirejs（即使用define等函数定义模块）。 当需要引入第三方库时（可能会出问题）： \n> * 如果项目中使用了requirejs的加载方式，则需同样是用requirejs的方式来加载三方模块，不能直接script标签引入。  \n> * 如果项目中没有使用requirejs的加载方式，则可以把`modules`属性置为`false`或者不填，禁用掉requirejs\n\n\n### # components\n\n用于提前给组件声明一些全局的、通用的默认参数，减少开发时多次书写重复的配置。例如：\n\n```javascript\nUF.config({\n    components: {\n        'loading': {\n            delay: 200,\n            size: 'small'\n        },\n        'date-picker': {\n            format: 'YYYY/MM/DD'\n        }\n    }\n});\n```\n\n示例中配置了全部`Loading组件`默认全部使用小号的图标，且全部延迟200ms展示loading状态；全部`日期选择组件`默认格式化成 2017/10/11 的格式。  \n`loading`、`'date-picker'`即为相应组件的`type`  \n此外，比如也可以给`Table组件`设置一组配置（比如具有过滤/导出/全屏功能，分页大小为8条/页，不展示复选框），再使用Table时就无需再配置这些属性。  \n全部组件的全部属性都可以这样预设置，从而达到通用配置的高度复用。  \n\n> 这里的配置会深度合并，无需担心被覆盖。比如`Table组件`的参数`rowSelection`是对象，对象里还有一堆值，此时只想要设置其中一两项，也可以正常使用: `table: {rowSelection: {type: 'radio'}}`\n\n##### 另一种用法：\n\n除了上面给通用组件声明全局配置，还可以定义配置作为自定义组件，以在开发时按照真正的组件使用。用法如下：\n\n```javascript\nUF.config({\n    components: {\n        'my-datepicker': {\n            format: 'YYYY 年 MM 月 DD 日',\n            size: 'small',\n            allowClear: true\n        }\n    }\n});\nUF.init({\n    name: 'test-picker',\n    type: 'my-datepicker', \n    allowClear: false\n}, '#demo');\n```\n\n如上面示例，首先在config中定义了一个名为'my-datepicker'的自定义组件配置。当在下面使用type为'my-datepicker'的组件时，最终会找到config.components中定义的自定义组件，并将其配置加以复用，并可在组件中覆盖自定义组件中定义的默认属性。\n\n\n### # plugins\n`插件系统`\n\n一些使用频率较低的组件，为了防止UF过于膨胀，从UF库中剥离了出来，想要使用的时候需要在config中指定加载。同时用户也可以在此处载入自己开发的React模块，只要模块为用AMD的方式打包的匿名模块即可。\n\n`plugins`参数为一个数组，其每一项的参数有两种形式，对应以上两种用法：\n\n* 第一种为一个字符串，直接引用UF官方提供的插件名称即可；  \n* 第二种为一个对象，引入用户自己开发的插件，对象包含如下属性：\n\n参数 | 说明 | 类型 | 是否必填\n---- | ---- | ----- | ----\nname | 载入之后的模块名称，和使用组件时的`type`一致。当不配置name时，认为通过path加载到的为多个组件，各个组件名称和包内定义的值保持一致 | string | \npath | 模块完整路径 | string | 必填\n\n```javascript\nUF.config({\n    plugins: [\n        'example',\n        {\n            name: 'mycomponent',\n            path: 'http://..to/path/mycomponent.js'\n        }\n    ]\n});\n```\n\n\n### # global\n\n其他一些全局配置。\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\ndomain | 设置文档域 document.domain，默认为当前页面域名 | string |  | \n[ajax](#/Develop/Config/-global-ajax-) | 覆盖`UF.ajax`默认的配置。当项目中API规范和当前框架定义的API规范不相符时，需要更改 success 或 error 等的处理逻辑；亦或需使用 jsonp 的方式请求数据，皆可在此配置 | object |  | \n[cacheApis](#/Develop/Config/-global-cacheapis-) | 配置声明对接口数据进行缓存，重复调用（url及参数无变化时）直接从缓存中取得。加快获取速度，减小服务器压力。 | string[] |  | \n[mock](#/Develop/Config/-global-mock-) | Mock数据功能配置 | Object[] |  | \n\n\n#### # *global.ajax*\n\n定义 Ajax 全局通用属性/行为。\n\n可更改ajax的默认处理逻辑，例如在发送请求前对参数进行通过处理，返回数据后对数据进行统一格式化。当后端返回数据格式不一时，可以在这里做兼容处理，已适应组件内部使用的统一格式。\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nbaseUrl | 如果请求没有加域名端口等前缀，会自动给请求的 url 之前追加 baseUrl | string |  | \nheaders | 设置http请求的headers | object | {} | \ndata | 请求数据时携带的**`额外参数`**，这里指的是一些和内部逻辑无关的参数，全部请求都会携带。例如`token` | object | \ntype | 声明返回的数据格式。可以是：`html`, `xml`, `json`, `jsonp` | string | `json` | \ncontentType | 设置请求的`Content-Type`属性，例如 `contentType: 'application/json'` | string |  |\ncrossOrigin | 设置`cross-origin`请求 | boolean | | \nbeforeSend | 发送数据之前，对请求参数进行通用处理。为一个函数，函数返回处理后的ajax参数。函数参数`conf`为当前请求的全部配置参数，例如包含请求的类型等。 | function(conf){return conf;} | | \nhandler | 全局数据预处理函数（同通用属性[`source.handler`](#/Params/-source-)的用法），全部请求的返回数据都会先经过此函数处理 | function(data, res, conf){return data;} | | \nsuccess | 请求成功时的回调函数。这里的成功失败不是代码逻辑中的成功还是失败，而是**状态码是否为200**。参数中的`successHandler`和`errorHandler`为代码逻辑中的成功和失败的处理函数，用户可在此根据后端返回数据自定义调用成功还是失败处理逻辑 | function(res, successHandler, errorHandler, config){} | 默认处理逻辑，见 [交互API](#/Api/-uf-ajax-params-) 的 `UF.ajax` 部分 | \nerror | 请求失败时的回调函数。同上，为状态码非 200 时的回调函数。见下面示例 | function(res, errorHandler, config){} | | \ncomplete | 不管请求成功还是失败，都会调用。可以应用于按照REST规范开发的情况 | function | | \njsonpCallback | 为 JSONP 请求指定回调函数名。这个值将被使用，而不是由reqwest自动生成的随机(但推荐的)名称。 | function | | \n\n*默认`successHandler`和`errorHandler`调用条件：*\n\n- `successHandler`: 不是指请求成功执行的函数，而是请求的数据符合预期，可以正常使用的处理函数(即 'HTTP Status Code' === 200 && data.status === 0)\n\n- `errorHandler`: 除了请求出错，还有请求不符合预期都会触发error (即 'HTTP Status Code' !== 200 || data.status !== 0)。error有默认的处理逻辑，默认会在右上角展示错误提示信息。如果传入函数，则按照传入的函数执行错误处理\n\n\n覆盖默认 ajax 处理逻辑的示例：\n\n```javascript\nUF.config({\n    global: {\n        ajax: {\n            success(res, successHandler, errorHandler) {\n                // 接口定义：code === '0000' 为请求处理成功，数据放在 data 字段中\n                // 非 0000 的全部为失败，其中失败原因在 msg 字段中\n                if (res.code === '0000') {\n                    successHandler(data, res);\n                } else if (res.code === '8001') {\n                    // 错误提示逻辑\n                    UF.notification.error({\n                        message: '请求失败：',\n                        description: res.msg\n                    });\n                    // 业务逻辑中使用 UF.ajax 系列函数时传入的错误处理逻辑\n                    errorHandler(res);\n                }\n                \n            },\n            error(res, errorHandler) {\n                errorHandler(res);\n            }\n        }\n    }\n});\n```\n\n#### # *global.cacheApis*\n\n配置声明对接口数据进行缓存，防止重复请求。重复调用接口（*url及参数无变化时*）时直接从缓存中取得数据。加快获取速度，减小服务器压力。\n\n此功能对用户来说是无感的。用户只需在config中声明进行数据缓存的api列表，在业务中正常调用接口即可。`UF.ajax`和`source`系列属性获取数据均适用。\n\n```javascript\nUF.config({\n    global: {\n        cacheApis: [\n            'http://uf.baidu.com/docs/php/data.php'\n        ]\n    }\n});\nUF.ajax.get('http://uf.baidu.com/docs/php/data.php', null, data=>{\n    console.log('第一次调接口取得数据：', data);\n    UF.ajax.get('http://uf.baidu.com/docs/php/data.php', null, data=>{\n        console.log('第二次调接口取得数据：', data);\n    });\n});\n```\n如示例中，虽然先后调用了两次ajax，但是network中查看只会看到一次请求记录。\n\n> Tips: 如`Table`组件中使用后端分页，如果数据不是实时更新的，也可以开启此功能，查看原来分页的数据即可无需再次请求\n\n#### # *global.mock*\n\nMock数据功能。\n\n参数为一个数组，数组的每一项代表一个接口，参数如下：\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | ----\nurl | 接口地址 | string |  | 必填\nhandler | 接口对应的处理逻辑。handler中调用success并传入数据，则接口处理成功并返回了数据；调用error，则接口返回处理失败 | function (conf, success, error) {} |  | 必填\n\n```javascript\nUF.config({\n    global: {\n        mock: [\n            // 示例1：可延迟调用success，模拟数据加载中效果\n            {\n                url: '/mock/test',\n                handler: function (config, success, error) {\n                    setTimeout(()=>{\n                        success({\n                            status: 0,\n                            data: 'Mock数据测试'\n                        });\n                    }, 1000);\n                }\n            },\n            // 示例2：高端用法，可以使用mock功能简化交互。\n            // 比如多级级联，后端接口一次性返回全部数据，前端缓存起来。按以往思路，级联需不断获取数据并set给下一级，逻辑不够顺畅。此时即可以使用mock+source，定义几个mock接口，每个级联框绑定一个，各个mock接口分别取数据并返回\n            {\n                url: '/mock/test2',\n                handler: function (config, success, error) {\n                    success({\n                        status: 0,\n                        data: UF.get('cacheData');\n                    });\n                }\n            }\n        ]\n    }\n});\n```\n\n\n#### # data\n\n用于存放一些全局的公用数据，可以直接在组件中使用，或**作为url的动态参数使用** \n\n和`UF.set('xxx', data.xxx)`效果相同，data里面的数据可以通过`UF.get('xxx')`获取到。\n\n同时，data中的数据还有一个常见用法，即在url中作为动态参数使用。从而可以在全局初始化一个变量作为某些ajax的前缀（或参数），在设置url时可以便捷的使用此变量，例如：\n\n```javascript\n// 在入口配置变量\nvar $uf = window.UF({\n    ...\n    data: {\n        // 使用 ms-common 的接口所需配置\n        'ms-common': window.location.origin + '/api/ms-common/'\n    }\n    ...\n});\n\n// 在组件中使用\n{\n    type: 'select',\n    name: 'room-list',\n    // 注意 :ms-common，会转化成入口处设置的变量的值\n    source: ':ms-common/idc/list/map'\n}\n```\n\n\n\n### # authority\n\n权限点列表。在这里配置了权限点之后，即可在组件配置中使用`authority`属性关联此权限点来控制组件是否渲染。例如只有管理员才会展示的按钮等。\n\n目前因为还没有和PMS对接，所以动态的权限需要后端接口提供。所以，最常用的用法为：在`precondition`中配置一个ajax来获取用户的权限点，然后再次调用`UF.config`更新`authority`属性，如下示例：\n\n```javascript\nUF.config({\n    authority: {\n        admin: false\n    },\n    precondition: [\n        (resolve, reject)=>{\n            UF.ajax.get('?api=xxx', null, data=>{\n                // data的值为: {admin: true}\n                UF.config({\n                    authority: data\n                });\n                resolve();\n            });\n        }\n    ]\n});\nUF.init({\n    type: 'button',\n    authority: 'admin',\n    content: '审批通过'\n}, '#demo');\n```\n\n如上示例，admin默认是false，当调用后端接口返回了当前用户的权限点后，重新调用`UF.config`函数更新配置中的权限点。因为是在`precondition`中定义的ajax逻辑，所以获取并更新权限点之前，页面不会进行初始化。\n\n页面初始化时，按钮的`authority`属性关联了全局配置中的名为'admin'的权限点，只有当 admin 为 true 时，审批通过的按钮才会显示出来。\n\n不仅仅初始化时，项目中的任何地方都可以使用权限点做关联，页面渲染之前会进行权限判断，没有权限的节点不会再进行解析和渲染。此功能同样适用与路由组件\n\n\n### # precondition\n\n`precondition`为预加载函数列表，函数的执行会阻塞页面初始化（`UF.init`函数执行之前执行的异步逻辑），等列表中的函数全部执行完成（调用resolve函数）后才会执行页面初始化。多为调用api获取页面所需的基础数据。\n\n```javascript\nprecondition: [\n    (resolve, reject)=>{\n        UF.ajax.get('?api=xxx', null, data=>{\n            UF.set('optionSource', data);\n            resolve();\n        }, error=>{\n            reject();\n            return true;\n        });\n    }\n]\n```"

/***/ }),
/* 246 */
/***/ (function(module, exports) {

	module.exports = "如前面的[路由&模块](#/Develop/Install)中已经多少接触了一些模块化开发的思路。这里细说一下具体用法。\n\n## 概述\n\n模块化开发使得各个模块间可以自由组合、复用，易于维护。\n\n这里先介绍一种上手简单的开发方式，如果有使用构建工具经验的可以看 [另一种模式](#/Develop/Build)。\n\n之所以说上手简单，是因为同样无需搭建前端开发环境，只需准备JS文件，并且按照一定的规则（内部集成了[requirejs](http://requirejs.org)）书写和引入依赖文件，即可实现各模块文件的按需加载、动态引入。\n\n\n## 通用规则\n\n* 首先可以在`UF.config`中的`modules`属性进行配置，例如模块查找的根路径、模块路径映射别名等\n* 全部模块必须通过`define()`函数定义，即写在`define()`函数里，`define()`函数之外不能有其他内容  \n* 如果`define()`函数的参数为一个函数，则函数必须有返回值，返回值为当前模块的配置\n* 模块依赖关系可通过`require`函数或者`define`引入，下面会详细讲\n\n\n## 模块定义\n\n### 用法1： define(object) \n直接定义模块配置。\n\n当模块比较简单不依赖其他模块时，可以直接把模块配置置于`define()`中。\n\n例如 路由&模块 示例中的`page2.js`模块：\n```javascript\ndefine({\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n});\n```\n\n\n### 用法2： define(function(){}) \n\n通过函数返回结果定义模块配置。\n\n`define`函数也可以定义一个函数，函数里面可以写一些逻辑，最后return返回一个对象作为当前模块。\n\n再来回顾一下 路由&模块 示例中的`routes.js`模块：\n\n```javascript\ndefine(function(require) {\n    var App = require('App');\n    var Page1 = require('Page1');\n    return {\n        type: 'router',\n        routes: [\n            ...\n        ]\n    };\n});\n```\n如示例，`return`返回的结果才是当前模块的配置，当其他模块引入当前模块时，得到的也是 return 返回的结果（例如变量 App 和 Page1）。换一句话说，这里 return 之前的逻辑只会在模块刚加载到浏览器上去时执行一次，之后模块就只剩下 return 返回的结果作为模块而存在。\n\n> 再进一步说，requirejs 加载到的模块如果是函数，会先执行函数，函数的返回结果才当做加载到的模块的内容。当执行函数是遇到 require，会阻塞当前逻辑，再次加载当前模块依赖的模块。\n\n当模块依赖其他模块时，就需要用到`require()`函数引入依赖模块。如上面的示例，使用`require`引入了 App.js 模块和 Page1.js 模块，框架会先加载此依赖的模块再执行后面的逻辑。\n\n\n### 用法3： define([], function(){})\n\n预先声明依赖的模块，并通过函数返回结果定义模块配置。\n\n`define`定义时，也可以有两个参数，第一个参数为当前模块的依赖模块数组，第二个函数为定义当前模块的函数，函数的参数和第一个参数列举的模块必需一一对应。\n\n以此可以规避`require`函数的使用，实际作用和`用法2`相同，如下：\n\n```javascript\ndefine(['App', 'Page1'], function(App, Page1) {\n    return {\n        type: 'router',\n        routes: [\n            ...\n        ]\n    };\n});\n```\n这种用法相比于`用法2`看起来更简洁一点。\n\n> 更多用法可见：[这里](http://requirejs.org/docs/api.html#define)\n\n## 模块间数据通信\n\n因为上面定义的模块时一个纯配置对象，所以不具备数据通信能力（或者说实现比较复杂）。接下来介绍一种定义动态模块的方法 -- 即返回的不是纯配置，而是一个 return 出一个配置的函数。例如`page2.js`模块。  \n\n先把模块改为`define(function(){})`的形式：  \n\n```javascript\ndefine(function() {\n    return {\n        type: 'card',\n        title: 'Card Title 2',\n        loading: true\n    };\n});\n```\n\n然后把配置替换为一个函数，函数可以有多个参数：\n\n```javascript\ndefine(function() {\n    return function(title) {\n        return {\n            type: 'card',\n            title: title,\n            loading: true\n        };\n    }\n});\n```\n\n如上，模块的 title 属性即为一个动态的属性，根据外面传入的不同参数变化。使用的时候也会对应有一些变化，如下：\n\n```javascript\ndefine(function() {\n    var Page2 = require('Page2');\n    ...\n    // component: Page2\n    component: Page2('Card Title 22')\n    ...\n});\n```\n\n"

/***/ }),
/* 247 */
/***/ (function(module, exports) {

	module.exports = ""

/***/ }),
/* 248 */
/***/ (function(module, exports) {

	module.exports = "对于有一定前端基础的前端同学来说，可能使用requirejs会感觉比较原始，这种开发模式并不是最方便，这里我们来介绍另一种开发模式：**使用构建工具来进行模块化开发**。\n\n这里不会介绍构建工具如何使用，其实和用什么构建工具无关，关键是模块组织上与使用 requirejs 有些许不同。\n\n构建工具推荐使用自主研发的`uf-cli`工具，因为同样无需搭建环境，即装即用，是个一劳永逸的方案。当然，使用 webpack/gulp/fis3 等等这些也完全可行。\n\n## 举个例子\n\n还是拿【路由&模块】上面的例子来说明，用当前这种开发模式代码如何书写。\n\n> demo 中使用的是 es6 的方式进行`import`、`export`\n\n\n#### 1、准备 html 文件\n\n首先准备一个`demo.html`文件。\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"stylesheet\" href=\"http://uf.baidu.com/v/%{version}%/theme.min.css\" />\n        <script src=\"http://uf.baidu.com/v/%{version}%/dll.min.js\"></script>\n        <script src=\"http://uf.baidu.com/v/%{version}%/antd.min.js\"></script>\n        <script src=\"http://uf.baidu.com/v/%{version}%/uf.min.js\"></script>\n        <!-- <style>html, body {height: auto !important;}</style> -->\n        <title>一个简单的项目示例</title>\n    </head>\n    <body>\n        <div id=\"main\"></div>\n        <script src=\"./bundle.js\"></script>\n    </body>\n</html>\n```\n**`./bundle.js`文件为构建工具把全部模块打包生成的文件。**\n\n这里因为不再用 requirejs ，所以无需再用`UF.config()`配置modules属性。\n\n\n#### 2、入口模块\n\n新建一个`router.js`文件，作为项目入口文件，指定路由及对应模块的关系。**在这里，同时也是构建工具的入口文件。**\n\n```javascript\nimport App from './app.js';\nimport Page1 from './page1.js';\nimport Page2 from './page2.js';\nexport default {\n    type: 'router',\n    routes: [\n        {\n            path: '/',\n            component: App,\n            breadcrumbName: '首页',\n            indexRoute: {component: Page1.Card1},\n            childRoutes: [\n                {path: 'card', breadcrumbName: '卡片', component: Page1.Card1},\n                {path: 'card2', breadcrumbName: '卡片2', component: Page1.Card2,\n                    childRoutes: [\n                        {path: 'card3', breadcrumbName: '卡片3', component: Page2}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n**不再存在懒加载的模块，全部模块使用前必定是`import`过的。**\n\n\n#### 3、App模块\n\n新建一个`app.js`文件。\n\n```javascript\nexport default [\n    {\n        type: \"menu\",\n        ...\n    },\n    {\n        type: 'breadcrumb'\n    },\n    {\n        type: 'div',\n        ...\n    }\n];\n```\n\n#### 4、Page1模块、Page2模块\n\nPage1模块`page1.js`实现如下：\n\n```javascript\nvar Card1 = {\n    type: 'card',\n    title: 'Card title',\n    bordered: false,\n    loading: true\n};\nvar Card2 = {\n    type: 'card',\n    title: 'Card title',\n    bordered: false,\n    childrenHolder: true\n};\nvar Card3 = {\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n};\nexport default {\n    Card1: Card1,\n    Card2: Card2,\n    Card3: Card3\n};\n```\n\nPage2模块`page2.js`实现如下：\n\n```javascript\nexport default {\n    type: 'card',\n    title: 'Card title 3',\n    loading: true\n};\n```\n\n**模块开发好后，最后使用构建工具生成`demo.html`中引用的`bundle.js`文件即可。**\n\n"

/***/ }),
/* 249 */
/***/ (function(module, exports) {

	module.exports = "\n如[开始使用](#/Usage/Install)中以及后面demo一直使用的`UF.init()`为一些在UF中事先定义好的函数，这里我们做详细的罗列解释\n\n## # UF\n\nUF 为整个框架的入口，全部组件使用都依赖于这个`UF`。UF 函数具有两种完全不同的用法.\n\n#### `1、产生 $uf 实例`：\n\n首先说最基础用法，即可以使用UF函数产生一个$uf实例，后面的全部操作都使用这个$uf实例完成。当一个页面上同时出现两块互不相干的模块时，可以通过使用不同的实例做到两个模块完全独立，包括`$uf.config()`对uf做到初始化获取组件等操作。\n\n```javascript\nvar $uf = window.UF({\n    name: \"myUf\",\n    global: {},\n    components: {}\n})\n```\n\n#### `2、本身也是一个实例`：\n\n为了方便使用，整个UF本身也是一个名为`_$default`的实例，所以可以在UF上使用实例具有的全部方法，平时使用也无需再对UF进行实例化。\n\n** *后面所说的UF的含义，实际上也全部为此默认实例上的方法。* **\n\nUF本身为一个函数，可以通过UF函数查到到指定name的组件。例如 [Button 按钮](#/General/Button) 的demo里面，点击展示按钮loading的例子中：\n\n```javascript\n{\n    type: \"button\",\n    name: \"my-button1\",\n    mode: \"primary\",\n    content: \"Click me!\",\n    onClick: function onClick(v) {\n        return UF('my-button1').set({\n            loading: true\n        });\n    }\n}\n```\n其中 `UF('my-button1')` 即为查找 name 为 my-button1 的组件，即为本身。\n\n\n** *同时 UF 上还提供了一些函数，用法如下：* **\n\n\n## # UF.init()\n\n`UF.init(config/string, target/targetSelector)`\n\n包含两个参数：\n- 第一个参数为组件配置，如果为一个配置对象，则直接解析；如果为字符串，则认为是一个未加载的模块，[加载模块](#/Develop/Modules)并进行渲染\n- 第二个参数为页面上目标元素或目标元素选择器\n\n函数用来把配置初始化为组件，并渲染到页面上。用法如下：\n```javascript\nvar config = {\n    type: \"button\",\n    mode: \"primary\",\n    content: \"Primary\"\n};\nUF.init(config, '#demo');\n```\n还有一种用法是不传递第二个参数，则组件生成后不会渲染到页面上，而是返回生成的组件。例如 [DataPicker 日期选择框](#/DataEntry/DatePicker) 的第三个demo的用法，renderExtraFooter 参数要求为一个函数，函数返回一个组件：\n```javascript\nvar config = {\n    type: \"date-picker\",\n    renderExtraFooter: function() {\n        return UF.init({\n            type: 'button',\n            content: '额外的页脚'\n        });\n    }\n};\nUF.init(config, '#demo');\n```\n\n注意：\n> 如果`UF.config`中配置了如`precondition`会阻塞页面加载的属性，`UF.init`函数会在其执行完成后再执行。\n> 会先清空目标元素，然后把新组件渲染上去\n\n\n## # UF.render()\n\n`UF.render(config, target/targetSelector)`\n\n作用和`UF.init`函数类似，也是渲染某个配置到页面上，不过不受config中配置的一些延迟因素影响，会直接渲染组件。\n\n\n## # UF.unrender()\n\n`UF.unrender(target/targetSelector)`\n\n用于主动销毁通过`UF.render`或`UF.init`渲染到页面上的组件，直接移除页面上的dom元素不会触发页面上的组件销毁\n\n\n## # UF.append()\n\n`UF.append(config, target/targetSelector)`\n\n也是用来渲染组件，与上面两个函数的不同点在于，是在目标元素上追加一个组件，不会清空原目标元素。\n\n函数会返回一个对象，包含两个属性，`element`、`destroy`，element 为为了承载新增的组件而创建的标签，destroy 为一个函数，用来销毁新增的标签。详细用法可见 [Modal示例](#/Custom/Modal)\n\n\n## # UF.set()\n\n`UF.set(string, data)`\n\n存储数据。可以使用UF上的set函数来存储任何数据，并可以在任何地方通过`UF.get`获取。\n\n## # UF.get()\n\n`UF.get(string)`\n\n获取数据。可以使用UF上的`set`函数来存储任何数据，并可以在任何地方通过`UF.get`获取。\n\n例如：\n\n```javascript\nlet list = [0, 1, 2, 3];\nUF.set('test.list', list);\nconsole.log(UF.get('test.list'));\n```\n\n## # UF.getRouter()\n\n随时随地获取当前页面的路由信息。\n\n函数返回值为一个对象，包含两个参数：`params`、`detials`。\n\n> `params`为路由上传入的参数，如上如果多个参数，则params内包含多项；  \n> `detials`为包括params在内的更多路由信息，比如当前路由路径的\n\n具体用法可见，[示例](#/Others/-2-)\n\n## # UF.ajax(params)\n\nAjax 获取数据。`params` 为一个对象，属性列表如下：\n\n参数 | 说明 | 类型 | 默认值 \n---- | ---- | ----- | -----\nurl | ajax接口地址。（支持包含动态参数，如：`/update/:id`，详见下面介绍） | string |  \nmethod | 默认数据请求方式 | string | `GET` \ncache | 开启缓存（刷新页面失效），重复请求再次获取时会直接从缓存读取 | boolean | false \nlocalStorage | 开启永久缓存（localStorage），当再次访问接口时，优先查找缓存内容。详见下面介绍 | boolean &#124; string | false \nrequestMerge | 开启请求合并，多个重复请求先后同时触发时，会合并成一个请求。可见下面[例子](#/Api/requestmerge-) | boolean | true \nparams | 发送的参数体，可以是一个 JOSN对象 或一个 query串 | object &#124; string | \nparamsHandler | 请求数据前，对全部参数进行处理。应用场景如：组件自带的 page/size 等参数不符合接口规则，需要格式化 | function(params) {} |\ninterrupt | 中断请求的钩子函数。具体用法见下面介绍 | function(conf) {} |\ntype | 声明返回的数据格式。可以是：`html`, `xml`, `json`, `jsonp` | string | `json` \nuseAxios | 改为使用`axios`库进行ajax请求 | boolean | false \nsuccess | 成功时的处理逻辑 | function(data, res){} |  \nerror | 失败时的处理逻辑 | function(res){} | 默认处理逻辑，见如下说明 \ncomplete | 不管请求成功还是失败，都会调用。可以应用于按照REST规范开发的情况 | function | \nonchange | 请求开始/结束时执行。可以用于绑定 loading 状态 | function | \n\n更多参数可见 [全局配置](#/Develop/Config/-global-ajax-) 的`global.ajax`部分中的属性参数\n\n**注意：**\n\n* **`url`**: url字符串中，可以类似路由声明一样定义一些动态参数，例如：`/update/:id`，`:id`为动态内容，动态内容的值来自于同级的`params`参数中。同时，在`params`取值后，params中的相应字段会被删除。\n\n* **`success`**: 不是指请求成功执行的函数，而是请求的数据符合预期，可以正常使用的处理函数(即 'HTTP Status Code' === 200 && data.status === 0)\n\n* **`error`**: 除了请求出错，还有请求不符合预期都会触发error (即 'HTTP Status Code' !== 200 || data.status !== 0)。error有默认的处理逻辑，默认会在右上角展示错误提示信息。如果传入函数，则按照传入的函数执行错误处理。  \n> 如果error执行完返回true，则会继续执行默认的error处理函数。更多说明可见：[更多用法\n](#/Others/-ajax-error-)\n\n* **`onchange`**: 请求开始/结束时执行。可以用于绑定 loading 状态：  \n> * 开始执行请求时执行 onchange 参数为 (true, 'sending')\n> * 请求完成时执行 onchange 参数为 (false, 'success'/'error')\n\n* **`interrupt`**: 中断请求的钩子函数。可以当符合某些条件时中断请求，执行自定义处理：\n> * 可以通过返回数据，中断请求，从而使用钩子返回的数据；\n> * 如果钩子未返回任何内容，或返回true，则请求继续；\n> * 如果钩子返回false，则仅中断请求，不做任何处理；\n\n* **`localStorage`**: 开启永久缓存（localStorage）：\n> * 当再次访问接口时，优先查找缓存内容，并执行一次success，同时发起ajax请求；当ajax请求的数据获取回来后，会再次执行success逻辑，并更新缓存。  \n> * 当参数为一个字符串时，会对缓存的key进行加盐处理，使当传入不同字符串时缓存失效\n\n\n**接口返回值格式为：**\n```json\nsuccess: {status: 0, data: [{}]}\nerror:   {status: 1, msg: 'error'}\n```\n\n##### requestMerge使用效果展示：\n```javascript\nlet count = 0;\nlet getData = ()=>{\n    let cur = ++count;\n    UF.ajax({\n\t    url: 'http://uf.baidu.com/docs/php/data.php',\n\t    params: {page: 1, size: 1},\n\t    success(data) {\n\t        console.log(`第${cur}次调接口取得数据：`, data);\n\t    }\n\t});\n}\ngetData();\ngetData();\ngetData();\nsetTimeout(()=>{\n    getData();\n}, 1000);\n```\n以上demo中，先后调用了四次ajax获取数据函数。先是连续调用了3次，第2次、第3次调用时，由于前一个相同的ajax还没完成，所以后两次调用合并到了第一次的请求逻辑中（network中只有一条GET记）。当ajax执行完成后，三次调用各自的成功逻辑依次被执行了。  \n延迟1s后执行第4次调用，此时前面的请求已经执行完成，所以这次会重新发起请求。network上展示了第二条GET记录\n\n#### 快捷用法：\n\n#### **UF.ajax.get(url, params, success, error, onchange)**\n\n以 GET 的方式发送数据。参数不再是一个对象，而是一个列表，除了url，其他参数可不填。\n\n#### **UF.ajax.post(url, params, success, error, onchange)**\n\n以 POST 方式发送数据。\n\n\n## # UF.config()\n\n全局配置。具体用法见 [全局配置](#/Develop/Config)\n\n\n## # UF.load()\n\n载入自定义组件。如果已有组件不能满足日常开发，也支持使用 React 开发的自定义组件，在使用前把自定义组件加载到组件库中，即可和其他组件一样使用。\n\n```javascript\nUF.load({mycomponent: window.myComponet})\nUF.init({\n    type: 'mycomponent'\n}, '#test');\n```\n\n> 另一种加载自定义组件的方法见：[`plugins`](#/Develop/Config/-plugins)\n\n\n## # UF.message()\n\n用于全局展示操作反馈信息。详见 [Message 全局提示](#/Feedback/Message)\n\n## # UF.notification()\n\n用于全局展示通知提醒信息。详见 [Notification 通知提醒框](#/Feedback/Notification)\n\n\n## # UF.moment()\n\n时间处理工具，可以用于做时间格式的各种转化、时间的加减法操作、验证等。具体可见：[Moment](http://momentjs.cn/docs/#/parsing/)、 [操作](http://momentjs.cn/docs/#/manipulating/)\n\n例如：`UF.moment(1508294887034).format('YYYY-MM-DD hh:mm:ss')`、`UF.moment(1508294887034).add(7, 'days')`\n\n\n## # UF.utils\n\n工具函数。包含`typeof`、`uniqueId`、`hash`、`copy`、`clone`、`merge`、`filter`等。\n\n\n---\n** *component 为通过`UF()`获取的组件实例。以下为实例的一些API：* **\n\n---\n\n## # component._root\n\n每个组件都有`_root`属性，可以通过此属性来获取当前模块的参数信息，访问到从模块之外传递给模块的参数，例如：路由信息，路由参数等等。\n\n多使用其中的`_root.props`参数，例如获取当前页面的路由信息：\n\n```javascript\ncomponent._root.props.routes\ncomponent._root.props.location\ncomponent._root.props.params\n...\n```\n\n## # component.get()\n\n`component.get(key)`获取组件的参数。\n\n如果有key，则返回key的值；如果没有key，则返回全部参数。\n\n> key 可以有层级，例如：`component.get('source.params')`可以获取组件的 source.params 配置\n\n例如 [Progress 进度条](#/Feedback/Progress) 第5个demo：\n\n```javascript\nvar config = [\n    {\n        type: \"progress\",\n        mode: \"circle\",\n        name: \"my-progress\",\n        percent: 10\n    },\n    {\n        type: \"button-group\",\n        content: [\n            {\n                type: \"button\",\n                icon: \"minus\",\n                onClick: function(v) {\n\t                var progress = UF('my-progress');\n\t                var current = progress.get('percent');\n\t                progress.set({\n\t                    percent: current - 10\n\t                });\n\t            }\n            }\n        ]\n    }\n];\nUF.init(config, '#demo');\n```\n点击减号时，`progress.get('percent')`即为获取 my-progress 的percent值，并重新给组件设置新的值。\n\n\n## # component.set()\n\n`component.set(object)`重新设置组件的参数。object 为组件的参数列表。用法如上面的demo中用法。\n\n> tips： 需要注意的一点是，部分属性是一次性的，例如声明周期函数`afterCreate`、`source`系列属性等，一旦组件渲染完成，再次调用`set`函数设置新值不会生效。\n\n\n## # component.hide()\n\n`component.hide()`可以隐藏组件。\n\n\n## # component.show()\n\n`component.hide()`可以重新展示组件。\n\n## # component.reload()\n\n`component.reload()`可以控制组件重新获取数据（和`source`属性配合）。\n\n## # component.refresh()\n\n`component.refresh()`刷新组件。\n\n## # component.loading()\n\n`component.loading([boolean|config])`可以控制组件是否展示loading效果。\n\n参数有如下几种情况：\n\n* 不传参时，认为传入的是`true`，即展示loading；  \n* 传入`false`时，则取消loading状态；\n* 传入一个对象时，认为是展示loading状态，并把对象作为loading的配置传给`Loading`组件\n\n\n\n**此外，组件本身具有的api可到组件文档页查询**\n"

/***/ }),
/* 250 */
/***/ (function(module, exports) {

	module.exports = "每个组件都具有的参数，以及具有特殊功能的参数，没有在各个组件中详细说明，统一在此列出。\n\n## 几个 \"通用参数\" 简介\n\n属性|说明|类型\n----|----|----\n[type](#/Params/-type) |  组件类型  | string\n[content](#/Params/-content) |  子组件内容  | string&#124;config\n[name](#/Params/-name)  |  组件名称，唯一  | string\n[style](#/Params/-style)  |  组件样式  | object\n[hidden](#/Params/-hidden)  |  隐藏组件  | boolean\n[className](#/Params/-classname-class)  |  样式类名称  | string\n[childrenHolder](#/Params/-childrenholder)  |  子模块展示位置  | true\n[authority](#/Params/-authority)  |  权限绑定  | string\n[controlled](#/Params/-controlled)  |  声明组件为完全受控组件  | boolean\n[source](#/Params/-source-)  |  异步获取数据  | url[string]&#124;object\n[api](#/Params/-api-)  |  异步提交数据  | url[string]&#124;object\n[control](#/Params/-control-)  |  组件交互  | target[string]&#124;object\n\n#### # type \n`string`\n\n每个组件都有一个type属性，声明是什么类型的组件，type的格式为中横线连接的小写字母，每个组件文档中的属性列表之前都以组件type命名\n\n例如：[Input 输入框](#/DataEntry/Input)中，共包含四个可用组件，type分别为：input、textarea、input-search、input-group\n\n> 有些组件是和其他组件嵌套组合使用的，例如`input-group`，要以多个`input`组件作为子组件使用，本身只有一个可用属性\n\n#### # content \n`string` | `config`\n\n子组件配置。\n\n会嵌套在当前组件的相应位置（需要组件本身支持嵌套子组件，大部分组件支持）\n\n#### # name \n`string`\n\n每个组件都可以有一个`name`属性，用于作为组件的“唯一标识”，可以通过`UF()`来获取并操作此组件。\n\n> 注意，name不能重复，如重复了后生成的组件会覆盖先生成的组件，导致不能再获取到\n\n#### # hidden \n`boolean`\n\n设置组件为默认隐藏，可以通过对组件调用`show()`函数使组件重新展示\n\n\n#### # style \n`object` | `string`\n\n因为底层使用的是React，所以此处建议遵照React的用法：style为一个对象，对象的属性名称使用驼峰命名法\n```javascrpit\nstyle: {\n    marginTop: '16px',\n    fontSize: '12px'\n}\n```\n\n当然，为了兼容使用习惯，style也可以按照html里的内联样式写法来写，此时style为一个字符\n```javascript\nstyle: 'margin-top: 16px; font-size: 12px;'\n```\n\n#### # className \n`string`\n\n和上面的`style`属性类似，className为React中对于元素的类名的推荐用法，这里推荐使用`className`定义元素的类名\n```javascript\n{\n    type: 'div',\n    className: 'my-div'\n}\n```\n为了兼容使用习惯，也可以按照写html时的使用习惯使用class来定义元素类名\n```javascript\n{\n    type: 'div',\n    class: 'my-div'\n}\n```\n\n#### # childrenHolder \n`[boolean] true`\n\n配合路由使用，声明模块所在路由中 子路由对应的组件 会渲染到当前模块的 childrenHolder 所处位置。具体用法可见 [项目开发](#/Develop/Install) 中`app.js`模块的用法\n\n\n#### # authority\n\n给组件绑定权限点，当有权限点相关权限的时候组件才会展示\n\n\n#### # controlled\n\n声明组件为完全受控组件，比如`Popconfirm`等组件的visible属性，或者输入框的value等，这些可变值皆为受控属性。\n\n拿`Popconfirm`组件举例，除了手动控制visible可展示出提示信息外，当点击组件时提示信息也会展示；当点击确认或取消时，提示信息会隐藏。但当设置`controlled`为true时，不会再有默认行为，提示信息的显示隐藏完全由用户手动设置`visible`属性来控制。\n\n\n#### # source 系列参数\n\n`string` | `object`\n\n开发时经常会有一些是需要**`异步获取数据`**再展示的，框架提供了一套自动获取数据、处理数据、赋值给某个属性的整套机制。\n\n目前，全部组件都具备获取数据的能力。只需配置 source 参数即可，无需显示的写ajax逻辑，框架自动组件渲染时触发ajax请求。\n\nsource 参数可以是字符串，直接声明获取数据的地址，其余参数全部为默认值。  \n也可以为一个对象，对象中的各个参数如下：\n\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|------\nurl    | 异步获取数据的接口 | string |  必填\ncache    | **开启缓存**，重复请求再次获取时会直接从缓存读取 | boolean | false\nlocalStorage | **开启永久缓存**（刷新页面缓存不会消失），从而加快组件首次渲染速度，常用于加快首屏速度。注意控制数据量，防止localstorage超出限定。具体原理见表格下面说明 | boolean&#124;string | false\nrequestMerge | 开启请求合并（默认），多个重复请求先后同时触发时，会合并成一个请求。具体效果同[UF.ajax](#/Api/requestmerge-)中的示例 | boolean | true\nmethod    | ajax方式：`post`、`get`等 | string | 'get'\nparams | 请求数据时携带的参数 | object | \nparamsHandler | 请求数据前，对全部参数进行处理。应用场景如：组件自带的 page/size 等参数不符合接口规则，需要格式化 | function(params) {} | \nparamIndex  | 更改请求中的参数键名，处理顺序在执行`paramsHandler`之前，例如：`{page: 'pageNum', size: 'pageSize'}`  | object    |  |\ninterrupt | 中断请求的钩子函数。具体用法见下面介绍 | function(conf) {} | \nremoveEmptyParams | 自动移除为空的属性 | boolean | true\ntarget | 定义数据处理好后赋值的属性（一般有默认的初始值，除非需要自己定制，否则不需要设置此属性）。当为空时，结果直接作为set的参数设置个组件（同时设置多个属性） | string | 不同组件的默认属性不同，可视情况主动声明\nhandler | 接口数据返回后的处理函数（如果数据无需格式化可以不设置此属性），函数最终返回格式化后的数据。 | function(data, res) {} |\nonSuccess | 请求数据成功后的回调函数（与handler的区别是，handler用于处理返回数据，处理完后即执行绑定的默认处理逻辑，onSuccess为默认处理逻辑处理完后执行的额外操作） | function(data, res) {} |\nonError | 请求数据失败的回调函数 | function(res) {} |\nautoLoad | 组件首次渲染时自动获取数据，仅创建组件时有效。组件创建完成后，通过 autoReload 属性控制 | boolean | true\nautoReload | 自动重新获取数据。不同取值时，自动获取数据的时机不同，详见表格下面说明 | boolean&#124;`'never'`&#124;`'set'` | false\nshowLoading | 拉取数据时展示loading效果。也可以是一个`loading`组件的配置，对loading效果进行定制。部分输入型组件也可以配置为'simple'，会有更简单的loading效果 | boolean&#124;`config`&#124;'simple' | false\n\n\n> * `hanlder`函数的参数：`data`参数为接口返回数据，`res`参数为接口返回的全部内容（按照ajax的[固定规则](#/Api)）。  \n> * `target`属性：一些数据录入型组件做了定制(见文档)，例如`select`的target为`options`、`input`等的target为`value`，其他组件默认为`children`/`content`（可以先看是否符合预期在确定是否需定制）\n> * `autoReload`属性：自动重新加载有几种不同的等级，对应参数值依次为（从上到下，刷新频率依次降低）：\n> > *  1、true: 范围最宽，source参数变动、自身set source参数、父组件刷新都会触发\n> > *  2、'set': source参数变动、自身set source参数都会更新\n> > *  3、false: 只有params或者source变化时才会更新\n> > *  4、'never': 则永远不更新，除非手动调用 reload 函数\n> * `interrupt`属性：中断请求的钩子函数。可以当符合某些条件时中断请求，执行自定义处理：\n> > *  1、可以通过返回数据，中断请求，从而使用钩子返回的数据；\n> > *  2、如果钩子未返回任何内容，或返回true，则请求继续；\n> > *  3、如果钩子返回false，则仅中断请求，不做任何处理；\n> * `localStorage`属性：开启永久缓存\n> > 数据获取后，会进行持久化存储。当下次再需要此数据时，会先读取缓存内容并返回给组件使用；同时发起请求尝试进行数据获取，获取回数据后，如果数据进行了更新，会再次调用success函数将新数据传递给组件，并更新缓存，否则不再进行处理。藉此可以使得组件首次加载时无需等待接口返回数据即可渲染出内容供用户使用，并在接口返回数据更新时自动对页面内容进行更新。多用于加速首屏渲染速度\n\n\n下面为一个使用场景较复杂的`下拉框`实现。\n\n首先`下拉框`的数据为异步获取，其次接口需要的参数不是固定值（从路由处获取到的id），返回数据不符合标准需要额外处理，可以配置如下：\n\n```javascript\n// 示例1：\n{\n    type: 'select',\n    source: '/uf/docs/php/data.php',\n}\n// 示例2：\n{\n    type: 'select',\n    source: {\n        url: '/uf/docs/php/data.php',\n        params: {},\n        hanlder: function (data, res) {\n            return data.map(function (v) {\n                return {value: v.name, label: v.name};\n            }\n        },\n        onError: null\n    },\n    beforeCreate: function (props, self) {\n        props.source.params = {id: self._root.props.params.id};\n        return props;\n    }\n}\n```\n\n组件渲染之前会先执行`beforeCreate`函数（见下面【组件生命周期】），从路由参数中获取 id 赋给 params 属性，配置中的 params 由`{}`变为`{id: 1}`；然后组件渲染完成后，开始异步获取数据；获取数据完成后会先调用`hanlder`对返回的数据进行处理，最后数据会填充到`target`属性定义的组件的`options`上去，就完成了下列框数据异步加载的功能。\n\n\n#### # api 系列参数\n\n`string` | `object`\n\n日常项目中，难免遇到各种和后端交互的情况：简单到点击某个按钮，会向后端发送一个请求；复杂点的情况，弹框表单用于录入数据，录入完成后把数据提交到后端。\n\n目前，全部组件都具备**`提交数据`**的能力。只需配置 api 参数即可，无需显示的写ajax逻辑，框架自动再某些条件满足时触发ajax请求。\n\napi 参数可以是字符串，直接声明提交数据的地址，其余参数全部为默认值。  \n也可以为一个对象，对象中的各个参数如下：\n\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|------\nurl    | 提交数据的接口 | string | 必填\nmethod    | ajax方式 | string | 'post'\nshowLoading  | 展示loading效果 | boolean | `true`\nparams | 提交数据时发送的默认参数（注意：这只是初始化参数。例如和form弹框配合时，会被form的录入的数据覆盖。） | object |\nparamsHandler | 提交数据前对数据进行处理，函数返回的结果作为ajax的参数发送 | function(params) {} |\nremoveEmptyParams | 自动移除为空的属性 | boolean | true\ntrigger | 触发条件。即什么事件触发时，进行api逻辑的执行。例如：`onClick`、`onSubmit` | string | 各个组件默认不同\nonSuccess | 提交数据后，成功的回调函数。用法和`ajax`的回调函数一致 | function(data, res) {} |\nonError | 提交数据后，失败的回调函数 | function(data, res) {} |\n\n以下为一个具备提交数据功能的简单表单，点击提交时，组件会把表单里的内容全部发送到api指定的接口：\n```javascript\n// 示例1：\n{\n    type: 'form',\n    layout: {type: 'inline'},\n    items: [\n        {type: 'input', name: 'name', label: '姓名：'},\n        {type: 'button', mode: 'primary', name: 'submit', action: 'submit', content: '提交'}\n    ],\n    api: 'http://uf.baidu.com/docs/php/submit.php'\n}\n// 示例2：\n{\n    type: 'form',\n    layout: {type: 'inline'},\n    items: [\n        {type: 'input', name: 'name', label: '姓名：'},\n        {type: 'button', mode: 'primary', name: 'submit', action: 'submit', content: '提交'}\n    ],\n    api: {\n        url: 'http://uf.baidu.com/docs/php/submit.php',\n        paramsHandler: function (params) {\n            return {newName: params.name, age: 18};\n        },\n        onSuccess: function () {\n            UF.message.success('保存成功');\n            return false;\n        }\n    }\n}\n```\n更多使用例子可见 [Modal组件](#/Custom/Modal) 带提交功能的弹框表单\n\n\n#### # `control` 系列参数\n\n`string` | `object` | `array`\n\n日常应用中，经常会用到一个组件事件触发时，调用另一个组件的函数或者改变另一个组件的值的情况。例如带有高级查询功能的一个表格展示页面，当点击高级查询的查询按钮时，把表单里的数据传递给表格并使其刷新。\n\n全部组件都具备**`控制其他组件`**的能力。通过配置 `control` 参数，声明交互方式、操作目标等，无需再显示的写获取组件、操作组件等逻辑，在某些指定的条件下会自动触发指定的操作。\n\ncontrol 参数可以是字符串，直接声明要操作的目标，其余参数全部为默认值。  \n也可以为一个对象，对象中的各个参数如下：\n\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|------\ntype    | 声明交互方式。可选值为：`call`-函数调用、`assign`-组件赋值 | string | 默认根据`target`属性为函数还是属性动态变化\ntrigger    | 触发条件（事件名称）。例如：onClick、onSubmit（Form） | string | 普通组件:`onClick`; 输入型组件:`onChange`; Input为`onPressEnter`; Form、Modal为`onSubmit`\ntarget    | 操作目标。可以为组件暴露的API，或者组件的配置属性 | string&#124;Array | 必填\nparams    | 第一种使用场景：为函数调用时传递的参数，`array`类型 | array | \nparams    | 第二种使用场景：为组件赋值时额外赋值参数，`object`类型； | object | \nhandler    | 绑定到事件上的处理逻辑，函数返回的内容作为赋值结果赋值到`target`指定的组件配置上。*（仅`赋值`类型可用）*  | function(...params, target) {} | 普通组件:无返回值; 输入型组件:`组件的当前值`\n\n> target 可以为一个数组，指定同时操作多个组件\n\n以上面提到的使用场景为例——带有高级查询功能的一个表格场景：\n\n```javascript\n[\n    {\n        type: 'form',\n        layout: {type: 'inline'},\n        items: [\n            {type: 'input', name: 'name', label: '机房名称：'},\n            {type: 'button', mode: 'primary', name: 'submit', action: 'submit', content: '查询'}\n        ],\n        // control: 'newtable.params' // 最简用法\n        control: {\n            type: 'assign',\n            trigger: 'onSubmit',\n            // 同时修改 newtable 的 source 等参数\n            params: {\n                source: 'http://uf.baidu.com/docs/php/data.php?type=1'\n            },\n            target: 'newtable.params'\n        }\n    },\n    {\n        type: 'table',\n        name: 'newtable',\n        columns: [\n            {title: 'ID', dataIndex: 'id'},\n            {title: '机房', dataIndex: 'name'},\n            {title: '地区', dataIndex: 'region'},\n            {title: '描述', dataIndex: 'description'}\n        ],\n        source: 'http://uf.baidu.com/docs/php/data.php',\n        params: {}\n    }\n]\n```\n示例中，首先配置了两个独立的组件：form、table，然后给form组件额外配置了一个`control`属性，属性值指向了 name 为'newtable'的组件的'params'属性。组件判断目标是一个组件配置属性，所以默认type为`assign`，即进行赋值操作。table的params更新后，会自动触发自己的刷新功能，重新拉取数据，并携带上刚刚设置好的params参数。\n\n示例2，`call`的用法：\n\n```javascript\n\n```"

/***/ }),
/* 251 */
/***/ (function(module, exports) {

	module.exports = "其他一些使用上的细节说明。\n\n## 组件生命周期\n\n配置中的每个组件从创建到销毁都具有一个生命周期，如果想要把某些逻辑和组件的生命周期相关联，则可以配置如下函数：\n\n* `beforeCreate`: 组件生成到页面之前执行\n* `afterCreate`: 组件生成到页面之后执行\n* `beforeRender`: 组件每次刷新之前执行（包括首次生成）\n* `afterRender`: 组件每次刷新之后执行（包括首次生成）\n* `beforeDestroy`: 组件销毁前执行\n\n例如，可以在下拉列表加载后，向后端获取下拉列表中展示的数据：\n```javascript\n{\n    type: 'select',\n    afterCreate: function(select) {\n        UF.ajax({\n            url: '/uf/docs/php/data.php',\n            success: function(data) {\n                var options = data.map(function(v) {\n                    return {value: v.name, label: v.name};\n                });\n                select.set({options});\n            }\n        });\n    }\n}\n```\n\n**两个`before`函数是在组件渲染/刷新之前执行，所以可以用于对参数进行修改**\n\n* beforeCreate(params)\n* beforeRender(params)\n\n`params`为组件现有参数（包含配置的和默认的参数）。可以根据需要变更参数然后把新的`return`。\n\n例如，可以在组件渲染前，把组件的 title 改为路由传入的值。\n\n```javascript\n{\n    type: 'card',\n    name: 'my-card',\n    title: '标题可以跟着路由变化：/card2/card3/标题',\n    loading: true,\n    beforeCreate(params, self) {\n        params.title = self._root.props.params.title || params.title;\n        return params;\n    }\n}\n```\n\n> 注意：`beforeRender`触发次数较多，注意不要造成性能问题\n\n\n**关于生命周期函数的参数**\n\n为了方便使用，生命周期函数的参数中，全部在最后追加了一个参数，为组件自身，可以在函数中用来调用组件自身的`set`、`get`函数等，无需再写获取当前组件的逻辑。\n\n例如上面`beforeCreate`的示例代码，`self`和`UF('my-card')`等价。\n\n> tips： 有些组件的参数较多，可以先使用`console.log`打印出来确认，再使用\n\n"

/***/ }),
/* 252 */
/***/ (function(module, exports) {

	module.exports = "\n## html 组件\n\n`type`为`html`的组件，`content`属性为一段html代码。为了方便大块自定义内容。\n\nhtml代码会被一个`<section>`标签包裹，为了方便定义样式，html 组件还支持`style``className`属性，自定义外层样式。\n\n\n\n## 引入自定义组件\n\n方法1：`UF.load()`\n\n如果已有组件及配置实在无法支持当前的业务逻辑，也可以某一部分使用React进行开发，然后作为一个新自定义组件引入到项目中使用。具体用法请联系 [liuzechun](baidu://message/?id=861260447)\n\n方法2：`UF.config({plugins: []});`\n\n使用插件的加载方式，见 [Plugins](#/Develop/Config/-plugins)\n\n\n## 强制使用原生标签\n\n可以通过在组件type前面增加`o-`来强制使用原生标签，例如：`o-table`"

/***/ }),
/* 253 */
/***/ (function(module, exports) {

	module.exports = "\n## 关于组件中获取 路由 携带的数据\n\n最常用的场景是：点击列表页的查看详情，页面跳转到详情页面，一般会在url上携带详情页的id等信息，如：`/blog/101`\n\n那么，具体在项目中如何使用呢：\n\n#### 用法一：\n\n**1、首先配置路由如下：**\n```javascript\n{\n    path: 'blog/:id',\n    component: require('blog/details'),\n    breadcrumbName: '详情'\n}\n// 也可以有多个参数\n{\n    path: 'blog/:type/:id',\n    component: require('blog/details'),\n    breadcrumbName: '详情'\n}\n```\n`:xxx` 格式为定义的参数，和其他语言用法基本一致，也可以有多个参数。\n\n**2、再来看 blog/details 模块中参数的用法**\n\n此处举个最简单的例子，在details中把路由中传递的参数展示出来：\n\n```javascript\ndefine(function (require) {\n    return function(params, detials) {\n        return {\n            type: 'card',\n            title: '详情页：',\n            content: 'id为：' + params.id\n        }\n    };\n});\n```\n\n如上，本来一个普通的组件是直接 return 一个组件配置的。不过框架也提供了可以返回一个函数，函数内部再返回组件配置。如此，函数会传入两个参数：`params`、`detials`。\n\n> `params`为路由上传入的参数，如上如果多个参数，则params内包含多项；  \n> `detials`为包括params在内的更多路由信息，比如当前路由路径的\n\n#### 用法2：\n\n调用`UF.getRouter()`函数获取参数\n\n```javascript\ndefine(function (require) {\n    return function() {\n        return {\n            type: 'card',\n            title: '详情页：',\n            content: 'id为：' + UF.getRouter().params.id\n        }\n    };\n});\n```\n\n\n## 关于 Ajax 中的 error 配置\n\n使用 `UF.ajax`、`source`系列参数、`api`系列参数时，如果不配置`error`之类的错误处理函数，会有默认的处理逻辑把错误报出来。\n\n可以通过配置`error`函数加入自己错误处理逻辑。如果自定义的错误处理函数没有任何返回结果，或者返回的不为`false`，则依然会执行默认的错误处理逻辑把错误报出来。只有当`return false;`时，才会阻止执行默认报错逻辑（有点像dom中的阻止事件冒泡）。\n\n如下，当获取数据出错时，只会再控制台打印出错误信息，不会再给用户提示：\n```javascript\n{\n    source: {\n        url: '/uf/docs/php/data2.php',\n        onError: function (res) {\n            console.log(res);\n            return false;\n        }\n    }\n}\n```"

/***/ }),
/* 254 */
/***/ (function(module, exports) {

	module.exports = "\n### 发布周期\n\n* 修订版本号：带有新特性的不向下兼容的版本\n* 次版本号：含有破坏性更新和新特性，不在发布周期内。\n* 主版本号：含有破坏性更新和新特性，不在发布周期内。\n\n* 🌟 新增\n* 🐞 修复\n* 🎨 调整\n* 📖 发布\n* 🙅 移除\n\n- - -\n\n### 0.4.0\n\n`2019-01-10`\n\n* 🐞 修复`Form`组件中表单项使用`authority`属性时报错问题\n\n\n`2019-01-04`\n\n* 🌟 UF上增加函数`UF.unrender`，用于主动销毁通过`UF.render`或`UF.init`渲染到页面上的组件，详见[交互API](#/Api)\n\n\n#### # 重要变化\n\n* `@ 2019-01-01`新年新气象，`UF 0.4.0` 版本上线啦~\n* `React`由版本`15.6.0`升级到了`16.7.0`\n* 发布了新组件库 `uf-mobile`，用于手机端的开发，详见 [文档](/mobile)\n\n\n---\n\n\n### 0.3.0\n\n`2018-12-31`\n\n* ##### 新增组件\n    * 🌟 新增`Drawer`组件，Modal组件的变种，侧拉弹出，[传送门](#/Custom/Modal)\n    * 🌟 新增`IconPlus`组件，可用于引入并使用大量外部图标，[传送门](#/General/IconPlus)\n    * 🌟 新增`UeditorParse`组件，对通过Ueditor编辑的内容进行展示\n    * 🌟 新增`TreeSelect`组件，树形选择框\n    * 🌟 新增`Dashboard`组件【内测中，暂无文档】\n    * 🌟 新增`Html`组件，替换原解析`type: html`的逻辑，以支持set等功能呢\n    * 🌟 新增`AutoComplete`组件，支持异步获取信息并自动补全，[传送门](#/DataEntry/AutoComplete)\n    * 🌟 可以通过在组件type前面增加`o-`来强制使用原生标签，例如：`o-table`\n    * 🌟 新增`List`组件，对单条数据进展展示，[传送门](#/Custom/List)\n    * 🌟 新增`Upload`组件，并支持在Form组件中使用，[传送门](#/DataEntry/Upload)\n* ##### `Table`组件相关\n    * 🌟 增加`column.authority`属性，支持根据权限点控制是否展示列\n    * 🌟 增加`column.exportRender`属性，用于处理导出数据时的数据处理\n    * 🌟 新增支持表头合并功能\n    * 🌟 新增`column.cellRowSpan`、`column.cellColSpan`属性，支持单元格合并\n    * 🌟 新增`keysHandler`参数，支持对批量操作弹框中的数据进行格式化处理，详见demo，[传送门](#/Custom/TableCrud)\n    * 🌟 字段翻译增加实时翻译功能，每次切换分页时动态获取翻译的值，[传送门](#/Custom/Table/-column-enum-)\n    * 🌟 新增`colunm.style`属性，可以自定义每列的样式，并可以使用函数动态生成\n    * 🌟 增加API`getValues`，用于获取表格当前的全部数据（原数据）\n    * 🌟 增加API`getDisplayValues`，用于获取表格当前的全部数据（包含翻译数据）\n    * 🌟 对`crud`进行扩展，增加支持非弹框形式的表单内容（可定义展示在表格头的前面或后面），[传送门](#/Custom/TableCrud)\n    * 🌟 新增`rowTooltips`、`rowTooltipsIcon`属性，用于展示额外提示信息\n    * 🌟 新增表头单字段过滤功能可用于后端分页的情况\n    * 🌟 新增`rowTooltips`属性，支持给每一行配置一个信息提示按钮\n    * 🌟 新增属性`pagination.layout`，用于控制分页展示位置\n    * 🌟 新增属性`pagination.paramIndex`，用于更改传给后端的分页参数名称\n    * 🌟 增加`column.enum.allowEmpty`字段，可控制当数据不在枚举类型中时，展示源数据\n    * 🌟 翻译字段翻译的结果转存到原每行数据对象中（命名规则：`${dataIndex}_fyi`），可供模糊搜索或展示详情使用\n    * 🌟 增加`crud.details`，可通过简单配置实现展示详情效果（自动对翻译字段进行处理）\n    * 🌟 增加展开全部扩展项按钮。当配置了`expandedRowRender`时，自动在表头添加展开全部按钮\n    * 🌟 `crud`属性里的form表单，可以不用配置label属性，自动复用表格的columns.title属性\n    * 🌟 新增`title.switchTags.cache`属性，支持配置取消永久保存用户自己选择的展示字段（默认保存）\n    * 🌟 新增`colums.enum`属性，支持配置某些字段为枚举类型，字段展示的内容根据列表里的内容进行转换；同时，枚举的数据列表支持通过接口获取，[传送门](#/Custom/Table/-column-)\n    * 🌟 `colums.enum`属性功能增强，相应字段自动更新到新增/编辑的表单中的对应组件中；批量新增/批量编辑会自动对数据进行转换。\n    * 🌟 新增`doubleClickEdit`属性，配置双击行时进行编辑，需配合`crud.edit`\n    * 🎨 实时翻译功能，增加对翻译字段值进行去重处理\n    * 🎨 针对实时翻译字段，移除批量编辑后提交时将内容重新转换为ID的功能\n    * 🎨 调整params参数和source.params的合并逻辑\n    * 🎨 修改`rowKey`相关逻辑，当属性为函数时，依然可使用全选等功能\n    * 🎨 移除提交编辑表格时额外传给后端的翻译字段\n    * 🎨 增强属性`footer`，除函数外，也可以直接使用配置对象\n    * 🎨 对扩展内容相关属性进行归类，统一置于`expanded`属性下（兼容原用法）\n    * 🐞 修复`Table`组件中的`column.sorter`属性不可用问题\n    * 🐞 修复批量编辑弹框报错时，弹框直接关闭无法继续编辑问题\n    * 🐞 修复模糊搜索对某些复杂的数据结构的字段不支持的问题\n    * 🐞 修复修改展示列后刷新表格，展示列还原问题，[uf-233](http://newicafe.baidu.com:80/issue/uf-233/show?from=page)\n    * 🐞 修复设置完分页后再次进行搜索，分页pageSize会自动重置的问题，[uf-232](http://newicafe.baidu.com:80/issue/uf-232/show?from=page)\n    * 🐞 修复更新`params`参数时，仅删除字段表格不会自动刷新问题，[uf-157](http://newicafe.baidu.com:80/issue/uf-157/show?from=page)\n    * 🐞 修复组件的`crud`功能按钮点击无效问题\n    * 🐞 修复`Table`表格内编辑按钮弹框的数据不更新问题，[uf-144](http://newicafe.baidu.com:80/issue/uf-144/show?from=page)\n    * ⚙ 改造内部代码，更改获取source的时机，复用BaseComponent的逻辑\n* ##### `Form`和`Forms`相关\n    * 🌟 新增`operation`属性，支持自定义控制新增/删除的操作按钮，并可以绑定事件\n    * 🌟 增加API：`getDisplayValues()`，可用于获取整个表单中各项的展示值\n    * 🌟 增强`layout.column`布局用法，items中可以夹杂null作为占位符，[传送门](#/Custom/Form/-layout-)\n    * 🌟 `Form`组件联动功能增强，增加特殊值：`:value`/`:label`/`:old`，并可支持使用表达式，[传送门](#/Custom/Form/-join-)\n    * 🌟 新增支持使用非输入型组件做布局/展示等功能\n    * 🌟 新增`mode`属性，可以以表格的方式展示复制新增表单，[传送门](#/Custom/Forms)\n    * 🌟 增强`addType`属性，可以设置为`false`以关闭新增/删除功能\n    * 🌟 增加API: `resetItem()`，用于重新设置某个表单项的配置\n    * 🌟 表单项的值根据default或者rules.type自动格式化，例如select传入boolean型的值的情况\n    * 🎨 `Form`组件修改join参数为函数时的参数列表\n    * 🎨 优化布局逻辑，当使用`layout.column`进行布局时，当最后一行的列数不够时，自动补齐空的列\n    * 🎨 优化`resetItem`API，通过函数更新表单项时，会触发join效果\n    * 🐞 修复`Form`组件中按钮的onClick事件触发两次的问题\n    * 🐞 修复组件中的`range-picker`表单项defaut置为current未转换问题\n    * 🐞 修复同时设置`default`属性和`formData`时，formData的值不生效问题，[uf-180](http://newicafe.baidu.com:80/issue/uf-180/show?from=page)\n    * 🐞 修复更新`items`中的内容（传入新的参数）时，在表单中不生效问题，[uf-156](http://newicafe.baidu.com:80/issue/uf-156/show?from=page)\n    * 🐞 修复多级联动无效问题，[uf-147](http://newicafe.baidu.com:80/issue/uf-147/show?from=page)\n    * 🐞 修复resetValues给组件时，原display为false的字段无法设置入新值的bug，[uf-140](http://newicafe.baidu.com:80/issue/uf-140/show?from=page)\n    * 🐞 中使用级联框时，选择后失去焦点后输入框清空bugfix，[uf-135](http://newicafe.baidu.com:80/issue/uf-135/show?from=page)\n    * ⚙ 调整`Forms`组件内部逻辑，内部继承Form组件\n* ##### `Export`组件相关\n    * 🌟 增加`renders`属性，用于处理导出数据时的数据处理\n    * 🎨 优化剩余时间展示效果\n    * 🐞 修复不支持set data 的问题\n    * 🐞 修复同步导出不可用问题\n* ##### `Button`组件相关\n    * 🌟 新增属性：`activedChildren`、`unActivedChildren`，用于控制按钮的两种状态\n    * 🌟 新增属性`active`、`actived`，可给按钮增加状态控制，并可以通过点击来切换状态\n* ##### `Select`组件\n    * 🌟 增加API:`getSelectedOption`，用于获取当前选中选项上的全部属性\n    * 🌟 `Select`组件的`defaultFirst`属性支持在`combobox`和`multiple`模式下使用\n    * 🌟 增加属性:`extOptions`，增加options之外额外增加的选项（置于选择列表最前面），例如'ALL'选项\n    * 🌟 增加API:`selectAll`，多选模式下，可调用函数进行全选\n    * 🌟 `Select`/`CheckboxGroup`组件增加参数`defaultSelectAll`，异步获取options时，可以设置获取回数据后默认全选\n    * 🎨 优化组件，当通过`set`方式更新options属性时，也会进行是否需要清除当前选中数据的判断\n* ##### 通用属性或配置\n    * 🌟 新增`source`功能支持：当`target`为空时，同时设置多个属性\n    * 🌟 新增属性`source.paramIndex`，用于更改发送请求前更改传给后端的参数名称，例如修改默认传递的分页参数的键名\n    * 🌟 受控组件增加`controlled`属性，用户可通过设置属性为true阻止默认控制逻辑，使组件完全受用户控制\n    * 🌟 增加`ajax.interrupt`属性，用于中断请求自定义请求返回的数据的钩子函数，可以用户数据校验等功能\n    * 🌟 `Ajax`支持使用`axios`库发送数据，详见`useAxios`参数[传送门](#/Api/-uf-ajax-params-)\n    * 🌟 新增`source.removeEmptyParams`参数，可配置自动移除为空的参数，默认开启，[传送门](#/Params/-source-)\n    * 🌟 新增通用属性`hidden`，所有组件可以配置`hidden`属性设置组件为隐藏，并可以是用`show()`函数展示出组件（或是用`set()`）\n    * 🌟 组件函数如`set`、`show`、`loading`等没返回值的函数支持链式调用，如：`uf('comp').show().loading()`\n    * 🌟 全部`输入型组件`增加API：`getDisplayValue()`，当实际值和展示值不一致时，可用于获取展示值（比如获取下拉框展示在页面上的值）\n    * 🌟 新增全局配置项`plugins`，指定加载额外插件，[传送门](#/Develop/Config/-plugins)\n    * 🌟 全局配置项`components`功能增强，支持异步加载组件配置\n    * 🌟 新增全局配置项`global.mock`，提供Mock数据功能，[传送门](#/Develop/Config/-global-mock-)\n    * 🎨 `global.mock`模拟数据功能升级，支持带动态参数的url\n    * 🎨 增强`source.autoReload`内部逻辑，增加对属性值`'never'`和`'set'`的支持\n    * 🎨 增强`uf.config.data`的应用场景，data中设置的全局变量，可以在url中作为动态参数使用，[传送门](#/Develop/Config/-data)\n    * ⚙ 调整API`show()`、`hide()`内部实现逻辑，使用`hidden`属性\n* ##### 其余更新\n    * 🌟 `Sider`组件、`Header`组件新增属性`theme`增加，可和`Menu`组件的theme配合使用\n    * 🌟 `AutoComplete`组件增加属性`startSign`，用于控制补全触发时机\n    * 🌟 `AutoComplete`组件属性`mode`增加可选值`select-only`，指定补全组件仅可选择（不可任意输入）\n    * 🌟 `UF.ajax`增加参数`localStorage`，可配置对某个请求的结果进行永久保存（localStorage），下次调用时，优先取缓存数据，[传送门](#/Api/-uf-ajax-params-)\n    * 🌟 `message`、`notification`组件新增属性`autoMerge`，默认自动合并内容相同的提示信息\n    * 🌟 `Collapse`组件增加API：`open`、`close`，可以用于便捷的控制某个面板的开关\n    * 🌟 `Modal`组件新增`posRank`属性，可自定义弹框中展示内容的排列顺序。[传送门](#/Custom/Modal/modal-)\n    * 🌟 `Tree`组件升级，支持通用source用法；且当异步获取子树返回为空时，当前节点自动置为叶子节点\n    * 🌟 `SiderTrigger`组件增加`reverse`属性\n    * 🌟 `Router`组件支持惰性加载，只需把`component`参数写成模块路径即可\n    * 🎨 `Ueditor`默认字号改为12px\n    * 🎨 修改`Menu`及`Sider`主题样式\n    * 🎨 `Iframe`修改loading效果，改为右上角小菊花转动\n    * 🎨 `Echarts`组件，改为自动惰性加载依赖库(支持 3.x 和 4.x 版本)，无需使用前手动script引入库文件\n    * 🎨 `Ueditor`组件，改为自动惰性加载依赖库，无需使用前手动script引入库文件\n    * 🐞 修复使用`beforeCreate`,`beforeRender`处理并返回参数时，事件函数会被覆盖的问题\n    * 🐞 修复`ajax.url`中只能使用一个变量的问题\n    * 🐞 修复`Modal`组件通过`create()`等函数直接创建的弹框中的配置，使用`source`等属性是，url不会复用config中定义的baseUrl\n    * 🐞 修复`message`、`notification`组件不会复用config中定义的baseUrl\n    * 🐞 修复`DatePicker`组件直接点确定按钮不会自动选中当前日期的问题，[uf-183](http://newicafe.baidu.com:80/issue/uf-183/show?from=page)\n    * 🐞 修复`Radio`等输入组件当value为以0为代表对应布尔值为false的值无效问题（会被置为undefined导致在form中设置的default无效），[uf-148](http://newicafe.baidu.com:80/issue/uf-148/show?from=page)\n    * ⚙ 内部逻辑优化：外部刷新时，也只过滤出变化的数据进行__setProps（修复了select通过source获取options，外部刷新时组件选项会被清空的问题）\n    * ⚙ 内部调整，调整生成主题文件逻辑\n    * ⚙ 内部逻辑调整：将用户配置的全部函数的执行环境固定bind到配置本身承载函数的对象上，以支持函数可以使用`this`获取和自己同级的其他参数\n    * ⚙ 内部逻辑优化：移除部分无效`call(this)`函数\n    * ⚙ 调整检查是否更新的策略，解决仅更新函数时不生效问题\n    * ⚙ 调整内部实现，支持事件函数更新\n* ##### 发布\n   * 📖 在 **`资产监控平台`** 项目中投入使用\n\n\n#### # 重要变化\n\n* 用法上升级，支持使用UF产生uf实例，即一个页面上可以产生多个uf实例，并互不影响。同时，UF本身也是一个默认实例。[传送门](#/Api/-uf)\n\n---\n\n\n\n### 0.2.5\n\n`2018-07-10`\n\n* ###### `Tabs` 标签页\n    * 🌟 新增`forceRefresh`属性，支持配置每次点击Tab页时都强制刷新内容\n    * 🎨 调整组件用法，增加了`items`属性，替代`tab-pane`子组件，目前兼容原用法，详见组件[文档](#/DataDisplay/Tabs)\n* ##### 其余更新\n    * 🌟 新增通用API: `refresh`，可以强制刷新组件\n    * 🌟 新增用API: `reload`，可以使组件重新拉取数据\n    * 🌟 增加通用参数`source.autoReload`，组件刷新时自动重新获取数据，[传送门](#/Params/-source-)\n    * 🌟 增加通用参数`source.showLoading`，组件配置通过source属性获取数据时，可以自动展示loading效果，[传送门](#/Params/-source-)\n    * 🌟 新增公共API: `UF.getRouter`，用于随时随地或去当前页面的路由信息，[传送门](#/Api/-uf-getrouter-)\n    * 🌟 `Form`组件功能增强，`items`中支持配置非录入数据功能的组件（纯展示），[传送门](#/Api/-uf-ajax-params-)\n    * 🌟 Ajax的`url`参数可以使用动态参数，参数值从`params`中获取，[传送门](#/Api/-uf-ajax-params-)\n    * 🌟 面包屑`Breadcrumb`支持使用路由中的动态参数，[传送门](#/Navigation/Breadcrumb/-breadcrumbname-)\n    * 🐞 修复 `Modal` 组件的弹框表单中，表单域的`default`属性无效问题，[uf-126](http://newicafe.baidu.com:80/issue/uf-126/show?from=page)\n    * 🐞 修复`Input`组件设置为 number 类型时无法输入小数点的问题，[uf-123](http://newicafe.baidu.com:80/issue/uf-123/show?from=page)\n    * 🐞 修复 `Menu` 组件侧边栏收起时展开的子菜单不收起BUG\n    * 🐞 修复使用 `show`/`hide` api时控制台报warning的问题\n    * ⚙ 更新内部解析顺序，组件默认配置在生成组件前就已经获取到并进行merge了；且自定义组件也是在生成组件前进行处理，并转换成基础组件。\n    * ⚙ 对二次解析的属性进行存储、重命名并传入组件，方便后续重新解析刷新等操作\n    * ⚙ 改造内部代码，cwr中对组件是否需要刷新进行了调整（增加区分是否为内部调用的字段），source.autoReload参数可以影响组件刷新\n    * 🙅 移除通用属性`configTpl`，并支持在 $uf.config({components:{}}) 中配置自定义组件，并在项目中和其他组件相同方式使用。传送门\n\n\n\n\n### 0.2.4\n\n`2018-06-29`\n\n* ##### 更新内容\n    * 🌟 `Select`组件增加默认搜索时忽略大小写\n    * 🌟 增加`Form`针对传入的`formData`进行处理的函数：`formDataHandler`\n    * 🌟 全部组件增加函数函数：`loading()`，用于控制是否展示loading效果，[传送门](#/Api/-component-loading-)\n    * 🎨 调整`Select`组件，增加对多选情况的处理，[uf-115](http://newicafe.baidu.com:80/issue/uf-115/show?from=page)\n    * 🐞 修复 number 类型的输入框无法输入小数点的问题，[uf-123](http://newicafe.baidu.com:80/issue/uf-123/show?from=page)\n    * 🐞 修复`Form`数字类型的表单域，当输入字母时，会出现NaN卡死的情况\n    * 🐞 修复高级`Modal`中`form`配置了`beforeSubmit`后，提交的数据中依然有原来的数据的bug\n    * 🐞 修复`Echarts`快速/同时绘制多个时，后面的图表无法绘出问题\n    * 🐞 修复`Form`中的 input 组件设置 rules.type 为`'number'`时报错问题，[uf-111](http://newicafe.baidu.com:80/issue/uf-101/show?from=page)\n\n    * 📖 在 **`DCID 通报管理`** 项目中投入使用\n\n\n\n### 0.2.3\n\n`2018-06-12`\n\n* ##### 新增组件\n    * 🌟 增加`Forms`组件，自身具备复制新增功能\n* ##### `Table`组件相关\n    * 🌟 增加支持后端分页时的`模糊搜索`功能\n    * 🌟 增加函数函数：`export()`，支持手动调用导出功能\n    * 🌟 增加`title.extra`属性，支持在表格表头增加额外内容/组件\n    * 🎨 整合`source`系列参数，参数和通用的source系列参数保持一致\n    * 🎨 属性名称调整（以下为调整前后的对照关系）\n        * `column.filterConfig` => `column.filter`\n        * `column.filterConfig.filterType` => `column.filter.type`\n        * `column.filterConfig.filters` => `column.filter.options`\n        * `title.basicControls` => `title.basicWidget`*（当前版本兼容两种，在下一版本中移除）*\n        * `title.menuControls` => `title.menuWidget`*（当前版本兼容两种，在下一版本中移除）*\n    * 🙅 移除`method`、`sourceHanlder`、`autoLoadSource`参数\n* ##### `Export`组件相关\n    * 🎨 整合`source`系列参数，参数和通用的source系列参数保持一致\n    * 🙅 移除`method`、`params`参数\n* ##### `Tree`组件相关\n    * 🎨 整合`source`系列参数，参数和通用的source系列参数保持一致。异步加载数据功能通过设置`source`实现\n    * 🙅 移除`loadData`参数，相应功能用`source`替换\n* ##### 其他更新\n    * 🌟 新增`Echars`同其他组件一样，支持`source`系列参数，并支持使用`set`等api\n    * 🌟 增加输入型组件使用`source`系列参数时，可以展示loading效果，[传送门](#/Params/-source-)\n    * 🌟 升级组件API`get`功能，支持取多层级下的配置参数 [传送门](#/Api/-component-get-)\n    * 🌟 增加`api.showLoading`参数，使用api系列参数提交数据时，展示loading效果\n    * 🌟 `CheckboxGroup`增加函数API：`checkAll()`，全选或取消全选\n    * 🌟 增加`global.ajax.data`参数，配置全部请求都携带的参数，例如：`token`\n    * 🌟 增加`source.cache`参数，可以开启**`数据缓存`**功能，[传送门](#/Params/-source-)\n    * 🌟 增加`source.requestMerge`参数，可以关闭**`请求合并`**功能，[传送门](#/Params/-source-)\n    * 🌟 `DatePicker`系列组件`value`参数增加特殊值`'current'`，当值为current时，会自动转换为当前日期/时间 （注意：`Form`中使用时，是在`default`属性上配置'current'）\n    * 🌟 `Export`组件增加函数API：`export()`，支持手动调用导出功能\n    * 🌟 增加通用 `control` 系列参数。全部组件都具备控制其他组件的能力，[传送门](#/Params/-control-)\n    * 🌟 增加 `uf.p.js` 文件，可使UF加载时不阻塞页面其他逻辑执行（尤其用于和其他框架/库混用时）\n    * 🎨 微调Ajax内部处理逻辑，如果用户配置了`global.ajax.error`，则全使用用户自定义的处理逻辑，error不再有默认报错的行为，如果需要，需用户自行在error函数里添加\n    * 🎨 通用`source`系列参数整理，聚合到一起（全部参数在`source`参数之下），[传送门](#/Params/-source-)\n    * 🎨 修改 Ajax 默认错误处理逻辑，只有当自定义错误处理函数显示的返回 false 时，才会阻止默认处理逻辑执行\n    * 🎨 改造路由，优化通过路由传递参数并在组件配置中获取参数的交互方式，见：[更多用法](#/Others)\n    * 🎨 `Modal`组件属性名称调整：`message` => `render`*（当前版本兼容两种，后面版本中移除）*\n    * 🐞 修复`Select`组件使用`source`参数时，数据返回后会提示内容不能为空的问题\n    * 🐞 修复`Form`组件中使用日期范围选择组件不能选择时间问题\n    * 🐞 修复自定义组件（如：Form）使用`source`系列参数时，后端返回的数据无法回填的问题\n    * 🐞 修复`Form`重新设置`formData`时（例如使用`source`异步获取Form内容），数据不更新问题，[uf-101](http://newicafe.baidu.com:80/issue/uf-101/show?from=page)\n    * 🐞 修复`Table`组件`expandedRowRender`属性功能，点击加号不能展示扩展内容BUG\n    * 🐞 修复`Table`组件`pagination`置为`false`时，报错的问题\n    * ⚙ 改造`Forms`内部逻辑，以支持嵌套到Form组件中使用\n    * ⚙ 改造内部代码，增加对销毁组件的处理：异步操作中对已销毁的组件的操作全部会被中断\n    * ⚙ 改造内部代码，默认参数全部走配置形式\n    * ⚙ 样式文件sass改为less，并增加主题配置，定制多份主题\n    * 🐞 修复因`Router`刷新两次造成的报错`called forceUpdate() on an unmounted component`的问题\n\n* ##### 发布\n    * 📖 在 **`IDP 世界杯`** 项目中投入使用\n\n\n\n### 0.2.2\n\n`2018-06-22` `upgrade`\n\n* 🌟 `Select`组件增加默认搜索时忽略大小写\n\n\n`2018-06-06`\n\n* 🐞 修复`Table`组件单行编辑，内容为0时数据不更新问题\n* 🌟 新增`api`系列参数，并聚合到一起（全部参数在`api`参数之下）\n* `Table`\n    * 🌟 增加单字段编辑功能\n    * 🙅 删除ajax传参中的分页参数 `index`、`offset`\n* 📖 在 **`RMS 网络零件库存预警`** 项目中投入使用\n\n\n\n\n### 0.2.1\n\n`2018-03-19`\n\n* 重写入门文档；文档排版调整，文档/组件分离\n* 增加`Ecahrts`组件的支持\n* 上线 0.2.1 版本，对框架进行整体优化\n* 📖 在 **`虚拟资源管理中心`** 项目中投入使用\n\n\n\n### 0.2\n\n`2017-10-13`\n\n* 上线 0.2 版本\n* 支持整个项目配置化\n* 📖 在 **`RMS GPU部件管理`** 项目中投入使用\n\n### 0.1.1\n\n`2017-09-22`\n\n* antd `2.12.2` 升级为 `2.13.7`\n* 增加 `Table`、`Form`、`Modal` 组件说明文档及Demo\n* 增加用于临时使用的 `Table2` 组件，后面 `Table` 组件功能完善后，会再次把 `Table2` 去掉\n\n### 0.1\n\n`2017-09-18`\n\n* 配置化页面一期上线\n"

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	    'antd-button.md': __webpack_require__(256),
	    'antd-icon.md': __webpack_require__(257),
	    'antd-icon-plus.md': __webpack_require__(258),
	    'antd-grid.md': __webpack_require__(259),
	    'antd-layout.md': __webpack_require__(260),

	    'antd-cascader.md': __webpack_require__(261),
	    'antd-checkbox.md': __webpack_require__(262),
	    'antd-date-picker.md': __webpack_require__(263),
	    'antd-input-number.md': __webpack_require__(264),
	    'antd-input.md': __webpack_require__(265),
	    'antd-radio.md': __webpack_require__(266),
	    'antd-rate.md': __webpack_require__(267),
	    'antd-select.md': __webpack_require__(268),
	    'antd-tree-select.md': __webpack_require__(269),
	    'antd-switch.md': __webpack_require__(270),
	    'antd-upload.md': __webpack_require__(271),

	    'antd-avatar.md': __webpack_require__(272),
	    'antd-badge.md': __webpack_require__(273),
	    'antd-calendar.md': __webpack_require__(274),
	    'antd-card.md': __webpack_require__(275),
	    'antd-carousel.md': __webpack_require__(276),
	    'antd-collapse.md': __webpack_require__(277),
	    'antd-popover.md': __webpack_require__(278),
	    'antd-tooltip.md': __webpack_require__(279),
	    'antd-tabs.md': __webpack_require__(280),
	    'antd-tag.md': __webpack_require__(281),
	    'antd-timeline.md': __webpack_require__(282),

	    'antd-affix.md': __webpack_require__(283),
	    'antd-breadcrumb.md': __webpack_require__(284),
	    'antd-dropdown.md': __webpack_require__(285),
	    'antd-menu.md': __webpack_require__(286),
	    'antd-pagination.md': __webpack_require__(287),
	    'antd-steps.md': __webpack_require__(288),

	    'antd-alert.md': __webpack_require__(289),
	    'antd-message.md': __webpack_require__(290),
	    'antd-notification.md': __webpack_require__(291),
	    'antd-progress.md': __webpack_require__(292),
	    'antd-popconfirm.md': __webpack_require__(293),
	    'antd-loading.md': __webpack_require__(294),

	    'antd-anchor.md': __webpack_require__(295),
	    'antd-backtop.md': __webpack_require__(296)
	};

/***/ }),
/* 256 */
/***/ (function(module, exports) {

	module.exports = "按钮用于开始一个即时操作。\n\n## 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n## 组件&配置\n\n### # button\n\n通过设置 Button 的属性来产生不同的按钮样式，推荐顺序为：`mode` -> `shape` -> `size` -> `loading` -> `disabled`\n\n属性 | 说明 | 类型 | 默认值\n-----|-----|-----|------\nmode | 设置按钮类型，可选值为 `primary` `dashed` `danger` 或者不设 | string | -\nhtmlType | 设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button`\nicon | 设置按钮的图标类型 | string | -\nshape | 设置按钮形状，可选值为 `circle` 或者不设 | string | -\nsize | 设置按钮大小，可选值为 `small` `large` 或者不设 | string | `default`\nloading | 设置按钮载入状态 | boolean &#124; { delay: number } | `false`\nonClick | `click` 事件的 handler | function | -\nghost | 幽灵属性，使按钮背景透明 | boolean | false\nlink | 如果配置了link属性，则按钮点击后会跳转到link指定的页面 | string | \nactive | 设置按钮当前状态是否为激活状态（仅`actived`为true时有效） | boolean | false\nactived | 按钮是否可以存在激活状态 | boolean | false\nactivedChildren | 按钮在激活状态时展示的内容，可以是以上任何属性 | `config` | false\nunActivedChildren | 按钮在非激活状态时展示的内容 | `config` | false\n\n### # button-group\n\n可以将多个 `button` 放入 `button-group` 的容器中，使按钮作为一组展示。\n\n属性 | 说明 | 类型 | 默认值\n-----|-----|-----|------\nsize | 设置按钮大小，可选值为 `small` `large` `mini` 或者不设 | string | `default`"

/***/ }),
/* 257 */
/***/ (function(module, exports) {

	module.exports = "语义化的矢量图形。\n\n## 组件&配置\n\n### # icon\n\n由于图标字体本质上还是文字，可以使用 `style` 和 `className` 设置图标的大小和颜色。\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| mode | 图标类型 | string | - |\n| spin | 是否有旋转动画 | boolean | false |\n| style | 设置图标的样式，例如 fontSize 和 color | object | - |\n\n##### 图标的命名规范\n\n我们为每个图标赋予了语义化的命名，命名规则如下:\n\n- 实心和描线图标保持同名，用 `-o` 来区分，比如 `question-circle`（实心） 和 `question-circle-o`（描线）；\n- 命名顺序：`[图标名]-[形状?]-[描线?]-[方向?]`。\n"

/***/ }),
/* 258 */
/***/ (function(module, exports) {

	module.exports = "来自外部平台的图标。图标文件访问 [iconfont.cn](http://www.iconfont.cn) 进行定制下载。\n\n## 组件&配置\n\n### # icon-plus\n\n由于图标字体本质上还是文字，可以使用 `style` 和 `className` 设置图标的大小和颜色。\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| mode | 图标类型 | string | - |\n| style | 设置图标的样式，例如 fontSize 和 color | object | - |\n\n\n#### 图标引入\n\n* 1、首先访问平台选择想要的图标进行下载：[iconfont.cn](http://www.iconfont.cn)\n* 2、然后将图标目录下的`iconfont.xxx`几个文件全部拷到项目中\n* 3、将`iconfont.css`引入到页面入口即可使用\n\n#### 其他说明\n\n下载的包中包含有`demo_fontclass.html`文件，直接双击打开可以看到下载的全部图标效果以及名称，组件的`mode`参数的值即为页面上各个图标下面展示的名称\n"

/***/ }),
/* 259 */
/***/ (function(module, exports) {

	module.exports = "\n## 概述\n\n布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：\n\n* 通过`row`在水平方向建立一组`column`（简写col）\n* 你的内容应当放置于`col`内，并且，只有`col`可以作为`row`的直接元素\n* 栅格系统中的列是指1到24的值来表示其跨越的范围。例如，三个等宽的列可以使用`.col-8`来创建\n* 如果一个`row`中的`col`总和超过 24，那么多余的`col`会作为一个整体另起一行排列\n\n## Flex 布局\n\n我们的栅格化系统支持 Flex 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 order 来定义元素的排列顺序。\n\nFlex 布局是基于 24 栅格来定义每一个『盒子』的宽度，但排版则不拘泥于栅格。\n\n## 组件&配置\n\n### # row\n\n| 成员       | 说明             | 类型               | 默认值       |\n|-----------|-----------------|--------------------|-------------|\n| mode      | 布局模式，可选 `flex`，[现代浏览器](http://caniuse.com/#search=flex) 下有效 | string |         |\n| gutter    | 栅格间隔，单位`px`   | number | 0        |\n| align     | flex 布局下的垂直对齐方式：`top` `middle` `bottom`  | string | `top`      |\n| justify   | flex 布局下的水平排列方式：`start` `end` `center` `space-around` `space-between`   | string | `start`        |\n\n### # col\n\n| 成员      | 说明             | 类型               | 默认值       |\n|----------|-----------------|--------------------|-------------|\n| span     | 栅格占位格数，为 0 时相当于 `display: none`   | number | -        |\n| order    | 栅格顺序，`flex` 布局模式下有效   | number | 0        |\n| offset   | 栅格左侧的间隔格数，间隔内不可以有栅格  | number | 0        |\n| push     | 栅格向右移动格数   | number | 0        |\n| pull     | 栅格向左移动格数   | number | 0        |\n| xs       | `<768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| sm       | `≥768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| md       | `≥992px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| lg       | `≥1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n| xl       | `≥1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number&#124;object | - |\n\n响应式栅格的断点遵循了 [BootStrap 3 的规则](https://getbootstrap.com/docs/3.3/css/#responsive-utilities-classes)（不包含链接里 `occasionally` 的部分)。\n"

/***/ }),
/* 260 */
/***/ (function(module, exports) {

	module.exports = "协助进行页面级整体布局。\n\n## 设计规则\n\n### 尺寸\n\n一级导航项偏左靠近 logo 放置，辅助菜单偏右放置。\n\n- 顶部导航（大部分系统）：一级导航高度 `64px`，二级导航 `48px`。\n- 顶部导航（展示类页面）：一级导航高度 `80px`，二级导航 `56px`。\n- 顶部导航高度的范围计算公式为：`48+8n`。\n- 侧边导航宽度的范围计算公式：`200+8n`。\n\n### 交互\n\n- 一级导航和末级的导航需要在可视化的层面被强调出来；\n- 当前项应该在呈现上优先级最高；\n- 当导航收起的时候，当前项的样式自动赋予给它的上一个层级；\n- 左侧导航栏的收放交互同时支持手风琴和全展开的样式，根据业务的要求进行适当的选择。\n\n### 视觉\n\n导航样式上需要根据信息层级合理的选择样式：\n\n- **大色块强调**\n\n  建议用于底色为深色系时，当前页面父级的导航项。\n\n- **高亮火柴棍**\n\n  当导航栏底色为浅色系时使用，可用于当前页面对应导航项，建议尽量在导航路径的最终项使用。\n\n- **字体高亮变色**\n\n  从可视化层面，字体高亮的视觉强化力度低于大色块，通常在当前项的上一级使用。\n\n- **字体放大**\n\n  `12px`、`14px` 是导航的标准字号，14 号字体用在一、二级导航中。字号可以考虑导航项的等级做相应选择。\n\n## 组件概述\n\n- `Layout`：布局容器，其下可嵌套 `Header` `Sider` `Content` `Footer` 或 `Layout` 本身，可以放在任何父容器中。\n- `Header`：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Sider`：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Content`：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Footer`：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n\n> 注意：采用 flex 布局实现，请注意[浏览器兼容性](http://caniuse.com/#search=flex)问题。\n\n## 组件&配置\n\n### # layout\n\n布局容器。\n\n| 参数      | 说明                                      | 类型         | 默认值 |\n|----------|------------------------------------------|-------------|-------|\n| style | 指定样式 | object | - |\n| className | 容器 className | string | - |\n\n> `Header` `Footer` `Content` API 与 `Layout` 相同\n\n### # sider\n\n侧边栏。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|-----------------------------------------|------------|-------|\n| theme | 主题颜色，可以和`Menu`组件的dark主题配合使用 | string: `light` `dark` | `light`  |\n| collapsible | 是否可收起 | boolean | false  |\n| defaultCollapsed | 是否默认收起 | boolean | false  |\n| reverseArrow | 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用 | boolean | false  |\n| collapsed | 当前收起状态 | boolean |  |\n| onCollapse | 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发 | (collapsed, type) => {} | - |\n| trigger | 自定义 trigger。设置为 null 时隐藏 trigger（隐藏trigger后可以在其他任何地方使用`sider-trigger`组件关联当前的sider） | string&#124;`config` |  |\n| triggerPosition | 自定义 trigger 的位置，可选值`top`、`bottom` | string | `bottom` |\n| width | 宽度 | number&#124;string | 200 |\n| collapsedWidth | 收缩宽度，设置为 0 会出现特殊 trigger | number | 64 |\n| breakpoint | 触发响应式布局的断点 | Enum { 'xs', 'sm', 'md', 'lg', 'xl' } | - |\n| style | 指定样式 | object | - |\n| className | 容器 className | string | - |\n\n#### 函数调用\n\n> 组件自身带有的函数，调用方法如：`UF('my-sider').toggleCollapsed()`\n\n函数名称   | 说明             | 参数   \n----------|--------------------|----------\ntoggleCollapsed | 切换收起/展开状态 | 无 \n\n### # sider-trigger\n\n从`sider`中独立出来的`trigger`，可以放在任何地方，通过`target`属性和`sider`组件关联\n\n参数      | 说明                                     | 类型       | 默认值\n----------|-----------------------------------------|------------|-------\ntarget | 关联`sider`组件的名称 | boolean | false\nreverse | 反转方向 | boolean | false\n\n### # header\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|-----------------------------------------|------------|-------|\n| theme | 主题颜色，可以和`Menu`组件的dark主题配合使用 | string: `light` `dark` | `light`  |\n\n\n### # header、content、footer\n\n这三个组件没有特殊功能，参数见 `# layout`\n"

/***/ }),
/* 261 */
/***/ (function(module, exports) {

	module.exports = "\n级联选择框。\n\n## 何时使用\n\n- 需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。\n- 从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。\n- 比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。\n\n## 组件&配置\n\n### # cascader\n\n| 参数 | 说明 | 类型 | 默认值 |\n|------|------|------|--------|\n| options | 可选项数据源 [*默认异步属性*] | object | - |\n| defaultValue | 默认的选中项 | [CascaderOptionType](https://git.io/vMMoK)[]  |[] |\n| value | 指定选中项 | [CascaderOptionType](https://git.io/vMMoK)[] | - |\n| onChange | 选择完成后的回调 | `(value, selectedOptions) => void` | - |\n| displayRender | 选择后展示的渲染函数 | `(label, selectedOptions) => UF.init({...})` | `label => label.join(' / ')` |\n| style | 自定义样式 | string | - |\n| className | 自定义类名 | string | - |\n| changeOnSelect | 当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示\t | boolean | false |\n| popupClassName | 自定义浮层类名 | string | - |\n| popupPlacement | 浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight` | Enum | `bottomLeft` |\n| placeholder | 输入框占位文本 | string | '请选择' |\n| size | 输入框大小，可选 `large` `default` `small` | string | `default` |\n| disabled | 禁用 | boolean | false |\n| allowClear | 是否支持清除 | boolean | true |\n| expandTrigger | 次级菜单的展开方式，可选 'click' 和 'hover' | string | 'click' |\n| changeOnSelect | 当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示 | boolean | false |\n| showSearch | 在选择框中显示搜索框 | boolean | false |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | 'Not Found' |\n| loadData  | 用于动态加载选项，无法与 `showSearch` 一起使用 | `(selectedOptions) => void`  | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](http://codepen.io/anon/pen/xVBOVQ?editors=001) | Function(triggerNode) | () => document.body |\n\n`showSearch` 为对象时，其中的字段：\n\n| 参数 | 说明 | 类型 | 默认值 |\n|------|------|------|--------|\n| filter | 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false。 | `function(inputValue, path): boolean` | |\n| render | 用于渲染 filter 后的选项 | `function(inputValue, path): UF.init({...})` | |\n| sort | 用于排序 filter 后的选项 | `function(a, b, inputValue)` | |\n| matchInputWidth | 搜索结果列表是否与输入框同宽 | boolean | |\n\n> 注意，如果需要获得中国省市区数据，可以参考 [china-division](https://gist.github.com/afc163/7582f35654fd03d5be7009444345ea17)。\n"

/***/ }),
/* 262 */
/***/ (function(module, exports) {

	module.exports = "\n多选框。\n\n## 何时使用\n\n- 在一组可选项中进行多项选择时；\n- 单独使用可以表示两种状态之间的切换，和 `switch` 类似。区别在于切换 `switch` 会直接触发状态改变，而 `checkbox` 一般用于状态标记，需要和提交操作配合。\n\n## 组件&配置\n\n### # checkbox\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| checked | 指定当前是否选中 | boolean  | false |\n| onChange | 变化时回调函数 | Function(e:Event) | - |\n| indeterminate | 设置半选中状态，只负责样式控制 | boolean | false |\n\n### # checkbox-group\n\n| 参数      | 说明             | 类型      | 默认值  |\n|----------|------------------|----------|--------|\n| value | 指定选中的选项| string[] | [] |\n| options  | 指定可选项 [*默认异步属性*] | object[] | [] |\n| onChange | 变化时回调函数 | Function(checkedValue) | - |\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('checkbox').checkAll(true)`。\n\n参数       | 说明           | 参数    \n-----------|----------------|-----------\ncheckAll  | 适用于`checkbox-group`，进行全选或取消全选 |  checkAll(boolean)  \ngetValue  | 获取当前选中的值 |  getValue()  \ngetDisplayValue  | 获取当前选中的展示内容（label值） |  getDisplayValue()  "

/***/ }),
/* 263 */
/***/ (function(module, exports) {

	module.exports = "\n输入或选择日期的控件。\n\n## 何时使用\n\n当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n## 组件&配置\n\n日期类组件包括以下三种形式。\n\n* DatePicker\n* MonthPicker\n* RangePicker\n\n### 共同的参数\n\n以下参数为 DatePicker、MonthPicker、RangePicker 共享的参数。\n\n| 参数          | 说明            | 类型     | 默认值        |\n|--------------|----------------|----------|--------------|\n| default   | `Form`中配置时，使用`default`设置默认值 |   |     |\n| allowClear   | 是否显示清除按钮 | boolean     | true         |\n| disabled     | 禁用           | boolean     | false        |\n| className    | 选择器 className | string | '' |\n| style        | 自定义输入框样式     | object     | {}   |\n| popupStyle   | 格外的弹出日历样式   | object     | {}   |\n| size         | 输入框大小，`large` 高度为 32px，`small` 为 22px，默认是 28px | string   | 无  |\n| locale       | 国际化配置 | object   | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)  |\n| disabledDate | 不可选择的日期 | (currentDate: moment) => boolean | 无           |\n| getCalendarContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | 无 |\n| open | 控制弹层是否展开 | boolean | - |\n| onOpenChange   | 弹出日历和关闭日历的回调 | function(status) | 无 |\n| placeholder  | 输入框提示文字 | string&#124;RangePicker[] | - |\n\n### # date-picker\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 日期。特殊值：`'current'`，自动转换为当前日期 （`Form`中使用时，请在`default`属性上配置'current'） | '2018-05-28' | 无   |\n| format       | 展示的日期格式，Y表示年，M表示月，D表示天，H表示小时，m表示分钟，s表示秒钟 | string   | \"YYYY-MM-DD\" |\n| onChange     | 时间发生变化的回调 | function(date: moment, dateString: string) | 无           |\n| showTime     | 增加时间选择功能  | Object&#124;boolean | 根据`format`的值确定是否展示 |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](http://antd.uf.baidu.com/components/date-picker/#components-date-picker-demo-disabled-date) |string | moment() |\n| showToday    | 是否展示“今天”按钮 | boolean | true |\n| disabledTime | 不可选择的时间 | function(date) | 无 |\n| onOk | 点击确定按钮的回调 | function() | - |\n| renderExtraFooter | 在面板中添加额外的页脚 | `config` | - |\n\n### # month-picker\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 日期。特殊值：`'current'`，自动转换为当前日期 | string  | 无           |\n| onChange     | 时间发生变化的回调，发生在用户选择时间时 | function(date: moment, dateString: string) | -    |\n\n### # range-picker\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 日期。 特殊值：`'current'`，自动转换为当前日期 | string[] | 无           |\n| format       | 展示的日期格式  | string    | \"YYYY-MM-DD HH:mm:ss\" |\n| onChange     | 时间发生变化的回调，发生在用户选择时间时 | function(dates: [moment, moment], dateStrings: [string, string]) | 无           |\n| showTime     | 增加时间选择功能  | Object&#124;boolean | `TimePicker` |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](http://antd.uf.baidu.com/components/date-picker/#components-date-picker-demo-disabled-date) |string[] | [moment(), moment()] |\n| disabledTime | 不可选择的时间 | function(dates: [moment, moment], partial: `'start'/'end'`) | 无 |\n| ranges       | 预设时间范围快捷选择 | { [range: string]:string[] } | 无 |\n| renderExtraFooter | 在面板中添加额外的页脚 | `config` | - |\n| onOk | 点击确定按钮的回调 | function() | - |\n\n### # time-picker\n\n| 参数                 | 说明 | 类型 | 默认值 |\n|---------------------|-----|-----|-------|\n| value               | 当前时间。特殊值：`'current'`，自动转换为当前时间 | string | 无 |\n| defaultOpenValue    | 无选中值时，面板打开时高亮的值 |string | moment() |\n| open                | 面板是否打开 | boolean | false |\n| onOpenChange        | 面板打开/关闭时的回调 | (open: boolean): void | 无 |\n| placeholder         | 没有值的时候显示的内容 | string | \"请选择时间\" |\n| onChange            | 时间发生变化的回调     | function(time: moment, timeString: string): void | 无 |\n| format              | 展示的时间格式 | string | \"HH:mm:ss\" |\n| disabled            | 禁用全部操作 | boolean | false |\n| disabledHours       | 禁止选择部分小时选项 | function() | 无 |\n| disabledMinutes     | 禁止选择部分分钟选项 | function(selectedHour) | 无 |\n| disabledSeconds     | 禁止选择部分秒选项 | function(selectedHour, selectedMinute) | 无 |\n| hideDisabledOptions | 隐藏禁止选择的选项 | boolean | false |\n| getPopupContainer   | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | 无 |\n| addon | 选择框底部显示自定义的内容 | function | 无 |\n| use12Hours | 使用 12 小时制，为 true 时 `format` 默认为 `hh:mm:ss` | boolean | false |\n| className | 选择器类名 | string | '' |\n| popupClassName | 弹出层类名 | string | '' |\n"

/***/ }),
/* 264 */
/***/ (function(module, exports) {

	module.exports = "\n通过鼠标或键盘，输入范围内的数值。\n\n## 何时使用\n\n当需要获取标准数值时。\n\n## 组件&配置\n\n### # input-number\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| min     | 最小值   | number | -Infinity        |\n| max     | 最大值       | number      | Infinity           |\n| value     | 当前值       | number      |            |\n| step     | 每次改变步数，可以为小数  | number&#124;string      |  1      |\n| precision | 数值精度 | number | - |\n| defaultValue     | 初始值       | number      |            |\n| onChange     | 变化回调       | Function(value: number &#124; string) |            |\n| disabled     | 禁用       | boolean      |      false      |\n| size    | 输入框大小  | string      |      无      |\n| formatter | 指定输入框展示值的格式 | function(value: number &#124; string): string | - |\n| parser | 指定从 formatter 里转换回数字的方式，和 formatter 搭配使用 | function( string): number | - |\n"

/***/ }),
/* 265 */
/***/ (function(module, exports) {

	module.exports = "\n通过鼠标或键盘输入内容，是最基础的表单域的包装。\n\n## 何时使用\n\n- 需要用户输入表单域内容时。\n- 提供组合型输入框，带搜索的输入框，还可以进行大小选择。\n\n## 组件&配置\n\n### # input\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|-----------------------------------------|------------|-------|--------|\n| mode | 声明 input 类型，同原生 input 标签的 type 属性 | string  | `text` |\n| id | 输入框的 id | string | |\n| value | 输入框内容 | string | |\n| defaultValue | 输入框默认内容 | string | |\n| size | 控件大小。注：标准表单内的输入框大小限制为 `large`。可选 `large` `default` `small` | string | `default` |\n| disabled | 是否禁用状态，默认为 false | boolean | false |\n| addonBefore | 带标签的 input，设置前置标签 | string&#124;`config` | |\n| addonAfter | 带标签的 input，设置后置标签 | string&#124;`config` | |\n| prefix | 带有前缀图标的 input | string&#124;`config` | |\n| suffix | 带有后缀图标的 input | string&#124;`config` | |\n| onPressEnter | 按下回车的回调 | function(e) | - |\n\n`Input` 的其他属性和 React 自带的 [input](https://facebook.github.io/react/docs/events.html#supported-events) 一致。\n\n### # textarea\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|-----------------------------------------|------------|-------|--------|\n| defaultValue | 输入框默认内容 | string | |\n| value | 输入框内容 | string | |\n| onPressEnter | 按下回车的回调 | function(e) | |\n| autosize | 自适应内容高度，可设置为 `true/false` 或对象：`{ minRows: 2, maxRows: 6 }` | boolean&#124;object | false |\n| rows | 输入框初始行数 | number | |\n| style.resize | 可以设置仅某个方向可拖动或者禁止拖动，可选值有：`none`、`both`、`horizontal`、`vertical` | string | - |\n\n\n`TextArea` 的其他属性和浏览器自带的 [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) 一致。\n\n### # input-search\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|-----------------------------------------|-----------|-------|\n| onSearch | 点击搜索或按下回车键时的回调                 | function(value) | -  |\n\n其余属性和 Input 一致。\n\n### # input-group\n\n| 参数      | 说明                                     | 类型         | 默认值 |\n|-----------|-----------------------------------------|-------------|-------|\n|  size | `Input.Group` 中所有的 `Input` 的大小，可选 `large` `default` `small` | string | `default` |\n\n"

/***/ }),
/* 266 */
/***/ (function(module, exports) {

	module.exports = "\n单选框。\n\n## 何时使用\n\n- 用于在多个备选项中选中单个状态。\n- 和 Select 的区别是，Radio 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。\n\n## 组件&配置\n\n### # radio\n\nRadio要为一组数据。\n\n| 参数           | 说明                             | 类型              | 可选值 | 默认值 |\n|----------------|----------------------------------|-------------------|--------|--------|\n| onChange       | 选项变化时的回调函数             | Function(e:Event) | 无     | 无     |\n| value          | 用于设置当前选中的值             | any            | 无     | 无     |\n| defaultValue   | 默认选中的值                     | any            | 无     | 无     |\n| showAsButton   | 以一组按钮展示单选组合           | boolean            |  | 无 |\n| size           | 大小，只对按钮样式生效           | string            | `large` `default` `small` | `default` |\n| options        | 以配置形式设置子元素 [*默认异步属性*]   | string[] &#124; Array<{ label: string value: string disabled?: boolean style?: {}}>            | 无     | 无     |\n\n"

/***/ }),
/* 267 */
/***/ (function(module, exports) {

	module.exports = "\n评分组件。\n\n## 何时使用\n\n- 对评价进行展示。\n- 对事物进行快速的评级操作。\n\n## 组件&配置\n\n### # rate\n\n| 属性        | 说明           | 类型               | 默认值       |\n|------------|----------------|-------------------|-------------|\n| count    | star 总数 | number | 5 |\n| value | 当前数，受控值 | number | - |\n| onChange | 选择时的回调 | Function(value: number) | - |\n| allowHalf | 是否允许半选   | boolean | false |\n| disabled | 只读，无法进行交互 | boolean | false |\n| character | 自定义字符 | `config` | `{type: 'icon', mode: 'star'}` |\n| className | 自定义样式类名 | string | - |\n| style | 自定义样式对象 | object | - |\n"

/***/ }),
/* 268 */
/***/ (function(module, exports) {

	module.exports = "\n下拉选择器。\n\n## 何时使用\n\n- 弹出一个下拉菜单给用户选择操作，用于代替原生的选择器，或者需要一个更优雅的多选器时。\n- 当选项少时（少于 5 项），建议直接将选项平铺，使用 [Radio](/components/radio/) 是更好的选择。\n\n## 组件&配置\n\n### # select\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| value    | 指定当前选中的条目 | string&#124;string[] |  -  |\n| defaultValue | 指定默认选中的条目 | string&#124;string[] |  -  |\n| mode | 设置 Select 的模式。分为多选`multiple`、标签`tags`、任意输入`combobox` | 'multiple' &#124; 'tags' &#124; 'combobox' | - |\n| allowClear   | 支持清除 | boolean | false |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。 | boolean or function(inputValue, option) | true     |\n| onSelect | 被选中时调用，参数为选中项的 value (或 key) 值 | function(value, option) | -   |\n| onDeselect | 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 multiple 或 tags 模式下生效 |  function(value) | -   |\n| onChange | 选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数 | function(value) | - |\n| onSearch | 文本框值变化时回调 | function(value: string) |  |\n| onBlur | 失去焦点的时回调 | function | - |\n| onFocus | 获得焦点时回调 | function | - |\n| placeholder | 选择框默认文字 | string | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | 'Not Found' |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽 | boolean | true |\n| options | 选项数据列表，可以是一个字符串数据，或者对象数组 [*默认异步属性*] | string[] &#124; Array<{ label: string value: string disabled?: boolean style?: {}}> |  |\n| extOptions | 额外的选项，options之外额外增加的选项（置于选择列表最前面）。例如下拉列表增加值为all的选项，无需后端接口额外增加all | Array<{ label: [string], value: [string], disabled?: [boolean], style?: {}}> |  |\n| optionFilterProp | 搜索时过滤对应的 option 属性，默认为搜索下拉列表展示的内容，如设置为 value 表示对真实值进行搜索 | string | children |\n| optionLabelProp | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。 | string | `children` （combobox 模式下为 `value`） |\n| size    | 选择框大小，可选 `large` `small`  | string      |      default      |\n| showSearch | 使单选模式可搜索 | boolean | false |\n| disabled | 是否禁用 | boolean | false |\n| defaultActiveFirstOption | 是否默认高亮第一个选项。 | boolean | true\n| dropdownStyle | 下拉菜单的 style 属性 | object | - |\n| dropdownClassName | 下拉菜单的 className 属性 | string | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](http://codepen.io/anon/pen/xVBOVQ?editors=001) | Function(triggerNode) | () => document.body |\n| tokenSeparators | 在 tags 和 multiple 模式下自动分词的分隔符 | string[] |  |\n| defaultFirst | 默认选中第一个，仅使用source时可用 | boolean |  |\n| defaultSelectAll | 默认全选，仅使用source时可用 | boolean |  |\n\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('select').selectAll(true)`。\n\n参数       | 说明           | 参数    \n-----------|----------------|-----------\nselectAll  | 适用于多选模式下的下拉框，进行全选或取消全选 |  selectAll(boolean)  \ngetValue  | 获取当前选中的值 |  getValue()  \ngetDisplayValue  | 获取当前选中的展示内容（label值） |  getDisplayValue()  \n\n\n> 注意，如果发现下拉菜单跟随页面滚动，或者需要在其他弹层中触发 Select，请尝试使用 `getPopupContainer={triggerNode => triggerNode.parentNode}` 将下拉弹层渲染节点固定在触发器的父元素中。\n"

/***/ }),
/* 269 */
/***/ (function(module, exports) {

	module.exports = "\n树型选择控件。\n\n## 何时使用\n\n- 类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。\n\n## 组件&配置\n\n### # tree-select\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| value    | 指定当前选中的条目 | string/string[] |  -  |\n| defaultValue | 指定默认选中的条目 | string/string[]   |  -  |\n| multiple   | 支持多选（当设置 treeCheckable 时自动变为true） | boolean | false |\n| treeCheckable | 显示 checkbox | boolean | false |\n| onSelect | 被选中时调用 | function(value, node, extra) | -   |\n| onChange | 选中树节点时调用此函数 | function(value, label, extra) | - |\n| allowClear | 显示清除按钮 | boolean | false |\n| onSearch | 文本框值变化时回调 | function(value: string) | - |\n| placeholder | 选择框默认文字 | string | - |\n| searchPlaceholder | 搜索框默认文字 | string | - |\n| dropdownStyle | 下拉菜单的样式 | object | - |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽 | boolean | true |\n| size    | 选择框大小，可选 `large` `small`  | string      | 'default' |\n| showSearch | 在下拉中显示搜索框(仅在单选模式下生效) | boolean | false |\n| disabled | 是否禁用 | boolean | false |\n| showCheckedStrategy | `SHOW_CHILD`: 默认只显示子节点; `SHOW_ALL`: 显示所有选中节点(包括父节点); `SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时). | string | 'SHOW_CHILD' |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 `{key: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string[] }` 的格式 | boolean | false |\n| treeDefaultExpandAll | 默认展开所有树节点 | boolean | false |\n| treeDefaultExpandedKeys | 默认展开的树节点 | string[] | - |\n| treeCheckStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联）| boolean | false |\n| filterTreeNode | 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值 | boolean&#124;Function(inputValue: string, treeNode: TreeNode) (函数需要返回bool值) | Function |\n| treeNodeFilterProp | 输入项过滤对应的 treeNode 属性 | string | 'value' |\n| treeNodeLabelProp | 作为显示的 prop 设置 | string | 'title' |\n| source | 异步加载数据 | object | - |\n| treeData | 树形列表数据 | array<{value, label, children, [disabled, selectable]}> （value 在整个树范围内唯一） | [] |\n| treeDataSimpleMode | 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 数据拉平，不再有children，变为这样的数据结构: [{id:1, pId:0, value:'1', label:\"test1\",...},...], `pId` 是父节点的 id) | false&#124;Array<{ id: string, pId: string, rootPId: null }> | false |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。 | Function(triggerNode) | () => document.body |\n\n\n### 函数调用\n参数       | 说明           | 参数    \n-----------|----------------|-----------\ngetValue  | 获取当前选中的值 |  getValue() \n\n\n### # 节点的数据格式\n```json\n    [\n        {\n            label: 'Node 1',            // 必须\n            value: '1-1',               // 必须\n            isLeaf: false,              // 非必须\n            disabled: false,            // 非必须，用于指定此节点时候可点\n            children: [                 // 子节点格式相同\n                ...\n            ]\n        },\n        ...\n    ]\n```\n"

/***/ }),
/* 270 */
/***/ (function(module, exports) {

	module.exports = "\n开关选择器。\n\n## 何时使用\n\n- 需要表示开关状态/两种状态之间的切换时；\n- 和 `checkbox `的区别是，切换 `switch` 会直接触发状态改变，而 `checkbox` 一般用于状态标记，需要和提交操作配合。\n\n## 组件&配置\n\n### # switch\n\n| 参数      | 说明                                     | 类型        |默认值 |\n|-----------|------------------------------------------|------------|--------|\n| checked | 指定当前是否选中 [*默认异步属性*] | boolean    | false    |\n| onChange | 变化时回调函数 | Function(checked:Boolean) |   |\n| checkedChildren | 选中时的内容 | string&#124;`config` |   |\n| unCheckedChildren | 非选中时的内容 | string&#124;`config` |  |\n| size | 开关大小，可选值：`default` `small` | string  | default |\n"

/***/ }),
/* 271 */
/***/ (function(module, exports) {

	module.exports = "\n文件选择上传和拖拽上传控件。\n\n## 何时使用\n\n上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。\n\n- 当需要上传一个或一些文件时。\n- 当需要展现上传的进度时。\n- 当需要使用拖拽交互时。\n\n## 组件&配置\n\n> 服务端上传接口实现可以参考 [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload/wiki)。\n\n### # upload\n\n| 参数       | 说明                                                         | 类型        | 默认值|\n|------------|--------------------------------------------------------------| ----------- |-------|\n| fieldName  | 发到后台的文件参数名                                         | string      | 'file'  |\n| defaultFileList | 默认已经上传的文件列表                           | object[] | 无  |\n| fileList   | 已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423) | object[] | 无 |\n| action     | 必选参数, 上传的地址                                         | string      | 无    |\n| data       | 上传所需参数或返回上传参数的方法                   | object&#124;function(file) | 无    |\n| headers    | 设置上传的请求头部，IE10 以上有效                    | object      | 无    |\n| showUploadList | 是否展示 uploadList, 可设为一个对象，用于单独设定 showPreviewIcon 和 showRemoveIcon | Boolean or { showPreviewIcon?: boolean, showRemoveIcon?: boolean } | true |\n| multiple   | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件。  | boolean     | false |\n| accept     | 接受上传的文件类型, 详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)    | string      | 无    |\n| beforeUpload | 上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传。**注意：IE9 不支持该方法**。 | (file, fileList) => `boolean | Promise`    | 无    |\n| customRequest | 通过覆盖默认的上传行为，可以自定义自己的上传实现 | Function | 无 |\n| onChange   | 上传文件改变时的状态，详见 [onChange](#onChange)                | Function    | 无    |\n| listType   | 上传列表的内建样式，支持三种基本样式 `text`, `picture` 和 `picture-card`     | string      | 'text'|\n| onPreview  | 点击文件链接或预览图标时的回调                              | Function(file) | 无    |\n| onRemove   | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除。                | Function(file): `boolean | Promise` | 无   |\n| supportServerRender | 服务端渲染时需要打开这个                           | boolean | false    |\n| disabled | 是否禁用                           | boolean | false    |\n| withCredentials | 上传请求时是否携带 cookie | boolean | false |\n\n### onChange\n\n> 上传中、完成、失败都会调用这个函数。\n\n文件状态改变的回调，返回为：\n\n```js\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n1. `file` 当前操作的文件对象。\n\n   ```js\n   {\n      uid: 'uid',      // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突\n      name: 'xx.png'   // 文件名\n      status: 'done',  // 状态有：uploading done error removed\n      response: '{\"status\": \"success\"}',  // 服务端响应内容\n   }\n   ```\n   > `antd@1.9.0` 之前，multiple 模式下，此参数为一个对象数组 `[file, ...]`，`antd@1.9.0` 开始无论是否多选，均为一个对象。\n\n2. `fileList` 当前的文件列表。\n3. `event` 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。\n\n"

/***/ }),
/* 272 */
/***/ (function(module, exports) {

	module.exports = "\n用来代表用户或事物，支持图片、图标或字符展示。\n\n## 组件&配置\n\n### # avatar\n\n| 参数        | 说明                                                      | 类型        | 默认值 |\n|----------- |--------------------------------------------------------- | ----------  | ------- |\n| shape       | 指定头像的形状                          | Enum{ 'circle', 'square' }     | `circle`  |\n| size       | 设置头像的大小                           | Enum{ 'large', 'small', 'default' }       | `default` |\n| src  | 图片类头像的资源地址                                     | string   | -    |\n| icon    | 设置头像的图标类型，参考 `Icon` 组件                                       | string   | -    |\n"

/***/ }),
/* 273 */
/***/ (function(module, exports) {

	module.exports = "\n图标右上角的圆形徽标数字。\n\n## 何时使用\n\n一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。\n\n## 组件&配置\n\n### # badge\n\n| 参数           | 说明                             | 类型       | 默认值 |\n|----------------|----------------------------------|------------|---------|\n| count          | 展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏 | number | |\n| overflowCount  | 展示封顶的数字值                 | number | 99 |\n| showZero       | 当数值为 0 时，是否展示 Badge   | boolean | false |\n| dot            | 不展示数字，只有一个小红点       | boolean | false  |\n| status         | 设置 badge 为状态点            | Enum{ 'success', 'processing, 'default', 'error', 'warning' } | '' |\n| text           | 在设置了 `status` 的前提下有效，设置状态点的文本  | string | '' |\n"

/***/ }),
/* 274 */
/***/ (function(module, exports) {

	module.exports = "\n按照日历形式展示数据的容器。\n\n## 何时使用\n\n当数据是日期或按照日期划分时，例如日程、课表、价格日历等，农历等。目前支持年/月切换。\n\n\n## 组件&配置\n\n### # calendar\n\n**注意：**calendar 部分 locale 是从 value 中读取，所以请先正确设置 moment 的 locale。\n\n\n| 参数         | 说明           | 类型     | 默认值       |\n|--------------|----------------|----------|--------------|\n| value        | 展示日期       | [moment](http://momentjs.com/)     | 当前日期     |\n| defaultValue | 默认展示的日期  | [moment](http://momentjs.com/)     | 默认日期     |\n| mode         | 初始模式，`month/year` | string | month  |\n| fullscreen   | 是否全屏显示   | boolean     | true         |\n| dateCellRender      | 自定义渲染日期单元格，返回内容会被追加到单元格| (date: moment) => UF.init({...})   | 无 |\n| monthCellRender     | 自定义渲染月单元格，返回内容会被追加到单元格  | (date: moment) => UF.init({...})   | 无 |\n| dateFullCellRender  | 自定义渲染日期单元格，返回内容覆盖单元格| (date: moment) => UF.init({...})   | 无 |\n| monthFullCellRender | 自定义渲染月单元格，返回内容覆盖单元格  | (date: moment) => UF.init({...})   | 无 |\n| locale       | 国际化配置     | object   | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)  |\n| onPanelChange| 日期面板变化回调 | function(date: moment, mode: string) | 无 |\n| onSelect     | 点击选择日期回调 | function(date: moment）              | 无 |\n| disabledDate | 不可选择的日期 | (currentDate: moment) => boolean | 无 |"

/***/ }),
/* 275 */
/***/ (function(module, exports) {

	module.exports = "\n通用卡片容器。\n\n## 何时使用\n\n最基础的卡片容器，可承载文字、列表、图片、段落，常用于后台概览页面。\n\n## 组件&配置\n\n### # card\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| title    | 卡片标题 | string&#124;`config`   |  -  |\n| extra    | 卡片右上角的操作区域 | string&#124;`config`   | - |\n| bordered | 是否有边框 | boolean   |  true  |\n| bodyStyle | 内容区域自定义样式 | object   |  -  |\n| noHovering | 取消鼠标移过浮起 | boolean | false |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean   |  false  |\n"

/***/ }),
/* 276 */
/***/ (function(module, exports) {

	module.exports = "\n旋转木马，一组轮播的区域。\n\n## 何时使用\n\n- 当有一组平级的内容。\n- 当内容空间不足时，可以用走马灯的形式进行收纳，进行轮播展现。\n- 常用于一组图片或卡片轮播。\n\n## 组件&配置\n\n### # carousel\n\n| 参数             | 说明                                         | 类型     | 默认值                          |\n|------------------|----------------------------------------------|----------|---------------------------------|\n| effect           | 动画效果函数，可取 scrollx, fade | string | scrollx |\n| dots | 是否显示面板指示点 | boolean   | true |\n| vertical | 垂直显示 | boolean   | false |\n| autoplay | 是否自动切换 | boolean   | false |\n| easing | 动画效果 | string   | linear |\n| beforeChange      | 切换面板的回调                              | function(from, to) | 无\n| afterChange       | 切换面板的回调                              | function(current)  | 无\n"

/***/ }),
/* 277 */
/***/ (function(module, exports) {

	module.exports = "\n可以折叠/展开的内容区域。\n\n## 何时使用\n\n- 对复杂区域进行分组和隐藏，保持页面的整洁。\n- `手风琴` 是一种特殊的折叠面板，只允许单个内容区域展开。\n\n## 组件&配置\n\n### # collapse\n\n| 参数             | 说明                                         | 类型     | 默认值                          |\n|------------------|----------------------------------------------|----------|---------------------------------|\n| accordion        | 手风琴，每次只打开一个tab。默认打开第一个。 | boolean   | 无 |\n| activeKey        | 当前激活 tab 面板的 key| string[]&#124;string   | 默认无，accordion模式下默认第一个元素|\n| fixed            | 固定面板，无法再点击面板头进行折叠展开交互 |  boolean  | false |\n| bordered        | 是否显示边框，提供一套没有边框的简洁样式。 |  boolean  | true |\n| onChange         | 切换面板的回调                               | Function | 无  |\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('collapse').open(key)`。\n\n参数       | 说明           | 参数    \n-----------|----------------|-----------\nopen  | 打开某个Panel，传参为Panel的key值 |  open(key)  \nclose  | 关闭某个Panel，传参为Panel的key值 |  close(key)  \n\n### # panel\n\n| 参数 | 说明             | 类型                    | 默认值 |\n|------|------------------|-------------------------|--------|\n| key  | 对应 activeKey   | string                  | 无 (如果key不存在则取name值)   |\n| header | 面板头内容 | string&#124;`config` | 无     |\n| disabled | 禁用后的面板展开与否将无法通过用户交互改变 | boolean | false |\n| style | 样式对象，可用于控制每个面板的样式，如背景色、圆角和边距等 | object | false |\n"

/***/ }),
/* 278 */
/***/ (function(module, exports) {

	module.exports = "\n点击/鼠标移入元素，弹出气泡式的卡片浮层。\n\n## 何时使用\n\n当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。\n\n和 `Tooltip` 的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等。\n\n## 组件&配置\n\n### # popover\n\n| 参数      | 说明                                     | 类型          | 默认值 |\n|-----------|------------------------------------------|---------------|--------|\n| title     | 卡片标题                                 | string&#124;`config` | 无     |\n| body   | 卡片内容                            | string&#124;`config` | 无     |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string     | top    |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上 | Function(triggerNode) | () => document.body |\n| arrowPointAtCenter | 箭头是否指向目标元素中心 | boolean | `false` |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置             | boolean | `true` |\n| visible   | 用于手动控制浮层显隐                     | boolean       | false  |\n| onVisibleChange | 显示隐藏的回调                      | (visible) => void | 无     |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0 |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |\n| trigger   | 触发行为，可选 `hover/focus/click`       | string        | hover  |\n| overlayClassName | 卡片类名                            | string | 无     |\n| overlayStyle | 卡片样式                            | object | 无     |\n"

/***/ }),
/* 279 */
/***/ (function(module, exports) {

	module.exports = "\n简单的文字提示气泡框。\n\n## 何时使用\n\n鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。\n\n可用来代替系统默认的 `title` 提示，提供一个`按钮/文字/操作`的文案解释。\n\n## 组件&配置\n\n### # tooltip\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|------------------------------------------|------------|--------|\n| title     | 提示文字                                 | string &#124; `config` | 无     |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string     | top    |\n| arrowPointAtCenter | 箭头是否指向目标元素中心 | boolean | `false` |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置             | boolean | `true` |\n| visible   | 用于手动控制浮层显隐                     | boolean       | false  |\n| onVisibleChange | 显示隐藏的回调                      | (visible) => void | 无     |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0 |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |\n| trigger   | 触发行为，可选 `hover/focus/click`       | string        | hover  |\n| overlayClassName | 卡片类名                            | string | 无     |\n| overlayStyle | 卡片样式                            | object | 无     |\n\n"

/***/ }),
/* 280 */
/***/ (function(module, exports) {

	module.exports = "\n选项卡切换组件。\n\n## 何时使用\n\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\nAnt Design 依次提供了三级选项卡，分别用于不同的场景。\n\n- 卡片式的页签，提供可关闭的样式，常用于容器顶部。\n- 标准线条式页签，用于容器内部的主功能切换，这是最常用的 Tabs。\n- [RadioButton](#/DataEntry/Radio) 可作为更次级的页签来使用。\n\n## 组件&配置\n\n### # tabs\n\n| 参数             | 说明                                         | 类型     | 默认值        |\n|------------------|----------------------------------------------|----------|---------------|\n| activeKey        | 当前激活 tab 面板的 key                      | string   | 无            |\n| defaultActiveKey | 初始化选中面板的 key，如果没有设置 activeKey | string   | 第一个面板    |\n| tabBarExtraContent | tab bar 上额外的元素                       | `config` | 无          |\n| tabBarStyle      | tar bar 的样式对象                           | object   | -             |\n| mode | 页签的基本样式，可选 `line`、`card`       类型   | string   | 'line'      |\n| size | 大小，提供 `default` 和 `small` 两种大小，仅当 `mode=\"line\"` 时生效。  | string   | 'default'      |\n| items | 每项标签页的配置，见下面的`item`配置 | array | |\n| tabPosition | 页签位置，可选值有 `top` `right` `bottom` `left`  | string   | 'top'      |\n| animated | 是否使用动画切换 Tabs，在 `tabPosition=top\\bottom` 时有效 | boolean &#124; {inkBar:boolean, tabPane:boolean} | true, 当 mode=\"card\" 时为 false |\n| forceRefresh | 是否点击Tab标签时，强制刷新内容 | boolean | false |\n| onChange         | 切换面板的回调                               | function (tabKey) {} | 无            |\n| onTabClick       | tab 被点击的回调                             | function (tabKey) {} | 无            |\n\n\n#### *item*\n\n原`tab-pane`组件\n\n| 参数 | 说明             | 类型                    | 默认值 |\n|------|------------------|-------------------------|--------|\n| key  | 对应 activeKey   | string                  | 无 (如果 key 不存在，则取 name 值)    |\n| tab  | 选项卡头显示文字 | string&#124;`config` | 无     |\n| content  | 标签页中的内容 | string&#124;`config` | 无     |\n"

/***/ }),
/* 281 */
/***/ (function(module, exports) {

	module.exports = "\n进行标记和分类的小标签。\n\n## 何时使用\n\n- 用于标记事物的属性和维度。\n- 进行分类。\n\n## 组件&配置\n\n### # tag\n\n| 参数           | 说明                           | 类型  | 默认值 |\n|----------------|-------------------------------|------|-------|\n| color          | 标签色                         | string | -   |\n| closable       | 标签是否可以关闭               | boolean    | false  |\n| onClose        | 关闭时的回调                  | (e) => void | - |\n\n### # checkable-tag\n\n| 参数           | 说明                           | 类型  | 默认值 |\n|----------------|-------------------------------|------|--------|\n| checked        | 设置标签的选中状态               | boolean | false |\n| onChange       | 点击标签时触发的回调             | (checked) => void | - |\n"

/***/ }),
/* 282 */
/***/ (function(module, exports) {

	module.exports = "\n垂直展示的时间流信息。\n\n## 何时使用\n\n- 当有一系列信息需要从上至下按时间排列时；\n- 需要有一条时间轴进行视觉上的串联时；\n\n## 组件&配置\n\n### # timeline\n\n时间轴。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|----------------------------------------|------------|-------|\n| pending  | 指定最后一个幽灵节点是否存在或内容 | boolean 或 string 或 `config` | false  |\n\n### # timeline-item\n\n时间轴的每一个节点。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|------------------------------------------|------------|-------|\n| color   | 指定圆圈颜色 `blue, red, green`，或自定义的色值 | string | blue  |\n| dot   | 自定义时间轴点（会使用默认颜色） | string 或 `config` | -  |"

/***/ }),
/* 283 */
/***/ (function(module, exports) {

	module.exports = "\n将页面元素钉在可视范围。\n\n## 何时使用\n\n当内容区域比较长，需要滚动页面时，这部分内容对应的操作或者导航需要在滚动范围内始终展现。常用于侧边菜单和按钮组合。\n\n页面可视范围过小时，慎用此功能以免遮挡页面内容。\n\n## 组件&配置\n\n### # affix\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发   | number |         |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发   | number |         |\n| onChange | 固定状态改变时触发的回调函数   | Function(affixed) | 无        |\n\n**注意：**`affix` content内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接在 `affix` 的style中设置绝对定位：\n"

/***/ }),
/* 284 */
/***/ (function(module, exports) {

	module.exports = "\n显示当前页面在系统层级结构中的位置，并能向上返回。\n\n## 何时使用\n\n- 当系统拥有超过两级以上的层级结构时；\n- 当需要告知用户『你在哪里』时；\n- 当需要向上导航的功能时。\n\n## 组件&配置\n\n### # breadcrumb\n\n 参数      | 说明                              | 类型              |  可选值 | 默认值 \n-----------|-----------------------------------|-----------------|---------|--------\nseparator | 分隔符自定义                      | string &#124; `config` |         | '/'    \nitemRender | 自定义链接函数，和 `items属性`/`Router` 配合使用 | (route, params, items, paths) => `{...config}` | |\nitems | 自定义内容。值为一个数组，数组的每一项包含两个值，如：`[{path: 'index', breadcrumbName: 'Home'}]` | array |  |\n\n\n* #### 可配合[`Router`](#/General/Router)使用\n\n需在`Router`的各项配置中增加`breadcrumbName`作为面包屑展示的名称，可以配置`breadcrumbIcon`作为面包屑名称前面的图标。\n\n当某一层级的路由没有配置 `breadcrumbName` 和 `breadcrumbIcon`，则会在面包屑中把这一层过滤掉\n\n和 `Router` 配合使用能满足大部分应用场景，所以一般不使用`items`属性。\n\n所以使用面包屑时的配置很简单，如下：\n\n```javascript\n{\n    type: 'breadcrumb'\n}\n```\n\n* #### `breadcrumbName`可使用路由中的动态参数\n\n即面包屑中的内容可以随着路由的参数变化，如下 Router 配置：\n\n```javascript\n{\n    path: 'list',\n    breadcrumbName: '应用列表',\n    childRoutes: [\n        {\n            path: ':id',\n            component: require('details'),\n            breadcrumbName: '详情-:id'\n        }\n    ]\n}\n```\n\n当访问链接 `/list/123` 时，面包屑展示为 `应用列表 / 详情-123`"

/***/ }),
/* 285 */
/***/ (function(module, exports) {

	module.exports = "\n向下弹出的列表。\n\n## 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n## 组件&配置\n\n### # dropdown\n\n属性如下\n\n| 参数        | 说明             | 类型               | 默认值       |\n|-------------|------------------|--------------------|--------------|\n| trigger     | 触发下拉的行为   | Array['click'或'hover'] | ['hover']        |\n| overlay     | 菜单         | `Menu` 见 [Menu](#/Navigation/Menu) | -     |\n| visible     | 菜单是否显示 | boolean   | -           |\n| disabled    | 菜单是否禁用 | boolean   | -           |\n| onVisibleChange  | 菜单显示状态改变时调用，参数为 visible | Function(visible) | - |\n| placement | 菜单弹出位置：`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight` | String | `bottomLeft` |\n\n菜单可由 `menu` 取得，可设置 `onSelect` 回调。\n\n> dropdown 下的 menu 默认不可选中。如果需要菜单可选中，可以指定 `menu`的`selectable`属性为`true`.\n\n### # dropdown-button\n\n| 参数        | 说明             | 类型               | 默认值       |\n|-------------|------------------|--------------------|--------------|\n| type        | 按钮类型，和 Button 一致 | string | 'default' |\n| size        | 按钮大小，和 Button 一致 | string | 'default' |\n| onClick     | 点击左侧按钮的回调，和 [Button]、 一致 | Function   | - |\n| trigger     | 触发下拉的行为   | Array['click'或'hover'] | ['hover']        |\n| overlay     | 菜单         | Menu | -     |\n| visible     | 菜单是否显示 | boolean   | -           |\n| disabled    | 菜单是否禁用 | boolean   | -           |\n| onVisibleChange  | 菜单显示状态改变时调用，参数为 visible | Function | - |\n| placement | 菜单弹出位置：`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight` | String | `bottomLeft` |\n"

/***/ }),
/* 286 */
/***/ (function(module, exports) {

	module.exports = "\n为页面和功能提供导航的菜单列表。\n\n## 何时使用\n\n导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n更多布局和导航的使用可以参考：[Layout 布局](#/General/Layout)。\n\n## 组件&配置\n\n### # menu\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|---------------|----------|--------------|\n| theme    | 主题颜色 | string: `light` `dark` | `light` |\n| mode | 菜单类型，现在支持垂直、水平、和内嵌模式三种 | string: `vertical` `horizontal` `inline` | `vertical` |\n| selectedKeys | 当前选中的菜单项 key 数组 | string[] |      |\n| items | 菜单项列表，定义菜单都包含哪些值，为一个对象数组，见`items` | items[] |  |\n| defaultSelectedKeys | 初始选中的菜单项 key 数组 | string[] |      |\n| openKeys | 当前展开的 SubMenu 菜单项 key 数组 | string[] |  |\n| defaultOpenKeys | 初始展开的 SubMenu 菜单项 key 数组 |  |      |\n| onOpenChange | SubMenu 展开/关闭的回调 | function(openKeys: string[]) | noop |\n| onSelect | 被选中时调 | function({ item, key, selectedKeys }) | 无   |\n| onDeselect | 取消选中时调用，仅在 multiple 生效 | function({ item, key, selectedKeys }) | - |\n| onClick | 点击 MenuItem 调用此函数  | function({ item, key, keyPath }) | - |\n| style | 根节点样式 | object | |\n| inlineIndent | inline 模式的菜单缩进宽度 | number | 24 |\n| multiple | 是否允许多选 | boolean | false |\n| inlineCollapsed | inline 时菜单是否收起状态 | boolean | - |\n| selectable | 是否允许选中 | boolean | true |\n| followRoute | 是否跟随路由自动高亮对应项。需和`items`中的`key`值配合使用 | boolean | true |\n\n\n#### *item*\n\n| 参数     | 说明           | 类型     | 默认值       |\n|----------|----------------|----------|--------------|\n| disabled  | 是否禁用 | boolean   |  false  |\n| title  | 菜单项在页面显示的内容 | string&#124;`config` |    |\n| icon | 图标，显示在`title`内容之前。当需要使用折叠侧边栏功能时，建议设置图标。图标类型可选值见[Icon](#/General/Icon)的`mode`属性 |  string |  |\n| key | 唯一标志。和`link`属性配合时可以不填。如果设置`followRoute: true`，建议不设置 key 或者 key 值和对应的路由保持一致 |  string | 必须 |\n| link | 点击菜单项时跳转的链接（路由）。默认作为一个路由处理，如果想使用真正的链接，可在链接前加上 http/https。 | string | subMenu 或 group 类型时，此属性无效 |\n| childItems | 子菜单项列表。一旦设置 childItems，则认为当前菜单项为一个 subMenu 类型或者是 group 类型 | items[] | |\n| mode | 菜单项类型。当为非普通菜单项时，可以定义两种菜单项类型：`subMenu`、`group` | string | `subMenu` |\n| onTitleClick | 点击子菜单标题 | function({ key, domEvent }) | - |\n| onClick | 点击导航项时的事件 | function(e, item) | - |\n\n***以上参数自由组合可以产生三种类型的菜单项：item、subMenu、group。***\n\n**item**\n\n普通菜单项，其下没有子内容，用于点击菜单项切换页面。\n\n常用参数为： `disabled` / `title` / `link`\n\n**subMenu**\n\n当有 `childItems` 属性时，菜单项默认为 subMenu 类型，具有折叠收起/展开的功能。此类型的组件一般不使其具有切换路由的能力，多用于分类，此时需设置key值。\n\n常用参数为： `disabled` / `title` / `key` / `icon` / `childItems`\n\n**group**\n\nsubMenu 的另一种形式，取消了折叠收起/展开功能。具有对菜单项进行分类的同时，又减少了菜单项的层级。\n\n常用参数为： `title` / `childItems`\n"

/***/ }),
/* 287 */
/***/ (function(module, exports) {

	module.exports = "\n采用分页的形式分隔长列表，每次只加载一个页面。\n\n## 何时使用\n\n- 当加载/渲染所有数据将花费很多时间时；\n- 可切换页码浏览数据。\n\n## 组件&配置\n\n### # pagination\n\n| 参数             | 说明                               | 类型          | 默认值                   |\n|------------------|------------------------------------|---------------|--------------------------|\n| current          | 当前页数                           | number        | -                   |\n| total            | 数据总数                           | number        | 0                        |\n| pageSize         | 每页条数                           | number        | -                         |\n| onChange         | 页码改变的回调，参数是改变后的页码及每页条数 | Function(page, pageSize)      | noop                     |\n| showSizeChanger  | 是否可以改变 pageSize              | boolean        | false                    |\n| pageSizeOptions  | 指定每页可以显示多少条             | string[] | ['10', '20', '30', '40'] |\n| onShowSizeChange | pageSize 变化的回调                | Function(current, size)      | noop                     |\n| showQuickJumper  | 是否可以快速跳转至某页             | boolean         | false                    |\n| size             | 当为「small」时，是小尺寸分页      | string        | \"\"                       |\n| simple           | 当添加该属性时，显示为简单分页     | boolean        | -                       |\n| showTotal        | 用于显示数据总量和当前数据顺序     | Function(total, range) | -              |\n"

/***/ }),
/* 288 */
/***/ (function(module, exports) {

	module.exports = "\n引导用户按照流程完成任务的导航条。\n\n## 何时使用\n\n当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务。\n\n## 组件&配置\n\n### # steps\n\n整体步骤条。\n\n| 参数      | 说明                                      | 类型         | 默认值 |\n|----------|------------------------------------------|-------------|-------|\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | process |\n| size | 指定大小，目前支持普通（`default`）和迷你（`small`）| string | default |\n| direction | 指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向 | string | horizontal  |\n| progressDot | 指定为点状步骤条 | Boolean | false |\n\n### # step\n\n步骤条内的每一个步骤。\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|----------|-----------------------------------------|------------|-------|\n| status | 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error` | string | wait |\n| title | 标题 | string&#124;`config` | - |\n| description | 步骤的详情描述，可选 | string&#124;`config` | -  |\n| icon | 步骤图标的类型，可选 | string&#124;`config` | - |\n"

/***/ }),
/* 289 */
/***/ (function(module, exports) {

	module.exports = "\n警告提示，展现需要关注的信息。\n\n## 何时使用\n\n- 当某个页面需要向用户显示警告的信息时。\n- 非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。\n\n## 组件&配置\n\n### # alert\n\n| 参数        | 说明                                                      | 类型        | 默认值 |\n|----------- |---------------------------------------------------------  | ---------- |-------|\n| mode       | 指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error`   | string     | `info`，`banner` 模式下默认值为 `warning`    |\n| closable   | 默认不显示关闭按钮                                  | boolean   | 无    |\n| closeText  | 自定义关闭按钮                                     | string&#124;   | 无    |\n| message    | 警告提示内容                                       | string&#124;`config`   | 无    |\n| description | 警告提示的辅助性文字介绍                            | string&#124;`config`   | 无    |\n| onClose     | 关闭时触发的回调函数                                | Function   | 无    |\n| showIcon   | 是否显示辅助图标                                 | boolean   | false，`banner` 模式下默认值为 true    |\n| banner   | 是否用作顶部公告                                 | boolean   | false    |\n"

/***/ }),
/* 290 */
/***/ (function(module, exports) {

	module.exports = "\n全局展示操作反馈信息。\n\n## 何时使用\n\n- 可提供成功、警告和错误等反馈信息。\n- 顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。\n\n## API\n\n组件提供了一些静态方法，使用方式和参数如下：\n\n- `UF.message.success(content, duration, onClose)`\n- `UF.message.error(content, duration, onClose)`\n- `UF.message.info(content, duration, onClose)`\n- `UF.message.warning(content, duration, onClose)`\n- `UF.message.warn(content, duration, onClose)` // alias of warning\n- `UF.message.loading(content, duration, onClose)`\n\n| 参数       | 说明           | 类型                       | 默认值       |\n|------------|----------------|--------------------------|--------------|\n| content    | 提示内容       | string&#124;`config` | -           |\n| duration   | 自动关闭的延时，单位秒。如果设置为0，则一直显示，直到调用 `destroy` 方法 | number               | 3          |\n| onClose   | 关闭时触发的回调函数 | Function          | -         |\n\n还提供了全局配置和全局销毁方法：\n\n- `UF.message.config(options)`\n- `UF.message.destroy()`\n\n### message.config\n\n```javascript\nUF.message.config({\n    top: 100,\n    duration: 2,\n});\n```\n\n| 参数       | 说明                | 类型                       | 默认值       |\n|------------|--------------------|--------------------------|-------------|\n| top        | 消息距离顶部的位置 | number                      | 24px        |\n| duration   | 默认自动关闭延时，单位秒 | number                 | 3         |\n| autoMerge  | 自动合并相同内容的提示信息 | boolean                 | true        |\n\n> 以上参数，除使用`UF.message.config`进行配置外，也可以在`UF.config({components: ''})`中配置，如下：\n\n```javascript\nUF.config({\n    // ...\n    components: {\n        message: {\n            top: '50px',\n            duration: 2.5,\n            autoMerge: false\n        }\n    }\n});\n```"

/***/ }),
/* 291 */
/***/ (function(module, exports) {

	module.exports = "\n全局展示通知提醒信息。\n\n## 何时使用\n\n在系统四个角显示通知提醒信息。经常用于以下情况：\n\n- 较为复杂的通知内容。\n- 带有交互的通知，给出用户下一步的行动点。\n- 系统主动推送。\n\n## API\n\n- `UF.notification.success(config)`\n- `UF.notification.error(config)`\n- `UF.notification.info(config)`\n- `UF.notification.warning(config)`\n- `UF.notification.warn(config)`\n- `UF.notification.close(key: String)`\n- `UF.notification.destroy()` // 销毁当前全部提示信息\n\nconfig 参数如下：\n\n| 参数          | 说明                                       | 类型                | 默认值      |\n| ----------- | ---------------------------------------- | ----------------- | -------- |\n| message     | 通知提醒标题，必选                                | string&#124;`config` | -        |\n| description | 通知提醒内容，必选                                | string&#124;`config` | -        |\n| className   | 自定义 CSS class                            | string            | -        |\n| style       | 自定义内联样式                                  | Object            | -        |\n| btn         | 自定义关闭按钮                                  | `config`         | -        |\n| icon        | 自定义图标                                    | `config`         | -        |\n| key         | 当前通知唯一标志                                 | string            | -        |\n| onClose     | 点击默认关闭按钮时触发的回调函数                         | Function          | -        |\n| duration    | 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭            | number            | 4.5      |\n| placement   | 弹出位置，可选 `topLeft` `topRight` `bottomLeft` `bottomRight` | string            | topRight |\n\n\n- `UF.notification.config(options)`\n\n还提供了一个全局配置方法，在调用前提前配置，全局一次生效。\n\n| 参数           | 说明                                       | 类型             | 默认值                 |\n| ------------ | ---------------------------------------- | -------------- | ------------------- |\n| placement    | 弹出位置，可选 `topLeft` `topRight` `bottomLeft` `bottomRight` | string         | topRight            |\n| top          | 消息从顶部弹出时，距离顶部的位置，单位像素。                   | number         | 24                  |\n| bottom       | 消息从底部弹出时，距离底部的位置，单位像素。                   | number         | 24                  |\n| duration     | 默认自动关闭延时，单位秒                             | number         | 4.5                 |\n| autoMerge    | 自动合并相同内容的提示信息 | boolean                 | true        |\n\n\n```js\nUF.notification.config({\n    placement: 'bottomRight',\n    bottom: 50,\n    duration: 3,\n});\n```"

/***/ }),
/* 292 */
/***/ (function(module, exports) {

	module.exports = "\n展示操作的当前进度。\n\n## 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n- 当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过2秒时；\n- 当需要显示一个操作完成的百分比时。\n\n## 组件&配置\n\n### # progress\n\n| 属性      | 说明           | 类型     | 默认值         |\n|----------|---------------|----------|---------------|\n| mode     | 类型，可选 `line` `circle` `dashboard` | string   | line      |\n| percent  | 百分比 | number | 0 |\n| format   | 内容的模板函数 | function(percent)   | `percent => percent + '%'` |\n| status   | 状态，可选：`success` `exception` `active` | string   | - |\n| showInfo | 是否显示进度数值或状态图标 | boolean | true  |\n| strokeWidth  | `(mode=line)` 进度条线的宽度，单位 px | number | 10 |\n| strokeWidth | `(mode=circle)` 圆形进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 |\n| width  | `(mode=circle)` 圆形进度条画布宽度，单位 px | number | 132 |\n| gapDegree | `(mode=circle)` 圆形进度条缺口角度，可取值 0 ~ 360 | number | 0 |\n| gapPosition | `(mode=circle)` 圆形进度条缺口位置 | Enum{ 'top', 'bottom', 'left', 'right' } | `top` |"

/***/ }),
/* 293 */
/***/ (function(module, exports) {

	module.exports = "\n点击元素，弹出气泡式的确认框。\n\n## 何时使用\n\n目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。\n\n和 `confirm` 弹出的全屏居中模态对话框相比，交互形式更轻量。\n\n## 组件&配置\n\n### # popconfirm\n\n| 参数      | 说明                                     | 类型          | 默认值 |\n|-----------|------------------------------------------|---------------|--------|\n| title     | 确认框的描述                             | string&#124;`config` | 无     |\n| onConfirm | 点击确认的回调                           | function(e)      | 无     |\n| onCancel  | 点击取消的回调                           | function(e)      | 无     |\n| okText    | 确认按钮文字                              | string        | 确定   |\n| okType     | 确认按钮类型    | string           | primary       |\n| cancelText| 取消按钮文字                              | string        | 取消   |\n| cancelType | 取消按钮类型    | string           | default       |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string     | top    |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上。`2.5.2` 之前请使用 `getTooltipContainer` | Function(triggerNode) | () => document.body |\n| arrowPointAtCenter | 箭头是否指向目标元素中心，`antd@1.11+` 支持 | boolean | `false` |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置             | boolean | `true` |\n| visible   | 用于手动控制浮层显隐                     | boolean       | false  |\n| onVisibleChange | 显示隐藏的回调                      | (visible) => void | 无     |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0 |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |\n| trigger   | 触发行为，可选 `hover/focus/click`       | string        | hover  |\n| overlayClassName | 卡片类名                            | string | 无     |\n| overlayStyle | 卡片样式                            | object | 无     |\n\n"

/***/ }),
/* 294 */
/***/ (function(module, exports) {

	module.exports = "\n用于页面和区块的加载中状态。\n\n## 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n## 组件&配置\n\n### # loading\n\n参数 | 说明 | 类型 | 默认值\n----|------|-----|------\nsize | 组件大小，可选值为 `small` `default` `large` | string | 'default'\nloading | 是否展示 loading 状态 | boolean | false\ntip | 当作为包裹元素时，可以自定义描述文案 | string | -\ndelay | 延迟显示加载效果的时间（防止闪烁） | number (毫秒) | -\nwrapperClassName | 包装器的类属性 | string | -\n\n#### api\n\n函数名 | 说明 | 参数\n------|------|-----\nloading | 更改 loading 状态 | loading(true/false)\n\n> 使用方法如：`UF('my-loading').loading(true);`"

/***/ }),
/* 295 */
/***/ (function(module, exports) {

	module.exports = "\n用于跳转到页面指定位置。\n\n## 何时使用\n\n需要展现当前页面上可供跳转的锚点链接，以及快速在锚点之间跳转。\n\n## 组件&配置\n\n### # anchor\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发   | number |         |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发   | number |         |\n| bounds | 锚点区域边界 | number | 5(px) |\n| affix | 固定模式 | boolean | false |\n| showInkInFixed | 固定模式是否显示小圆点 | boolean | false |\n\n### anchor-link\n\n| 成员        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| href    | 锚点链接   | string |         |\n| title | 文字内容   | string&#124;`config` |         |"

/***/ }),
/* 296 */
/***/ (function(module, exports) {

	module.exports = "\n返回页面顶部的操作按钮。\n\n## 何时使用\n\n- 当页面内容区域比较长时；\n- 当用户需要频繁返回顶部查看相关内容时。\n\n> 有默认样式，距离底部 `50px`，可覆盖。\n\n> 自定义样式宽高不大于 40px * 40px。\n\n### # backtop\n\n| 参数        | 说明           | 类型               | 默认值       |\n|-------------|----------------|--------------------|--------------|\n| type    | 组件类型: `backtop`   | string |         |\n| visibilityHeight    | 滚动高度达到此参数值才出现 `Backtop`   | number | 400        |\n| onClick | 点击按钮的回调函数   | Function | -        |\n| target | 设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | Function | () => window |\n"

/***/ }),
/* 297 */
/***/ (function(module, exports) {

	module.exports = "## 说明\n\n移动版。\n\n\n## 版本\n* 开发版：dev - [查看最新功能](http://antd.uf.baidu.com:8000/uf/#/UpdateLog)\n* Beta版：%{version}%\n* 稳定版：%{stableVersion}%\n\n\n## 浏览器引入\n> 以下库文件分为三个版本：\n> * dev 版：为当前研发版本，可对遇到的问题进行及时响应并修复，前期推荐使用dev版。\n> * beta 版：新上线的版本，不会频繁迭代，稳定性有待检测。\n> * stable 版：屏蔽了 warning 及部分 error 问题，使代码尽量可以执行。同时，代码进行了压缩，文件较小，报错及问题定位较困难。\n\n#### UF组件库\n\ndev:\n* http://antd.uf.baidu.com:8099/v/dev/theme-mobile.css\n* http://antd.uf.baidu.com:8099/v/dev/dll-mobile.js\n* http://antd.uf.baidu.com:8099/v/dev/antd-mobile.js\n* http://antd.uf.baidu.com:8099/v/dev/uf-mobile.js\n\nbeta:\n* http://uf.baidu.com/v/%{version}%/theme-mobile.css\n* http://uf.baidu.com/v/%{version}%/dll-mobile.js\n* http://uf.baidu.com/v/%{version}%/antd-mobile.js\n* http://uf.baidu.com/v/%{version}%/uf-mobile.js\n\nstable:\n* http://uf.baidu.com/v/%{stableVersion}%/theme-mobile.min.css\n* http://uf.baidu.com/v/%{stableVersion}%/dll-mobile.min.js\n* http://uf.baidu.com/v/%{stableVersion}%/antd-mobile.min.js\n* http://uf.baidu.com/v/%{stableVersion}%/uf-mobile.min.js\n"

/***/ }),
/* 298 */
/***/ (function(module, exports) {

	module.exports = {"name":"uf","versionList":["0.2","0.2.1","0.2.2","0.2.3","0.2.4","0.2.5","0.3.0"],"version":"0.4.0","fixedVersion":"0.4.0.0","stableVersion":"0.3.0","description":"new uf","author":"liuzechun","license":"ISC","repository":{"type":"git","url":"http://icode.baidu.com/files/view/baidu/atm/uf/@tree/master"},"main":"index.js","dependencies":{"antd":"^2.13.7","antd-mobile":"^2.2.8","immutable":"^3.8.1","moment":"^2.17.1","react":"^15.6.2","react-dom":"^15.6.2","react-router":"^3.0.0"},"devDependencies":{"autoprefixer":"^6.5.4","axios":"^0.18.0","babel-core":"^6.18.2","babel-loader":"^6.2.8","babel-plugin-import":"^1.4.0","babel-preset-es2015":"^6.18.0","babel-preset-react":"^6.16.0","babel-preset-stage-0":"^6.24.1","clipboard":"^2.0.4","css-loader":"^0.26.1","extract-text-webpack-plugin":"^1.0.1","history":"^4.4.1","html2canvas":"^0.5.0-beta4","json-loader":"^0.5.4","less":"^2.7.1","less-loader":"^2.2.3","marked":"^0.3.6","postcss-loader":"^1.2.1","sass-loader":"^4.0.2","style-loader":"^0.13.1","text-loader":"0.0.1","underscore":"^1.9.1","webpack":"^1.14.0"},"scripts":{"plugins":"webpack --config plugins/webpack.plugins.js --watch","build-watch":"webpack --config dist/config/webpack.build.js --watch","antd-watch":"webpack --config dist/config/webpack.antd.js --watch","build":"webpack --config dist/config/webpack.build.js","antd":"webpack --config dist/config/webpack.antd.js","dll":"webpack --config dist/config/webpack.dll.js","react":"webpack --config dist/config/webpack.react.js","all":"npm run dll & npm run antd & npm run build","build-mobile-watch":"webpack --config mobile/build/webpack.build.js --watch","build-mobile":"webpack --config mobile/build/webpack.build.js","antd-mobile":"webpack --config mobile/build/webpack.antd.js","dll-mobile":"webpack --config mobile/build/webpack.dll.js","all-mobile":"npm run dll-mobile & npm run antd-mobile & npm run build-mobile","start":"webpack --watch"}}

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.switchCode = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _antd = __webpack_require__(111);

	var _DemoCard = __webpack_require__(113);

	var _DemoCard2 = _interopRequireDefault(_DemoCard);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo展示
	


	// 把配置转换成字符串
	var switchCode = exports.switchCode = __webpack_require__(113).switchCode;

	var Demo = function (_React$Component) {
	    _inherits(Demo, _React$Component);

	    function Demo() {
	        _classCallCheck(this, Demo);

	        return _possibleConstructorReturn(this, (Demo.__proto__ || Object.getPrototypeOf(Demo)).apply(this, arguments));
	    }

	    _createClass(Demo, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var odd = [],
	                even = [];
	            (this.props.list || []).map(function (item, i) {
	                if (!_this2.props.single) {
	                    if (i % 2 > 0) {
	                        odd.push(_react2.default.createElement(_DemoCard2.default, _extends({ key: i, id: i }, item)));
	                    } else {
	                        even.push(_react2.default.createElement(_DemoCard2.default, _extends({ key: i, id: i }, item)));
	                    }
	                } else {
	                    odd.push(_react2.default.createElement(_DemoCard2.default, _extends({ key: i, id: i }, item)));
	                }
	            });
	            return _react2.default.createElement(
	                'div',
	                { className: 'demo' },
	                _react2.default.createElement(
	                    'h2',
	                    { style: { margin: '16px 0' } },
	                    '\u4EE3\u7801\u6F14\u793A'
	                ),
	                !this.props.single ? _react2.default.createElement(
	                    _antd.Row,
	                    { gutter: 18 },
	                    _react2.default.createElement(
	                        _antd.Col,
	                        { span: 12 },
	                        even
	                    ),
	                    _react2.default.createElement(
	                        _antd.Col,
	                        { span: 12 },
	                        odd
	                    )
	                ) : odd
	            );
	        }
	    }]);

	    return Demo;
	}(_react2.default.Component);

	exports.default = Demo;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DemoDisplay = exports.DemoCode = exports.switchCode = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	var _DemoCard = __webpack_require__(113);

	var _utils = __webpack_require__(121);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo展示
	


	var Sider = _antd.Layout.Sider,
	    Content = _antd.Layout.Content;

	function getDemoUrl() {
	    var urlPrefix = location.origin + location.pathname;
	    var hash = location.hash;
	    return urlPrefix + 'docs/demo/mobile.php' + hash;
	}

	// 把配置转换成字符串
	var switchCode = exports.switchCode = __webpack_require__(113).switchCode;

	var DemoMobile = function (_React$Component) {
	    _inherits(DemoMobile, _React$Component);

	    function DemoMobile() {
	        _classCallCheck(this, DemoMobile);

	        return _possibleConstructorReturn(this, (DemoMobile.__proto__ || Object.getPrototypeOf(DemoMobile)).apply(this, arguments));
	    }

	    _createClass(DemoMobile, [{
	        key: 'render',
	        value: function render() {
	            return this.props.isDemo ? _react2.default.createElement(DemoDisplay, this.props) : _react2.default.createElement(DemoCode, this.props);
	        }
	    }]);

	    return DemoMobile;
	}(_react2.default.Component);

	// 页面代码渲染


	exports.default = DemoMobile;

	var DemoCode = exports.DemoCode = function (_React$Component2) {
	    _inherits(DemoCode, _React$Component2);

	    function DemoCode() {
	        _classCallCheck(this, DemoCode);

	        return _possibleConstructorReturn(this, (DemoCode.__proto__ || Object.getPrototypeOf(DemoCode)).apply(this, arguments));
	    }

	    _createClass(DemoCode, [{
	        key: 'render',
	        value: function render() {
	            var demoUrl = getDemoUrl();
	            return _react2.default.createElement(
	                'div',
	                { className: 'demo mobile' },
	                !this.props.list || this.props.list.length === 0 ? '' : _react2.default.createElement(
	                    _antd.Layout,
	                    { style: { background: '#fff' } },
	                    _react2.default.createElement(
	                        Content,
	                        null,
	                        (this.props.list || []).map(function (item, i) {
	                            return _react2.default.createElement(_DemoCard.DemoCodeCard, _extends({ key: i }, item));
	                        })
	                    ),
	                    _react2.default.createElement(
	                        Sider,
	                        { width: 395, style: { background: '#fff', paddingLeft: '20px', height: 620 } },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'mobile-header' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'statbar' },
	                                _react2.default.createElement('img', { width: 350, alt: 'presentation',
	                                    src: './public/img/mobile-header.png',
	                                    style: { margin: '0px 2px' } })
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'nav-bar' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'url-box' },
	                                    demoUrl
	                                )
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'mobile-content' },
	                            _react2.default.createElement('iframe', { src: demoUrl })
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return DemoCode;
	}(_react2.default.Component);

	// 纯展示


	var DemoDisplay = exports.DemoDisplay = function (_React$Component3) {
	    _inherits(DemoDisplay, _React$Component3);

	    function DemoDisplay() {
	        _classCallCheck(this, DemoDisplay);

	        return _possibleConstructorReturn(this, (DemoDisplay.__proto__ || Object.getPrototypeOf(DemoDisplay)).apply(this, arguments));
	    }

	    _createClass(DemoDisplay, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // clone一份，防止内部修改了配置的源数据影响demo代码的展示
	            {
	                (this.props.list || []).map(function (item, i) {
	                    var conf = _utils.Utils.clone(item.config);
	                    window.UF.init(conf, '#' + ('demo-' + i));
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                (this.props.list || []).map(function (item, i) {
	                    return _react2.default.createElement(
	                        'div',
	                        { key: item.title + i },
	                        _react2.default.createElement(
	                            'h3',
	                            null,
	                            item.title
	                        ),
	                        _react2.default.createElement(
	                            'section',
	                            null,
	                            _react2.default.createElement('div', { id: 'demo-' + i })
	                        )
	                    );
	                })
	            );
	        }
	    }]);

	    return DemoDisplay;
	}(_react2.default.Component);

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 头部导航条
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	var SubMenu = _antd.Menu.SubMenu;
	var MenuItemGroup = _antd.Menu.ItemGroup;
	var json = __webpack_require__(298);
	var version = json.version;
	var versionList = json.versionList;

	// 导航列表
	var NavList = [{ key: 'Index', name: '首页', path: '#/Index' }, { key: 'Docs', name: '文档', path: '#/Docs' }, { key: 'Component', name: '组件', path: '#/Component' }, { key: 'Mobile', name: 'Mobile版', path: '#/Mobile' }, { key: 'Other', name: '其他', path: '#/Other', children: [{ key: 'Standard', name: '开发规范', path: '#/Standard' }, { key: 'ThirdParty', name: '第三方组件', path: '#/ThirdParty' }, { key: 'AntdDocs', name: 'Antd 原文档', path: 'http://antd.uf.baidu.com/docs/react/introduce-cn' }, { key: 'Old-uf', name: '返回旧版', path: 'http://uf.baidu.com/uf-react.php' }] }];

	var Header = function (_Component) {
	    _inherits(Header, _Component);

	    function Header(props) {
	        _classCallCheck(this, Header);

	        var _this = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));

	        _this.state = {
	            current: _this.getCurrent(props)
	        };
	        return _this;
	    }

	    _createClass(Header, [{
	        key: 'getCurrent',
	        value: function getCurrent(props) {
	            var current = void 0;
	            if (props.isComponent) {
	                current = 'Component';
	            } else if (props.isDocs) {
	                current = 'Docs';
	            } else {
	                current = (props.current || 'Component').split('/')[0];
	            }
	            return current;
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.setState({
	                current: this.getCurrent(nextProps)
	            });
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.setState({ current: e.key });
	        }
	    }, {
	        key: 'render',
	        value: function render() {

	            var highlight = this.state.current;
	            return _react2.default.createElement(
	                'div',
	                { id: 'header' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'logo' },
	                    _react2.default.createElement('img', { alt: 'logo', src: './public/img/uf.png' }),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'version' },
	                        'UF 2.0'
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'nav' },
	                    _react2.default.createElement(
	                        _antd.Menu,
	                        { mode: 'horizontal', selectedKeys: [highlight],
	                            onClick: this.handleClick.bind(this) },
	                        NavList.map(function (v) {
	                            return v.children ? _react2.default.createElement(
	                                _antd.Menu.SubMenu,
	                                { key: v.key, title: v.name },
	                                v.children.map(function (c) {
	                                    return _react2.default.createElement(
	                                        _antd.Menu.Item,
	                                        { key: c.key },
	                                        _react2.default.createElement(
	                                            'a',
	                                            { href: c.path },
	                                            c.name
	                                        )
	                                    );
	                                })
	                            ) : _react2.default.createElement(
	                                _antd.Menu.Item,
	                                { key: v.key },
	                                _react2.default.createElement(
	                                    'a',
	                                    { href: v.path },
	                                    v.name
	                                )
	                            );
	                        })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'search' },
	                    _react2.default.createElement(_antd.AutoComplete, { dataSource: [], placeholder: '\u641C\u7D22\u7EC4\u4EF6... ' }),
	                    _react2.default.createElement(
	                        _antd.Dropdown,
	                        { overlay: _react2.default.createElement(
	                                _antd.Menu,
	                                null,
	                                versionList.reverse().map(function (v) {
	                                    return _react2.default.createElement(
	                                        _antd.Menu.Item,
	                                        { key: 'v' + v },
	                                        _react2.default.createElement(
	                                            'a',
	                                            { href: '?v=' + v },
	                                            'v' + v
	                                        )
	                                    );
	                                })
	                            ) },
	                        _react2.default.createElement(
	                            _antd.Button,
	                            { size: 'small' },
	                            'v' + version,
	                            ' ',
	                            _react2.default.createElement(_antd.Icon, { type: 'down' })
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Header;
	}(_react.Component);

	exports.default = Header;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SubMenu = _antd.Menu.SubMenu;
	var MenuItemGroup = _antd.Menu.ItemGroup;

	var Nav = function (_Component) {
	    _inherits(Nav, _Component);

	    function Nav(props) {
	        _classCallCheck(this, Nav);

	        var _this = _possibleConstructorReturn(this, (Nav.__proto__ || Object.getPrototypeOf(Nav)).call(this, props));

	        _this.state = {
	            current: props.current || 'Guide'
	        };
	        return _this;
	    }

	    _createClass(Nav, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.setState({
	                current: nextProps.current
	            });
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.setState({ current: e.key });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'left-side' },
	                _react2.default.createElement(
	                    _antd.Menu,
	                    { mode: 'inline', onClick: this.handleClick.bind(this),
	                        selectedKeys: [this.state.current],
	                        openKeys: this.props.navList.map(function (v) {
	                            return v.path;
	                        })
	                        // defaultOpenKeys={this.props.navList.filter(
	                        //     v=>!!v.children && (!v.retract || this.props.current.indexOf(v.path) !== -1)
	                        // ).map(v=>v.path)}
	                    },
	                    this.props.navList.map(function (first) {
	                        return !first.children ? _react2.default.createElement(
	                            _antd.Menu.Item,
	                            { key: first.path },
	                            _react2.default.createElement(
	                                'a',
	                                { href: '#/' + first.path },
	                                first.name
	                            )
	                        ) : _react2.default.createElement(
	                            SubMenu,
	                            { key: first.path, title: first.name },
	                            first.children.map(function (second) {
	                                return !second.children ? _react2.default.createElement(
	                                    _antd.Menu.Item,
	                                    { key: first.path + '/' + second.path },
	                                    _react2.default.createElement(
	                                        'a',
	                                        { href: '#/' + first.path + '/' + second.path },
	                                        second.name
	                                    )
	                                ) : _react2.default.createElement(
	                                    MenuItemGroup,
	                                    { key: first.path + '/' + second.path, title: second.name },
	                                    second.children.map(function (third) {
	                                        return _react2.default.createElement(
	                                            _antd.Menu.Item,
	                                            { key: second.path + '/' + third.path },
	                                            _react2.default.createElement(
	                                                'a',
	                                                { href: '#/' + second.path + '/' + third.path },
	                                                third.name
	                                            )
	                                        );
	                                    })
	                                );
	                            })
	                        );
	                    })
	                )
	            );
	        }
	    }]);

	    return Nav;
	}(_react.Component);

	exports.default = Nav;

/***/ }),
/* 303 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 308 */,
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var GuideApp = function (_BaseDoc) {
	    _inherits(GuideApp, _BaseDoc);

	    function GuideApp(props) {
	        _classCallCheck(this, GuideApp);

	        var _this = _possibleConstructorReturn(this, (GuideApp.__proto__ || Object.getPrototypeOf(GuideApp)).call(this, props));

	        _this.doc = 'guide.md';
	        _this.__init();
	        return _this;
	    }

	    return GuideApp;
	}(_BaseDoc3.default);

	exports.default = GuideApp;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var IntroductionApp = function (_BaseDoc) {
	    _inherits(IntroductionApp, _BaseDoc);

	    function IntroductionApp(props) {
	        _classCallCheck(this, IntroductionApp);

	        var _this = _possibleConstructorReturn(this, (IntroductionApp.__proto__ || Object.getPrototypeOf(IntroductionApp)).call(this, props));

	        _this.doc = 'introduction.md';
	        _this.__init();
	        return _this;
	    }

	    return IntroductionApp;
	}(_BaseDoc3.default);

	exports.default = IntroductionApp;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var UpdateLogApp = function (_BaseDoc) {
	    _inherits(UpdateLogApp, _BaseDoc);

	    function UpdateLogApp(props) {
	        _classCallCheck(this, UpdateLogApp);

	        var _this = _possibleConstructorReturn(this, (UpdateLogApp.__proto__ || Object.getPrototypeOf(UpdateLogApp)).call(this, props));

	        _this.doc = 'update-log.md';
	        _this.className = 'log';
	        _this.__init();
	        return _this;
	    }

	    return UpdateLogApp;
	}(_BaseDoc3.default);

	exports.default = UpdateLogApp;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var InstallApp = function (_BaseDoc) {
	    _inherits(InstallApp, _BaseDoc);

	    function InstallApp(props) {
	        _classCallCheck(this, InstallApp);

	        var _this = _possibleConstructorReturn(this, (InstallApp.__proto__ || Object.getPrototypeOf(InstallApp)).call(this, props));

	        _this.doc = 'configure-install.md';
	        _this.__init();
	        return _this;
	    }

	    return InstallApp;
	}(_BaseDoc3.default);

	exports.default = InstallApp;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Join = function (_BaseDoc) {
	    _inherits(Join, _BaseDoc);

	    function Join(props) {
	        _classCallCheck(this, Join);

	        var _this = _possibleConstructorReturn(this, (Join.__proto__ || Object.getPrototypeOf(Join)).call(this, props));

	        _this.doc = 'configure-join.md';
	        _this.__init();
	        return _this;
	    }

	    return Join;
	}(_BaseDoc3.default);

	exports.default = Join;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Call = function (_BaseDoc) {
	    _inherits(Call, _BaseDoc);

	    function Call(props) {
	        _classCallCheck(this, Call);

	        var _this = _possibleConstructorReturn(this, (Call.__proto__ || Object.getPrototypeOf(Call)).call(this, props));

	        _this.doc = 'configure-call.md';
	        _this.__init();
	        return _this;
	    }

	    return Call;
	}(_BaseDoc3.default);

	exports.default = Call;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Layout = function (_BaseDoc) {
	    _inherits(Layout, _BaseDoc);

	    function Layout(props) {
	        _classCallCheck(this, Layout);

	        var _this = _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));

	        _this.doc = 'configure-layout.md';
	        _this.__init();
	        return _this;
	    }

	    return Layout;
	}(_BaseDoc3.default);

	exports.default = Layout;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
	                                                                                                                                                                                                                   * @file 配置化页面说明
	                                                                                                                                                                                                                   * **/


	var demo1 = {
	    title: '网络服务台 - 我的工单页面',
	    config: {
	        type: 'div',
	        style: { padding: '20px', background: '#f7f7f7' },
	        content: {
	            type: 'layout',
	            content: [{
	                type: 'sider',
	                name: 'my-sider',
	                style: { background: '#333744' },
	                content: [{
	                    type: 'div',
	                    style: { padding: 12 },
	                    content: [{
	                        type: 'icon',
	                        mode: 'customer-service',
	                        style: { color: '#fff', fontSize: '22px' }
	                    }]
	                }, {
	                    type: 'menu',
	                    mode: 'inline',
	                    theme: 'dark',
	                    defaultOpenKeys: ['worksheet', 'setting'],
	                    selectedKeys: ['mine'],
	                    items: [{
	                        key: 'worksheet',
	                        title: '工单',
	                        childItems: [{
	                            key: 'create',
	                            title: '创建工单'
	                        }, {
	                            key: 'mine',
	                            title: '我的工单'
	                        }]
	                    }, {
	                        key: 'setting',
	                        title: '系统管理',
	                        childItems: [{
	                            key: 'home',
	                            title: '首页配置'
	                        }, {
	                            key: 'service',
	                            title: '服务目录配置'
	                        }, {
	                            key: 'help',
	                            title: '帮助中心配置'
	                        }]
	                    }]
	                }]
	            }, {
	                type: 'layout',
	                content: [{
	                    type: 'header',
	                    style: { background: '#fff', padding: 0, height: '48px', lineHeight: '48px' },
	                    content: [{
	                        type: 'icon',
	                        mode: 'menu-fold',
	                        style: { fontSize: '18px', lineHeight: '48px', marginLeft: '10px' },
	                        onClick: function onClick(v) {
	                            return (0, _src2.default)('my-sider').set({
	                                collapsed: !(0, _src2.default)('my-sider').get('collapsed')
	                            });
	                        }
	                    }, {
	                        type: 'menu',
	                        style: { float: 'right' },
	                        mode: 'horizontal',
	                        items: [{
	                            icon: 'schedule',
	                            title: '工单'
	                        }, {
	                            icon: 'trophy',
	                            title: '控制台'
	                        }, {
	                            icon: 'contacts',
	                            title: 'lingjing'
	                        }]
	                    }]
	                }, {
	                    type: 'breadcrumb',
	                    items: [{ path: 'index', breadcrumbName: 'Home' }, { path: 'worksheet', breadcrumbName: '我的工单' }]
	                }, {
	                    type: 'content',
	                    style: { padding: '20px', background: '#fff' },
	                    content: [{
	                        type: 'div',
	                        style: { marginBottom: '10px' },
	                        content: {
	                            type: 'radio',
	                            name: 'my-radio-button',
	                            showAsButton: true,
	                            value: 'finished',
	                            size: 'large',
	                            options: [{ label: '待处理工单', value: 'pendding' }, { label: '已完成工单', value: 'finished' }],
	                            onChange: function onChange(e) {
	                                var status = e.target.value;
	                                (0, _src2.default)('my-table').set({
	                                    title: {
	                                        text: status === 'pendding' ? '待处理工单' : '已完成工单'
	                                    },
	                                    params: {
	                                        type: status
	                                    }
	                                });
	                            }
	                        }
	                    }, _defineProperty({
	                        type: 'table',
	                        title: '待处理工单',
	                        name: 'my-table',
	                        // size: 'small',
	                        source: 'docs/php/data.php',
	                        params: {
	                            type: 'finished'
	                        },
	                        columns: [{ title: '工单编号', dataIndex: 'id' }, { title: '标题', dataIndex: 'title' }, { title: '类型', dataIndex: 'type' }, { title: '创建人', dataIndex: 'creator' }, { title: '提出人', dataIndex: 'proposer' }, { title: '提交时间', dataIndex: 'create_time' }, { title: '状态', dataIndex: 'status' }, { title: '接手人', dataIndex: 'handle_person' }],
	                        pagination: {
	                            pageSize: 6,
	                            showQuickJumper: true,
	                            showCount: true
	                        }
	                    }, 'title', {
	                        text: '待处理工单',
	                        basicControls: ['filter', 'refresh', 'setPageSize'],
	                        showText: false
	                    })]
	                }]
	            }]
	        }
	    }
	};

	var demo2 = {
	    title: '带路由的页面',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/card'
	    }
	};

	var Page = function (_BaseDoc) {
	    _inherits(Page, _BaseDoc);

	    function Page(props) {
	        _classCallCheck(this, Page);

	        var _this = _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).call(this, props));

	        _this.doc = 'configure-page.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Page, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return Page;
	}(_BaseDoc3.default);

	exports.default = Page;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 快速上手
	


	var demo1 = {
	    title: '包含多个页面的项目',
	    description: '因为内容较多，此处是引入了一个子页面。原页面可见[此链接](docs/demo/router.php#/)',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/'
	    }
	};

	var Install = function (_BaseDoc) {
	    _inherits(Install, _BaseDoc);

	    function Install(props) {
	        _classCallCheck(this, Install);

	        var _this = _possibleConstructorReturn(this, (Install.__proto__ || Object.getPrototypeOf(Install)).call(this, props));

	        _this.doc = 'develop-install.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Install, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return Install;
	}(_BaseDoc3.default);

	exports.default = Install;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置函数 UF.config 说明
	


	var Config = function (_BaseDoc) {
	    _inherits(Config, _BaseDoc);

	    function Config(props) {
	        _classCallCheck(this, Config);

	        var _this = _possibleConstructorReturn(this, (Config.__proto__ || Object.getPrototypeOf(Config)).call(this, props));

	        _this.doc = 'develop-config.md';
	        _this.__init();
	        return _this;
	    }

	    return Config;
	}(_BaseDoc3.default);

	exports.default = Config;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 模块开发说明
	


	var Modules = function (_BaseDoc) {
	    _inherits(Modules, _BaseDoc);

	    function Modules(props) {
	        _classCallCheck(this, Modules);

	        var _this = _possibleConstructorReturn(this, (Modules.__proto__ || Object.getPrototypeOf(Modules)).call(this, props));

	        _this.doc = 'develop-modules.md';
	        _this.__init();
	        return _this;
	    }

	    return Modules;
	}(_BaseDoc3.default);

	exports.default = Modules;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第二种开发模式
	


	var Build = function (_BaseDoc) {
	    _inherits(Build, _BaseDoc);

	    function Build(props) {
	        _classCallCheck(this, Build);

	        var _this = _possibleConstructorReturn(this, (Build.__proto__ || Object.getPrototypeOf(Build)).call(this, props));

	        _this.doc = 'develop-build.md';
	        _this.__init();
	        return _this;
	    }

	    return Build;
	}(_BaseDoc3.default);

	exports.default = Build;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Api = function (_BaseDoc) {
	    _inherits(Api, _BaseDoc);

	    function Api(props) {
	        _classCallCheck(this, Api);

	        var _this = _possibleConstructorReturn(this, (Api.__proto__ || Object.getPrototypeOf(Api)).call(this, props));

	        _this.doc = 'api.md';
	        _this.__init();
	        return _this;
	    }

	    return Api;
	}(_BaseDoc3.default);

	exports.default = Api;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Params = function (_BaseDoc) {
	    _inherits(Params, _BaseDoc);

	    function Params(props) {
	        _classCallCheck(this, Params);

	        var _this = _possibleConstructorReturn(this, (Params.__proto__ || Object.getPrototypeOf(Params)).call(this, props));

	        _this.doc = 'params.md';
	        _this.__init();
	        return _this;
	    }

	    return Params;
	}(_BaseDoc3.default);

	exports.default = Params;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Life = function (_BaseDoc) {
	    _inherits(Life, _BaseDoc);

	    function Life(props) {
	        _classCallCheck(this, Life);

	        var _this = _possibleConstructorReturn(this, (Life.__proto__ || Object.getPrototypeOf(Life)).call(this, props));

	        _this.doc = 'lifecycle.md';
	        _this.__init();
	        return _this;
	    }

	    return Life;
	}(_BaseDoc3.default);

	exports.default = Life;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Load = function (_BaseDoc) {
	    _inherits(Load, _BaseDoc);

	    function Load(props) {
	        _classCallCheck(this, Load);

	        var _this = _possibleConstructorReturn(this, (Load.__proto__ || Object.getPrototypeOf(Load)).call(this, props));

	        _this.doc = 'load.md';
	        _this.__init();
	        return _this;
	    }

	    return Load;
	}(_BaseDoc3.default);

	exports.default = Load;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化页面说明
	


	var Others = function (_BaseDoc) {
	    _inherits(Others, _BaseDoc);

	    function Others(props) {
	        _classCallCheck(this, Others);

	        var _this = _possibleConstructorReturn(this, (Others.__proto__ || Object.getPrototypeOf(Others)).call(this, props));

	        _this.doc = 'others.md';
	        _this.__init();
	        return _this;
	    }

	    return Others;
	}(_BaseDoc3.default);

	exports.default = Others;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(327);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	// 以下均为模拟数据，在实际应用中可根据情况获取
	var commonHeaders = [{ key: 'id', title: 'ID' }, { key: 'hostname', title: '主机名' }, { key: 'sn', title: 'SN' }, { key: 'status', title: '状态' }, { key: 'model_id', title: '型号' }, { key: 'rack', title: '机架位' }];
	var config1 = {
	    type: 'export',
	    // 导出数据接口的url（一般可直接使用分页接口）
	    source: {
	        url: 'docs/php/download.php?sleep=1',
	        params: {
	            isExport: true,
	            container_id: 484,
	            zone: 'china',
	            type: 'server'
	        }
	    },
	    // 表格中要显示的字段，以及字段对应的表头
	    // headers: {'id': 'ID', 'hostname': '主机名', 'sn': 'SN', 'status': '状态', 'model_id': '型号', 'rack': '机架位'},
	    headers: commonHeaders,
	    content: {
	        type: 'button',
	        mode: 'primary',
	        style: 'margin-right: 6px',
	        content: '默认导出'
	        // 当前表格所有数据的总条数
	        // total: 720
	    } };
	var config2 = {
	    type: 'export',
	    source: {
	        url: 'docs/php/download.php?sleep=1',
	        params: {
	            isExport: true,
	            container_id: 484,
	            zone: 'china',
	            type: 'server'
	        }
	    },
	    headers: commonHeaders,
	    total: 720,
	    fileName: '异步导出CSV文件demo',
	    fileFormat: '.csv',
	    message: {
	        page1: ['请注意，程序会自动根据分页大小依次向服务端请求数据，全部请求完毕后生成CSV下载。不要将分页大小设置的过大，以免服务器端查询数据超时。'],
	        page2: ['如果下载的文件用Excel或者其他文本编辑器打开提示文件格式与扩展名不一致，请选择“是”，直接用打开即可。', '为防止常规单元格式下excel的自动转化，所有字段均转化为文本！']
	    },
	    content: {
	        type: 'button',
	        mode: 'primary',
	        style: 'margin-right: 6px',
	        content: '提示导出_CSV格式'
	    }
	};
	var config3 = {
	    type: 'export',
	    headers: commonHeaders,
	    data: [{ 'id': '1924', 'hostname': 'tc-click-log1-off.tc', 'sn': '686N32X',
	        'status': '14', 'model_id': '15', 'rack': 'TC706-03-11-4机架位',
	        'container_id': '488', 'rms_product_id': '174'
	    }],
	    content: {
	        type: 'button',
	        mode: 'primary',
	        style: 'margin-right: 6px',
	        content: '同步导出'
	    }
	};

	var demo1 = {
	    title: '三种常用用法',
	    description: '**默认导出：**比较简洁的导出界面，通过接口获取数据。  \n' + '**提示导出：**可以定义一些提示信息，比如说明导出内容，也是异步的数据。  \n' + '**同步导出：**直接把前端已有数据导出成文件，多用于前端分页的表格中。',
	    config: [config1, config2, config3]
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 327 */
/***/ (function(module, exports) {

	module.exports = "### 功能说明  \n* 通过一定格式的配置以及数据格式，可以将数据导出为.xls以及.csv文件\n* 配置`headers`用于文件中表头的展示以及数据的一一对应\n* 配置`source`，`params`，`total`可通过后端异步导出数据\n* 配置`fileName`，`fileFormat`分别实现导出的文件名称及文件格式类型\n\n## 组件&参数\n\n### # export\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\ndata | 要导出的全部数据列表，需要按照一定的格式书写 | Array |  | 若传入此属性，则直接把data中的数据导出到文件中\nheaders | 导出文件中要显示的字段，以及字段对应的表头，值为数组，数组的每个元素为一个对象，见下方详细说明 | Array |  | 必须\nsource | 获取导出数据接口（一般可直接使用分页接口，接口格式见下面）。此字段用法和全组件通用的`source`一致。为对象时，其中常用的参数还有`url`,`method`,`handler`,`params`等，可见 [通用参数](#/Params) 中的 # source系列  | string&#124;object | | 如果设置`source`或者`source.url`，则认为是异步导出\ntotal | 当前表格所有数据的总条数 (因为在导出前就会使用，所以最好传入，否则在开始前将不会计算所需请求次数，异步请求接口数据必须传递total或count值) | Number |  |\nmessage | 如上面示例的'提示导出'组件，可自定义下面的提示信息：包含两个属性 `page1`、`page2`，属性值都是数组，详见`提示导出CSV文件`demo | Object |  |\nfileName | 自定义导出的文件名 | String | 格式：20180524-导出文件 |\nfileFormat | 选择导出的文件扩展名，目前支持`.xls`格式和`.csv`格式 | String | `.xls` | \n\n#### *header*\n\n`headers`为一个数组，数组的每个元素都为一个对象，每个对象具有以下属性：\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\nkey | 数据中的字段名 | string |  | 必填\ntitle | 表头的列名 | string |  | 必填\nrender | 数据处理函数，用法同表格的render | function (text, record) {return '';} |  | \n\n\n### 函数调用\n\n> 组件自身带有的函数，调用方法如：`UF('export').export()`。\n\n参数 | 说明 | 参数\n---- | ---- | ---- \nexport | 开始导出。可以传入数据，直接将传入的数据导出来 | export(?data)\n\n\n```javascript\nheaders: [\n    {\n        key: 'name',\n        title: '姓名'\n    },\n    {\n        key: 'age',\n        title: '年龄'\n    },\n    {...}\n]\n```\n\n#### 异步导出接口数据格式\n```json\nsuccess:\n{\n    status:0,\n    data:[{…},…],\n    total/count: 720\n}\nerror:\n{\n    status: 1,\n    msg: 'error'\n}\n```\n"

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(329);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化表单组件
	

	// import Form from 'src/form';


	var Step1 = [{
	    type: 'form',
	    name: 'my-form1',
	    // header: {
	    //     type: 'icon',
	    //     mode: 'search'
	    // },
	    // title: '新增专线 - 第1步',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 16
	    },
	    formData: {
	        address: 123
	    },
	    onChange: function onChange(params) {
	        console.log(params);
	    },

	    items: [[
	    /* {
	        type: 'input',
	        label: '专线SN',
	        name: 'line_sn',
	        rules: {required: true, message: '主线SN不能为空'},
	        placeholder: 'sn20134567'
	    }, */
	    {
	        type: 'date-picker',
	        label: '批次号',
	        name: 'line_sn',
	        format: 'YYYYMMDD',
	        default: 'current',
	        join: {
	            'idc_id': {
	                source: {
	                    params: {
	                        type: 1
	                    }
	                }
	            }
	        }
	    }, {
	        // 这一层为测试嵌套组件在form中的使用，平时无需使用
	        // type: 'div',
	        // style: {background: '#ccc'},
	        // content: {
	        type: 'select',
	        label: '机房',
	        name: 'idc_id',
	        rules: { required: true, message: '机房不能为空' },
	        source: {
	            autoLoad: false,
	            url: 'docs/php/data.php',
	            handler: function handler(data) {
	                return data.map(function (v) {
	                    return { value: v.name, label: v.name };
	                });
	            }
	            // }
	        } }], [{
	        type: 'input',
	        label: '所属机构',
	        name: 'organization',
	        rules: { required: true, message: '所属机构不能为空' },
	        placeholder: '招商银行-百度钱包'
	    }, {
	        type: 'select',
	        label: '运营商',
	        allowClear: true,
	        name: 'operator',
	        default: '1',
	        options: [{
	            value: '1',
	            label: '移动'
	        }, {
	            value: '2',
	            label: '联通'
	        }]
	    }], [{
	        type: 'radio',
	        label: '主备线',
	        name: 'standby',
	        default: '0',
	        options: [{
	            value: '0',
	            label: '主线'
	        }, {
	            value: '1',
	            label: '备线'
	        }]
	    }, {
	        type: 'select',
	        label: '接入方式',
	        name: 'access_type',
	        default: '0',
	        join: {
	            bandwith: { display: function display(v) {
	                    return !!+v;
	                } },
	            line_type: { display: function display(v) {
	                    return !!+v;
	                } },
	            port_type: { display: function display(v) {
	                    return !!+v;
	                } },
	            is_converge: { display: function display(v) {
	                    return !!+v;
	                }, value: 0 }
	        },
	        options: [{ value: '0', label: 'VPN' }, { value: '1', label: '专线' }]
	    }], [{
	        type: 'input',
	        label: '产品',
	        name: 'product',
	        rules: { required: true, message: '产品不能为空' },
	        placeholder: '百度钱包'
	    }, {
	        type: 'input',
	        label: '专线带宽',
	        name: 'bandwith',
	        rules: { required: true, message: '专线带宽不能为空' },
	        display: false,
	        placeholder: 10,
	        addonAfter: 'M'
	    }], [{
	        type: 'select',
	        label: '专线类型',
	        name: 'line_type',
	        display: false,
	        default: '0',
	        options: [{
	            value: '0',
	            label: 'MSTP'
	        }, {
	            value: '1',
	            label: 'SDH-E1'
	        }]
	    }, {
	        type: 'select',
	        label: '接口类型',
	        name: 'port_type',
	        display: false,
	        default: '0',
	        options: [{
	            value: '0',
	            label: 'RJ45-电口'
	        }, {
	            value: '1',
	            label: '光口'
	        }]
	    }], [{
	        type: 'radio',
	        label: '是否汇聚',
	        name: 'is_converge',
	        display: false,
	        default: '0',
	        join: {
	            vlan_no: { display: function display(v) {
	                    return !!+v;
	                } }
	        },
	        options: [{
	            value: '0',
	            label: '是'
	        }, {
	            value: '1',
	            label: '否'
	        }]
	    }, {
	        type: 'input',
	        label: 'vlan编号',
	        name: 'vlan_no',
	        display: false,
	        placeholder: '20'
	    }], [{
	        type: 'select',
	        label: '模板',
	        name: 'template',
	        default: '1',
	        options: [{
	            value: '1',
	            label: '线下模板test'
	        }]
	    }, {
	        type: 'input',
	        label: '地址',
	        name: 'address',
	        rules: { required: true, message: '地址不能为空', type: 'number' },
	        default: ''
	    }], [{
	        type: 'input',
	        label: '百度侧IP',
	        name: 'baidu_ip',
	        rules: { required: true, message: '百度侧IP不能为空' }
	    }, {
	        type: 'input',
	        label: '对端IP',
	        name: 'point_ip',
	        rules: { required: true, message: '对端IP不能为空' },
	        onChange: function onChange(e, value) {
	            // 跨form联动
	            if ((0, _src2.default)('test-crossing-join')) {
	                if (!!value) {
	                    (0, _src2.default)('test-crossing-join').resetItem('point_ip', { display: true });
	                } else {
	                    (0, _src2.default)('test-crossing-join').resetItem('point_ip', { display: false });
	                }
	            }
	        }
	    }], [{
	        type: 'upload',
	        label: '上传测试',
	        name: 'upload',
	        content: {
	            type: 'button',
	            // mode: 'primary',
	            content: '上传文件'
	        }
	    }, {
	        type: 'date-picker',
	        label: '日期',
	        name: 'date-picker-test',
	        format: 'YYYY-MM-DD HH:mm:ss',
	        required: true,
	        onOk: function onOk(value) {
	            console.log('onOk:', value);
	        }
	    }]],
	    buttons: {
	        layout: 'center',
	        items: [{
	            action: 'reset',
	            type: '',
	            value: '清除',
	            // size: 'large',
	            icon: 'delete',
	            // disabled: 'disabled',
	            onClick: function onClick(data) {
	                console.log(data);
	            }
	        }, {
	            action: 'submit',
	            type: 'primary',
	            value: '提交',
	            // size: 'large',
	            icon: 'search',
	            onClick: function onClick(data) {
	                // 使用promise，可以触发按钮的Loading，防止多次点击
	                return new Promise(function (resolve, reject) {
	                    setTimeout(function () {
	                        console.log(data);
	                        reject();
	                    }, 1000);
	                });
	            }
	        }, {
	            action: 'test',
	            type: '',
	            value: '自定义',
	            icon: 'copy',
	            onClick: function onClick(data) {
	                // console.log('自定义按钮');
	                console.log((0, _src2.default)('my-form1').getDisplayValues());
	            }
	        }]
	    }
	}, {
	    type: 'form',
	    name: 'test-crossing-join',
	    items: [{
	        type: 'input',
	        label: '对端IP',
	        name: 'point_ip',
	        display: false
	    }]
	}];
	var Step21 = {
	    type: 'form',
	    // title: '新增专线 - 第2步（1）',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    },
	    items: [{
	        type: 'group',
	        name: 'endpoint',
	        header: '对端人员信息',
	        items: [[{
	            type: 'input',
	            label: '姓名',
	            name: 'endpoint_users_name',
	            rules: { required: true, message: '姓名不能为空' },
	            placeholder: '张三'
	        }, {
	            type: 'input',
	            label: '电话',
	            name: 'endpoint_phone',
	            placeholder: '131xxxx5555'
	        }, [{
	            type: 'button',
	            label: '新增',
	            action: 'add',
	            name: 'add',
	            mode: 'primary',
	            onClick: function onClick(form) {
	                console.log(form.getFieldsValue());
	            }
	        }, {
	            type: 'button',
	            label: '删除',
	            action: 'delete',
	            name: 'delete',
	            mode: 'danger'
	        }, {
	            type: 'button',
	            label: '获取数据',
	            action: 'get',
	            name: 'get',
	            onClick: function onClick(form) {
	                console.log(form.getFieldsValue());
	            }
	        }]]]
	    }, {
	        type: 'group',
	        name: 'line_user',
	        header: '业务人员信息',
	        items: [[{
	            type: 'input',
	            label: '姓名',
	            name: 'line_users_name',
	            placeholder: '王xx'
	        }, {
	            type: 'input',
	            label: '电话',
	            name: 'line_users_phone',
	            placeholder: '131xxxx3333'
	        }, {
	            type: 'input',
	            label: '邮件组',
	            name: 'line_users_email',
	            placeholder: '20'
	        }], [{
	            type: 'input',
	            label: '产品',
	            name: 'line_users_remark',
	            placeholder: '备注产品信息'
	        }, {
	            type: 'select',
	            label: '职位',
	            name: 'role',
	            default: '0',
	            options: [{
	                value: '0',
	                label: 'RD'
	            }, {
	                value: '1',
	                label: 'QA'
	            }]
	        }, {
	            type: 'empty'
	        }]]
	    }],
	    buttons: [{
	        action: 'test',
	        type: '',
	        value: '获取数据',
	        size: 'large',
	        // icon: 'copy',
	        onClick: function onClick(d) {
	            return console.log(d);
	        }
	    }]
	};
	var Step22 = {
	    title: '新增专线 - 第2步（2）',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    },
	    items: [[{
	        type: 'select',
	        label: '传输设备',
	        name: 'transmission_equ',
	        default: '1',
	        options: [{
	            value: '',
	            label: 'fuff-int.baidu.com'
	        }, {
	            value: '2',
	            label: 'DB'
	        }]
	    }, {
	        type: 'input',
	        label: '专线SN',
	        name: 'line_sn',
	        rules: { required: true, message: '主线SN不能为空' },
	        placeholder: 'sn20134567'
	    }]]
	};
	var Step23 = {
	    type: 'form',
	    title: '新增专线 - 第2步（1）',
	    layout: {
	        type: 'horizontal',
	        labelCol: 6,
	        wrapperCol: 14
	    },
	    items: [[{
	        type: 'input',
	        label: '姓名',
	        name: 'endpoint_users_name',
	        rules: { required: true, message: '姓名不能为空' },
	        placeholder: '张三'
	    }, {
	        type: 'input',
	        label: '电话',
	        name: 'endpoint_phone',
	        placeholder: '131xxxx5555'
	    }, [{
	        type: 'button',
	        label: '新增',
	        action: 'add',
	        name: 'add',
	        mode: 'primary',
	        onClick: function onClick(form) {
	            console.log(form.getFieldsValue());
	        }
	    }, {
	        type: 'button',
	        label: '删除',
	        action: 'delete',
	        name: 'delete',
	        mode: 'danger'
	    }, {
	        type: 'button',
	        label: '获取数据',
	        action: 'get',
	        name: 'get',
	        onClick: function onClick(form) {
	            console.log(form.getFieldsValue());
	        }
	    }]]],
	    buttons: [{
	        action: 'test',
	        type: '',
	        value: '获取数据',
	        size: 'large',
	        onClick: function onClick(d) {
	            return console.log(d);
	        }
	    }]
	};
	var data21 = {
	    endpoint: {
	        endpoint_users_name: '张三',
	        endpoint_phone: '1234567890'
	    },
	    line_user: {
	        line_users_name: '赵四',
	        line_users_phone: '1234567'
	    }
	};
	var data22 = [{
	    endpoint: {
	        endpoint_users_name: '张三',
	        endpoint_phone: '1234567890'
	    },
	    line_user: {
	        line_users_name: '赵四',
	        line_users_phone: '1234567'
	    }
	}, {
	    endpoint: {
	        endpoint_users_name: '王老五',
	        endpoint_phone: '1234567890'
	    },
	    line_user: {
	        line_users_name: '张老四',
	        line_users_phone: '1234567'
	    }
	}];
	var data23 = {
	    endpoint_users_name: '张三',
	    endpoint_phone: '1234567890'
	};

	var demo1 = {
	    title: '基础功能',
	    description: '带有数据验证、字段联动等的表单',
	    config: Step1
	};
	var demo2 = {
	    title: '带新增、复制功能',
	    description: '可以新增/复制某一组form的表单项，新生成一行',
	    config: Step21
	};

	var FormApp = function (_BaseDoc) {
	    _inherits(FormApp, _BaseDoc);

	    function FormApp(props) {
	        _classCallCheck(this, FormApp);

	        var _this = _possibleConstructorReturn(this, (FormApp.__proto__ || Object.getPrototypeOf(FormApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(FormApp, [{
	        key: 'onSubmit',
	        value: function onSubmit(value) {
	            console.log(value);
	        }
	        // 页面的其他内容已经在 BaseDoc 里实现，这里只需要写demo需要的代码即可
	        // 如果没有展示demo，render可不写，见antd组件文档

	    }, {
	        key: 'render',
	        value: function render() {
	            // return <Form ref="testForm" {...Step21} data={[{data21}]} onSubmit={this.onSubmit.bind(this)}/>;
	            // return <Form ref="testForm" {...Step23} data={data23} onSubmit={this.onSubmit.bind(this)}/>;
	            // return <Form ref="testForm" {...Step1} onSubmit={this.onSubmit.bind(this)}/>;
	            // return this.__getDemoSingle(demo2);
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return FormApp;
	}(_BaseDoc3.default);

	exports.default = FormApp;

/***/ }),
/* 329 */
/***/ (function(module, exports) {

	module.exports = "## 功能介绍\n * 灵活可配置的表单\n * 支持多种表单类型：单选框、复选框、输入框、数字输入框、下拉选择框、级联下拉框、上传按钮等常用元素。\n * 支持多种排列方式\n * 灵活的校验规则\n * 可配置底部按钮\n\n> **声明：** 本组件底层使用的是 `Antd.Form`，所以疑惑的地方可以结合 [Antd文档](http://antd.uf.baidu.com/components/form-cn/) 使用\n\n## 组件&配置\n\n### # form\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n--------|-----|------|--------|----\nheader | form 标题 | string &#124; `config` |  | \nclassName | 增加 form 整体的 class 名称 | string |  | \nlayout | 表单布局，支持三种常见布局，见`# layout` | object | |\nsize | 控件大小。可选 `large` `default` `small` | string | `large` |\nitems | 表单项的详细配置参数，首先是一个数组，数组里面每一项可以是对象，也可以是数组。如果是数组的话，则启动了『分组』功能，数组作为一个整体放在一行；如果为一个对象，见`# item` | object[]/array[] |  | 必须\nbuttons | 表单的按钮配置，见`# buttons` | object[] | |\nformData | form 表单的默认值对象，和`items`里面配置的值对应的数据会设置成form的默认值，其他值会在点击提交时随表单数据一起返回，常用于“编辑”功能。如果需要为表单传入一个数组渲染出多个表单，请参考组件Forms的配置 | object | |\nformDataHandler | formData格式化函数。数据会先经过此函数处理，再传给form使用 | function(data){return data;} | |\nbeforeSubmit | 点击提交按钮时，校验完成后传出数据前对数据进行处理，一般用于对表单数据进行格式化 | function(data){} | |\nbeforeSetValues | 传入数据后，在给表单设置默认数据前，对数据进行格式化，一般用于“编辑功能”，传入的数据不符合表单要求格式时（比如checkbox要的是数组，但是传入的是字符串，就可以用这个函数先处理数据然后在传给Form） | function(data){} | |\nonSubmit | 点击提交时，数据校验成功时的回调函数（会被`type='submit'`的按钮的 onClick 参数覆盖） | function(data){} | |\nwrappedComponentRef | 获取Form表单的引用和其他组件不太相同，不能直接在refs上获取到，所以需要通过回调函数获得，`this.formRef`即为form组件的引用，用法如下 | wrappedComponentRef={inst=>this.formRef = inst} | |\n\n\n#### *layout*\n\n参数名称 | 说明 | 类型 | 默认值\n----- | --- | ---------| ---\ntype | 表单布局，有三种： 水平:`horizontal` 垂直:`vertical` 内联:`inline` | string | `horizontal` \ncolumn | 分成多列布局 | number | 1\nlabelCol | 仅 type 为`horizontal`时有效。使用24栅格系统布局，表单项中label所占栅格的值 | number | 6\nwrapperCol | 仅 type 为`horizontal`时有效。表单项中表单域所占栅格的值 | number |14\n\n**注意：在使用column布局时**  \n默认会对`items`中的全部项进行计算并按设置的列进行布局。但是当表单项不被`column`整除时，展示并不友好。  \n例如：items中有4项，而column为3，这样最后一行只有一项，后面都以此为例子说明。\b此处有两种处理方式：  \n> * 使用`{type: 'empty'}`做“凑数”组件，以保证多余的表单项能和其余表单项保持在所在行中占比一致，即最后一项只占最后一行的三分之一；\n> * 使用`null`作为“凑数”组件，计算列时会把`null`计算到布局列中，实际展示时会剔除掉，即最后一项占据最后一行的整行（一般会搭配表单项的layout属性使用）\n\n```javascript\n// 方法1：\nlayout: {\n    column: 3\n},\nitems: [\n    {type: 'input', name: 'a'},\n    {type: 'input', name: 'b'},\n    {type: 'input', name: 'c'},\n    {type: 'input', name: 'd'},\n    {type: 'empty'},\n    {type: 'empty'}\n]\n\n// 方法2：\nlayout: {\n    column: 3,\n    labelCol: 9,\n    wrapperCol: 12\n},\nitems: [\n    {type: 'input', name: 'a'},\n    {type: 'input', name: 'b'},\n    {type: 'input', name: 'c'},\n    {type: 'input', name: 'd', layout: {labelCol: 3, wrapperCol: 20}},\n    null,\n    null\n]\n```\n> d表单项layout中的3和20的计算公式为：  \n> labelCol = 9 / 3  \n> wrapperCol = 24 - labelCol - (24 - (9 + 12)) / 3  \n> 以上数字：固定值 (24)，总layout.labelCol (9)，总layout.wrapperCol (12)，总layout.column (3)\n\n#### *item*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\ntype | 即为输入类型组件的`type`。**除`type`外，可以使用一切输入型组件的参数** | string | | 必须\nname | 表单域名称，key，提交时以此名称为键。**当name不填时，组件不在当表单项处理，而是作为一个纯展示类组件进行解析展示（可在内部再嵌套输入组件）** | string | |\nlabel | 表单域左侧的label | string | | 必须\ndefault | 默认值，注意表单域需要的值是字符串还是数组（例如checkbox-group需要array）| | |\njoin | 实现同一个form间的各表单项联动。join的值为一个多层级的对象，第一层的key为需要与之联动的其他表单项的name，value为的目标表单项需要更新的内容，具体用法可见底部[示例](#/Custom/Form/-join-) | object | | \nhelp | 额外提示信息，会在label后面增加一个问号，鼠标移上去时提示 | string | |\nextra | 额外提示信息，会显示在表单域之后或下方 | string | |\nrequired | 是否必选 | boolean | `false` \nrules | 除是否必选外，其他验证规则，表单在提交时会根据验证规则对数据进行校验，只有全部通过才会调用提交的回调函数。此处虽然是个对象数组或者对象数组。具体配置见 `item.rules` | object | |\nregionConfig | 表单域本身的配置，『极少用』。一般只有自定义组件且特殊情况下需要配置此值，具体参数见`# item.regionConfig` | object | |\n\n**注意：** 不配置name属性\n> 当组件不配置name时，组件会作为一个纯展示类组件进行解析展示，不会再对其获取数据和设置数据，也无法操作。同时，其内部可以再次嵌套具有name属性的输入型组件。见下面例子：\n\n```javascript\n{\n    items: [{\n        type: 'div',\n        style: {background: 'green'},\n        content: {\n            type: 'input',\n            name: 'name',\n            label: '名称'\n        }\n    }]\n}\n```\n更高级的用法，比如可使用表格布局表单；再比如使用Row/Col组件自定义布局。\n\n\n#### *buttons*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\nlayout | 按钮的布局。可选值：`center`、`start`、`end` | string | center |\nitems | 按钮项。值为一个按钮配置数组，单个按钮配置见`buttons.item` | config[] | |\n\n##### *buttons.item*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\naction | 可选值：`submit`、`reset`、`other`，其中 submit 和 reset 为特殊值，有内置的处理函数。submit会首先对数据进行校验，校验通过了才会触发回调函数；reset会先把表单重置，然后调用函数 | string | other | 必须\nvalue | 按钮上显示的内容 | string | | 必须\ntype | 按钮类型：`primary` `ghost` `default` | string | default |\nsize | 按钮大小：`large` `small` `default` | string | default |\nicon | 按钮图标，如 `delete`、`search` 等，详见`Icon`组件 | string | |\nonClick | 点击按钮时的回调函数，除`type=reset`，其他情况下函数都有一个参数，返回表单所有的数据。（注意，`type='submit'`时，onClick函数会覆盖`基本配置`里的onSubmit函数） | function(data) {} | |\n\n> 还有一些其他的配置，更多的配置见`Button`组件，此处调用的是Button组件，所以button组件的所有配置都可以在这里使用\n\n#### *item.rules*\n\n表单域中组件的校验规则\n\n参数  | 说明  | 类型 | 默认值 \n-----|------|------|------\nmessage | 校验文案 | string |\ntype | 内建校验类型，[可选项](https://github.com/yiminghe/async-validator#type) | string | 'string'\nrequired | 是否必选，如果在rules外设置了required，则以外面的required值为准 | boolean | `false` \nwhitespace | 必选时，空格是否会被视为错误 | boolean | `false`  \nlen | 字段长度 | number | \nmin | 最小长度 | number |\nmax | 最大长度 | number |\nenum | 枚举类型 | string |\npattern | 正则表达式校验 | RegExp |\ntransform | 校验前转换字段值 | function(value) => transformedValue:any |\nvalidator | 自定义校验（注意，[callback 必须被调用](https://github.com/ant-design/ant-design/issues/5155)） | function(rule, value, callback) |\n\n#### *item.regionConfig*\n表单域本身配置\n\n参数      | 说明                                     | 类型 | 默认值\n-----------|-----------------------------------------|-----|-------\nvaluePropName | 子节点的受控属性，如 `Switch` 的是 'checked' | string | 'value'\ntrigger | 收集子节点的值的时机 | string | 'onChange'\ngetValueFromEvent | 可以把 onChange 的参数转化为控件的值 | function(..args) | [reference](https://github.com/react-component/form#optiongetvaluefromevent)\nvalidateTrigger | 校验子节点值的时机 | string\\string[] | 'onBlur'\nvalidateFirst | 当某一规则校验不通过时，是否停止剩下的规则的校验\t | boolean | false\nexclusive | 是否和其他控件互斥，特别用于 Radio 单选控件 | boolean | false\nnormalize | 转换默认的 value 给控件. [一个选择全部的例子](https://codepen.io/afc163/pen/JJVXzG?editors=001) | function(value, prevValue, allValues): any | \n\n**注意：** 使用自定义组件时\n> * 提供受控属性 value 或其它与 valuePropName 的值同名的属性。\n> * 提供 onChange 事件或 trigger 的值同名的事件。\n> * 不能是函数式组件\n\n下面介绍一个常用使用场景：\n\n首先是一个下拉列表，用于选择ID，选中后展示的也是ID；另外放置一个用于纯展示的组件（span），用于展示名称（组件虽为纯展示组件，但是组件展示内容和其他表单域组件一样随着受控属性content变化，即当Form中的item.name对应的字段值变化时，展示的内容随着变化）。\n\n```javascript\nitems: [\n    {\n        type: 'select',\n        name: 'chassisId',\n        label: '位置ID',\n        optionLabelProp: 'value',\n        join: {\n            chassisName: {\n                content: ':label'\n            }\n        }\n    },\n    {\n        type: 'span',\n        name: 'chassisName',\n        label: '位置名称'\n    }\n]\n```\n\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-form').getValues()`。\n\n函数名称 | 说明 | 参数 |  默认值\n---- | ---- | ----- | ----- \ngetValues | 获取全部表单的值，默认先校验再返回。该函数支持传入一个参数，如果想跳过校验，则传入参数`false` | getValues([boolean]) |\ngetDisplayValues | 获取全部表单项展示给用户的值。比如下拉选择框，展示给用户的值和最终提交的内容不同。效果可见demo的自定义按钮 | getDisplayValues() |\nresetValues | 重置全部表单的值。支持传入一个对象，把表单重置为对象里面对应的值 | resetValues([object]) |\nclearValues | 清除表单。有别于重置 | clearValues() |\nresetItem | 重新设置某个表单项的配置 | resetItem(targetName, conf) |\n\n\n## 更多用法\n\n[!图片](/path/to/img.jpg \"Title\")\n\n### 组件联动 - join 属性的用法\n\njoin实现同一个form间的各表单项联动。\n\njoin的值为一个多层级的对象，第一层的key为需要与之联动的其他表单项的name，value（`联动内容`）为的目标表单项需要更新的内容，下面主要介绍联动内容value的用法。\n\n联动内容为目标组件要更新的新配置列表，各个属性取值：可以是固定值；也可以是一个函数；同时为了方便，也可以是两个特殊值，如下：\n\n* **固定值**：例如 true、false 等，用于当组件变化时固定联动另一个组件的某个属性为一个固定值\n* **函数**：函数处理结果为联动组件待更新值，函数的参数依次为：当前组件值，目标组件原值，其他（包括目标组件引用、当前组件引用、Form的引用等），可见下面demo\n* **特殊值**：\n    * `:value` - 可以把当前组件的value值赋值给联动的目标组件的属性；\n    * `:label` - 例如Select等组件(每个选项既有value，又有用于展示的label)，将label值赋值给目标组件的属性\n    * `:old` - 目标属性的原值，常用语表达式中\n    * `表达式` - 也可以是使用上面两个变量的表达式，例如：'1 - :value > 0'、':value || :old'\n\n> 目标组件的配置项也可以直接书写层级关系，例如：'source.params.type': 1，见【示例二】\n\n```javascript\nitems: [\n    // 【示例1：】\n    {\n        type: 'select',\n        label: '接入方式',\n        name: 'access_type',\n        default: '0',\n        join: {\n            // 当 select 变化时，会联动name为bandwith的表单项\n            bandwith: {\n                // 更新表单项的display属性（控制是否展示）\n                // 属性的值可以直接为固定值，但更多情况下，值是根据当前选择的值动态变化的\n                // 所以也可以是一个函数，函数的返回值为目标组件待更新的新值\n                display: function (val, oValue, others) {\n                    // others.form.getValues() 可取得当前form全部属性值\n                    // others.self.getDisplayValue() 可取得当前下拉框选中项的展示内容\n                    return !!Number(val) ? true : false;\n                }\n\n                // 可将选中选项的值赋值给目标输入框bandwith的填入内容\n                // value: ':value',\n                // 如果新值不存在，使用原值\n                // value: ':value || :old',\n                // 可将选中选项的供用户看的中文赋值给目标输入框bandwith的填入内容\n                // value: ':label',\n                // 也可以是表达式\n                // display: '!:value',\n                // display: '1 - :value > 0',\n            },\n\n            // 可以同时联动多个\n            // line_type: {display: v=>!!+v},\n            // port_type: {display: v=>!!+v},\n            // is_converge: {display: v=>!!+v}\n        },\n        options: [\n            {value: '0', label: 'VPN'},\n            {value: '1', label: '专线'}\n        ]\n    },\n    {\n        type: 'input',\n        label: '专线带宽',\n        name: 'bandwith',\n        rules: [{required: true, message: '专线带宽不能为空'}],\n        display: false,\n        placeholder: 10,\n        addonAfter: 'M'\n    },\n\n    // 【示例2：】\n    // 另一个级联选择的例子，选择区域后，根据选择的区域动态的查询该区域的机房列表\n    {\n        type: 'select',\n        label: '区域',\n        name: 'area',\n        options: [\n            {value: 1, label: '华北'},\n            {value: 2, label: '华南'}\n        ],\n        join: {\n            idc_id: {\n                // 选择区域后，更新idc_id组件的source参数，组件会自动重新拉取数据\n                // * 使用多层级属性；\n                // * 使用特殊值:value进行取值；\n                'source.params.area_id': ':value'\n            }\n        }\n    },\n    {\n        type: 'select',\n        label: '机房',\n        name: 'idc_id',\n        source: {\n            autoLoad: false,\n            url: 'docs/php/data.php',\n            handler: data=>data.map(v=>{\n                return {value: v.name, label: v.name};\n            })\n        }\n    }\n]\n```"

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _utils = __webpack_require__(121);

	var _formsMarkdown = __webpack_require__(331);

	var _formsMarkdown2 = _interopRequireDefault(_formsMarkdown);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化可进行复制新增的Forms组件，Demo及文档说明
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: 'Forms组件基本用法',
	    description: 'Forms组件是Form组件的扩展，通过配置formData及addType实现新增表单功能',
	    config: {
	        type: 'forms',
	        name: 'forms-test',
	        addType: 'add',
	        buttons: {
	            layout: 'center',
	            items: [{
	                action: 'clear',
	                type: '',
	                value: '清除',
	                icon: 'delete',
	                onClick: function onClick(data) {
	                    console.log(data);
	                }
	            }, {
	                action: 'reset',
	                type: '',
	                value: '重置',
	                icon: 'delete',
	                onClick: function onClick(data) {
	                    console.log(data);
	                }
	            }, {
	                action: 'submit',
	                type: 'primary',
	                value: '提交',
	                icon: 'search'
	            }, {
	                action: 'test',
	                type: '',
	                value: '自定义',
	                icon: 'copy',
	                onClick: function onClick(data) {
	                    console.log('全部表单项的展示内容: ', (0, _src2.default)('forms-test').getDisplayValues());
	                }
	            }]
	        },
	        form: {
	            layout: {
	                type: 'horizontal',
	                labelCol: 6,
	                wrapperCol: 16
	            },
	            items: [[{
	                type: 'date-picker',
	                label: '盘点时间',
	                name: 'inventory-time',
	                format: 'YYYYMMDD'
	            }, {
	                type: 'input',
	                name: 'sn-input',
	                label: 'SN',
	                default: '123',
	                rules: [{ required: true, message: '请输入sn名称' }]
	            }], [{
	                type: 'select',
	                label: '机房',
	                name: 'idc_id',
	                showSearch: true,
	                allowClear: true,
	                options: [{ value: 's', label: 'YQ01' }, { value: 'd', label: 'BJYZ' }, { value: 'f', label: 'BB' }]
	            }, {
	                type: 'select',
	                label: '盘点方式',
	                name: 'inventory-method',
	                showSearch: true,
	                allowClear: true,
	                options: [{ value: '1', label: '全部' }, { value: '2', label: 'HAS' }, { value: '3', label: 'ILO' }]
	            }]]
	        },
	        onSubmit: function onSubmit(data) {
	            // action为submit的元素无回调函数时才响应
	            console.log('要提交了:', data);
	        },
	        formData: [{
	            'inventory-time': '20180608',
	            'idc_id': 's',
	            'inventory-method': '1',
	            'sn-input': '这是一个input'
	        }, {
	            'inventory-time': '20180723',
	            'idc_id': 'f',
	            'inventory-method': '2',
	            'sn-input': '这是第二个input'
	        }]
	    }
	};

	// 以表格形式展示
	// const demo2 = Utils.clone(demo1);
	// demo2.config.mode = 'table';
	// delete demo2.config.buttons;
	// demo2.title = '表格样式的Forms';
	// demo2.description = 'Forms组件是Form组件的扩展，可以复制新增条相似结构的数据';

	var demo2 = {
	    title: '表格样式的Forms',
	    description: '当`mode`属性为\'table\'时，表单以表格的形式展示',
	    config: {
	        type: 'forms',
	        mode: 'table',
	        operation: function operation(row, index) {
	            if (index === 0) {
	                return [{ type: 'icon', key: 'add', mode: 'plus-circle', action: 'add' }];
	            } else {
	                return [{ type: 'icon', key: 'copy', mode: 'plus-circle', action: 'copy' }, { type: 'icon', key: 'delete', mode: 'minus-circle', action: 'delete' }];
	            }
	        },
	        form: {
	            items: [{
	                type: 'date-picker',
	                label: '盘点时间',
	                style: { width: 60 },
	                name: 'inventory-time',
	                format: 'YYYYMMDD'
	            }, {
	                type: 'input',
	                name: 'sn-input',
	                label: 'SN',
	                rules: [{ required: true, message: '请输入sn名称' }]
	            }, {
	                type: 'div',
	                label: '合并测试',
	                key: 'merge',
	                content: [{
	                    type: 'radio',
	                    label: '机房',
	                    name: 'idc_id',
	                    showSearch: true,
	                    allowClear: true,
	                    options: [{ value: 's', label: 'YQ01' }, { value: 'd', label: 'BJYZ' }, { value: 'f', label: 'BB' }]
	                }, {
	                    type: 'select',
	                    label: '盘点方式',
	                    name: 'inventory-method',
	                    showSearch: true,
	                    allowClear: true,
	                    options: [{ value: '1', label: '全部' }, { value: '2', label: 'HAS' }, { value: '3', label: 'ILO' }]
	                }]
	            }]
	        },
	        formData: [{
	            'inventory-time': '20180608',
	            'idc_id': 's',
	            'inventory-method': '1',
	            'sn-input': '这是一个input'
	        }, {
	            'inventory-time': '20180723',
	            'idc_id': 'f',
	            'inventory-method': '2',
	            'sn-input': '这是第二个input'
	        }]
	    }
	};

	var FormsApp = function (_BaseDoc) {
	    _inherits(FormsApp, _BaseDoc);

	    function FormsApp(props) {
	        _classCallCheck(this, FormsApp);

	        var _this = _possibleConstructorReturn(this, (FormsApp.__proto__ || Object.getPrototypeOf(FormsApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _formsMarkdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(FormsApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo2, demo1);
	        }
	    }]);

	    return FormsApp;
	}(_BaseDoc3.default);

	exports.default = FormsApp;

/***/ }),
/* 331 */
/***/ (function(module, exports) {

	module.exports = "## 功能介绍\n * 主要提供表单的扩展功能，复制新增表单\n * 可配置新增方式，并支持配置关闭\n * 可为组件传入数组形式的formData，从而产生多个Form表单\n * 可以Table的形式展示表单\n\n\n## 组件&配置\n\n### # forms\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n--------|-----|------|--------|----\nmode | 展示模式，默认以form方式展示，适用于在form中嵌套；设置为`'table'`时，以表格的方式展示，如第一个demo | string | |\naddType | 新增的两种方式：`add`为简单新增；`copy`为复制新增，即会将已填写的值先复制再新增表单。当设置为`false`时，关闭新增/删除功能 | string&#124;false | copy | add/copy仅在mode为默认情况下有效\noperation | 自行控制`每行`的操作按钮（新增/删除等），属性为一个函数，函数返回结果为操作按钮的配置。各项中`action`为按钮的默认操作。当函数返回`false`时，表示禁用当前行的操作；当返回`true`时，表示复用默认的操作按钮 | function (row, index) {return `config[]`;} | | `addType`不为`false`时有效\nbuttons | 表单的按钮配置，见`# buttons` | object[] | |\nformData | 传递给表单的数据，当为对象时则根据配置的`form`渲染出一个表单，当为数组时渲染出多个表单 | object[] | |\nform | 需渲染的表单内容，详细配置可参考`Form`组件的配置，注意，`buttons`只需在`Forms`组件配置一次就行，不需要在`form`中再次配置 | object | |\nonSubmit | 点击提交时，数据校验成功时的回调函数（会被`type='submit'`的按钮的 onClick 参数覆盖） | function(data){} | |\n\n> **声明：** 本组件提交时的返回结果为一个数组，数组的每个元素都为一个对象，每个对象对应一个表单的值，如[{'name': 'ZhangSan', 'city': 'Beijing', 'birthDay': '1992-11-02'},{'name': 'LiSi', 'city': 'Shanghai', 'birthDay': '1988-09-02'}]\n\n#### *buttons*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\nlayout | 按钮的布局。可选值：`center`、`start`、`end` | string | center |\nitems | 按钮项。值为一个按钮配置数组，单个按钮配置见`buttons.item` | config[] | |\n\n##### *buttons.item*\n\n参数名称 | 说明 | 类型 | 默认值 | 是否必须\n----- | --- | ---------| --- | ---\naction | 可选值：`submit`、`reset`、`other`，其中 submit 和 reset 为特殊值，有内置的处理函数。submit会首先对数据进行校验，校验通过了才会触发回调函数；reset会先把表单重置，然后调用函数 | string | other | 必须\nvalue | 按钮上显示的内容 | string | | 必须\ntype | 按钮类型：`primary` `ghost` `default` | string | default |\nsize | 按钮大小：`large` `small` `default` | string | default |\nicon | 按钮图标，如 `delete`、`search` 等，详见`Icon`组件 | string | |\nonClick | 点击按钮时的回调函数，除`type=reset`，其他情况下函数都有一个参数，返回表单所有的数据。（注意，`type='submit'`时，onClick函数会覆盖`基本配置`里的onSubmit函数） | function(data) {} | |\n\n> 还有一些其他的配置，更多的配置见`Button`组件，此处调用的是Button组件，所以button组件的所有配置都可以在这里使用\n\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-form').getValues()`。\n\n函数名称 | 说明 | 参数 |  默认值\n---- | ---- | ----- | -----\ngetValues | 获取全部表单的值，默认先校验再返回。该函数支持传入一个参数，如果想跳过校验，则传入参数`false` | getValues() |\ngetDisplayValues | 获取全部表单项展示给用户的值。比如下拉选择框，展示给用户的值和最终提交的内容不同。效果可见demo的自定义按钮 | getDisplayValues() |\nresetValues | 重置全部表单的值。支持传入一个对象，把表单重置为对象里面对应的值 | resetValues() |\nclearValues | 清除表单。有别于重置 | clearValues() |\nresetItem | 重新设置某个表单项的配置 | resetItem(targetName, conf) |\n\n\n"

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(333);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '简单的弹框用法。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: '点击弹出',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-modal').show();
	        }
	    }, {
	        type: 'modal',
	        name: 'my-modal',
	        visible: false,
	        title: '基本弹框',
	        content: {
	            type: 'html',
	            content: '<p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p>'
	        }
	    }]
	};
	var demo2 = {
	    title: '弹框表单',
	    description: '点击确定时会自动把表单数据提交到api。调用弹框的`show`方法时传入数据，数据会自动填充到表单中。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: '新增弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-modal2').show();
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '编辑弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-modal2').show({ line_sn: 'sn20134567', idc_id: 'TC', other: 'other data' });
	        }
	    }, {
	        type: 'modal',
	        name: 'my-modal2',
	        visible: false,
	        title: '新增/编辑弹框',
	        width: 600,
	        api: 'docs/php/submit.php',
	        form: {
	            items: [{
	                type: 'input',
	                label: '专线SN',
	                name: 'line_sn',
	                rules: [{ required: true, message: '主线SN不能为空' }],
	                placeholder: 'sn20134567'
	            }, {
	                type: 'select',
	                label: '机房',
	                name: 'idc_id',
	                rules: [{ required: true, message: '机房不能为空' }],
	                source: {
	                    url: 'docs/php/data.php',
	                    handler: function handler(data) {
	                        return data.map(function (v) {
	                            return { value: v.name, label: v.name };
	                        });
	                    }
	                }
	            }]

	        }
	    }]
	};
	var demo3 = {
	    title: '确认信息弹框',
	    description: '比如删除数据是，提示是否要删除xxx数据。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: '删除提示',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-modal3').show({ id: 123, other: 'other data' });
	        }
	    }, {
	        type: 'modal',
	        name: 'my-modal3',
	        visible: false,
	        title: '删除数据：',
	        api: 'docs/php/submit.php',
	        render: function render(data) {
	            return {
	                type: 'p',
	                content: '确定要删除以下选中数据吗？' + data.id
	            };
	        }
	    }]
	};
	var demo4 = {
	    title: '确认对话框',
	    description: '使用 `confirm()` 可以快捷地弹出确认框。',
	    config: [{
	        type: 'button',
	        content: 'Confirm',
	        onClick: function onClick() {
	            _src2.default.Modal.confirm({
	                title: '你确定要删除此项内容吗？',
	                content: 'ID: 123...',
	                onOk: function onOk() {
	                    console.log('ok');
	                },
	                onCancel: function onCancel() {
	                    console.log('cancel');
	                }
	            });
	        }
	    }]
	};
	var demo5 = {
	    title: '信息提示',
	    description: '各种类型的信息提示，只提供一个按钮用于关闭。',
	    config: [{
	        type: 'button',
	        content: 'Info',
	        onClick: function onClick() {
	            _src2.default.Modal.info({
	                title: '这是一个信息提示。',
	                content: {
	                    type: 'html',
	                    content: '<div><p>some messages...some messages...</p><p>some messages...some messages...</p></div>'
	                },
	                onOk: function onOk() {
	                    console.log('ok');
	                }
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Success',
	        onClick: function onClick() {
	            _src2.default.Modal.success({
	                title: '这是一个成功提示。',
	                content: 'some messages...some messages...'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Error',
	        onClick: function onClick() {
	            _src2.default.Modal.error({
	                title: '这是一个错误提示。',
	                content: 'some messages...some messages...'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Warning',
	        onClick: function onClick() {
	            var ref = _src2.default.Modal.warning({
	                title: '这是一个警告提示。',
	                content: '2s后自动关闭...'
	            });
	            setTimeout(function () {
	                ref.destroy();
	            }, 2000);
	        }
	    }]
	};

	var demo6 = {
	    title: '抽屉组件',
	    description: '侧拉弹出，可以自己控制弹出宽度等',
	    config: [{
	        type: 'drawer',
	        name: 'my-drawer6',
	        title: '抽屉组件弹框',
	        placement: 'right',
	        content: {
	            type: 'html',
	            content: '<p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p>'
	        }
	    }, {
	        type: 'drawer',
	        name: 'my-drawer7',
	        title: null,
	        footer: null,
	        width: 200,
	        height: 120,
	        placement: 'right',
	        closable: false,
	        maskClosable: true,
	        content: {
	            type: 'html',
	            content: '<p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p><p>Some contents...</p>'
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '右侧弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer6').set({
	                visible: true,
	                placement: 'right'
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '左侧弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer6').set({
	                visible: true,
	                placement: 'left'
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '顶部弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer6').set({
	                visible: true,
	                placement: 'top'
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '底部弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer6').set({
	                visible: true,
	                placement: 'bottom'
	            });
	        }
	    }, {
	        type: 'div',
	        style: { padding: '16px 0 10px 0' },
	        content: '自定义抽屉宽/高:'
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '右小弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer7').set({
	                visible: true,
	                placement: 'right'
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '左小弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer7').set({
	                visible: true,
	                placement: 'left'
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '顶小弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer7').set({
	                visible: true,
	                placement: 'top'
	            });
	        }
	    }, {
	        type: 'button',
	        mode: 'primary',
	        content: '底小弹框',
	        onClick: function onClick() {
	            return (0, _src2.default)('my-drawer7').set({
	                visible: true,
	                placement: 'bottom'
	            });
	        }
	    }]
	};

	var ModalApp = function (_BaseDoc) {
	    _inherits(ModalApp, _BaseDoc);

	    function ModalApp(props) {
	        _classCallCheck(this, ModalApp);

	        var _this = _possibleConstructorReturn(this, (ModalApp.__proto__ || Object.getPrototypeOf(ModalApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ModalApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return ModalApp;
	}(_BaseDoc3.default);

	exports.default = ModalApp;

/***/ }),
/* 333 */
/***/ (function(module, exports) {

	module.exports = "对话框。\n\n## 何时使用\n\n- 需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 `Modal` 在当前页面正中打开一个浮层，承载相应的操作。  \n- 另外当需要一个简洁的确认框询问用户时，可以使用精心封装好的 `UF.Modal.confirm()` 等方法。  \n- 需要侧拉展示信息时，可使用 `Drawer` 组件进行展示。\n\n## 组件&配置\n\n### # modal\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|-------------\nvisible    | 对话框是否可见 | boolean          | 无          \ncontent | 弹框中间的内容 | string&#124;`config`  | 无          \nconfirmLoading | 确定按钮 loading | boolean    | 无          \ntitle      | 标题  | string&#124;`config` | 无          \nclosable   | 是否显示右上角的关闭按钮 | boolean    | true       \nmaskClosable | 点击蒙层是否允许关闭 | boolean   | false      \nwidth      | 宽度           | string&#124;number | 520          \nfooter     | 底部内容，当不需要默认底部按钮时，可以设为`footer: null` | `config`&#124;`config[]` | 确定取消按钮\nokText     | 确认按钮文字    | string           | 确定      \nokType     | 确认按钮类型    | string           | primary      \ncancelText | 取消按钮文字    | string           | 取消      \ncancelType | 取消按钮类型    | string           | default      \nstyle | 可用于设置浮层的样式，调整浮层位置等 | object   | -\nwrapClassName | 对话框外层容器的类名 | string   | -\nafterClose | Modal 完全关闭后的回调 | function | 无\nzIndex | 设置弹出层的 `z-index` 值，即层叠高度 | number | 1000\ngetContainer | 指定 Modal 挂载的 HTML 节点 | (instance): HTMLElement | () => document.body\nonCancel   | 点击遮罩层或右上角叉或取消按钮的回调  | function(e)  | 无        \nonSubmit   | 点击确定回调       | function(e)     | 无          \n\n\n> tips: `footer`属性一般为一个配置或配置数组，其中没项可以有一个额外的`action`属性，指定按钮的特定功能，可选值有'submit'、'cancel'，分别对应提交功能（onSubmit）和取消功能（onCancel）\n\n### # drawer\n\n抽屉组件，属性及功能和弹框一致，但是展示效果不同，为从侧边拉出。可见demo6\n\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|-------------\nplacement  | 弹出位置，可选 `left` `right` `top` `bottom` | boolean | 'right'     \nwidth      | 宽度，可使用百分比或数字   | string&#124;number | '40%'\nheight      | 高度，可使用百分比或数字  | string&#124;number | '40'\n\n\n#### modal 高级功能 (额外参数)\n\n参数       | 说明           | 类型             | 默认值      \n-----------|----------------|------------------|------\nform    | 弹框中的表单配置。会做一些联动处理（如点击确认按钮时自动提交数据），常用于弹出层快速提交表单。注意：form 的配置中无需再写form的 type 和 name 属性 | `config`&#124;`function` | \napi    | 提交数据的接口。可以为接口字符串或者对象，当为对象时具有(url,method,params,paramshandler等参数)，具体可见[通用参数](#/Params)#api 系列 | string&#124;object | \nparams | form 会填充params中的值为默认值。会覆盖api中的params | object | \nrender | 弹框中的动态内容。content为静态内容，render为一个函数，会传入params参数，函数返回一个组件配置。常用于确认框，提示内容为和数据相关的动态信息。 | function(params) {return `config`;} | \nposRank | 更改默认排序。最终弹框中展示的内容最多包含三部分，即：content、form、render三个属性对应的内容。 | string | 'render&#124;content&#124;form'\n\n\n以上有两种常用场景。  \n1、“新增/编辑”表单弹框（见示例：弹框表单）  \n2、“删除”确认弹框（见示例：确认信息弹框）\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-modal').show()`。\n\n参数       | 说明           | 参数    \n-----------|----------------|-----------\nshow      | 展示弹框。可以同时传入新的params，以刷新弹框中的 form、render 中的内容。用于form弹框场景和render确认框场景 |  show([params])  \nclose    | 关闭弹框           |   close()  \n\n\n### UF.Modal.method()\n\n包括：\n\n- `UF.Modal.info`\n- `UF.Modal.success`\n- `UF.Modal.error`\n- `UF.Modal.warning`\n- `UF.Modal.confirm`\n\n以上均为一个函数，参数为 object，具体属性如下：\n\n参数       | 说明           | 类型             | 默认值       \n-----------|----------------|------------------|--------------\ntitle      | 标题           | string&#124;`config` | 无           \ncontent    | 内容           | string&#124;`config` | 无           \nonOk       | 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭      | function         | 无           \nonCancel   | 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭       | function         | 无           \nwidth      | 宽度           | string&#124;number | 416           \niconType   | 图标 Icon 类型    | string | question-circle \nokText     | 确认按钮文字    | string           | 确定       \ncancelText | 取消按钮文字    | string           | 取消       \nmaskClosable | 点击蒙层是否允许关闭 | Boolean   | `false`    \n\n以上函数调用后，会返回一个引用，可以通过该引用关闭弹窗。\n\n```javascript\nvar ref = UF.Modal.info({...});\nref.destroy();\n```\n\n"

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(335);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var demo1 = {
	    title: '后端获取数据',
	    description: '采用后端获取数据及分页等',
	    config: [{
	        type: 'table',
	        name: 'newtable2',
	        columns: [{
	            title: 'ID',
	            dataIndex: 'id',
	            minWidth: 40
	        }, { title: '机房', dataIndex: 'name', key: 'name', minWidth: 60, filter: { type: 'input' } }, { title: '名称（实时翻译）', dataIndex: 'idcId', minWidth: 120, enum: {
	                url: 'docs/php/data.php',
	                realtime: {
	                    key: 'idcIds',
	                    comma: false
	                }
	            } }, {
	            title: '地区',
	            dataIndex: 'region',
	            key: 'region',
	            minWidth: 60,
	            cellRowSpan: function cellRowSpan(v, row) {
	                if (v === '华北') {
	                    return row.id === 1 ? 4 : 0;
	                } else {
	                    return 1;
	                }
	            },
	            filter: {
	                type: 'radio',
	                options: ['华北', '华南', '华东']
	            }
	        }, { title: '合并表头', children: [{ title: '数组', dataIndex: 'arr', render: function render(v) {
	                    return {
	                        type: 'span',
	                        content: v,
	                        colSpan: 2
	                    };
	                }
	            }, { title: '描述', dataIndex: 'description', render: function render(v) {
	                    return {
	                        type: 'span',
	                        content: v,
	                        colSpan: 2
	                    };
	                }
	            }] }],
	        title: {
	            // text: 'Table后端分页表格',
	            basicWidget: ['filter', 'setPageSize', {
	                name: 'selctAll',
	                icon: 'like-o',
	                text: '自定义全选',
	                onClick: function onClick(table) {
	                    return table.selectAll();
	                }
	            }, 'export', 'switchTags'],
	            menuWidget: ['refresh', 'fullScreen', 'setPageSize'],
	            extra: [{
	                type: 'button',
	                mode: 'primary',
	                icon: 'sync',
	                content: '刷新',
	                control: 'newtable2.refresh'
	            }]
	        },
	        source: {
	            url: 'docs/php/data.php',
	            method: 'get',
	            paramsHandler: function paramsHandler(params) {
	                // 增加 index 参数
	                // params.index = params.page - 1;
	                return params;
	            },
	            handler: function handler(data) {
	                return data.map(function (v) {
	                    v.idcId = v.id;
	                    v.arr = [1, 2, 3];
	                    // v.arr = {a: 1, b: 2, c: 3};
	                    return v;
	                });
	            },
	            onError: function onError() {
	                return false;
	            }
	        },
	        params: {},
	        rowKey: 'id',
	        pagination: {
	            pageType: 'server',
	            pageSize: 5
	            // paramIndex: {
	            //     page: 'pageNum',
	            //     size: 'pageSize'
	            // }
	        },
	        bordered: true,
	        // rowSelection: {
	        //     // 指定满足某些条件时复选框不可选
	        //     // disabledRow: function (record) {
	        //     //     return true;
	        //     // }
	        // },
	        rowTooltips: function rowTooltips(v) {
	            return v.description;
	        },
	        expanded: {
	            expandedRowRender: function expandedRowRender(v) {
	                return v.description;
	            }
	            // defaultExpandAllRows: true
	        }
	    }]
	};

	var dataSource = [{ key: '1', name: '胡彦斌', age: 32, address: '西湖区湖底公园1号', sex: '男', json: { a: 1, b: 2 }, html: '<i>表格</i>', duration: '2017-05-21 00:00:00', customRender: '1' }, { key: '2', name: '胡彦祖', age: 42, address: '西湖区湖底公园2号', sex: 'femal', json: [{ a: 1, b: 2 }, { a: 3, b: 4 }], html: '<i>表格</i>', duration: '2017-05-21 00:00:00', customRender: '2' }, { key: '3', name: '胡彦祖彦斌', age: 52, address: '东湖区湖底公园3号东湖区湖底公园3号东湖区湖底公园3号', sex: '女', json: { a: '哈哈', b: 2 }, html: '<i>表格</i>', duration: '2017-05-21 00:00:00', customRender: '3' }, { key: '4', name: '胡彦祖彦斌', age: 62, address: '东湖区湖底公园3号东湖区湖底公园3号东湖区湖底公园3号', sex: '女', json: { a: '哈哈', b: 2 }, html: '<i>表格</i>', duration: '2017-05-21 00:00:00', customRender: '4' }];

	var columns = [{
	    title: '姓名',
	    dataIndex: 'name',
	    key: 'name',
	    filter: {
	        type: 'checkbox',
	        options: ['斌', '祖', '西']
	    }
	}, {
	    title: '性别',
	    dataIndex: 'sex',
	    key: 'sex',
	    filter: {
	        type: 'checkbox'
	    },
	    display: false
	}, { title: '年龄', dataIndex: 'age', key: 'age' }, {
	    title: '住址',
	    dataIndex: 'address',
	    key: 'address',
	    filter: {
	        type: 'input'
	    },
	    ellipsis: true
	}, { title: 'JSON字段', dataIndex: 'json', key: 'json', textType: 'json' }, { title: 'html字段', dataIndex: 'html', key: 'html', textType: 'html' }, {
	    title: '时间段',
	    dataIndex: 'duration',
	    key: 'duration',
	    textType: 'duration',
	    render: function render(text, record, index) {
	        return {
	            type: 'span',
	            style: {
	                color: '#0aea0a'
	            },
	            content: text
	        };
	    }
	}, {
	    title: '自定义render',
	    dataIndex: 'customRender',
	    key: 'customRender',
	    render: function render(text, record, index) {
	        return {
	            type: 'span',
	            style: {
	                color: '#0aea0a'
	            },
	            content: text
	        };
	    }
	}];

	var demo2 = {
	    title: '基本用法',
	    description: '简单的表格，最后一列是各种操作。',
	    config: [{
	        type: 'button',
	        content: '为table组件set数据',
	        onClick: function onClick() {
	            (0, _src2.default)('newtable1').set({
	                rowSelection: {
	                    selectedRowKeys: ['4']
	                },
	                data: [dataSource[3]]
	            });
	        }
	    }, {
	        type: 'button',
	        content: '获取Table当前数据',
	        onClick: function onClick() {
	            console.log((0, _src2.default)('newtable2').getValues());
	        }
	    }, {
	        type: 'table',
	        name: 'newtable1',
	        rowKey: 'key',
	        columns: columns,
	        rowSelection: {
	            type: 'checkbox',
	            selections: true,
	            selectedRowKeys: ['3'],
	            // 指定满足某些条件时复选框不可选
	            disabledRow: function disabledRow(record) {
	                return record.name === '胡彦祖' || record.age === 32;
	            }
	        },
	        // pagination: {
	        //     // pageSize: 3
	        //     showSizeChanger: true,
	        //     pageSizeOptions: ['1', '2', '3', '4']
	        // },
	        // pagination: false,
	        title: {
	            text: 'Table前端分页表格测试',
	            basicWidget: [{
	                name: 'filter'
	                // blacklist: ['json']
	            }, 'setPageSize', 'export', 'switchTags', 'refresh', 'fullScreen', 'showAllTags'],
	            menuWidget: ['export', 'switchTags', 'refresh', 'fullScreen', 'showAllTags', 'setPageSize'],
	            showText: false
	        },
	        bordered: true,
	        data: dataSource
	        // source: 'docs/php/download.php',
	        // params: {
	        //     "isExport": true,
	        //     "container_id": 484,
	        //     "zone": "china",
	        //     "type": "server"
	        // },
	    }]

	};

	// 下拉框数据字典
	var selectData = {
	    "1": "男",
	    "2": "女"
	};

	var columns3 = [{
	    title: '姓名',
	    dataIndex: 'name',
	    key: 'name',
	    editable: {
	        api: 'docs/php/submit.php',
	        type: "input",
	        name: "name",
	        rules: {
	            equired: true,
	            message: "必填项"
	        },
	        icon: {
	            editIcon: {
	                mode: "tool",
	                style: {
	                    color: "red"
	                }
	            }
	        }
	    }
	}, {
	    title: '性别',
	    dataIndex: 'sex',
	    key: 'sex',
	    editable: {
	        api: {
	            url: 'docs/php/submit.php',
	            method: 'get'
	        },
	        type: "select",
	        name: "sex",
	        rules: {
	            equired: true,
	            message: "必选项"
	        },
	        options: [{
	            label: "男",
	            value: '1'
	        }, {
	            label: "女",
	            value: '2'
	        }]
	    },
	    render: function render(text, record, index) {
	        return {
	            type: "p",
	            content: selectData[text]
	        };
	    }
	}, {
	    title: '年龄',
	    dataIndex: 'age',
	    key: 'age',
	    editable: {
	        api: 'docs/php/submit.php',
	        type: "inputNumber",
	        name: "age",
	        rules: {
	            equired: true,
	            type: "number",
	            message: "必须为数字"
	        }
	    }
	}, {
	    title: '同意协议',
	    dataIndex: 'agreement',
	    key: 'agreement',
	    editable: {
	        api: 'docs/php/submit.php',
	        type: "switch",
	        name: "agreement"
	    },
	    render: function render(text, record, index) {
	        var showText = !!text ? '是' : '否';
	        return {
	            type: "p",
	            content: showText
	        };
	    }
	}, {
	    title: '身份数据',
	    dataIndex: 'data',
	    key: 'data',
	    textType: 'json',
	    editable: {
	        api: 'docs/php/submit.php',
	        type: "textarea",
	        name: "data",
	        rules: {
	            equired: true,
	            message: "必填项"
	        }
	    }
	}];

	var editDataSource = [{ key: '1', name: '胡彦斌', age: 30, sex: '1', agreement: true, data: [{ id: 111111, company: "baidu" }] }, { key: '2', name: '胡彦祖', age: 42, sex: '2', agreement: false, data: [{ id: 222222, company: "baidu" }] }, { key: '3', name: '胡彦祖彦斌', age: 52, sex: '2', agreement: true, data: [{ id: 33333 }, { company: "baidu" }] }, { key: '4', name: '胡彦祖彦斌', age: 62, sex: '1', agreement: false, data: [{ id: 444444, company: "baidu" }] }];

	var demo3 = {
	    title: '创建一个可行内编辑的表格',
	    description: '可行内编辑的表格.',
	    config: [{
	        type: 'table',
	        name: 'newtable3',
	        rowKey: 'key',
	        columns: columns3,
	        rowSelection: {
	            type: 'checkbox',
	            selections: true
	        },
	        title: {
	            text: '可行内编辑的表格'
	        },
	        bordered: true,
	        data: editDataSource
	    }]

	};

	var TableApp = function (_BaseDoc) {
	    _inherits(TableApp, _BaseDoc);

	    function TableApp(props) {
	        _classCallCheck(this, TableApp);

	        var _this = _possibleConstructorReturn(this, (TableApp.__proto__ || Object.getPrototypeOf(TableApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TableApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3);
	        }
	    }]);

	    return TableApp;
	}(_BaseDoc3.default);

	exports.default = TableApp;

/***/ }),
/* 335 */
/***/ (function(module, exports) {

	module.exports = "展示行列数据。\n\n## 何时使用\n\n- 当有大量结构化的数据需要展现时；\n- 当需要对数据进行排序、搜索、分页、自定义操作等复杂行为时。\n\n## 组件&配置\n\n### # table\n\n| 参数           | 说明                     | 类型             | 默认值   |\n|---------------|--------------------------|-----------------|---------|\n| title  | 表格标题栏配置，可配置题目及表格控件，具体见下面配置[`title`](#/Custom/Table/-title-)     | string &#124; object   | - |\n| rowSelection  | 列表项是否可选择，具体见下面配置[`rowSelection`](#/Custom/Table/-rowselection-) | object  | null  |\n| pagination    | 分页器，具体见下方配置[`pagination`](#/Custom/Table/-pagination-) ，设为 false 时不展示和进行分页 | object &#124; `false` |   |\n| size          | 正常或紧凑型表格，依次间距变小：`default`、`middle`、`small`、`mini`、`crowd`  | string | default |\n| data    | 数据数组，见下面示例 `data` | any[] |            |\n| columns   | 表格列的配置描述，具体项见下表[`columns`](#/Custom/Table/-column-) | ColumnProps[] | - |\n| rowKey        | 表格行 key 的取值，每一行需唯一。可以是字符串或一个函数 | string &#124; row=>row.id | 'id' |\n| rowClassName  | 表格行的类名      | Function(record, index):string | - |\n| indentSize    | 展示树形数据时，每层缩进的宽度，以 px 为单位 | number   | 15 |\n| bordered  | 是否展示外边框和列边框 | boolean | false      |\n| showHeader  | 是否显示表头 | boolean          | true      |\n| expanded  | 配置额外的展开行，具体见下面配置[`expanded`](#/Custom/Table/-expand-) | object          | true      |\n| footer | 表格尾部         | Function(currentPageData) &#124; `config`  | |\n| scroll | 横向或纵向支持滚动，也可用于指定滚动区域的宽高度：`{{ x: true, y: 300 }}` | object   | -  |\n| source        | 获取数据接口，如果传入此字段，则表格数据通过url获取。此字段用法和全组件通用的`source`一致，具体可见 [通用参数](#/Params/-source-) 中的 # source系列  | string &#124; object | - |\n| source.autoLoad | 特别提醒下source下面的`autoLoad`参数，是否组件渲染完成后自动加载数据 | boolean | true | \n| source.autoReload | 特别提醒下source下面的`autoReload`参数，是否组件刷新时自动重新加载数据 | boolean | true | \n| params | `source.params`的别名，通过source向后端请求时传的参数（一般用于外部搜索)，由于调用频繁，所以放在source平级方便设置 | Object |  | \n| doubleClickEdit | 双击行时进行编辑，需配合`crud.edit` | | |\n| crud | 表格的扩展功能，增加简单的配置即可拥有常用的增删改查等功能。详见：[`Table Crud 表格扩展`](#/Custom/TableCrud) | Object |  | \n| rowTooltips   | 表格行的额外提示信息，展示位置固定。返回空时不展示提示图标  | Function(record, index):string | - |\n| rowTooltipsIcon | 表格行的额外提示信息图标  | string | - |\n| onChange      | 分页、排序、筛选变化时触发 | Function(pagination, filters, sorter) |  |\n| onRowClick    | 点击行时触发 | Function(record, index, event)   | - |\n| onRowDoubleClick| 双击行时触发 | Function(record, index, event)   | - |\n| onRowMouseEnter | 鼠标移入行时触发 | Function(record, index, event)   | - |\n| onRowMouseLeave | 鼠标移出行时触发 | Function(record, index, event)   | - |\n\n#### *expanded*\n\n| 参数       | 说明                       | 类型    |  默认值  |\n|-----------|----------------------------|--------|---------|\n| expandedRowRender  | 额外的展开行 | Function | - |\n| defaultExpandedRowKeys | 默认展开的行 | string[] | - |\n| defaultExpandAllRows | 初始时，是否展开所有行 | boolean | false |\n| onExpand      | 点击展开图标时触发 | Function(expanded, record) | |\n| onExpandedRowsChange | 展开的行变化时触发 | Function(expandedRows) | |\n\n#### *column*\n\n列描述数据对象，是 `columns` 中的一项。\n\n| 参数       | 说明                       | 类型            |  默认值  |\n|-----------|----------------------------|-----------------|---------|\n| title      | 列头显示文字               | string &#124; `config` | - |\n| display    | 默认是否展示列当前列             | boolean | true |\n| authority  | 关联权限点，可根据权限点控制是否展示列，详见[`全局配置.authority`](#/Develop/Config/-authority)   | string |  |\n| dataIndex  | 列数据在数据项中对应的 key，支持 `a.b.c` 的嵌套写法。其中`_operation`为一特殊值，可见[`column._operation`](#/Custom/Table/-column-_operation-) | string | - |\n| enum      | 字段内容翻译，详见下方[`columns.enum`](#/Custom/Table/-column-enum-) | array&#124;`source` | -  |\n| width      | 列宽度 | string&#124;number | -  |\n| minWidth   | 列最小宽度 | string&#124;number | -  |\n| style      | 自定义样式。当为函数时，函数参数同render，函数返回一个样式对象 | object&#124;function | -  |\n| className  | 列的 className | string          |  -      |\n| fixed      | 列是否固定，可选 `true`(等效于 left) `'left'` `'right'` | boolean&#124;string | false |\n| render     | 生成复杂数据的渲染函数，参数分别为当前字段的值，当前行数据，@return里面可以设置表格 行/列合并, 返回值必须是一个UF组建配置Object格式 | function(text, record, index) {} | - |\n| exportRender | 针对导出数据时的处理函数，要求处理结果必须为字符串 | function(text, record) {return '';} | - |\n| filter     | 表头的筛选设置，详见下方[`columns.filter`](#/Custom/Table/-column-filter-)      | Object           | - |\n| sorter     | 排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)，需要服务端排序可设为 true | Function&#124;boolean | - |\n| sortOrder | 排序的受控属性，外界可用此控制列的排序，可设置为 `'ascend'` `'descend'` `false` | boolean&#124;string | - |\n| colSpan    | 表头列合并,设置为 0 时，不渲染 | number      |         |\n| cellColSpan | 单元格列合并，需要单元格上下配合，避免单元格冗余或缺失。函数返回结果即为合并列数 | function(text, record, index)      |      \n| cellRowSpan | 单元格行合并，需要单元格左右配合，避免单元格冗余或缺失。函数返回结果即为合并行数 | function(text, record, index)      |      \n| onCellClick | 单元格点击回调 | Function(record, event) | - |\n| textType | 字段表现形式。可选 `html` `json` `duration` `default`。其中：`html`-一段html，直接展示在页面上；`json`-会经过一些样式上的处理之后展示到页面上；`duration`-传入的是日期时间串(2016-12-28 10:00:00),返回据现在(1天14小时) | String | `default` |\n| ellipsis | 文字过长截断，鼠标移上去时，展示一个气泡, 如示例中的爱好字段 | Boolean | false |\n| editable | 此单元格是否可编辑,详见下方[`columns.editable`](#/Custom/Table/-column-editable-) | Object&#124;function | - |\n\n#### *column.enum*\n\n将字段根据枚举的列表、或者通过接口获取的列表、或者实时查询，将字段翻译成另一个字段。\n\n**`enum`有3种用法:**  \n* **直接列举出全部值**：格式为`enum: [{key: '', value: ''}]`, key为原数据的值，value为要展示的值  \n* **枚举的值为通过接口一次取得**，enum为一个对象，格式为：`enum: {url: '',handler(){}}`, 参数和`source`一致  \n* **分页数据加载时实时通过接口查询**，enum同2一致，额外设置属性`realtime`为`true`。适用于数据量较大无法通过接口一次获得的情况\n\nenum为对象时，除[`source`](#/Params/-source-)系列参数外，还需要注意一下参数：\n\n| 参数       | 说明                       | 类型    |  默认值  |\n|-----------|----------------------------|--------|---------|\n| cache  | 默认会开启缓存，即枚举数据仅会加载一次。如果需要动态获取，则可把cache置为 false | boolean | true  |\n| allowEmpty  | 可控制当数据不在枚举类型中时，是否要展示原值。当配置为false时，展示源数据 | boolean | true  |\n| realtime | 声明翻译功能为实时翻译，即每次翻页实时去接口查询（默认是一次请求全量，当数据量较大时可以切换为实时翻译） | boolean&#124;object | false |\n| realtime.key | realtime为对象时，key用于声明传递给后端的参数名称 | string | 'ids' |\n| realtime.comma | realtime为对象时，用于设置是否逗号分隔多个id值。当置于false时，参数值为一个数组 | boolean | true |\n\n\n**`enum`更多应用场景**  \n> 1、新增、编辑的输入框的表单元素里，如果存在表格里配置了枚举类型的字段，当元素为select、radio等具有options属性且没有配置options，组件会自动把枚举的列表添加到该元素上。  \n> 2、批量新增、批量编辑的keys列表里，如果存在表格里配置了枚举类型的字段，则对应字段也会自动做转换：批量编辑时自动填入的数据是转换之后的值；新增和编辑后提交到后端会自动再转换回id；  \n> 3、每个字段的翻译结果都会追加到每行的原数据中，查看详情、模糊搜索时可以直接从行数据中获取到，字段命名规则为`${dataIndex}.fyi`\n\n具体使用可见 [Table Crud](#/Custom/TableCrud) 中Demo的名称字段（idcId）的展示/新增/编辑/批量编辑，以及提交数据时的对应的字段内容\n\n`enum`属性配置为异步返回时，接口返回格式为以下三种均可：\n```javascript\n// 格式一：\n[\n    {id: 1, name: 'GPU', ...},\n]\n// 格式二：\n[\n    {key: 1, value: 'GPU'},\n]\n// 格式三:\n{\n    1: 'GPU',\n}\n```\n\n#### *column.filter*\n\n| 参数       | 说明                       | 类型            |  默认值  |\n|-----------|----------------------------|-----------------|---------|\n| type      | 筛选形式，共三种`checkbox`, `radio`, `input`               | string | - |\n| options      | 当筛选形式为`checkbox`或`radio`时，该字段用于指定通过哪些值作为筛选条件               | string[] | 默认为所有可能出现的值 |\n\n#### *column.editable*\n\n主要为Form组件的item配置项, 图标配置主要为Icon组件配置项, 下面只是列出常用配置项, 其余的可参照相应组件的配置。\n\n| 参数       | 说明                       | 类型            |  默认值  | 是否必须 |\n|-----------|----------------------------|-----------------|---------|--------|\n| type | 即为输入类型组件的type。除type外，可以使用一切输入型组件的参数 | string | - | 必须 |\n| name | 表单域名称，key，提交时以此名称为键 | string | - | 必须 |\n| rules | 验证规则,详见Form组件的item.rules配置项 | string | - |  |\n| icon | 编辑单元格相应图标, 固定为三个属性 `icon: { editIcon: { mode: 'edit'}, submitIcon: null, closeIcon: {mode: 'close-circle'}}`. 如需去除则将相应属性赋值为null, 当不设置某一属性时则为默认. 当submitIcon为null时自动添加点击其它地方关闭编辑框功能. 当直接把icon设置为null时，则editIcon为默认值，其余两个设置为null | Object &#124; null | 默认图标样式 |  |\n| api | 待定 | string | - | 必须 |\n\n> `editable`也可以为一个函数，函数的参数和render的参数一致，返回结果为以上的配置对象。以此可以动态设置 editable 的配置\n\n#### *column._operation*\n\n当 `dataIndex` 为 _operation 时，指定此列为操作列，其render函数返回值为操作按钮配置数组，且操作按钮配置中可以使用`action`属性和crud配置做关联，以实现表格中对单行的编辑、删除等功能。crud配置详见：[`Table Crud 表格扩展`](#/Custom/TableCrud) \n\n例如：\n\n```javascript\ncolumns: [\n    ...\n    {\n        title: '操作',\n        dataIndex: '_operation',\n        width: 100,\n        render: ()=>([\n            {type: 'a', content: '日志', action: 'showLog'},\n            {type: 'a', content: '编辑', action: 'edit'},\n            {type: 'a', content: '删除', action: 'delete'}\n        ])\n    }\n]\n```\n\n\n#### *rowSelection*\n\n选择功能的配置。\n\n| 参数              | 说明                     | 类型             |  默认值   |\n|------------------|--------------------------|-----------------|---------------------|\n| type | 多选/单选，`checkbox` or `radio` | string | `checkbox`  |\n| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | string[] | []  |\n| disabledRow | 选择框的不可选的条件，返回值应该为一个Boolean类型的值        | Function(record) |  -   |\n| selections | 自定义选择项，见下面配置 `selection`, 设为 `true` 时使用默认选择项 | object[]&#124;boolean | true |\n| hideDefaultSelections | 去掉『全选』『反选』两个默认选项 | boolean | false |\n| onChange | 选中项发生变化的时的回调 | Function(selectedRowKeys, selectedRows) | -   |\n| onSelect | 用户手动选择/取消选择某列的回调         | Function(record, selected, selectedRows) |   -   |\n| onSelectAll | 用户手动选择/取消选择当前页所有列的回调    | Function(selected, selectedRows, changeRows) |   -   |\n| onSelectInvert | 用户手动选择反选当前页的回调 | Function(selectedRows) | - |\n\n#### *rowSelection.selection*\n\n| 参数              | 说明                     | 类型             |  默认值   |\n|------------------|--------------------------|-----------------|---------------------|\n| key | React 需要的 key，建议设置 | string | -  |\n| text | 选择项显示的文字 | string &#124; `UF.init({...})` | -  |\n| onSelect | 选择项点击回调 | Function(changeableRowKeys) | -   |\n\n#### *pagination*\n\n| 参数             | 说明                               | 类型          | 默认值                   |\n|------------------|------------------------------------|---------------|--------------------------|\n| current          | 当前页数                           | number        | -                   |\n| pageType         | 分页类型：前端分页时值为`client`, 后端分页值为`server`,为后端分页时每切换一页会去后端取数据，当采用后端分页时除了传递指定的params外，还会传递`page` `size` `pageType`三个字段，`page`为要获取的第几页 `size`为获取数据条数 `pageType`为分页方式   | string | client |\n| pageSize         | 每页条数   | number | 10 |\n| onChange         | 页码改变的回调，参数是改变后的页码及每页条数 | Function(page, pageSize)      |    |\n| showSizeChanger  | 是否可以改变 pageSize              | boolean        | false                    |\n| pageSizeOptions  | 指定每页可以显示多少条             | string[] | ['10', '20', '30', '40'] |\n| onShowSizeChange | pageSize 变化的回调                | Function(current, size)      |                      |\n| showQuickJumper  | 是否可以快速跳转至某页             | boolean         | false                    |\n| size             | 当为「small」时，是小尺寸分页      | string        |                       |\n| simple           | 当添加该属性时，显示为简单分页     | boolean        |                      |\n| total            | 数据总数      | number        |                       |\n| showTotal        | 用于显示数据总量和当前数据顺序     | Function(total, range) |            |\n| layout           | 设置分页布局，可以设置在左侧展示还是在右侧。可选值：`left`、`right`    | string        | 'right'  |\n| paramIndex       | 更改请求中的分页参数名称，推荐使用`source.paramIndex`参数进行修改  | object        | {page: 'page', size: 'size'} |\n\n\n#### *title*\n\n参数              | 说明                     | 类型             |  默认值\n-----------------|--------------------------|-----------------|--------\ntext | 表格标题 | string&#124;`config` | -  |\nbasicWidget | 基础控件，直接展示在表格表头上方。例：`basic: ['filter', 'export']`，所有可选控件见下表；也可以是`自定义控件`。参数为一个数组，数组中每一项可以是字符串，也可以是对象，对象的可选属性见`控件属性` | array |\nmenuWidget | 非常用控件，为了节省空间，把这些控件统一放在一个菜单里，可选控件见下表 | array | \nshowText | 是否显示控件图标后面的说明文字 | Boolean | true \nextra | 额外自定义 控件/组件 列表，本身为一个数组，数组中每一项为一个组件配置，例如一个按钮 | array | \n\n> extra或者widget中的自定义控件，都有一个额外的`action`属性，可以关联配置的`crud`，用法类似上面介绍的[`column._operation`](#/Custom/Table/-column-_operation-)\n\n##### *所有可选基础控件说明*\n\n控件 | 说明 | 位置\n---- | ---- | -----\nfilter |  模糊搜索功能。`前端分页`、`后端分页`都支持。当表格为后端分页时模糊搜索不再为实时获取，而是输入完成后点击回车或者🔍，组件会重新调用source接口，并额外传递一个`search`参数，参数值为输入内容。控件会随Table的分页形式自行切换 | 只能用于basic中\nexport |  导出数据。会随Table的分页形式自行切换交互形式 |\nswitchTags |  选择要展示的列 |\nrefresh |  刷新表格按钮 |\nfullScreen |  全屏展示 |\nshowAllTags |  展示全部列功能 |\nsetPageSize |  设置分页条数 |\n\n使用基础控件，可以直接使用字符串形式（控件名），如果想更改控件的默认展示效果，可改用对象的方式，参数和自定义控件类似。`name`即为组件名称，`icon`和`text`可自定义。\n\n##### *控件属性*\n\n为一个对象，包含以下几部分：  \n\n| 参数 | 说明 | 类型 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| name | 控件名称。可以为上表中的基础控件名称，如果不在上表中，则认为是自定义控件 | String | 是 |\n| icon | 按钮图标，如：'like-o'，详见 [这里](#/General/Icon) | String |  |\n| text | 按钮文字 | String |  |\n| type | 组件类型。一旦设置了组件类型，则控件不再以默认的展示方式展示，及设置什么类型就展示成什么类型，例如select | String |  |\n| action | 同`column._operation`的action | String |  |\n| onClick | 点击按钮时的回调函数，回调函数会返回一个参数，参数为 table 组件的引用 | function(table){} | `自定义组件`必填 |\n| blacklist | `filter`控件默认检索全部字段，可以设置一个白名单来声明只检索哪些字段。参数为待检索的字段名列表 | array | 仅`filter`控件有效 |\n| whitelist | `filter`控件可以设置一个黑名单，作用和上面刚好相反 | array | 仅`filter`控件有效 |\n| paramIndex | 后端分页时，`filter`控件会向后端发送请求，可以通过此参数修改请求携带的参数名称，默认值为`'search'` | string | 仅`filter`控件有效 |\n| label | `filter`控件前面的label文字提示 | string | 仅`filter`控件有效 |\n| cache | 是否开启缓存。会永久保存用户自己选择的要展示的字段（默认开启） | boolean | 仅`switchTags`控件有效 | \n\n\n### 函数调用\n> 组件自身带有的函数，调用方法如：`UF('my-table').refresh()`。\n\n参数 | 说明 | 参数\n---- | ---- | ---- \nrefresh | 刷新表格数据，会展示loading等 | refresh()\nreload | 手动触发表格获取数据 | reload()\nshowCrud | 展示crud属性中配置的增删改查等弹框。第一个参数为要调用的是crud中配置的哪个弹框，即配置的key；之后的参数为相应弹框需要的额外参数，例如编辑弹框需要把需要编辑的数据传入等  | showAdd(action, otherParams)\nexport | 手动触发导出数据功能，可以用于置于任何位置的按钮点击后调用表格的导出功能 | export()\ngetSelected | 手动获取已选中的数据 | getSelected()\ngetSelectedKeys | 获取当前全部选中行的key | getSelectedKeys()\nselectAll | 手动触发全选 | selectAll()\nclearSelect | 手动触发全选 | clearSelect()\ngetValues | 获取Table当前的全部数据（源数据） | getValues()\ngetDisplayValues | 获取Table当前的全部数据（包含展示数据） | getDisplayValues()\n\n### 其余一些 Tips\n\n#### data 数据格式\n表格的数据数组格式如下：\n```javascript\n[{\n    key: '1',\n    name: '胡彦斌',\n    age: 32,\n    address: '西湖区湖底公园1号'\n}, {\n    key: '2',\n    name: '胡彦祖',\n    age: 42,\n    address: '西湖区湖底公园2号'\n}]\n```\n**注意：**  \n\n在 Table 中，`data` 和 `columns` 里的数据值都需要指定 `key` 值。对于 `data` 默认将每列数据的 `key` 属性作为唯一的标识。\n\n如果你的数据没有这个属性，务必使用 `rowKey` 来指定数据列的主键。若没有指定，控制台会出现以下的提示，表格组件也会出现各类奇怪的错误。\n\n#### 关于后端分页数据缓存问题\n\n如`Table`组件中使用后端分页，如果数据不是实时更新的，可以开启数据缓存功能，切换分页后，再查看原来分页的数据即可无需再次请求。\n\n**但是需要注意**：可能会影响编辑、查询等刷新表格的功能，所以需要谨慎使用。\n\n具体方法有两种：\n* 一种是配置`source.cache`参数，把`cache`设置为true，可见 [通用参数](#/Params/-source-) `source`的用法\n* 另一种是`UF.config`中配置，具体使用方法可查看 [全局配置](#/Develop/Config/-global-cacheapis-) `global.cacheApis`\n\n#### "

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _crud = __webpack_require__(337);

	var _crud2 = _interopRequireDefault(_crud);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var demo1 = {
	    title: 'Crud 扩展功能展示',
	    description: 'Table中提供了增删改查等功能的配置',
	    config: [{
	        type: 'table',
	        name: 'newtable',
	        columns: [{ title: 'ID', dataIndex: 'id' }, { title: '机房', dataIndex: 'name' }, {
	            title: '名称',
	            dataIndex: 'idcId',
	            enum: {
	                url: 'http://uf.baidu.com/docs/php/data.php',
	                handler: function handler(data) {
	                    return data.map(function (item) {
	                        return { key: item.id, value: item.name };
	                    });
	                }
	            }
	        }, { title: '地区', dataIndex: 'region' }, { title: '描述', dataIndex: 'description' }, {
	            title: '操作',
	            dataIndex: '_operation',
	            width: 100,
	            render: function render() {
	                return [{ type: 'a', content: '编辑', action: 'edit' }, { type: 'a', content: '删除', action: 'delete' }, { type: 'a', content: '详情', action: 'details' }];
	            }
	        }],
	        title: {
	            text: null,
	            basicWidget: [{ name: 'filter', text: '快捷查询' }, 'switchTags'],
	            extra: [{ type: 'button', mode: 'primary', content: '新增', action: 'add' }, { type: 'button', mode: 'primary', content: '批量编辑', action: 'batchEdit' }, { type: 'button', mode: 'primary', content: '批量删除', action: 'batchDelete' }, { type: 'button', mode: 'primary', content: '批量查询', action: 'batchSearch', actived: true }]
	        },
	        // source: 'docs/php/data.php',
	        source: {
	            url: 'docs/php/data.php',
	            handler: function handler(data) {
	                return data.map(function (v) {
	                    v.idcId = v.id;
	                    return v;
	                });
	            }
	        },
	        pagination: {
	            pageType: 'client'
	        },
	        rowSelection: {
	            selections: true
	        },
	        crud: {
	            add: {
	                title: '新增机房:',
	                api: 'docs/php/submit.php?sleep=1',
	                method: 'post',
	                form: {
	                    items: [{ type: 'input', label: '机房', name: 'name', rules: { required: true } }, { type: 'select', label: '名称', name: 'idcId', rules: { required: true } }, { type: 'input', label: '地区', name: 'region', rules: { required: true } }, { type: 'textarea', label: '描述', name: 'description' }]
	                }
	            },
	            edit: {
	                title: '编辑机房信息:',
	                api: 'docs/php/submit.php?sleep=1',
	                forbidden: 'id'
	            },
	            details: {
	                title: '查看详情',
	                list: null,
	                posRank: 'content|render|form',
	                content: {
	                    type: 'alert',
	                    mode: 'info',
	                    message: '默认复用Table组件的columns配置，可通过使用list属性或者render来自定义详情展示形式',
	                    showIcon: true
	                }
	            },
	            search: {
	                position: 'beforeHeader',
	                type: 'form',
	                layout: { type: 'inline' },
	                size: 'default',
	                items: [{ type: 'input', label: '机房', name: 'name', style: { width: 90 } }, { type: 'select', label: '名称', name: 'idcId', style: { width: 90 } }, { type: 'input', label: '地区', name: 'region', style: { width: 90 } }, { type: 'button', mode: 'primary', name: 'submit', action: 'submit', content: '查询' }]
	            },
	            batchSearch: {
	                position: 'afterHeader',
	                size: 'default',
	                title: [{ type: 'span', content: '批量查询', style: { display: 'inline-block', marginRight: 10, fontWeight: 700 } }, { type: 'button', size: 'small', mode: 'default', content: '清空', action: 'reset' }, { type: 'button', size: 'small', mode: 'primary', content: '查询', action: 'submit' }],
	                content: {
	                    type: 'div',
	                    style: { padding: '7px 0' },
	                    content: '请在下方的输入框中输入机房名称进行查询，每个记录请用英文逗号(,)或换行相隔。'
	                },
	                form: {
	                    layout: { wrapperCol: 24 },
	                    items: [{ type: 'textarea', name: 'batchSearch', rows: 8 }]
	                },
	                footer: null
	            },
	            delete: {
	                title: '删除机房:',
	                api: 'docs/php/submit.php?sleep=1',
	                render: function render(row) {
	                    return {
	                        type: 'html',
	                        content: '确定要<span class="remind">删除</span>『 <span class="wgt7">' + row.name + '</span> 』机房吗?'
	                    };
	                }
	            },
	            batchEdit: {
	                // action 声明还是使用批量导入类型的功能，相当于另一种批量导入
	                title: '批量更新:',
	                width: 800,
	                api: {
	                    url: 'docs/php/submit.php?sleep=1',
	                    method: 'put',
	                    contentType: 'application/json',
	                    paramsHandler: function paramsHandler(params) {
	                        return { data: JSON.stringify(params) };
	                    }
	                },
	                method: 'post',
	                keys: 'name,idcId,region,description',
	                keysHandler: {
	                    // 源数据转换成字符串展示到页面的批量编辑框时，对每个字段的处理逻辑
	                    stringify: function stringify(key, text, record) {
	                        if (key === 'description') {
	                            return '就是这么任性';
	                        }
	                        return text;
	                    },
	                    // 对用户输入的数据进行解析转换，将每个字段转换成提交给后端的数据
	                    parse: function parse(key, text) {
	                        if (key === 'description') {
	                            return '这里可以格式化用户输入的内容';
	                        }
	                        return text;
	                    }
	                },
	                okText: '更新',
	                content: '提示信息：xxx'
	            },
	            batchDelete: {
	                title: '批量删除:',
	                api: '?r=batchDelete',
	                okText: '批量删除',
	                render: function render(rows) {
	                    return {
	                        type: 'div',
	                        content: [{ type: 'html', content: '确定要<span class="remind">批量删除</span>以下选中机房吗？' }, { type: 'html', content: '<p style="margin: 5px 0">' + rows.map(function (v) {
	                                return v.name;
	                            }).join(', ') + '</p>' }]
	                    };
	                }
	            }
	        }
	    }]
	};

	var TableCrudApp = function (_BaseDoc) {
	    _inherits(TableCrudApp, _BaseDoc);

	    function TableCrudApp(props) {
	        _classCallCheck(this, TableCrudApp);

	        var _this = _possibleConstructorReturn(this, (TableCrudApp.__proto__ || Object.getPrototypeOf(TableCrudApp)).call(this, props));

	        _this.doc = _crud2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TableCrudApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return TableCrudApp;
	}(_BaseDoc3.default);

	exports.default = TableCrudApp;

/***/ }),
/* 337 */
/***/ (function(module, exports) {

	module.exports = "Table可以快速配置增删改查等功能。\n\n**注意：这还是`Table`组件，由于其`crud`属性内容比较多，这里拎出来单独描述。以下全部内容皆在`Table.crud`属性之下**\n\n功能大体分为如下几种，与下面参数列表中的`mode`参数可选值一致：\n\n> * show: 纯展示型弹框或和数据相关的展示型弹框，只有关闭按钮，本身没有其他交互 (当action不与任何类型匹配时，默认是show)  \n> * add: 新增单条数据弹框\n> * edit: 编辑单条数据弹框\n> * delete: 删除单条数据弹框\n> * details: 查看单条数据详细信息弹框\n> * search: 高级查询\n> * batchAdd: 批量导入数据弹框。用于批量新增数据\n> * batchEdit: 批量编辑表格中选中的数据\n> * batchDelete: 批量删除表格中选中的数据\n> * batchShow: 批量展示Table中选中的数据\n\n\n其中：如`show`,`edit`,`delete`可用于表格`column._operation`配置中。batch***可用于批量操作表格数据。\n\ncrud属性值为一对象，其中键为当前配置的`\"引用名称\"`，用于`_operation`中的`action`属性所指向的功能引用；或者`showCrud`函数调用crud功能时第一个参数指向的功能的引用。值为功能的具体配置，参数如下：\n\n**注意：以上几种类型名称为关键字，每一种都有对应的默认处理逻辑，如果想要自定操作，则避免使用上述关键字命名操作名称**\n\n## 配置属性列表\n\n参数           | 说明                     | 类型             | 默认值 \n--------------|--------------------------|-----------------|-------\ntitle      | 弹框头部显示内容               | string &#124; `config` | \nmode  | 功能的具体分类。不同分类具有不同默认功能，如不填，则认为mode和引用名称相同。可选值有：'show'、'add'、'edit'、'delete'、'batchAdd'、'batchEdit'、'batchDelete'，可见上面的功能分类 | string  | \nposition  | 显示位置，可以选择：`modal`以弹框显示、`beforeHeader`展示在表格头部以上、`afterHeader`展示在表格头部以下   | string | 'modal' \napi    | 提交数据的接口。可以为接口字符串或者对象，当为对象时具有(url,method,params,handler等参数)，具体可见[通用参数](#/Params)#api 系列 | string|object \nform   | 弹框中的表单配置。会做一些联动处理（如点击确认按钮时自动提交数据），常用于弹出层快速提交表单。注意：form 的配置中无需再写form的 type 和 name 属性 | `config` | \nparams | form会填充params中的值为默认值。会覆盖api中的params | object | \nrender | 弹框中的动态内容。content为静态内容，render为一个函数，会传入params参数，函数返回一个组件配置。常用于确认框，提示内容为和数据相关的动态信息。 | |function(params) {return `config`;} \nautoReload | 点击提交时自动刷新表格 | boolean | true \nforbidden | 多个弹框复用form配置时，可以用此属性声明复用过来的哪些字段置为不可操作状态。比如编辑弹框复用新增的form配置时，id置为不可操作 | string（逗号分隔的字段名称字符串） |  仅`add`、`edit`可用\nremove | 多个弹框复用form配置时，可以用此属性声明复用过来的哪些字段移除 | string（逗号分隔的字段名称字符串） |  仅`add`、`edit`可用\nkeys | 批量操作弹框中，声明待操作的字段列表。点击批量编辑时，会将表格中的数据取出，置于输入框内 | string（逗号分隔的字段名称字符串） |  仅`批量操作`可用\nkeysHandler | 批量操作弹框中，对置于输入框中以及从输入框中获取到的数据的格式化函数 | object |  仅`批量操作`可用\nkeysHandler.stringify | 自定义将表格的数据格式化后置于输入框中的各个字段的内容，返回结果需为字符串 | function(key, text, record) {} |  仅`批量操作`可用\nkeysHandler.parse | 自定义将输入框中的数据格取出后，提交前对各个字段的内容进行处理 | function(key, text) {} |  仅`批量操作`可用\n\n常用参数如上，其他参数可参考：[Modal 弹框](#/Custom/Modal)\n\n以上介绍仅针对弹框的展示形式，但是有时对于一些高频操作弹框并不是特别易用，所以可以使扩展内容展示在表格上方，配置属性如下。**和前面部分名称相同的属性用法也保持一致，不再做过多说明**：\n\n### 各功能详细说明\n\n#### `show`\n\n\n\n## 另一种用法\n\n当`position`不为modal时，crud的内容不再以弹框的形式进行展示，而是直接置于页面上（不过属性基本和弹框一致，同样自动控制显示/隐藏）。\n\n根据position的值决定：`beforeHeader`展示在表头之上（例如Demo中一直展示在页面上的高级查询功能）；或者`afterHeader`展示在表头及表格之间（例如点击\"批量查询\"按钮展示出的批量查询功能）\n"

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _tree = __webpack_require__(187);

	var _tree2 = _interopRequireDefault(_tree);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(339);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	var treeData = [{
	    name: '0-0',
	    key: '0-0',
	    isLeaf: false,
	    disableCheckbox: false,
	    disabled: false,
	    type: 'leval1', // 用途：指定展开到哪一层
	    children: [{
	        name: '0-0-0',
	        key: '0-0-0',
	        isLeaf: true,
	        // disableCheckbox: false, //此项可去，默认为false
	        disabled: true, // 不响应,  //此项也可去，默认为true
	        type: 'leval2'
	    }, {
	        name: '0-0-1',
	        key: '0-0-1',
	        // isLeaf: false,
	        disableCheckbox: false,
	        disabled: false,
	        type: 'leval2',
	        children: [{
	            name: '0-0-1-0',
	            key: '0-0-1-0',
	            disableCheckbox: true, // 复选框不可选，只针对checkbox配置中checkable: true有效
	            disabled: false,
	            type: 'leval3'
	            // isLeaf: true
	        }, {
	            name: '0-0-1-1',
	            key: '0-0-1-1',
	            disableCheckbox: false,
	            disabled: false,
	            type: 'leval3'
	            // isLeaf: true
	        }]
	    }]
	}, {
	    name: '0-1',
	    key: '0-1',
	    isLeaf: false,
	    disableCheckbox: false,
	    disabled: false,
	    type: 'leval1',
	    children: [{
	        // 此节点会触发异步请求，因为满足isLeaf: false,children: []，效果可与树形图展示1中0-1-0节点展开进行对比
	        name: '0-1-0',
	        key: '0-1-0',
	        // isLeaf: false,
	        type: 'leval2',
	        disableCheckbox: false,
	        disabled: false,
	        children: []
	    }]
	}];
	var treeConfig = {
	    type: 'tree',
	    style: {
	        // 必须为符合react语法的css样式
	        width: '300px',
	        paddingTop: '10px',
	        border: '1px dashed #e2e2e2'
	    },
	    expand: {
	        // 全部为可选项，可写可不写
	        defaultExpandAll: false, // 默认展开所有树节点，默认值为false
	        // defaultExpandedKeys: [], // 默认展开指定的树节点，默认值为[],数组不为空时屏蔽defaultExpandAll
	        // expandLeavals: ['leval1', 'leval2'], // 展开哪一层，由data数据中的type字段决定，此配置会屏蔽defaultExpandAll，defaultExpandedKeys
	        expandedKeys: ['0-0-1', '0-1'], // (受控）展开指定的树节点，默认值为[], 设定之后屏蔽defaultExpandAll，defaultExpandedKeys, expandToLeaval
	        autoExpandParent: true, // 是否自动展开父节点，默认值为true,ture->如果某节点是展开的则其父节点自动展开，false->某节点展开的，但是其父节点是收缩的，只有将父节点展开才能看到某节点的展开情况
	        onExpand: function onExpand(expandedKeys, e) {
	            console.log('onExpand:', expandedKeys);
	        }
	    },
	    checkbox: {
	        // 全部为可选项
	        checkable: true, // 显示多选框,默认为false
	        // checkedKeys: ['0-0-1-0', '0-1'], // 默认为空, 配置此项之后会屏蔽defaultCheckedKeys属性
	        checkStrictly: false, // 父子之间的选中是否受关联, 默认值为false：true->不关联，此时必须要设定checkedKeys，否则会报错,false->关联
	        defaultCheckedKeys: ['0-0-1-1'], // 默认选中选框，只有在不舍得checedKeys时有用
	        onCheck: function onCheck(checkedKeys, e) {
	            console.log('onCheck:', checkedKeys);
	        }
	    },
	    select: {
	        defaultSelectedKeys: ['0-1'], // 默认选中节点，默认为[]
	        // selectedKeys: [],// 受控选中节点，此配置项将屏蔽defaultSelectedKeys配置, 默认不配置
	        multiple: true, // 支持点选多个节点（节点本身)，默认值为false
	        onSelect: function onSelect(selectedKeys, e) {
	            console.log('onSelect', e);
	        }
	    },
	    search: {
	        enable: true, // 树搜索功能，默认值为false
	        onlyShowSearchResult: true // 仅展示搜索的结果, 默认为true
	    },
	    source: {
	        url: 'docs/php/tree-data.php',
	        paramsHandler: function paramsHandler(params) {
	            return !params ? {} : {
	                key: params.key,
	                level: params.level
	            };
	        }
	    },
	    widthResize: {
	        resizeAble: true, // 允许改变宽度
	        minWidth: '200px',
	        maxWidth: '500px'
	    }
	    // data: treeData
	};
	var treeConfig2 = {
	    type: 'tree',
	    style: {
	        // 必须为符合react语法的css样式
	        width: '300px',
	        padding: '10px',
	        border: '1px dashed #eaeaea'
	    },
	    expand: {
	        // 全部为可选项，可写可不写
	        defaultExpandAll: false, // 默认展开所有树节点，默认值为false
	        // defaultExpandedKeys: [], // 默认展开指定的树节点，默认值为[],数组不为空时屏蔽defaultExpandAll
	        // expandLeavals:['leval1', 'leval2'], // 展开到哪一层，由data数据中的type字段决定，此配置会屏蔽defaultExpandAll，defaultExpandedKeys
	        expandedKeys: ['0-0-1', '0-1'], // (受控）展开指定的树节点，默认值为[], 设定之后屏蔽defaultExpandAll，defaultExpandedKeys, expandToLeaval
	        autoExpandParent: true, // 是否自动展开父节点，默认值为true,ture->如果某节点是展开的则其父节点自动展开，false->某节点展开的，但是其父节点是收缩的，只有将父节点展开才能看到某节点的展开情况
	        onExpand: function onExpand(expandedKeys, e) {
	            // console.log('onExpand:', expandedKeys);
	        }
	    },
	    select: {
	        defaultSelectedKeys: ['0-1'], // 默认选中节点，默认为[]
	        // selectedKeys: [],// 受控选中节点，此配置项将屏蔽defaultSelectedKeys配置, 默认不配置
	        onSelect: function onSelect(selectedKeys, e) {
	            // console.log('onSelect', selectedKeys);
	        }
	    },
	    showLine: true,
	    data: treeData
	};

	var demo1 = {
	    title: '具有搜索功能的树形图',
	    description: '此示例具有多选，复选框，搜索，右边缘拖动加宽等功能',
	    config: treeConfig
	};
	var demo2 = {
	    title: '带有连接线的树',
	    description: '同级别树节点有连接线相连，并且展开关闭的图标会有所变化',
	    config: treeConfig2
	};

	var TreeApp = function (_BaseDoc) {
	    _inherits(TreeApp, _BaseDoc);

	    function TreeApp(props) {
	        _classCallCheck(this, TreeApp);

	        var _this = _possibleConstructorReturn(this, (TreeApp.__proto__ || Object.getPrototypeOf(TreeApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TreeApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return TreeApp;
	}(_BaseDoc3.default);

	exports.default = TreeApp;

/***/ }),
/* 339 */
/***/ (function(module, exports) {

	module.exports = "### 功能说明  \n* 配置`expand`实现节点展开控制\n* 配置`checkbox`实现复选框功能\n* 配置`search`实现搜索功能\n* 配置`select`实现点击选择功能\n* 配置`source`实现异步加载功能\n* 配置`widthResize`实现右边缘拖动加宽功能\n* 配置`showLine`实现带连接线的树\n* 若没有进行任何配置，则为树形图展示1中的样式\n\n## 配置参数\n\n### 基本参数\n\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| style | 树形图的样式配置，必须为符合`react`语法的`css`样式 | Object | - |  |\n| expand | 节点展开功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| checkbox | 复选框功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| search | 搜索功能 | Object | - |  |\n| select | 点选功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| source | 异步加载功能。参数和通用source参数一致，实际用法略有不同 | Object | - |  |\n| widthResize | 右边缘拖动变宽功能，包含多个可配置参数，见下面详细说明 | Object | - |  |\n| showLine | 是否展示连接线 | Boolean | false | . |\n| data | 外部传入数据，需要按照一定的格式书写，见底部示例 | Array |  | . |\n\n> 当配置了`source`参数时，树组件即具备了异步获取子树的功能，当点击到没有`children`数据又非叶子节点的时候，就会自动去用`source`系列参数获取数据。可见第一个demo的用法\n\n#### expand\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| defaultExpandAll | 默认展开所有树节点 | Boolean | false |  |\n| defaultExpandedKeys | 默认展开指定的树节点，数组不为空时屏蔽`defaultExpandAll` | Array | [] |  |\n| expandLeavals | 哪些类型节点进行展开，由data数据中的type字段决定，此配置会屏蔽`defaultExpandAll`，`defaultExpandedKeys` | Array | - |  |\n| expandedKeys | (受控）展开指定的树节点，设定之后屏蔽`defaultExpandAll`，`defaultExpandedKeys`, `expandLeavals` | Array | [] |  |\n| autoExpandParent | 是否自动展开父节点，ture->如果某节点是展开的则其父节点自动展开，false->某节点展开的，但是其父节点是收缩的，只有将父节点展开才能看到某节点的展开情况 | Boolean | true |  |\n| onExpand | 展开/收起节点时触发, `expandedKeys`, `e`为两个默认参数 | function(expandedKeys, e:{expanded: bool, node}) | - | . |\n\n#### checkbox\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| checkable | 节点前添加 `Checkbox` 复选框 | Boolean | false |  |\n| checkedKeys | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点`key`，则子节点自动选中；相应当子节点`key`都传入，父节点也自动选中。当设置`checkable = true`和`checkStrictly = true`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联 | Array | [] |  |\n| checkStrictly | 父子之间的选中是否受关联: `true`->不关联，此时必须要设定`checkedKeys`，否则会报错, `false`->关联 | Boolean | false |  |\n| defaultCheckedKeys | 默认选中选框，只有在不设定`checedKeys`时起作用 | Array | [] |  |\n| onCheck | 点击复选框触发, `checkedKeys`, `e`为两个默认参数 | function(checkedKeys, e:{checked: bool, checkedNodes, node, event}) | - | . |\n\n#### search\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| enable | 是否启用搜索功能 | Boolean | false |  |\n| onlyShowSearchResult | 是否只展示搜索的结果，为`true`时只展示包含搜索内容的节点，`false`时展示全部数据，但是只对包含搜索结果的父节点进行展开 | Boolean | true | . |\n\n#### select\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| defaultSelectedKeys | 默认选中节点 | Array | [] |  |\n| selectedKeys | （受控）设置选中的树节点，此配置项将屏蔽`defaultSelectedKeys`配置 | Array | [] |  |\n| multiple | 支持点选多个节点（节点本身) | Bealoon | false |  |\n| onSelect | 点击树节点触发，`selectedKeys`, `e`为两个默认参数 | function(selectedKeys, e:{selected: bool, selectedNodes, node, event}) | - | . |\n\n#### widthResize\n| 参数 | 说明 | 类型 | 默认值 | 是否必填 |\n| ---- | ---- | ----- | ----- | ----- |\n| resizeAble | 开启右边缘扩宽功能 | Bealoon | false |  |\n| minWidth | 树形图允许扩宽的最小宽度 | String | - |  |\n| maxWidth | 树形图允许扩宽的最大宽度 | String | - | . |\n\n<a name=\"node-parameter\"></a>\n\n### # 节点的数据格式\n```json\n    [{\n        name: '0-0',            // 必须\n        key: '0-0',             // 必须\n        isLeaf: false,          // 非必须，但是当没有isLeaf且没有children属性时，被置为true\n        disableCheckbox: false, // 非必须，用于指定复选框是否可选\n        disabled: false,        // 非必须，用于指定此节点时候可点\n        type: 'leval1',         // 非必须，但是当指定展开哪些层时必须\n        children: [             // 子节点格式相同\n            ...\n        ]\n    },\n    ...]\n```\n"

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(341);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '默认高度自动根据内容调整',
	    config: [{
	        type: 'ueditor',
	        name: 'my-editor',
	        style: { marginBottom: '10px' },
	        data: '123',
	        simple: false
	    }, {
	        type: 'button',
	        content: '获取内容',
	        onClick: function onClick() {
	            var result = (0, _src2.default)('my-editor').getContent();
	            (0, _src2.default)('u-parse').set({ content: result });
	        }
	    }, {
	        type: 'button',
	        content: '不可编辑',
	        onClick: function onClick() {
	            (0, _src2.default)('my-editor').setDisabled();
	        }
	    }, {
	        type: 'button',
	        content: '追加内容',
	        onClick: function onClick() {
	            (0, _src2.default)('my-editor').setContent('追加内容', true);
	        }
	    }, {
	        type: 'card',
	        title: 'Ueditor内容展示：',
	        style: { marginTop: 10 },
	        content: {
	            type: 'ueditor-parse',
	            name: 'u-parse',
	            content: '<p>123</p>'
	        }
	    }]
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 341 */
/***/ (function(module, exports) {

	module.exports = "Ueditor 用法。\n\n### 功能说明\n\n* 使用和其他组件用法相似的方式使用 ueditor\n* 通过`UF()`可以获取到ueditor实例，并调用ueditor原生API\n* 提供`ueditor-parse`组件对通过`ueditor`编辑的内容进行展示\n\n\n## 组件&参数\n\n### # ueditor\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\nname | 当前Ueditor名称，用于使用`UF()`获取组件 | string | |\nstyle | Ueditor样式 | object | |\ndata | 输入框内的默认内容 | string |  |\nsimple | 使用简洁版本，省略大量默认按钮 | boolen | true |\nonChange | 内容变动时的回调函数 | function(value) {} |  |\nserverUrl | 服务器统一请求接口路径 | string | URL + \"php/controller.php\" |\ntoolbars | 工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的从新定义 | {2d Array} |  |\nzIndex | 编辑器在页面上的z-index层级的基数 | number | 900 |\nautoHeightEnabled | 是否自动长高 | boolean | true |\n\n其他参数见：[Ueditor 官方配置](http://fex.baidu.com/ueditor/#start-config)\n\n\n#### 组件 API\n\n函数名 | 说明 | 参数\n---- | ---- | -----\nsetContent | 设置/追加编辑器内容 | ue.setContent('text'[, true])\ngetContent | 获取编辑器内容 | ue.getContent()\ngetContentTxt | 获取纯文本 | ue.getContentTxt()\nfocus | 让编辑器获得焦点 | ue.focus()\nsetDisabled | 设置编辑区域不可编辑 | ue.setDisabled()\nsetEnabled | 设置编辑区域可编辑 | ue.setEnabled()\nselection.getText | 获得当前选中的文本 | ue.selection.getText()\n\n其他参见：[Ueditor 官方API](http://fex.baidu.com/ueditor/#api-common)\n\n### 注意\n\n与其他组件不同的是，使用`UF('name')`获取到的是ueditor的实例，所以可以使用ueditor官网给出的API，但是不能使用类似于其它组件用的`set`、`hide`函数等\n\n### # ueditor-parse\n\n用于对通过Ueditor编辑的内容进行展示，见顶部实例。\n\n相比于直接使用`html`组件，此组件会额外增加一些ueditor自己的样式，为官方推荐用法。"

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(343);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '默认高度自动根据内容调整',
	    config: [{
	        type: 'echarts',
	        name: 'my-echarts',
	        style: { minWidth: 600, height: 400 },
	        source: {
	            url: 'docs/php/data.php?type=echarts',
	            target: 'series',
	            params: {},
	            handler: function handler(data) {
	                var params = (0, _src2.default)('my-echarts').get('source.params');
	                return data.map(function (v) {
	                    v.type = params.tp || 'bar';
	                    return v;
	                });
	            }
	        },
	        afterCreate: function afterCreate() {
	            (0, _src2.default)('my-echarts').on('click', function () {
	                console.log('额外绑定事件.');
	            });
	        },

	        title: {
	            text: 'ECharts 入门示例'
	        },
	        tooltip: {},
	        xAxis: {
	            data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']
	        },
	        yAxis: {},
	        series: [{
	            name: '销量1',
	            type: 'bar'
	        }, {
	            name: '销量2',
	            type: 'bar'
	        }]
	    }, {
	        type: 'button',
	        content: '条形图',
	        onClick: function onClick() {
	            (0, _src2.default)('my-echarts').set({
	                source: {
	                    params: {
	                        tp: 'bar',
	                        s: Date.now()
	                    }
	                }
	            });
	        }
	    }, {
	        type: 'button',
	        content: '折线图',
	        onClick: function onClick() {
	            (0, _src2.default)('my-echarts').set({
	                className: 'aaa',
	                source: {
	                    params: {
	                        tp: 'line',
	                        s: Date.now()
	                    }
	                }
	            });
	        }
	    }]
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 343 */
/***/ (function(module, exports) {

	module.exports = "Echarts 用法。\n\n### 功能说明\n\n* 使用和其他组件用法相似的方式使用 Echarts\n* 通过`UF()`可以获取到 Echarts 实例，并调用 Echarts 原生API\n\n\n## 组件&参数\n\n### # echarts\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\nname | 当前Echarts组件名称，用于使用`UF()`获取组件 | string | |\nstyle | Echarts所占用元素的样式。一般用来设置宽高等 | object | `{width: '100%', height: 400}` |\n\n其他参数见：[Echarts 官方配置](http://echarts.baidu.com/option.html)\n\n\n#### 组件 API\n\n函数名 | 说明 | 参数\n---- | ---- | -----\nsetOption | 设置图表实例的配置项以及数据，万能接口，所有参数和数据的修改都可以通过setOption完成 | \ngetOption | 获取当前实例中维护的option对象，返回的option对象中包含了用户多次setOption合并得到的配置项和数据，也记录了用户交互的状态，例如图例的开关，数据区域缩放选择的范围等等 | \nclear | 清空当前实例，会移除实例中所有的组件和图表。 | \nshowLoading | 显示加载动画效果 | \nhideLoading | 隐藏加载动画效果 | \n\n\n其他参见：[Echarts 官方API](http://echarts.baidu.com/api.html#echartsInstance)\n\n### 注意\n\n与其他组件不同的是，使用`UF('name')`获取到的是echarts的实例，所以可以使用echarts官网给出的API，但是不能使用类似于其它组件用的`set`、`hide`函数等\n\n\n默认引用的是 echarts3，如果需要切换其他版本，可在`UF.config`中进行如下配置：\n\n```javascript\nUF.config({\n    modules: {\n        paths: {\n            'echarts': 'http://uf.baidu.com/third_party/echarts4/echarts'\n        }\n    }\n});\n```\n"

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(345);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo及文档说明
	


	var data = {
	    id: 1,
	    name: 'TC',
	    object_table: 'idc_info',
	    object_id: '2',
	    description: '土城机房 北京市朝阳区裕民中路乙3号A座 7层',
	    zone: 'China',
	    net_area: 'beijing',
	    area_id: '1',
	    ip_conversion_rule: '65536',
	    budget_status: 'yes',
	    self_build: '0',
	    region: '华北'
	};

	var demo1 = {
	    title: '基本用法',
	    description: '默认效果',
	    config: {
	        type: 'list',
	        columns: [{ title: 'ID', dataIndex: 'id' }, { title: '机房', dataIndex: 'name' }, { title: '名称', dataIndex: 'idcId' }, { title: '地区', dataIndex: 'region' }, { title: '描述', dataIndex: 'description' }],
	        data: data,
	        layout: {
	            labelCol: 1,
	            labelStyle: { minWidth: 60 }
	        }
	    }
	};

	var demo2 = {
	    title: '无边框',
	    description: '无边框样式',
	    config: {
	        type: 'list',
	        columns: [{ title: 'ID', dataIndex: 'id' }, { title: '机房', dataIndex: 'name' }, { title: '名称', dataIndex: 'idcId' }, { title: '地区', dataIndex: 'region' }, { title: '描述', dataIndex: 'description' }],
	        data: data,
	        bordered: false
	    }
	};

	var ListApp = function (_BaseDoc) {
	    _inherits(ListApp, _BaseDoc);

	    function ListApp(props) {
	        _classCallCheck(this, ListApp);

	        var _this = _possibleConstructorReturn(this, (ListApp.__proto__ || Object.getPrototypeOf(ListApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ListApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return ListApp;
	}(_BaseDoc3.default);

	exports.default = ListApp;

/***/ }),
/* 345 */
/***/ (function(module, exports) {

	module.exports = "对一条数据进行纵向展示。\n\n## 组件&配置\n\n### # list\n\n参数      | 说明                     | 类型 | 默认值 \n-------|--------------------------|-------|------\ncolumns| 待展示的字段的说明，类似于`Table`组件的columns，见下面`column` | Object[] |\ndata   | 待展示数据对象   |  Object |\nlayout | 布局样式，见下面`layout`    |  Object  |\nbordered   | 展示边框   |  boolean | true\ninterleave | 隔行变色   |  boolean | true\n\n#### *column*\n\n列描述数据对象，是 `columns` 中的一项。\n\n参数       | 说明                       | 类型            |  默认值  \n----------|----------------------------|-----------------|---------\ntitle      | 字段显示文字               | string &#124; `config` |  \ndataIndex  | 字段名称                     | string |  \nwidth      | 列宽度 | string&#124;number |   \nrender     | 生成复杂数据的渲染函数，参数分别为当前字段的值，全部数据，返回值是一个组件配置 | Function(text, record) {} |  \n\n\n#### *layout*\n\n采用栅格系统进行布局。\n\n参数   | 说明                | 类型 | 默认值 \n-------|---------------------|-------|------\nlabelCol  | 字段中文名所占栅格数  | number |  6\nvalueCol  | 字段内容所占栅格数    | number |  18\nlabelStyle  | 字段中文名额外样式，例如可以设置最小宽度等 | object | \nvalueStyle  | 字段内容额外样式      | object | "

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var IconApp = function (_BaseDoc) {
	    _inherits(IconApp, _BaseDoc);

	    function IconApp(props) {
	        _classCallCheck(this, IconApp);

	        var _this = _possibleConstructorReturn(this, (IconApp.__proto__ || Object.getPrototypeOf(IconApp)).call(this, props));

	        _this.doc = 'antd-icon.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(IconApp, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'direction' }), document.getElementById('direction-demo'));
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'suggestion' }), document.getElementById('suggestion-demo'));
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'other' }), document.getElementById('other-demo'));
	            _reactDom2.default.render(_react2.default.createElement(IconSet, { className: 'icons', catigory: 'logo' }), document.getElementById('logo-demo'));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u65B9\u5411\u6027\u56FE\u6807'
	                    ),
	                    _react2.default.createElement('div', { id: 'direction-demo' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u63D0\u793A\u5EFA\u8BAE\u6027\u56FE\u6807'
	                    ),
	                    _react2.default.createElement('div', { id: 'suggestion-demo' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u7F51\u7AD9\u901A\u7528\u56FE\u6807'
	                    ),
	                    _react2.default.createElement('div', { id: 'other-demo' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'h3',
	                        { style: { margin: '1.6em 0 .6em' } },
	                        '\u54C1\u724C\u548C\u6807\u8BC6'
	                    ),
	                    _react2.default.createElement('div', { id: 'logo-demo' })
	                )
	            );
	        }
	    }]);

	    return IconApp;
	}(_BaseDoc3.default);

	exports.default = IconApp;

	var IconSet = function (_React$Component) {
	    _inherits(IconSet, _React$Component);

	    function IconSet(props) {
	        _classCallCheck(this, IconSet);

	        var _this2 = _possibleConstructorReturn(this, (IconSet.__proto__ || Object.getPrototypeOf(IconSet)).call(this, props));

	        _this2.icons = {
	            direction: ['step-backward', 'step-forward', 'fast-backward', 'fast-forward', 'shrink', 'arrows-alt', 'down', 'up', 'left', 'right', 'caret-up', 'caret-down', 'caret-left', 'caret-right', 'up-circle', 'down-circle', 'left-circle', 'right-circle', 'up-circle-o', 'down-circle-o', 'right-circle-o', 'left-circle-o', 'double-right', 'double-left', 'verticle-left', 'verticle-right', 'forward', 'backward', 'rollback', 'enter', 'retweet', 'swap', 'swap-left', 'swap-right', 'arrow-up', 'arrow-down', 'arrow-left', 'arrow-right', 'play-circle', 'play-circle-o', 'up-square', 'down-square', 'left-square', 'right-square', 'up-square-o', 'down-square-o', 'left-square-o', 'right-square-o', 'login', 'logout', 'menu-fold', 'menu-unfold'],
	            suggestion: ['question', 'question-circle-o', 'question-circle', 'plus', 'plus-circle-o', 'plus-circle', 'pause', 'pause-circle-o', 'pause-circle', 'minus', 'minus-circle-o', 'minus-circle', 'plus-square', 'plus-square-o', 'minus-square', 'minus-square-o', 'info', 'info-circle-o', 'info-circle', 'exclamation', 'exclamation-circle-o', 'exclamation-circle', 'close', 'close-circle', 'close-circle-o', 'close-square', 'close-square-o', 'check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o', 'clock-circle-o', 'clock-circle'],
	            logo: ['android', 'android-o', 'apple', 'apple-o', 'windows', 'windows-o', 'ie', 'chrome', 'github', 'aliwangwang', 'aliwangwang-o', 'dingding', 'dingding-o'],
	            other: ['lock', 'unlock', 'area-chart', 'pie-chart', 'bar-chart', 'dot-chart', 'bars', 'book', 'calendar', 'cloud', 'cloud-download', 'code', 'code-o', 'copy', 'credit-card', 'delete', 'desktop', 'download', 'edit', 'ellipsis', 'file', 'file-text', 'file-unknown', 'file-pdf', 'file-excel', 'file-jpg', 'file-ppt', 'file-add', 'folder', 'folder-open', 'folder-add', 'hdd', 'frown', 'frown-o', 'meh', 'meh-o', 'smile', 'smile-o', 'inbox', 'laptop', 'appstore-o', 'appstore', 'line-chart', 'link', 'mail', 'mobile', 'notification', 'paper-clip', 'picture', 'poweroff', 'reload', 'search', 'setting', 'share-alt', 'shopping-cart', 'tablet', 'tag', 'tag-o', 'tags', 'tags-o', 'to-top', 'upload', 'user', 'video-camera', 'home', 'loading', 'loading-3-quarters', 'cloud-upload-o', 'cloud-download-o', 'cloud-upload', 'cloud-o', 'star-o', 'star', 'heart-o', 'heart', 'environment', 'environment-o', 'eye', 'eye-o', 'camera', 'camera-o', 'save', 'team', 'solution', 'phone', 'filter', 'exception', 'export', 'customer-service', 'qrcode', 'scan', 'like', 'like-o', 'dislike', 'dislike-o', 'message', 'pay-circle', 'pay-circle-o', 'calculator', 'pushpin', 'pushpin-o', 'bulb', 'select', 'switcher', 'rocket', 'bell', 'disconnect', 'database', 'compass', 'barcode', 'hourglass', 'key', 'flag', 'layout', 'printer', 'sound', 'usb', 'skin', 'tool', 'sync', 'wifi', 'car', 'schedule', 'user-add', 'user-delete', 'usergroup-add', 'usergroup-delete', 'man', 'woman', 'shop', 'gift', 'idcard', 'medicine-box', 'red-envelope', 'coffee', 'copyright', 'trademark', 'safety', 'wallet', 'bank', 'trophy', 'contacts', 'global', 'shake', 'api', 'fork']
	        };
	        return _this2;
	    }

	    _createClass(IconSet, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                className = _props.className,
	                catigory = _props.catigory;

	            var listClassName = 'anticons-list clearfix ' + (className || '');
	            return _react2.default.createElement(
	                'ul',
	                { className: listClassName },
	                this.icons[catigory].map(function (type) {
	                    return _react2.default.createElement(
	                        'li',
	                        { key: type },
	                        _react2.default.createElement(_antd.Icon, { type: type }),
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'anticon-class' },
	                            type
	                        )
	                    );
	                })
	            );
	        }
	    }]);

	    return IconSet;
	}(_react2.default.Component);

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var IconApp = function (_BaseDoc) {
	    _inherits(IconApp, _BaseDoc);

	    function IconApp(props) {
	        _classCallCheck(this, IconApp);

	        var _this = _possibleConstructorReturn(this, (IconApp.__proto__ || Object.getPrototypeOf(IconApp)).call(this, props));

	        _this.doc = 'antd-icon-plus.md';
	        _this.__init();
	        return _this;
	    }
	    // render() {
	    //     return this.__getDemo(demo1);
	    // }


	    return IconApp;
	}(_BaseDoc3.default);

	exports.default = IconApp;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基础栅格',
	    description: '从堆叠到水平排列。使用单一的一组 Row 和 Col 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 Row 内。',
	    config: [{
	        type: 'row',
	        style: { textAlign: 'center', background: 'rgba(0, 160, 233, 0.7)' },
	        content: [{
	            type: 'col',
	            span: 12,
	            content: 'col-12'
	        }, {
	            type: 'col',
	            span: 12,
	            style: { background: '#00a0e9' },
	            content: 'col-12'
	        }]
	    }, {
	        type: 'row',
	        style: { textAlign: 'center', background: 'rgba(0, 160, 233, 0.7)', marginTop: 8 },
	        content: [{
	            type: 'col',
	            span: 8,
	            content: 'col-8'
	        }, {
	            type: 'col',
	            span: 8,
	            style: { background: '#00a0e9' },
	            content: 'col-8'
	        }, {
	            type: 'col',
	            span: 8,
	            content: 'col-8'
	        }]
	    }, {
	        type: 'row',
	        style: { textAlign: 'center', background: 'rgba(0, 160, 233, 0.7)', marginTop: 8 },
	        content: [{
	            type: 'col',
	            span: 6,
	            content: 'col-6'
	        }, {
	            type: 'col',
	            span: 6,
	            style: { background: '#00a0e9' },
	            content: 'col-6'
	        }, {
	            type: 'col',
	            span: 6,
	            content: 'col-6'
	        }, {
	            type: 'col',
	            span: 6,
	            style: { background: '#00a0e9' },
	            content: 'col-6'
	        }]
	    }]
	};

	var demo2 = {
	    title: '区块间隔',
	    description: '栅格常常需要和间隔进行配合，你可以使用 Row 的 gutter 属性，我们推荐使用 (16+8n)px 作为栅格间隔。(n 是自然数)',
	    config: [{
	        type: 'row',
	        gutter: 16,
	        style: { textAlign: 'center' },
	        content: [{
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }, {
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }, {
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }, {
	            type: 'col',
	            span: 6,
	            content: {
	                type: 'div',
	                style: { background: '#00a0e9' },
	                content: 'col-6'
	            }
	        }]
	    }]
	};

	var GridApp = function (_BaseDoc) {
	    _inherits(GridApp, _BaseDoc);

	    function GridApp(props) {
	        _classCallCheck(this, GridApp);

	        var _this = _possibleConstructorReturn(this, (GridApp.__proto__ || Object.getPrototypeOf(GridApp)).call(this, props));

	        _this.doc = 'antd-grid.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(GridApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return GridApp;
	}(_BaseDoc3.default);

	exports.default = GridApp;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本结构',
	    description: '典型的页面布局。',
	    config: [{
	        type: 'layout',
	        content: [{
	            type: 'header',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Header'
	        }, {
	            type: 'content',
	            style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	            content: 'Content'
	        }, {
	            type: 'footer',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Footer'
	        }]
	    }, {
	        type: 'layout',
	        style: { marginTop: 30 },
	        content: [{
	            type: 'header',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Header'
	        }, {
	            type: 'content',
	            content: {
	                type: 'layout',
	                content: [{
	                    type: 'sider',
	                    style: { background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px' },
	                    content: 'Sider'
	                }, {
	                    type: 'content',
	                    style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	                    content: 'Content'
	                }]
	            }
	        }, {
	            type: 'footer',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Footer'
	        }]
	    }, {
	        type: 'layout',
	        style: { marginTop: 30 },
	        content: [{
	            type: 'header',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Header'
	        }, {
	            type: 'content',
	            content: {
	                type: 'layout',
	                content: [{
	                    type: 'content',
	                    style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	                    content: 'Content'
	                }, {
	                    type: 'sider',
	                    style: { background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px' },
	                    content: 'Sider'
	                }]
	            }
	        }, {
	            type: 'footer',
	            style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	            content: 'Footer'
	        }]
	    }, {
	        type: 'layout',
	        style: { marginTop: 30 },
	        content: [{
	            type: 'sider',
	            style: { background: '#3ba0e9', color: '#fff', textAlign: 'center', lineHeight: '120px' },
	            content: 'Sider'
	        }, {
	            type: 'content',
	            content: {
	                type: 'layout',
	                content: [{
	                    type: 'header',
	                    style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	                    content: 'Header'
	                }, {
	                    type: 'content',
	                    style: { background: '#108ee9', color: '#fff', textAlign: 'center', minHeight: '120px', lineHeight: '120px' },
	                    content: 'Content'
	                }, {
	                    type: 'footer',
	                    style: { background: '#7dbcea', color: '#fff', textAlign: 'center' },
	                    content: 'Footer'
	                }]
	            }
	        }]
	    }]
	};

	var demo2 = {
	    title: '上中下布局',
	    description: '最基本的『上-中-下』布局。一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。',
	    config: {
	        type: 'layout',
	        content: [{
	            type: 'header',
	            content: [{ type: 'div', className: 'logo' }, {
	                type: 'menu',
	                theme: 'dark',
	                mode: 'horizontal',
	                defaultSelectedKeys: ['2'],
	                style: { lineHeight: '64px' },
	                items: [{
	                    key: '1',
	                    title: 'nav 1'
	                }, {
	                    key: '2',
	                    title: 'nav 2'
	                }, {
	                    key: '3',
	                    title: 'nav 3'
	                }]
	            }]
	        }, {
	            type: 'content',
	            style: { padding: '0 50px' },
	            content: [{
	                type: 'breadcrumb',
	                style: { margin: '12px 0' },
	                items: [{ breadcrumbName: 'Home' }, { breadcrumbName: 'List' }, { breadcrumbName: 'App' }]
	            }, {
	                type: 'div',
	                style: { background: '#fff', padding: 24, minHeight: 280 },
	                content: 'Content'
	            }]
	        }, {
	            type: 'footer',
	            style: { textAlign: 'center' },
	            content: 'UF ©2017 Created by Liuzechun'
	        }]
	    }
	};

	var demo3 = {
	    title: '顶部-侧边布局-通栏',
	    description: '同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。',
	    config: {
	        type: 'layout',
	        content: [{
	            type: 'header',
	            content: [{ type: 'div', className: 'logo' }, {
	                type: 'menu',
	                theme: 'dark',
	                mode: 'horizontal',
	                defaultSelectedKeys: ['2'],
	                style: { lineHeight: '64px' },
	                items: [{
	                    key: '1',
	                    title: 'nav 1'
	                }, {
	                    key: '2',
	                    title: 'nav 2'
	                }, {
	                    key: '3',
	                    title: 'nav 3'
	                }]
	            }]
	        }, {
	            type: 'layout',
	            content: [{
	                type: 'sider',
	                width: 200,
	                style: { background: '#fff' },
	                content: {
	                    type: 'menu',
	                    mode: 'inline',
	                    selectedKeys: ['1'],
	                    defaultOpenKeys: ['sub1'],
	                    style: { height: '100%', borderRight: 0 },
	                    items: [{
	                        key: 'sub1',
	                        icon: 'user',
	                        title: 'subnav 1',
	                        childItems: [{ key: '1', title: 'option 1' }, { key: '2', title: 'option 2' }, { key: '3', title: 'option 3' }]
	                    }, {
	                        key: 'sub2',
	                        icon: 'laptop',
	                        title: 'subnav 2',
	                        childItems: [{ key: '4', title: 'option 4' }, { key: '5', title: 'option 5' }, { key: '6', title: 'option 6' }]
	                    }, {
	                        key: 'sub3',
	                        icon: 'notification',
	                        title: 'subnav 3',
	                        childItems: [{ key: '7', title: 'option 7' }, { key: '8', title: 'option 8' }, { key: '9', title: 'option 9' }]
	                    }]
	                }
	            }, {
	                type: 'content',
	                style: { padding: '0 24px 24px' },
	                content: [{
	                    type: 'breadcrumb',
	                    style: { margin: '12px 0' },
	                    items: [{ breadcrumbName: 'Home' }, { breadcrumbName: 'List' }, { breadcrumbName: 'App' }]
	                }, {
	                    type: 'div',
	                    style: { background: '#fff', padding: 24, minHeight: 280 },
	                    content: 'Content'
	                }]
	            }]
	        }]
	    }
	};

	var demo4 = {
	    title: '顶部-侧边布局',
	    description: '拥有顶部导航及侧边栏的页面，多用于展示类网站。',
	    config: {
	        type: 'layout',
	        content: [{
	            type: 'header',
	            content: [{ type: 'div', className: 'logo' }, {
	                type: 'menu',
	                theme: 'dark',
	                mode: 'horizontal',
	                defaultSelectedKeys: ['2'],
	                style: { lineHeight: '64px' },
	                items: [{
	                    key: '1',
	                    title: 'nav 1'
	                }, {
	                    key: '2',
	                    title: 'nav 2'
	                }, {
	                    key: '3',
	                    title: 'nav 3'
	                }]
	            }]
	        }, {
	            type: 'content',
	            style: { padding: '0 50px' },
	            content: [{
	                type: 'breadcrumb',
	                style: { margin: '12px 0' },
	                items: [{ breadcrumbName: 'Home' }, { breadcrumbName: 'List' }, { breadcrumbName: 'App' }]
	            }, {
	                type: 'layout',
	                content: [{
	                    type: 'sider',
	                    width: 200,
	                    style: { background: '#fff' },
	                    content: {
	                        type: 'menu',
	                        mode: 'inline',
	                        selectedKeys: ['1'],
	                        defaultOpenKeys: ['sub1'],
	                        style: { height: '100%', borderRight: 0 },
	                        items: [{
	                            key: 'sub1',
	                            icon: 'user',
	                            title: 'subnav 1',
	                            childItems: [{ key: '1', title: 'option 1' }, { key: '2', title: 'option 2' }, { key: '3', title: 'option 3' }]
	                        }, {
	                            key: 'sub2',
	                            icon: 'laptop',
	                            title: 'subnav 2',
	                            childItems: [{ key: '4', title: 'option 4' }, { key: '5', title: 'option 5' }, { key: '6', title: 'option 6' }]
	                        }, {
	                            key: 'sub3',
	                            icon: 'notification',
	                            title: 'subnav 3',
	                            childItems: [{ key: '7', title: 'option 7' }, { key: '8', title: 'option 8' }, { key: '9', title: 'option 9' }]
	                        }]
	                    }
	                }, {
	                    type: 'content',
	                    style: { padding: '0 24px 24px' },
	                    content: [{
	                        type: 'div',
	                        style: { background: '#fff', padding: 24, minHeight: 280 },
	                        content: 'Content'
	                    }]
	                }]
	            }]
	        }]
	    }
	};

	var LayoutApp = function (_BaseDoc) {
	    _inherits(LayoutApp, _BaseDoc);

	    function LayoutApp(props) {
	        _classCallCheck(this, LayoutApp);

	        var _this = _possibleConstructorReturn(this, (LayoutApp.__proto__ || Object.getPrototypeOf(LayoutApp)).call(this, props));

	        _this.doc = 'antd-layout.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(LayoutApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return LayoutApp;
	}(_BaseDoc3.default);

	exports.default = LayoutApp;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(351);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Table使用说明
	


	var demo1 = {
	    title: '带路由的页面',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/card'
	    }
	};

	var RouterApp = function (_BaseDoc) {
	    _inherits(RouterApp, _BaseDoc);

	    function RouterApp(props) {
	        _classCallCheck(this, RouterApp);

	        var _this = _possibleConstructorReturn(this, (RouterApp.__proto__ || Object.getPrototypeOf(RouterApp)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(RouterApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return RouterApp;
	}(_BaseDoc3.default);

	exports.default = RouterApp;

/***/ }),
/* 351 */
/***/ (function(module, exports) {

	module.exports = "*以上 [demo页面](docs/demo/router.php#/card) 的路由部分配置见底部。更多完整示例见 [页面示例](#/Usage/Demo)*\n\n## 何时使用\n\n* 单页应用的入口，用于负责控制整个应用页面跳转。\n\n\n## 组件&配置\n\n### # router\n参数     | 说明           | 类型             | 默认值   |是否必须\n--------|----------------|------------------|--------|-----\nroutes  | 路由的及组件的映射关系对象列表，可以为数组，也可以为单个route对象。详见`route` | `route`&#124;`route`[] | 无    | 必须\nhistory  | 定义浏览器上的路由展现形式，分为两种：`hashHistory` - 默认形式，路由为`#`后面的值，使用起来较方便； `browserHistory` - 高级用法，会去掉`#`，展现形式像是真正的url，需要服务端配合使用，可参考 [这里](http://react-china.org/t/react-router-hashhistory-browserhistory/6799) | string | `'hashHistory'` |\n\n\n#### *route*\n\n描述路由的及组件的映射关系，是 `routes` 中的一项。\n\n参数       | 说明           | 类型             | 默认值   |是否必须\n------------|----------------|------------------|--------|-----\npath    | URL 中的路径。它会组合父 route 的路径，除非它是从 / 开始的， 将它变成一个绝对路径。 | string  |  无   | 必须\nto    | 从当前路径（path）重定向到另一个路径。**此属性不可和`component`同时使用**（因为一个是解析路由，一个是重定向路由）。例如：访问`/mine`路由时重定向到`/aboutme` |  string  |  无   | \ncomponent  | 当前路由对应的组件。它会作为父 route 组件中包含`childrenHolder: true`的组件的子组件渲染。可以直接是一个配置对象；也可以是一个模块名（*懒加载*）。**此属性不可和`to`同时使用** | `config` &#124; string  | 无  | 必须\nindexRoute    | 当用户在父 route 的 URL 时，indexRoute 允许你为父 route 提供一个默认的 \"child\" | `route` |   |\nindexRedirect    | 自动从当前路由重定向到其子路由的 path。例如：访问首页`/`时，自动重定向到`/Home`，即可在配置`/`路由那一层增加 indexRedirect 字段 | string |   |\nchildRoutes   | route 可以被嵌套，childRoutes 为子路由配置。 | `route` &#124; `route`[] |   |\ngetComponent  | 与 component 一样，但是是异步的。用于动态路由 | function(location, cb) { cb(null, Compnent) }  |     |\nonEnter    | 当 route 即将进入时调用。 | function(nextState, replaceState, callback?){}  |   |\nonLeave    | 当 route 即将退出时调用。 |  |   |\nbreadcrumbName    | 供面包屑组件使用，见 [Breadcrumb](#/Navigation/Breadcrumb) | string |   |\nbreadcrumbIcon    | 供面包屑组件使用，见 [Breadcrumb](#/Navigation/Breadcrumb) | string |   |\n\n> 更详细配置可参考原 [react-router](https://react-guide.github.io/react-router-cn/)\n\n---\n\n*demo中路由部分的配置如下：*\n\n```json\n{\n    type: 'router',\n    routes: [\n        {\n            path: '/',\n            component: App,\n            breadcrumbName: '首页',\n            indexRoute: {component: Card},\n            childRoutes: [\n                {path: 'card', breadcrumbName: '卡片', component: Card},\n                {path: 'card2', breadcrumbName: '卡片2', component: Card2,\n                    childRoutes: [\n                        {path: 'card3', breadcrumbName: '卡片3', component: Card3}\n                    ]\n                }\n            ]\n        }\n    ]\n};\n```"

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 固钉
	


	var demo1 = {
	    title: '基本用法',
	    description: '固钉距离可视区上下边缘固定的距离，并且可获取是否是固定状态',
	    config: [{
	        type: 'affix',
	        offsetTop: 120,
	        content: {
	            type: 'button',
	            mode: 'primary',
	            content: '120px to affix top'
	        },
	        onChange: function onChange(affixed) {
	            console.log(affixed);
	        }
	    }, {
	        type: 'affix',
	        offsetBottom: 120,
	        style: {
	            marginTop: '15px'
	        },
	        content: {
	            type: 'button',
	            mode: 'primary',
	            content: '120px to affix buttom'
	        }
	    }]
	};

	var Affix = function (_BaseDoc) {
	    _inherits(Affix, _BaseDoc);

	    function Affix(props) {
	        _classCallCheck(this, Affix);

	        var _this = _possibleConstructorReturn(this, (Affix.__proto__ || Object.getPrototypeOf(Affix)).call(this, props));

	        _this.doc = 'antd-affix.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Affix, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1);
	        }
	    }]);

	    return Affix;
	}(_BaseDoc3.default);

	exports.default = Affix;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var Breadcrumb = function (_BaseDoc) {
	    _inherits(Breadcrumb, _BaseDoc);

	    function Breadcrumb(props) {
	        _classCallCheck(this, Breadcrumb);

	        var _this = _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).call(this, props));

	        _this.doc = 'antd-breadcrumb.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Breadcrumb, [{
	        key: 'render',
	        value: function render() {
	            // return this.__getDemo();
	        }
	    }]);

	    return Breadcrumb;
	}(_BaseDoc3.default);

	exports.default = Breadcrumb;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 下拉菜单
	


	var menu = {
	    type: 'menu',
	    items: [{
	        key: 1,
	        link: 'http://www.baidu.com/',
	        title: 'this is the 1st menu item'
	    }, {
	        key: 2,
	        link: 'http://www.map.baidu.com/',
	        title: 'this is the 2nd menu item'
	    }, {
	        key: 3,
	        link: 'http://ww.taobao.com/',
	        title: 'this is the 3rd menu item'
	    }]
	};
	var demo1 = {
	    title: '基本用法',
	    description: '最简单的下拉菜单，通过trigger属性配置如何触发，关于更多的Menu样式可参考Menu组件',
	    config: {
	        type: 'dropdown',
	        overlay: menu,
	        trigger: ['click'],
	        content: {
	            type: 'a',
	            // href: '#',
	            content: ['Click me', {
	                type: 'icon',
	                mode: 'down'
	            }]
	        },
	        onVisibleChange: function onVisibleChange(flag) {
	            console.log('visible:', flag);
	        }
	    }
	};
	var demo2 = {
	    title: '弹出位置',
	    description: '支持6个弹出位置',
	    config: [{
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'bottomLeft',
	        content: {
	            type: 'button',
	            content: 'bottomLeft',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'bottomCenter',
	        content: {
	            type: 'button',
	            content: 'bottomCenter',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'bottomRight',
	        content: {
	            type: 'button',
	            content: 'bottomRight',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'topLeft',
	        content: {
	            type: 'button',
	            content: 'topLeft',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'topCenter',
	        content: {
	            type: 'button',
	            content: 'topCenter',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }, {
	        type: 'dropdown',
	        overlay: menu,
	        placement: 'topRight',
	        content: {
	            type: 'button',
	            content: 'topRight',
	            style: {
	                margin: '0px 15px 15px 0px'
	            }
	        }
	    }]
	};
	var demo3 = {
	    title: '带下拉框的按钮',
	    description: '左边是按钮，右边是额外的相关功能菜单',
	    config: {
	        type: 'dropdown-button',
	        overlay: menu,
	        content: 'Dropdown-Button'
	    }
	};

	var Dropdown = function (_BaseDoc) {
	    _inherits(Dropdown, _BaseDoc);

	    function Dropdown(props) {
	        _classCallCheck(this, Dropdown);

	        var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

	        _this.doc = 'antd-dropdown.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Dropdown, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Dropdown;
	}(_BaseDoc3.default);

	exports.default = Dropdown;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '顶部导航',
	    description: '水平的顶部导航菜单。',
	    config: {
	        type: 'menu',
	        mode: 'horizontal',
	        defaultSelectedKeys: ['mail'],
	        // source: {
	        //     url: 'docs/php/data.php?sleep=3',
	        //     target: 'items',
	        //     handler: data => ([
	        //         {
	        //             key: 'mail2',
	        //             icon: 'mail',
	        //             title: 'Navigation TEST'
	        //         }
	        //     ])
	        // },
	        items: [{
	            key: 'mail',
	            icon: 'mail',
	            title: 'Navigation One'
	        }, {
	            key: 'app',
	            icon: 'appstore',
	            title: 'app'
	        }, {
	            key: 'setting',
	            icon: 'setting',
	            title: 'Navigation Tree - Submenu',
	            childItems: [{
	                mode: 'group',
	                title: 'Item 1',
	                childItems: [{
	                    key: 'setting:1',
	                    title: 'Option 1'
	                }, {
	                    key: 'setting:2',
	                    title: 'Option 2'
	                }]
	            }]
	        }, {
	            key: 'baidu',
	            title: {
	                type: 'html',
	                content: '<a href="http://www.baidu.design" target="_blank" rel="noopener noreferrer">Navigation Four - Link</a>'
	            }
	        }]
	    }
	};
	var demo2 = {
	    title: '内嵌菜单',
	    description: '垂直菜单，子菜单内嵌在菜单区域。',
	    config: {
	        type: 'menu',
	        mode: 'inline',
	        style: { width: 240 },
	        defaultSelectedKeys: ['1'],
	        defaultOpenKeys: ['sub1'],
	        items: [{
	            key: 'sub1',
	            title: 'Navigation One - Submenu',
	            icon: 'setting',
	            childItems: [{
	                mode: 'group',
	                title: 'Item 1',
	                childItems: [{
	                    key: '1',
	                    title: 'Option 1'
	                }, {
	                    key: '2',
	                    title: 'Option 2'
	                }]
	            }, {
	                mode: 'group',
	                title: 'Item 2',
	                childItems: [{
	                    key: '3',
	                    title: 'Option 3'
	                }, {
	                    key: '4',
	                    title: 'Option 4'
	                }]
	            }]
	        }, {
	            key: 'mail',
	            icon: 'mail',
	            title: 'Navigation Two'
	        }, {
	            key: 'app',
	            icon: 'appstore',
	            title: 'Navigation Tree'
	        }]
	    }
	};
	var demo3 = {
	    title: '主题',
	    description: '内建了两套主题 light|dark，默认 light。',
	    config: [{
	        type: 'switch',
	        checked: true,
	        checkedChildren: 'Dark',
	        unCheckedChildren: 'Light',
	        onChange: function onChange(v) {
	            return (0, _src2.default)('my-menu').set({
	                theme: v ? 'dark' : 'light'
	            });
	        }
	    }, {
	        type: 'menu',
	        name: 'my-menu',
	        mode: 'inline',
	        theme: 'dark',
	        style: { width: 240, marginTop: 10 },
	        defaultSelectedKeys: ['1'],
	        defaultOpenKeys: ['sub1'],
	        items: [{
	            key: 'sub1',
	            icon: 'setting',
	            title: 'Navigation One',
	            childItems: [{
	                key: '1',
	                title: 'Option 1'
	            }, {
	                key: '2',
	                title: 'Option 2'
	            }, {
	                key: '3',
	                title: 'Option 3'
	            }, {
	                key: '4',
	                title: 'Option 4'
	            }]
	        }, {
	            key: 'mail',
	            icon: 'mail',
	            title: 'Navigation Two'
	        }, {
	            key: 'app',
	            disabled: true,
	            icon: 'appstore',
	            title: 'Navigation Tree'
	        }]
	    }]
	};

	var Menu = function (_BaseDoc) {
	    _inherits(Menu, _BaseDoc);

	    function Menu(props) {
	        _classCallCheck(this, Menu);

	        var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

	        _this.doc = 'antd-menu.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Menu, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3);
	        }
	    }]);

	    return Menu;
	}(_BaseDoc3.default);

	exports.default = Menu;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 分页
	


	var demo1 = {
	    title: '基本用法',
	    description: '基础分页，规定每页展示数目，并且显示数据总条数',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        pageSize: 50,
	        onChange: function onChange(page) {
	            console.log('Page:', page);
	        }
	    }
	};
	var demo2 = {
	    title: '改变',
	    description: '改变每页显示条目数',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        showSizeChanger: true,
	        pageSizeOptions: ['10', '25', '50'],
	        onShowSizeChange: function onShowSizeChange(current, pageSize) {
	            console.log(current, pageSize);
	        }
	    }
	};
	var demo3 = {
	    title: '跳转',
	    description: '快速跳转到某一页',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        showQuickJumper: true,
	        onChange: function onChange(pageNumber) {
	            console.log('Page:', pageNumber);
	        }
	    }
	};
	var demo4 = {
	    title: '迷你',
	    description: '迷你版本',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        size: 'small',
	        showQuickJumper: true,
	        showSizeChanger: true,
	        onChange: function onChange(pageNumber) {
	            console.log('Page:', pageNumber);
	        }
	    }
	};
	var demo5 = {
	    title: '简洁',
	    description: '简单的翻页',
	    config: {
	        type: 'pagination',
	        current: 3,
	        total: 500,
	        pageSize: 10,
	        simple: true,
	        showQuickJumper: true,
	        showSizeChanger: true,
	        onChange: function onChange(pageNumber) {
	            console.log('Page:', pageNumber);
	        }
	    }
	};
	var demo6 = {
	    title: '总数',
	    description: '通过设置showTotal展示总共有多少数据',
	    config: {
	        type: 'pagination',
	        total: 85,
	        showTotal: function showTotal(total) {
	            return '共' + total + '条';
	        },
	        pageSize: 20,
	        current: 1
	    }
	};

	var Pagination = function (_BaseDoc) {
	    _inherits(Pagination, _BaseDoc);

	    function Pagination(props) {
	        _classCallCheck(this, Pagination);

	        var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

	        _this.doc = 'antd-pagination.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Pagination, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return Pagination;
	}(_BaseDoc3.default);

	exports.default = Pagination;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 步骤条
	


	var demo1 = {
	    title: '基本用法',
	    description: '简单的步骤条',
	    config: {
	        type: 'steps',
	        current: 1,
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};
	var demo2 = {
	    title: '带图标的步骤条',
	    description: '通过设置step的icon属性，可以启用自定义图标',
	    config: {
	        type: 'steps',
	        content: [{
	            type: 'step',
	            status: 'finish',
	            title: 'Login',
	            icon: {
	                type: 'icon',
	                mode: 'user'
	            }
	        }, {
	            type: 'step',
	            status: 'finish',
	            title: 'Verification',
	            icon: {
	                type: 'icon',
	                mode: 'solution'
	            }
	        }, {
	            type: 'step',
	            status: 'process',
	            title: 'Pay',
	            icon: {
	                type: 'icon',
	                mode: 'credit-card'
	            }
	        }, {
	            type: 'step',
	            status: 'wait',
	            title: 'Done',
	            icon: {
	                type: 'icon',
	                mode: 'smile-o'
	            }
	        }]
	    }
	};
	var demo3 = {
	    title: '竖直方向的步骤条',
	    description: '简单的竖直方向的步骤条',
	    config: {
	        type: 'steps',
	        current: 1,
	        direction: 'vertical',
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};
	var demo4 = {
	    title: '步骤运行错误',
	    description: '使用steps的status属性来指定当前步骤的状态',
	    config: {
	        type: 'steps',
	        current: 1,
	        status: 'error',
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};
	var demo5 = {
	    title: '点状步骤条',
	    description: '包含步骤点的进度条',
	    config: {
	        type: 'steps',
	        current: 1,
	        progressDot: true,
	        content: [{
	            type: 'step',
	            title: 'Finished',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is the description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is the description'
	        }]
	    }
	};

	var Steps = function (_BaseDoc) {
	    _inherits(Steps, _BaseDoc);

	    function Steps(props) {
	        _classCallCheck(this, Steps);

	        var _this = _possibleConstructorReturn(this, (Steps.__proto__ || Object.getPrototypeOf(Steps)).call(this, props));

	        _this.doc = 'antd-steps.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Steps, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Steps;
	}(_BaseDoc3.default);

	exports.default = Steps;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(359);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo及文档说明
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var dataSource1 = [];
	var demo1 = {
	    title: '基础补全',
	    description: '基本使用。通过 suffix 设置自动补全的后缀',
	    config: {
	        type: 'local-complete',
	        style: { width: '80%' },
	        suffix: ['@baidu.com', '@163.com', '@qq.com'],
	        // mode: 'multiple',
	        placeholder: 'input here',
	        onSelect: function onSelect(value) {
	            console.log(value);
	        }
	    }
	};
	var demo2 = {
	    title: '异步搜索',
	    description: '自动补全和远程数据结合。当设置`mode`为`select-only`时，输入框仅可选补全的内容，不可任意输入',
	    config: {
	        type: 'auto-complete',
	        placeholder: '单选模式（仅能选择，不可任意输入）',
	        mode: 'select-only',
	        source: {
	            url: 'docs/php/data.php?sleep=1',
	            paramsHandler: function paramsHandler(params) {
	                return { search: params.value };
	            },
	            handler: function handler(data) {
	                return data.map(function (v) {
	                    return { value: v.id, label: v.name };
	                });
	            }
	        }
	    }
	};
	var demo3 = {
	    title: '搜索用户',
	    description: '一个带有远程搜索，节流控制，请求时序控制，加载状态的多选示例。输入2个字符后进行补全查询。',
	    config: [{
	        type: 'auto-complete',
	        placeholder: '多选模式',
	        mode: 'multiple',
	        startSign: 2,
	        source: {
	            url: 'docs/php/data.php?sleep=1',
	            paramsHandler: function paramsHandler(params) {
	                return { search: params.value };
	            },
	            handler: function handler(data) {
	                return data.map(function (v) {
	                    return { value: v.name, label: v.name };
	                });
	            }
	        }
	    }]
	};
	var demo4 = {
	    title: '搜索用户',
	    description: '同样是一个带有远程搜索功能，不过当搜索不到时也可以录入到框内，从而可直接粘贴多条内容，一般配合`tokenSeparators`属性使用',
	    config: [{
	        type: 'auto-complete',
	        placeholder: '多选模式',
	        mode: 'tags',
	        tokenSeparators: [';'],
	        source: {
	            url: 'docs/php/data.php?sleep=1',
	            paramsHandler: function paramsHandler(params) {
	                return { search: params.value };
	            },
	            handler: function handler(data) {
	                return data.map(function (v) {
	                    return { value: v.name, label: v.name };
	                });
	            }
	        }
	    }]
	};

	var AutoCompleteApp = function (_BaseDoc) {
	    _inherits(AutoCompleteApp, _BaseDoc);

	    function AutoCompleteApp(props) {
	        _classCallCheck(this, AutoCompleteApp);

	        var _this = _possibleConstructorReturn(this, (AutoCompleteApp.__proto__ || Object.getPrototypeOf(AutoCompleteApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(AutoCompleteApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return AutoCompleteApp;
	}(_BaseDoc3.default);

	exports.default = AutoCompleteApp;

/***/ }),
/* 359 */
/***/ (function(module, exports) {

	module.exports = "输入框自动补全功能。组件分本地模式和远程模式两种：\n* 当配置了`source`时，组件数据来源于后端，即先通过后端查询，再提示出来；\n* 否则，组件为自动添加后缀，后缀内容在属性`suffix`中配置\n\n## 组件&参数\n\n### # auto-complete\n\n| 参数           | 说明                             | 类型        | 默认值 |\n|---------------|----------------------------------|------------|---------|\n| value    | 指定当前选中的条目 | string  |  无  |\n| defaultValue | 指定默认选中的条目 | string&#124;string[] |  -  |\n| mode | 设置多选`multiple`、或单选`combobox`、或仅可选择（不可任意输入）`select-only` | 'multiple' &#124; 'combobox' | 'combobox' &#124; 'select-only' |\n| allowClear   | 支持清除, 单选模式有效 | boolean | false |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value) | 无 |\n| onSelect | 被选中时调用，参数为选中项的 value 值\t| function(value, option)\t| 无 |\n| disabled | 是否禁用 | boolean | false |\n| placeholder | 输入框提示 | string | - |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽 | boolean | true |\n| size    | 选择框大小，可选 `large` `small`  | string      |      default      |\n| tokenSeparators | 在`multiple`模式下自动分词的分隔符。便于直接粘贴多条内容时，比如粘贴多个用户名，会自动按分词符分成多个。见第3个demo | string[] |  |\n| disabled | 是否禁用 | boolean | false |\n| source | 同通用source参数 | object |  |\n| startSign | 触发补全标志，当符合设置标志时再开始补全功能，见如下说明 | number&#124;string&#124;function | 1 |\n\n> 底层使用了[`Select`](#/DataEntry/Select)组件，所以可以参考select组件属性，不过由于自动补全组件的一些特性，部分参数被限制\n\n**`startSign`补全标志属性用法**\n\n> * 当为数字时，表示当输入字符串长度满足设置长度时会发起请求，进行查询补全功能\n> * 当为字符串时，表示当字符串中出现设置的字符串时，进行查询补全功能\n> * 当为函数时，表示每次输入后，会把输入的字符串传递给函数进行判断，当函数返回true时，进行查询补全功能\n\n\n### # local-complete\n| 参数           | 说明                             | 类型        | 默认值 |\n|---------------|----------------------------------|------------|---------|\n| value    | 指定当前选中的条目 | string  |  无  |\n| defaultValue | 指定默认选中的条目 | string&#124;string[] |  -  |\n| suffix | 本地模式下，自动补全的数据源\t | string[] | [] |\n\n> 其他属性可参考`auto-complete`"

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Cascader-Demo
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '省市区级联选择',
	    config: {
	        type: 'cascader',
	        name: 'myCascader1',
	        placeholder: '省区选择',
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }]
	    }
	};
	var demo2 = {
	    title: '设定默认值，移入展开',
	    description: '级联选择框设定默认值，移入选项时展开下一级列表',
	    config: {
	        type: 'cascader',
	        name: 'myCascader2',
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }],
	        defaultValue: ['zhejiang', 'hangzhou', 'xihu'],
	        expandTrigger: 'hover'
	    }
	};
	var demo3 = {
	    title: '选择即改变，选项禁用',
	    description: '选中父级则父级出现在选框中，某些选项可设定为不可选',
	    config: {
	        type: 'cascader',
	        name: 'myCascader3',
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            disabled: true,
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }],
	        changeOnSelect: true,
	        onChange: function onChange(value) {
	            console.log(value);
	        }
	    }
	};
	var demo4 = {
	    title: '大小',
	    description: '不同大小的级联选择器',
	    config: [{
	        type: 'cascader',
	        size: 'large',
	        style: {
	            display: 'block',
	            width: '90%'
	        },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }]
	    }, {
	        type: 'cascader',
	        size: 'small',
	        style: {
	            display: 'block',
	            width: '90%',
	            marginTop: '15px'
	        },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门'
	                }]
	            }]
	        }]
	    }]
	};
	var demo5 = {
	    title: '自定义已选项',
	    description: '通过displayRender方法给改变选项的连接符号',
	    config: {
	        type: 'cascader',
	        style: { width: 270 },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖',
	                    code: '752100'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门',
	                    code: '453400'
	                }]
	            }]
	        }],
	        displayRender: function displayRender(labels) {
	            return labels.join(' - ');
	        }
	    }
	};
	var demo6 = {
	    title: '级联选框搜索功能',
	    description: '可以直接搜索选项并选择',
	    config: {
	        type: 'cascader',
	        style: { width: 270 },
	        options: [{
	            value: 'zhejiang',
	            label: '浙江',
	            children: [{
	                value: 'hangzhou',
	                label: '杭州',
	                children: [{
	                    value: 'xihu',
	                    label: '西湖',
	                    code: '752100'
	                }]
	            }]
	        }, {
	            value: 'jiangsu',
	            label: '江苏',
	            children: [{
	                value: 'nanjing',
	                label: '南京',
	                children: [{
	                    value: 'zhonghuamen',
	                    label: '中华门',
	                    code: '453400'
	                }]
	            }]
	        }],
	        showSearch: {
	            matchInputWidth: true
	        }
	    }
	};

	var CascaderApp = function (_BaseDoc) {
	    _inherits(CascaderApp, _BaseDoc);

	    function CascaderApp(props) {
	        _classCallCheck(this, CascaderApp);

	        var _this = _possibleConstructorReturn(this, (CascaderApp.__proto__ || Object.getPrototypeOf(CascaderApp)).call(this, props));

	        _this.doc = 'antd-cascader.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(CascaderApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return CascaderApp;
	}(_BaseDoc3.default);

	exports.default = CascaderApp;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本用法',
	    description: '可用与不可用复选框',
	    config: [{
	        type: 'checkbox',
	        checked: true,
	        onChange: function onChange(e) {
	            console.log(e.target.checked);
	        }
	    }, {
	        type: 'checkbox',
	        checked: false,
	        disabled: true
	    }, {
	        type: 'checkbox',
	        checked: true,
	        disabled: true
	    }]
	};
	var demo2 = {
	    title: 'Checkbox组',
	    description: '由数组生成复选框组',
	    config: [{
	        type: 'checkbox',
	        style: 'margin-bottom: 10px',
	        content: '全选',
	        control: 'checkboxgroup.checkAll'
	    }, {
	        type: 'checkbox-group',
	        name: 'checkboxgroup',
	        options: ['Apple', 'Pear', 'Orange'],
	        value: ['Pear'],
	        onChange: function onChange(checkedValues) {
	            console.log('checked = ', checkedValues);
	        }
	    }]
	};

	var Checkbox = function (_BaseDoc) {
	    _inherits(Checkbox, _BaseDoc);

	    function Checkbox(props) {
	        _classCallCheck(this, Checkbox);

	        var _this = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

	        _this.doc = 'antd-checkbox.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Checkbox, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Checkbox;
	}(_BaseDoc3.default);

	exports.default = Checkbox;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法，在浮层中可以选择或者输入日期',
	    config: [{
	        type: 'date-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        value: 'current'
	    }, {
	        type: 'month-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        value: 'current',
	        format: 'YYYY/MM'
	    }, {
	        type: 'range-picker',
	        style: {
	            display: 'block'
	        },
	        value: ['2017/08/31', 'current'],
	        format: 'YYYY/MM/DD'
	    }]
	};
	var demo2 = {
	    title: '日期时间选择',
	    description: '增加选择时间功能，当 showTime 为一个对象时，其属性会传递给内建的 TimePicker',
	    config: [{
	        type: 'date-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        // placeholder: ['Select Time'],
	        format: 'YYYY-MM-DD HH:mm:ss',
	        showTime: true,
	        onOk: function onOk(value) {
	            console.log('onOk:', value);
	        }
	    }, {
	        type: 'range-picker',
	        style: {
	            display: 'block'
	        },
	        placeholder: ['Start Time', 'End Time'],
	        format: 'YYYY-MM-DD HH:mm:ss',
	        showTime: { format: 'HH:mm' },
	        onChange: function onChange(value, dateString) {
	            console.log('Selected Time: ', value);
	            console.log('Formatted Selected Time: ', dateString);
	        }
	    }]
	};
	var demo3 = {
	    title: '额外的页脚',
	    description: '在浮层中加入额外的页脚，以满足某些定制信息的需求',
	    config: [{
	        type: 'date-picker',
	        style: {
	            display: 'block',
	            width: '200px',
	            marginBottom: '15px'
	        },
	        renderExtraFooter: function renderExtraFooter() {
	            return {
	                type: 'button',
	                content: '额外的页脚'
	            };
	        }
	    }, {
	        type: 'range-picker',
	        style: {
	            display: 'block'
	        },
	        renderExtraFooter: function renderExtraFooter() {
	            return ['额外的页脚 ', { type: 'button', content: '点我' }];
	        }
	    }]
	};

	var DatePicker = function (_BaseDoc) {
	    _inherits(DatePicker, _BaseDoc);

	    function DatePicker(props) {
	        _classCallCheck(this, DatePicker);

	        var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

	        _this.doc = 'antd-date-picker.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(DatePicker, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return DatePicker;
	}(_BaseDoc3.default);

	exports.default = DatePicker;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本用法',
	    description: '数字输入框。',
	    config: [{
	        type: 'input-number',
	        min: 1,
	        max: 5,
	        value: 3,
	        onChange: function onChange(v) {
	            console.log(v);
	        }
	    }]
	};
	var demo2 = {
	    title: '小数',
	    description: '和原生的数字输入框一样，value 的精度由 step 的小数位数决定。',
	    config: [{
	        type: 'input-number',
	        min: 0,
	        max: 1,
	        step: 0.1,
	        onChange: function onChange(v) {
	            console.log(v);
	        }
	    }]
	};
	var demo3 = {
	    title: '格式化展示',
	    description: '通过 formatter 格式化数字，以展示具有具体含义的数据，往往需要配合 parser 一起使用。',
	    config: [{
	        type: 'input-number',
	        value: 100,
	        formatter: function formatter(v) {
	            return v + '%';
	        },
	        onChange: function onChange(v) {
	            return ('' + v).replace('%', '');
	        }
	    }]
	};

	var InputNumber = function (_BaseDoc) {
	    _inherits(InputNumber, _BaseDoc);

	    function InputNumber(props) {
	        _classCallCheck(this, InputNumber);

	        var _this = _possibleConstructorReturn(this, (InputNumber.__proto__ || Object.getPrototypeOf(InputNumber)).call(this, props));

	        _this.doc = 'antd-input-number.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(InputNumber, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return InputNumber;
	}(_BaseDoc3.default);

	exports.default = InputNumber;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本使用',
	    description: '基本使用。',
	    config: {
	        type: 'input',
	        placeholder: '基本使用'
	    }
	};

	var demo2 = {
	    title: '前置/后置标签',
	    description: '用于配置一些固定组合。',
	    config: [{
	        type: 'input',
	        style: { marginBottom: 16 },
	        placeholder: '基本使用',
	        addonBefore: 'Http://',
	        addonAfter: '.com',
	        value: 'mysite'
	    }, {
	        type: 'input',
	        style: { marginBottom: 16 },
	        placeholder: '基本使用',
	        addonBefore: {
	            type: 'select',
	            value: 'Http://',
	            options: ['Http://', 'Https://']
	        },
	        addonAfter: {
	            type: 'select',
	            value: '.com',
	            options: ['.com', '.cn']
	        },
	        value: 'mysite'
	    }, {
	        type: 'input',
	        style: { marginBottom: 16 },
	        placeholder: '基本使用',
	        addonAfter: {
	            type: 'icon',
	            mode: 'setting'
	        },
	        value: 'mysite'
	    }]
	};

	var demo3 = {
	    title: '搜索框',
	    description: '带搜索按钮的输入框。点击回车时会触发onSearch函数',
	    config: {
	        type: 'input-search',
	        placeholder: 'input search text',
	        style: { width: 200 },
	        onSearch: function onSearch(v) {
	            console.log(v);
	        }
	    }
	};

	var demo4 = {
	    title: '输入框组合',
	    description: '输入框的组合展现。',
	    config: [{
	        type: 'input-group',
	        content: [{
	            type: 'input',
	            style: { width: 100 },
	            placeholder: '组合',
	            value: '0571'
	        }, {
	            type: 'input',
	            style: { width: '30%' },
	            placeholder: '输入框',
	            value: '26888888'
	        }]
	    }, {
	        type: 'input-group',
	        compact: true,
	        style: { marginTop: 16 },
	        content: [{
	            type: 'select',
	            value: 'Between',
	            style: { width: '100px' },
	            options: ['Between', 'Except']
	        }, {
	            type: 'input',
	            style: { width: 100, textAlign: 'center' },
	            placeholder: 'Minimun'
	        }, {
	            type: 'input',
	            style: { width: 24, borderLeft: 0, pointerEvents: 'none', backgroundColor: '#fff' },
	            placeholder: '~',
	            disabled: true
	        }, {
	            type: 'input',
	            style: { width: 100, textAlign: 'center', borderLeft: 0 },
	            placeholder: 'Maximum'
	        }]
	    }]
	};

	var demo5 = {
	    title: '文本域',
	    description: '用于多行输入。`autosize` 属性适用于 `textarea` 节点，并且只有高度会自动变化。另外 autosize 可以设定为一个对象，指定最小行数和最大行数。',
	    config: [{
	        type: 'textarea',
	        placeholder: 'Autosize height',
	        autosize: true
	    }, {
	        type: 'textarea',
	        style: { marginTop: '16px' },
	        placeholder: 'Autosize height with minimum and maximum number',
	        autosize: { minRows: 2, maxRows: 6 }
	    }]
	};

	var demo6 = {
	    title: '前缀和后缀',
	    description: '在输入框上添加前缀或后缀图标。',
	    config: [{
	        type: 'input',
	        placeholder: 'Enter your userName',
	        prefix: {
	            type: 'icon',
	            mode: 'user'
	        },
	        suffix: {
	            type: 'icon',
	            mode: 'close-circle'
	        }
	    }]
	};

	var Input = function (_BaseDoc) {
	    _inherits(Input, _BaseDoc);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.doc = 'antd-input.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Input, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6);
	        }
	    }]);

	    return Input;
	}(_BaseDoc3.default);

	exports.default = Input;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '单选组合',
	    description: '一组互斥的 Radio 配合使用。',
	    config: [{
	        type: 'radio',
	        name: 'my-radio2',
	        style: { display: 'block', marginBottom: 16 },
	        options: ['Apple', 'Pear', 'Orange']
	    }, {
	        type: 'radio',
	        name: 'my-radio',
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear', disabled: true }, { label: 'Orange', value: 'Orange' }]
	    }]
	};
	var demo2 = {
	    title: '按钮样式',
	    description: '按钮样式的单选组合。',
	    config: {
	        type: 'radio',
	        name: 'my-radio-button',
	        showAsButton: true,
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear', disabled: true }, { label: 'Orange', value: 'Orange' }]
	    }
	};

	var Radio = function (_BaseDoc) {
	    _inherits(Radio, _BaseDoc);

	    function Radio(props) {
	        _classCallCheck(this, Radio);

	        var _this = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

	        _this.doc = 'antd-radio.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Radio, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Radio;
	}(_BaseDoc3.default);

	exports.default = Radio;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 评分
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法',
	    config: {
	        type: 'rate',
	        value: 3,
	        onChange: function onChange(value) {
	            console.log(value);
	        }
	    }
	};

	var demo2 = {
	    title: '半星及文案',
	    description: '支持选中半星',
	    config: {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true
	    }
	};

	var demo3 = {
	    title: '其他符号',
	    description: '可以将星星替换为其他字符，比如字母，数字，字体图案甚至中文',
	    config: [{
	        type: 'rate',
	        value: 2.5,
	        style: {
	            display: 'block',
	            marginBottom: '10px'
	        },
	        allowHalf: true,
	        character: {
	            type: 'icon',
	            mode: 'heart'
	        }
	    }, {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true,
	        style: {
	            display: 'block',
	            marginBottom: '10px'
	        },
	        character: 'A'
	    }, {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true,
	        character: '好'
	    }]
	};

	var demo4 = {
	    title: '只读',
	    description: '只读，无法进行交互',
	    config: {
	        type: 'rate',
	        value: 2.5,
	        allowHalf: true,
	        disabled: true
	    }
	};

	var Rate = function (_BaseDoc) {
	    _inherits(Rate, _BaseDoc);

	    function Rate(props) {
	        _classCallCheck(this, Rate);

	        var _this = _possibleConstructorReturn(this, (Rate.__proto__ || Object.getPrototypeOf(Rate)).call(this, props));

	        _this.doc = 'antd-rate.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Rate, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Rate;
	}(_BaseDoc3.default);

	exports.default = Rate;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ref;

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
	                                                                                                                                                                                                                   * @file 按钮
	                                                                                                                                                                                                                   * **/


	var demo1 = {
	    title: '基本使用',
	    description: '基本使用。',
	    config: {
	        type: 'select',
	        name: 'my-select',
	        value: 'Apple',
	        options: [{ label: 'Apple', value: 'Apple' }, { label: 'Pear', value: 'Pear', disabled: true }, { label: 'Orange', value: 'Orange' }]
	    }
	};

	var demo2 = {
	    title: '带搜索框',
	    description: '展开后可对选项进行搜索。',
	    config: {
	        type: 'select',
	        name: 'my-select2',
	        style: { width: 200 },
	        showSearch: true,
	        allowClear: true,
	        onChange: function onChange(v) {
	            return console.log(v);
	        },
	        options: ['Apple', 'Pear', 'Orange']
	    }
	};

	var demo3 = {
	    title: '多选模式',
	    description: '可以选择多个',
	    config: [{
	        type: 'button',
	        content: '全选',
	        onClick: function onClick() {
	            (0, _src2.default)('my-select3').selectAll();
	        }
	    }, {
	        type: 'select',
	        name: 'my-select3',
	        style: { width: '100%', marginTop: 10 },
	        mode: 'multiple',
	        value: ['Apple'],
	        options: ['Apple', 'Pear', 'Orange']
	    }]
	};

	var demo4 = {
	    title: '任意输入',
	    description: '可以把随意输入的内容作为选项并选中。',
	    config: [{
	        type: 'select',
	        style: { width: '100%' },
	        mode: 'tags',
	        name: 'tag-test',
	        placeholder: '标签模式',
	        options: ['Apple', 'Pear', 'Orange']
	    }, (_ref = {
	        type: 'select',
	        style: { width: '100%' },
	        mode: 'combobox',
	        name: 'combobox-test'
	    }, _defineProperty(_ref, 'style', { marginTop: 10 }), _defineProperty(_ref, 'placeholder', '单选模式'), _defineProperty(_ref, 'options', ['Apple', 'Pear', 'Orange']), _ref), {
	        type: 'button',
	        content: '变化',
	        onClick: function onClick() {
	            (0, _src2.default)('combobox-test').set({
	                options: []
	            });
	            (0, _src2.default)('tag-test').set({
	                options: []
	            });
	        }
	    }]
	};

	var Select = function (_BaseDoc) {
	    _inherits(Select, _BaseDoc);

	    function Select(props) {
	        _classCallCheck(this, Select);

	        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

	        _this.doc = 'antd-select.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Select, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Select;
	}(_BaseDoc3.default);

	exports.default = Select;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _utils = __webpack_require__(121);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var treeData = [{
	    label: 'Node1',
	    value: '0-0',
	    children: [{
	        label: 'Child Node1',
	        value: '0-0-0'
	    }]
	}, {
	    label: 'Node2',
	    value: '0-1',
	    children: [{
	        label: 'Child Node3',
	        value: '0-1-0'
	    }, {
	        label: 'Child Node4',
	        value: '0-1-1'
	    }, {
	        label: 'Child Node5',
	        value: '0-1-2'
	    }]
	}];

	var demo1 = {
	    title: '基本使用',
	    description: '基本使用。',
	    config: {
	        type: 'tree-select',
	        style: { width: '100%' },
	        showSearch: true,
	        treeDefaultExpandAll: true,
	        treeData: treeData
	    }
	};

	var demo2 = {
	    title: '异步加载',
	    description: '通过`source`加载树形列表，接口返回数据格式见底部。',
	    config: {
	        type: 'tree-select',
	        style: { width: '100%' },
	        multiple: true,
	        treeCheckable: true,
	        source: 'docs/php/tree-data.php?all=true'
	    }
	};

	var demo3 = {
	    title: '多选',
	    description: '多选和勾选框功能。',
	    config: [{
	        type: 'tree-select',
	        style: { width: '100%' },
	        multiple: true,
	        source: 'docs/php/tree-data.php?all=true'
	    }, {
	        type: 'tree-select',
	        style: { width: '100%', marginTop: 10 },
	        multiple: true,
	        treeCheckable: true,
	        showCheckedStrategy: 'SHOW_PARENT',
	        source: 'docs/php/tree-data.php?all=true'
	    }]
	};

	var demo4 = {
	    title: '搜索功能',
	    description: '在下拉中显示搜索框(仅在单选模式下生效)',
	    config: {
	        type: 'tree-select',
	        style: { width: '100%' },
	        showSearch: true,
	        treeNodeFilterProp: 'title',
	        source: 'docs/php/tree-data.php?all=true',
	        onChange: function onChange() {
	            console.log(1);
	        }
	    }
	};

	var TreeSelect = function (_BaseDoc) {
	    _inherits(TreeSelect, _BaseDoc);

	    function TreeSelect(props) {
	        _classCallCheck(this, TreeSelect);

	        var _this = _possibleConstructorReturn(this, (TreeSelect.__proto__ || Object.getPrototypeOf(TreeSelect)).call(this, props));

	        _this.doc = 'antd-tree-select.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(TreeSelect, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return TreeSelect;
	}(_BaseDoc3.default);

	exports.default = TreeSelect;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'switch',
	        checked: true
	    }
	};

	var demo2 = {
	    title: '两种大小',
	    description: 'size="small" 表示小号开关。',
	    config: [{
	        type: 'switch'
	    }, {
	        type: 'switch',
	        size: 'small'
	    }]
	};

	var demo3 = {
	    title: '文字和图标',
	    description: '带有文字和图标。',
	    config: [{
	        type: 'switch',
	        checkedChildren: '开',
	        unCheckedChildren: '关'
	    }, {
	        type: 'switch',
	        checkedChildren: {
	            type: 'icon',
	            mode: 'check'
	        },
	        unCheckedChildren: {
	            type: 'icon',
	            mode: 'cross'
	        }
	    }]
	};

	var Switch = function (_BaseDoc) {
	    _inherits(Switch, _BaseDoc);

	    function Switch(props) {
	        _classCallCheck(this, Switch);

	        var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

	        _this.doc = 'antd-switch.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Switch, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Switch;
	}(_BaseDoc3.default);

	exports.default = Switch;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'upload',
	        defaultFileList: [{
	            uid: 1,
	            name: 'xxx.png',
	            status: 'done',
	            reponse: 'Server Error 500', // custom error message to show
	            url: 'http://www.baidu.com/xxx.png'
	        }, {
	            uid: 2,
	            name: 'yyy.png',
	            status: 'done',
	            url: 'http://www.baidu.com/yyy.png'
	        }],
	        content: {
	            type: 'button',
	            mode: 'primary',
	            icon: 'upload',
	            content: 'Upload'
	        }
	    }
	};
	var demo2 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'dragger',
	        name: 'file',
	        multiple: true,
	        showUploadList: false,
	        content: [{ type: 'p', className: 'ant-upload-drag-icon', content: { type: 'icon', mode: 'inbox' } }, { type: 'p', className: 'ant-upload-drag-text', content: 'Click or drag file to this area to upload' }, { type: 'p', className: 'ant-upload-drag-hint', content: 'Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files' }]
	    }
	};

	var Upload = function (_BaseDoc) {
	    _inherits(Upload, _BaseDoc);

	    function Upload(props) {
	        _classCallCheck(this, Upload);

	        var _this = _possibleConstructorReturn(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));

	        _this.doc = 'antd-upload.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Upload, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Upload;
	}(_BaseDoc3.default);

	exports.default = Upload;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 头像
	


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法',
	    config: [{
	        type: 'div',
	        content: [{
	            type: 'avatar',
	            size: 'large',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            size: 'small',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }]
	    }, {
	        type: 'div',
	        content: [{
	            type: 'avatar',
	            size: 'large',
	            shape: 'square',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            shape: 'square',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }, {
	            type: 'avatar',
	            size: 'small',
	            shape: 'square',
	            icon: 'user',
	            style: {
	                display: 'inline-block',
	                margin: '5px'
	            }
	        }]
	    }]
	};

	var demo2 = {
	    title: '类型',
	    description: '支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。',
	    config: [{
	        type: 'avatar',
	        style: {
	            display: 'inline-block',
	            margin: '5px'
	        },
	        content: 'UMP'
	    }, {
	        type: 'avatar',
	        style: {
	            backgroundColor: '#87d068',
	            display: 'inline-block',
	            margin: '5px'
	        },
	        icon: 'user'
	    }, {
	        type: 'avatar',
	        style: {
	            color: '#f56a00',
	            backgroundColor: '#fde3cf',
	            display: 'inline-block',
	            margin: '5px'
	        },
	        content: 'U'
	    }, {
	        type: 'avatar',
	        src: "https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
	        style: {
	            display: 'inline-block',
	            margin: '5px'
	        }
	    }]
	};

	var demo3 = {
	    title: '带徽标的头像',
	    description: '通常用于消息提示',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 1,
	            content: {
	                type: 'avatar',
	                shape: 'square',
	                icon: 'user'
	            }
	        }
	    }, {
	        type: 'badge',
	        dot: true,
	        content: {
	            type: 'avatar',
	            shape: 'square',
	            icon: 'user'
	        }
	    }]
	};

	var Avatar = function (_BaseDoc) {
	    _inherits(Avatar, _BaseDoc);

	    function Avatar(props) {
	        _classCallCheck(this, Avatar);

	        var _this = _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call(this, props));

	        _this.doc = 'antd-avatar.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Avatar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Avatar;
	}(_BaseDoc3.default);

	exports.default = Avatar;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 徽标数
	


	var example = {
	    type: 'span',
	    style: {
	        display: 'inline-block',
	        width: '42px',
	        height: '42px',
	        borderRadius: '6px',
	        backgroundColor: '#eee'
	    }
	};
	var demo1 = {
	    title: '基本用法',
	    description: '简单的徽章展示，当count为0时，默认不显示，但是可以使用showZero修改为显示',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 5,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 0,
	            showZero: true,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 0,
	            dot: true,
	            content: example
	        }
	    }]
	};

	var demo2 = {
	    title: '独立使用',
	    description: '不包裹任何元素即是独立使用，可自定样式展现。',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 25
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 4,
	            style: {
	                'backgroundColor': '#fff',
	                color: '#999',
	                boxShadow: '0 0 0 1px #d9d9d9 inset'
	            }
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 109,
	            style: {
	                backgroundColor: '#87d068'
	            }
	        }
	    }]
	};

	var demo3 = {
	    title: '封顶数字',
	    description: '超过overflowCount的会显示为${overflowCount}+，默认的overflowCount为99',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 99,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 100,
	            content: example
	        }
	    }, {
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 99,
	            overflowCount: 10,
	            content: example
	        }
	    }, {
	        type: 'span',
	        content: {
	            type: 'badge',
	            count: 1000,
	            overflowCount: 999,
	            content: example
	        }
	    }]
	};

	var demo4 = {
	    title: '状态点',
	    description: '用于表示状态的小圆点',
	    config: [{
	        type: 'badge',
	        status: 'success',
	        text: 'success'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'error',
	        text: 'error'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'default',
	        text: 'default'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'processing',
	        text: 'processing'
	    }, {
	        type: 'br'
	    }, {
	        type: 'badge',
	        status: 'warning',
	        text: 'warning'
	    }]
	};

	var demo5 = {
	    title: '动态',
	    description: '展示动态变化的效果',
	    config: [{
	        type: 'span',
	        style: {
	            display: 'inline-block',
	            marginRight: '15px'
	        },
	        content: {
	            type: 'badge',
	            count: 5,
	            name: 'myBadge',
	            content: example
	        }
	    }, {
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            content: {
	                type: 'icon',
	                mode: 'minus'
	            },
	            onClick: function onClick() {
	                var count = (0, _src2.default)('myBadge').getOption('count');
	                count--;
	                if (count < 0) {
	                    count = 0;
	                }
	                (0, _src2.default)('myBadge').set({ count: count });
	            }
	        }, {
	            type: 'button',
	            content: {
	                type: 'icon',
	                mode: 'plus'
	            },
	            onClick: function onClick() {
	                var count = (0, _src2.default)('myBadge').getOption('count');
	                count++;
	                (0, _src2.default)('myBadge').set({ count: count });
	            }
	        }]
	    }]
	};

	var Badge = function (_BaseDoc) {
	    _inherits(Badge, _BaseDoc);

	    function Badge(props) {
	        _classCallCheck(this, Badge);

	        var _this = _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props));

	        _this.doc = 'antd-badge.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Badge, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Badge;
	}(_BaseDoc3.default);

	exports.default = Badge;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '典型卡片',
	    description: '包含标题、内容、操作区域。',
	    config: {
	        type: 'card',
	        title: 'Card title',
	        extra: {
	            type: 'a',
	            content: 'More'
	        },
	        content: {
	            type: 'html',
	            content: '包含标题<p class="test" style="background-color:#eee;">包含标题、内容、操作区域的卡片内容区域</p><p>包含标题、内容、操作区域的卡片内容区域</p><p>包含标题、内容、操作区域的卡片内容区域</p>'
	        }
	    }
	};

	var demo2 = {
	    title: '无边框',
	    description: '在灰色背景上使用无边框的卡片。',
	    config: {
	        type: 'div',
	        style: { padding: 30, background: '#ececec' },
	        content: {
	            type: 'card',
	            bordered: false,
	            title: 'Card title',
	            content: '包含标题、内容、操作区域的卡片内容区域'
	        }
	    }
	};

	var demo3 = {
	    title: '预加载的卡片',
	    description: '数据读入前会有文本块样式。',
	    config: {
	        type: 'card',
	        title: 'Card title',
	        loading: true,
	        content: '包含标题、内容、操作区域的卡片内容区域'
	    }
	};

	var demo4 = {
	    title: '简洁卡片',
	    description: '只包含内容区域。',
	    config: {
	        type: 'card',
	        content: '包含标题、内容、操作区域的卡片内容区域'
	    }
	};

	var Card = function (_BaseDoc) {
	    _inherits(Card, _BaseDoc);

	    function Card(props) {
	        _classCallCheck(this, Card);

	        var _this = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));

	        _this.doc = 'antd-card.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Card, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Card;
	}(_BaseDoc3.default);

	exports.default = Card;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var content = [{
	    type: 'div',
	    style: { lineHeight: '160px', color: '#fff', background: '#364d79', textAlign: 'center' },
	    content: '1'
	}, {
	    type: 'div',
	    style: { lineHeight: '160px', color: '#fff', background: '#364d79', textAlign: 'center' },
	    content: '2'
	}, {
	    type: 'div',
	    style: { lineHeight: '160px', color: '#fff', background: '#364d79', textAlign: 'center' },
	    content: '3'
	}];

	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'carousel',
	        content: content
	    }
	};

	var demo2 = {
	    title: '垂直',
	    description: '垂直显示。',
	    config: {
	        type: 'carousel',
	        vertical: true,
	        content: content
	    }
	};

	var demo3 = {
	    title: '渐显',
	    description: '切换效果为渐显。',
	    config: {
	        type: 'carousel',
	        effect: 'fade',
	        content: content
	    }
	};

	var demo4 = {
	    title: '自动切换',
	    description: '定时切换下一张。',
	    config: {
	        type: 'carousel',
	        autoplay: true,
	        content: content
	    }
	};

	var Carousel = function (_BaseDoc) {
	    _inherits(Carousel, _BaseDoc);

	    function Carousel(props) {
	        _classCallCheck(this, Carousel);

	        var _this = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

	        _this.doc = 'antd-carousel.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Carousel, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Carousel;
	}(_BaseDoc3.default);

	exports.default = Carousel;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _utils = __webpack_require__(121);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var content = [{
	    type: 'panel',
	    key: '1',
	    header: 'This is panel header 1',
	    content: 'content 1'
	}, {
	    type: 'panel',
	    key: '2',
	    header: 'This is panel header 2',
	    content: 'content 2'
	}, {
	    type: 'panel',
	    key: '3',
	    header: 'This is panel header 3',
	    content: 'content 3'
	}];

	var customPanelStyle = {
	    background: '#f7f7f7',
	    borderRadius: 4,
	    marginBottom: 24,
	    border: 0
	};

	var demo1 = {
	    title: '折叠面板',
	    description: '可以同时展开多个面板，这个例子默认展开了第一个。',
	    config: [{
	        type: 'collapse',
	        activeKey: ['1'],
	        name: 'collapse-control',
	        content: content
	    }, {
	        type: 'button',
	        content: '关闭第一个面板',
	        onClick: function onClick() {
	            (0, _src2.default)('collapse-control').close('1');
	        }
	    }]
	};

	var demo2 = {
	    title: '手风琴',
	    description: '手风琴，每次只打开一个tab。默认打开第一个。',
	    config: {
	        type: 'collapse',
	        accordion: true,
	        activeKey: ['1'],
	        content: content
	    }
	};

	var demo3 = {
	    title: '简洁风格',
	    description: '一套没有边框的简洁样式。',
	    config: {
	        type: 'collapse',
	        bordered: false,
	        activeKey: ['1'],
	        content: content
	    }
	};

	var demo4 = {
	    title: '自定义面板',
	    description: '自定义各个面板的背景色、圆角和边距。',
	    config: {
	        type: 'collapse',
	        bordered: false,
	        activeKey: ['1'],
	        content: _utils.Utils.clone(content).map(function (v) {
	            v.style = customPanelStyle;return v;
	        })
	    }
	};

	var Collapse = function (_BaseDoc) {
	    _inherits(Collapse, _BaseDoc);

	    function Collapse(props) {
	        _classCallCheck(this, Collapse);

	        var _this = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));

	        _this.doc = 'antd-collapse.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Collapse, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Collapse;
	}(_BaseDoc3.default);

	exports.default = Collapse;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var body = {
	    type: 'html',
	    content: '<p>Content</p><p>Content</p><p>Content</p>'
	};

	var demo1 = {
	    title: '基本',
	    description: '最简单的用法，浮层的大小由内容区域决定。',
	    config: {
	        type: 'popover',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            mode: 'primary',
	            content: 'Hover me'
	        }
	    }
	};

	var demo2 = {
	    title: '三种触发方式',
	    description: '鼠标移入、聚集、点击。',
	    config: [{
	        type: 'popover',
	        trigger: 'hover',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Hover me'
	        }
	    }, {
	        type: 'popover',
	        trigger: 'focus',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Focus me'
	        }
	    }, {
	        type: 'popover',
	        trigger: 'click',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Click me'
	        }
	    }]
	};

	var demo3 = {
	    title: '展示位置',
	    description: '位置有十二个方向。',
	    config: [{
	        type: 'popover',
	        placement: 'left',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Left'
	        }
	    }, {
	        type: 'popover',
	        placement: 'top',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Top'
	        }
	    }, {
	        type: 'popover',
	        placement: 'bottom',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Bottom'
	        }
	    }, {
	        type: 'popover',
	        placement: 'right',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Right'
	        }
	    }]
	};

	var demo4 = {
	    title: '箭头指向',
	    description: '设置了 arrowPointAtCenter 后，箭头将指向目标元素的中心。',
	    config: [{
	        type: 'popover',
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            style: { margin: '0 10px 6px 0' },
	            content: 'Align edge / 边缘对齐'
	        }
	    }, {
	        type: 'popover',
	        arrowPointAtCenter: true,
	        title: 'Title',
	        body: body,
	        content: {
	            type: 'button',
	            content: 'Arrow points to center / 箭头指向中心'
	        }
	    }]
	};

	var Popover = function (_BaseDoc) {
	    _inherits(Popover, _BaseDoc);

	    function Popover(props) {
	        _classCallCheck(this, Popover);

	        var _this = _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(this, props));

	        _this.doc = 'antd-popover.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Popover, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Popover;
	}(_BaseDoc3.default);

	exports.default = Popover;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: {
	        type: 'tooltip',
	        title: 'Title',
	        content: 'Tooltip will show when mouse enter.'
	    }
	};

	var demo2 = {
	    title: '位置',
	    description: '位置有 12 个方向。',
	    config: [{
	        type: 'tooltip',
	        placement: 'left',
	        title: 'Title',
	        content: ' Left '
	    }, {
	        type: 'tooltip',
	        placement: 'top',
	        title: 'Title',
	        content: ' Top '
	    }, {
	        type: 'tooltip',
	        placement: 'bottom',
	        title: 'Title',
	        content: ' Bottom '
	    }, {
	        type: 'tooltip',
	        placement: 'right',
	        title: 'Title',
	        content: ' Right '
	    }]
	};

	var Tooltip = function (_BaseDoc) {
	    _inherits(Tooltip, _BaseDoc);

	    function Tooltip(props) {
	        _classCallCheck(this, Tooltip);

	        var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));

	        _this.doc = 'antd-tooltip.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tooltip, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Tooltip;
	}(_BaseDoc3.default);

	exports.default = Tooltip;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _utils = __webpack_require__(121);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var items = [{
	    key: '1',
	    tab: 'Tab 1',
	    content: 'Content of Tab Pane 1'
	}, {
	    key: '2',
	    tab: 'Tab 2',
	    content: 'Content of Tab Pane 2'
	}, {
	    key: '3',
	    tab: 'Tab 3',
	    content: 'Content of Tab Pane 3'
	}];

	var demo1 = {
	    title: '基本',
	    description: '默认选中第一项。',
	    config: {
	        type: 'tabs',
	        activeKey: '1',
	        items: items
	    }
	};

	var demo2 = {
	    title: '图标',
	    description: '有图标的标签。',
	    config: {
	        type: 'tabs',
	        activeKey: '1',
	        items: [{
	            key: '1',
	            tab: {
	                type: 'span',
	                content: [{ type: 'icon', mode: 'apple' }, 'Tab 1']
	            },
	            content: 'Content of Tab Pane 1'
	        }]
	    }
	};

	var demo3 = {
	    title: '迷你型',
	    description: '用在弹出框等较狭窄的容器内。',
	    config: {
	        type: 'tabs',
	        activeKey: '1',
	        size: 'small',
	        items: items
	    }
	};

	var demo4 = {
	    title: '位置',
	    description: '有四个位置，tabPosition="left|right|top|bottom"。',
	    config: [{
	        type: 'div',
	        content: ['Tab position: ', {
	            type: 'select',
	            value: 'top',
	            options: ['top', 'bottom', 'left', 'right'],
	            onChange: function onChange(v) {
	                return (0, _src2.default)('my-tabs').set({ tabPosition: v });
	            }
	        }]
	    }, {
	        type: 'tabs',
	        name: 'my-tabs',
	        tabPosition: 'top',
	        style: { marginTop: 16 },
	        activeKey: '1',
	        size: 'small',
	        items: items
	    }]
	};

	var demo5 = {
	    title: '卡片式页签',
	    description: '另一种样式的页签，不提供对应的垂直样式。',
	    config: {
	        type: 'tabs',
	        mode: 'card',
	        activeKey: '1',
	        items: items
	    }
	};

	var Tabs = function (_BaseDoc) {
	    _inherits(Tabs, _BaseDoc);

	    function Tabs(props) {
	        _classCallCheck(this, Tabs);

	        var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));

	        _this.doc = 'antd-tabs.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tabs, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5);
	        }
	    }]);

	    return Tabs;
	}(_BaseDoc3.default);

	exports.default = Tabs;

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 标签
	


	var demo1 = {
	    title: '基本用法',
	    description: '基本标签的用法，可以通过添加 closable 变为可关闭标签。可关闭标签具有 onClose afterClose 两个事件。',
	    config: [{
	        type: 'tag',
	        content: 'Tag 1',
	        style: {
	            margin: '8px'
	        }
	    }, {
	        type: 'tag',
	        content: {
	            type: 'a',
	            content: 'Link',
	            href: 'http://www.baidu.com/'
	        },
	        style: {
	            margin: '8px'
	        }
	    }, {
	        type: 'tag',
	        content: 'Tag 2',
	        closable: true,
	        onClose: function onClose(e) {
	            console.log(e);
	        },
	        style: {
	            margin: '8px'
	        }
	    }, {
	        type: 'tag',
	        content: 'Prevent Default',
	        closable: true,
	        onClose: function onClose(e) {
	            e.preventDefault();
	            console.log('Clicked! But prevent default.');
	        },
	        style: {
	            margin: '8px'
	        }
	    }]
	};

	var demo2 = {
	    title: '多彩标签',
	    description: '我们添加了多种预设色彩的标签样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。',
	    config: [{
	        type: 'div',
	        content: [{
	            type: 'tag',
	            content: 'pink',
	            color: 'pink',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'red',
	            color: 'red',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'orange',
	            color: 'orange',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'green',
	            color: 'green',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'cyan',
	            color: 'cyan',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'blue',
	            color: 'blue',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: 'purple',
	            color: 'purple',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: '#f50',
	            color: '#f50',
	            style: {
	                margin: '8px'
	            }
	        }, {
	            type: 'tag',
	            content: '#2db7f5',
	            color: '#2db7f5',
	            style: {
	                margin: '8px'
	            }
	        }]
	    }]
	};

	var demo3 = {
	    title: '可选择',
	    description: '可通过checkable-tag实现类似checkbox的效果，点击切换选中效果',
	    config: [{
	        type: 'checkable-tag',
	        content: 'tag1',
	        checked: true,
	        name: 'myTag',
	        onChange: function onChange(checked) {
	            console.log(checked);
	            (0, _src2.default)('myTag').set({
	                checked: checked
	            });
	        }
	    }]
	};

	var Tag = function (_BaseDoc) {
	    _inherits(Tag, _BaseDoc);

	    function Tag(props) {
	        _classCallCheck(this, Tag);

	        var _this = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));

	        _this.doc = 'antd-tag.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tag, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3);
	        }
	    }]);

	    return Tag;
	}(_BaseDoc3.default);

	exports.default = Tag;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 时间轴
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '常见用法',
	    description: '常用的时间轴用法',
	    config: {
	        type: 'timeline',
	        pending: {
	            type: 'p',
	            content: '至今'
	        },
	        content: [{
	            type: 'timeline-item',
	            content: '出生：1992'
	        }, {
	            type: 'timeline-item',
	            content: '小学：1997',
	            color: 'green'
	        }, {
	            type: 'timeline-item',
	            content: '中学：2005',
	            color: 'red'
	        }, {
	            type: 'timeline-item',
	            content: [{
	                type: 'p',
	                content: '大学：2011'
	            }, {
	                type: 'p',
	                content: '大一'
	            }, {
	                type: 'p',
	                content: '大二'
	            }, {
	                type: 'p',
	                content: '大三'
	            }, {
	                type: 'p',
	                content: '大四'
	            }],
	            color: '#8085e9'
	        }, {
	            type: 'timeline-item',
	            dot: {
	                type: 'icon',
	                mode: 'heart-o'
	            },
	            content: '研究生：2015'
	        }]
	    }
	};

	var Timeline = function (_BaseDoc) {
	    _inherits(Timeline, _BaseDoc);

	    function Timeline(props) {
	        _classCallCheck(this, Timeline);

	        var _this = _possibleConstructorReturn(this, (Timeline.__proto__ || Object.getPrototypeOf(Timeline)).call(this, props));

	        _this.doc = 'antd-timeline.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Timeline, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1);
	        }
	    }]);

	    return Timeline;
	}(_BaseDoc3.default);

	exports.default = Timeline;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本四种样式',
	    description: '最简单的用法，适用于简短的警告提示。',
	    config: [{
	        type: 'alert',
	        mode: 'success',
	        message: 'Success Text'
	    }, {
	        type: 'alert',
	        mode: 'info',
	        message: 'Info Text'
	    }, {
	        type: 'alert',
	        mode: 'warning',
	        message: 'Warning Text'
	    }, {
	        type: 'alert',
	        mode: 'error',
	        message: 'Error Text'
	    }]
	};

	var demo2 = {
	    title: '可关闭的警告提示',
	    description: '显示关闭按钮，点击可关闭警告提示。',
	    config: [{
	        type: 'alert',
	        mode: 'success',
	        description: 'Warning Text Warning Text Warning TextW arning Text Warning Text Warning TextWarning Text',
	        closable: true
	    }, {
	        type: 'alert',
	        mode: 'error',
	        description: 'Error Description Error Description Error Description Error Description Error Description Error Description',
	        message: 'Error Text',
	        closable: true
	    }]
	};

	var demo3 = {
	    title: '图标',
	    description: '可口的图标让信息类型更加醒目。',
	    config: [{
	        type: 'alert',
	        mode: 'success',
	        message: 'Success Tips',
	        showIcon: true
	    }, {
	        type: 'alert',
	        mode: 'info',
	        message: 'Informational Notes',
	        showIcon: true
	    }, {
	        type: 'alert',
	        mode: 'warning',
	        message: 'Warning',
	        description: 'This is a warning notice about copywriting.',
	        showIcon: true
	    }, {
	        type: 'alert',
	        mode: 'error',
	        message: 'Error',
	        description: 'This is an error message about copywriting.',
	        showIcon: true
	    }]
	};

	var demo4 = {
	    title: '自定义关闭',
	    description: '可以自定义关闭，自定义的文字会替换原先的关闭 Icon.',
	    config: {
	        type: 'alert',
	        mode: 'info',
	        message: 'Info Text',
	        closeText: 'Close Now'
	    }
	};

	var Alert = function (_BaseDoc) {
	    _inherits(Alert, _BaseDoc);

	    function Alert(props) {
	        _classCallCheck(this, Alert);

	        var _this = _possibleConstructorReturn(this, (Alert.__proto__ || Object.getPrototypeOf(Alert)).call(this, props));

	        _this.doc = 'antd-alert.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Alert, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Alert;
	}(_BaseDoc3.default);

	exports.default = Alert;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '各种提示类型',
	    description: '包括成功、失败、警告、信息。',
	    config: [{
	        type: 'button',
	        content: 'Success',
	        onClick: function onClick(v) {
	            return _src2.default.message.success({
	                type: 'div',
	                content: 'Success message.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Info',
	        onClick: function onClick(v) {
	            return _src2.default.message.info('Info message.');
	        }
	    }, {
	        type: 'button',
	        content: 'Warning',
	        onClick: function onClick(v) {
	            return _src2.default.message.warning('Warning message.');
	        }
	    }, {
	        type: 'button',
	        content: 'Error',
	        onClick: function onClick(v) {
	            return _src2.default.message.error('Error message.');
	        }
	    }]
	};

	var demo2 = {
	    title: '加载中',
	    description: '进行全局 loading，异步自行移除。例如操作执行完成后，执行`message`返回的句柄，即可销毁loading提示',
	    config: [{
	        type: 'button',
	        content: 'Display a loading indicator',
	        onClick: function onClick(v) {
	            var hide = _src2.default.message.loading('Success message.', 0);
	            setTimeout(hide, 3000);
	        }
	    }]
	};

	var Message = function (_BaseDoc) {
	    _inherits(Message, _BaseDoc);

	    function Message(props) {
	        _classCallCheck(this, Message);

	        var _this = _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).call(this, props));

	        _this.doc = 'antd-message.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Message, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Message;
	}(_BaseDoc3.default);

	exports.default = Message;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法，4.5 秒后自动关闭。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Open the notification box',
	        onClick: function onClick(v) {
	            _src2.default.notification.open({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }]
	};

	var demo2 = {
	    title: '取消关闭的延时',
	    description: '自定义通知框自动关闭的延时，默认4.5s，取消自动关闭只要将该值设为 0 即可。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Open the notification box',
	        onClick: function onClick(v) {
	            _src2.default.notification.open({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
	                duration: 0
	            });
	        }
	    }]
	};

	var demo3 = {
	    title: '带有图标的通知提醒框',
	    description: '通知提醒框左侧有图标。',
	    config: [{
	        type: 'button',
	        content: 'Success',
	        onClick: function onClick(v) {
	            _src2.default.notification.success({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Info',
	        onClick: function onClick(v) {
	            _src2.default.notification.info({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Warning',
	        onClick: function onClick(v) {
	            _src2.default.notification.warning({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }, {
	        type: 'button',
	        content: 'Error',
	        onClick: function onClick(v) {
	            _src2.default.notification.error({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.'
	            });
	        }
	    }]
	};

	var demo4 = {
	    title: '自定义按钮',
	    description: '自定义关闭按钮的样式和文字。',
	    config: [{
	        type: 'button',
	        mode: 'primary',
	        content: 'Open the notification box',
	        onClick: function onClick(v) {
	            _src2.default.notification.open({
	                message: 'Notification Title',
	                description: 'This is the content of the notification. This is the content of the notification. This is the content of the notification.',
	                duration: 0,
	                key: 'my-infomation',
	                btn: {
	                    type: 'button',
	                    mode: 'primary',
	                    size: 'small',
	                    content: 'Confirm',
	                    onClick: function onClick(v) {
	                        return _src2.default.notification.close('my-infomation');
	                    }
	                }
	            });
	        }
	    }]
	};

	var Notification = function (_BaseDoc) {
	    _inherits(Notification, _BaseDoc);

	    function Notification(props) {
	        _classCallCheck(this, Notification);

	        var _this = _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this, props));

	        _this.doc = 'antd-notification.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Notification, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Notification;
	}(_BaseDoc3.default);

	exports.default = Notification;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '进度条',
	    description: '标准的进度条。',
	    config: [{
	        type: 'progress',
	        percent: 30
	    }, {
	        type: 'progress',
	        percent: 50,
	        status: 'active'
	    }, {
	        type: 'progress',
	        percent: 70,
	        status: 'exception'
	    }, {
	        type: 'progress',
	        percent: 100
	    }, {
	        type: 'progress',
	        percent: 50,
	        showInfo: false
	    }]
	};

	var demo2 = {
	    title: '进度圈',
	    description: '圈形的进度。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        percent: 75
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        percent: 100
	    }]
	};

	var demo3 = {
	    title: '小型进度条',
	    description: '适合放在较狭窄的区域内。',
	    config: [{
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 30
	    }, {
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 50,
	        status: 'active'
	    }, {
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 70,
	        status: 'exception'
	    }, {
	        type: 'progress',
	        strokeWidth: 5,
	        percent: 100
	    }]
	};

	var demo4 = {
	    title: '小型进度圈',
	    description: '小一号的圈形进度。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 30
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 50,
	        status: 'active'
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 70,
	        status: 'exception'
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        width: 80,
	        percent: 100
	    }]
	};

	var demo5 = {
	    title: '进度圈动态展示',
	    description: '会动的进度条才是好进度条。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        name: 'my-progress',
	        percent: 50
	    }, {
	        type: 'button-group',
	        content: [{
	            type: 'button',
	            icon: 'minus',
	            onClick: function onClick(v) {
	                var progress = (0, _src2.default)('my-progress');
	                var current = progress.get('percent');
	                progress.set({
	                    percent: current - 10
	                });
	            }
	        }]
	    }]
	};

	var demo6 = {
	    title: '动态展示进度条',
	    description: '会动的进度条才是好进度条。',
	    config: [{
	        type: 'progress',
	        name: 'my-progress2',
	        percent: 10
	    }, {
	        type: 'button-group',
	        style: { marginTop: 10 },
	        content: [{
	            type: 'button',
	            icon: 'minus',
	            onClick: function onClick(v) {
	                var progress = (0, _src2.default)('my-progress2');
	                var current = progress.get('percent');
	                progress.set({
	                    percent: current - 10
	                });
	            }
	        }, {
	            type: 'button',
	            icon: 'plus',
	            onClick: function onClick(v) {
	                var progress = (0, _src2.default)('my-progress2');
	                var current = progress.get('percent');
	                progress.set({
	                    percent: current + 10
	                });
	            }
	        }]
	    }]
	};

	var demo7 = {
	    title: '自定义文字格式',
	    description: '`format` 属性指定格式。',
	    config: [{
	        type: 'progress',
	        mode: 'circle',
	        percent: 75,
	        format: function format(v) {
	            return v + ' Days';
	        }
	    }, {
	        type: 'progress',
	        mode: 'circle',
	        percent: 100,
	        format: function format(v) {
	            return 'Done';
	        }
	    }]
	};

	var demo8 = {
	    title: '仪表盘',
	    description: '通过设置 `mode=dashboard`，可以很方便地实现仪表盘样式的进度条。',
	    config: [{
	        type: 'progress',
	        mode: 'dashboard',
	        percent: 75
	    }]
	};

	var Progress = function (_BaseDoc) {
	    _inherits(Progress, _BaseDoc);

	    function Progress(props) {
	        _classCallCheck(this, Progress);

	        var _this = _possibleConstructorReturn(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).call(this, props));

	        _this.doc = 'antd-progress.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Progress, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4, demo5, demo6, demo7, demo8);
	        }
	    }]);

	    return Progress;
	}(_BaseDoc3.default);

	exports.default = Progress;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: [{
	        type: 'popconfirm',
	        title: 'Are you sure delete this task?',
	        okText: 'Yes',
	        cancelText: 'No',
	        content: {
	            type: 'html',
	            content: '<a href="#">Delete</a>'
	        },
	        onConfirm: function onConfirm(v) {
	            return console.log('confirm');
	        },
	        onCancel: function onCancel(v) {
	            return console.log('cancel');
	        }
	    }]
	};

	var demo2 = {
	    title: '展示位置',
	    description: '位置有十二个方向。如需箭头指向目标元素中心，可以设置 arrowPointAtCenter。',
	    config: [{
	        type: 'popconfirm',
	        placement: 'left',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Left'
	        }
	    }, {
	        type: 'popconfirm',
	        placement: 'top',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Top'
	        }
	    }, {
	        type: 'popconfirm',
	        placement: 'bottom',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Bottom'
	        }
	    }, {
	        type: 'popconfirm',
	        placement: 'right',
	        title: 'Are you sure delete this task?',
	        content: {
	            type: 'button',
	            content: 'Right'
	        }
	    }]
	};

	var Popconfirm = function (_BaseDoc) {
	    _inherits(Popconfirm, _BaseDoc);

	    function Popconfirm(props) {
	        _classCallCheck(this, Popconfirm);

	        var _this = _possibleConstructorReturn(this, (Popconfirm.__proto__ || Object.getPrototypeOf(Popconfirm)).call(this, props));

	        _this.doc = 'antd-popconfirm.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Popconfirm, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return Popconfirm;
	}(_BaseDoc3.default);

	exports.default = Popconfirm;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '各种大小',
	    description: '小的用于文本加载，默认用于卡片容器级加载，大的用于页面级加载。',
	    config: [{
	        type: 'loading',
	        size: 'small',
	        style: { marginRight: 16 },
	        loading: true
	    }, {
	        type: 'loading',
	        style: { marginRight: 16 },
	        loading: true
	    }, {
	        type: 'loading',
	        size: 'large',
	        loading: true
	    }]
	};

	var demo2 = {
	    title: '卡片加载中',
	    description: '可以直接把内容内嵌到 Loading 中，将现有容器变为加载状态。',
	    config: [{
	        type: 'loading',
	        name: 'my-loading',
	        loading: true,
	        content: {
	            type: 'alert',
	            mode: 'info',
	            description: 'Further details about the context of this alert.'
	        }
	    }, {
	        type: 'div',
	        style: { marginTop: 10 },
	        content: ['Loading state: ', {
	            type: 'switch',
	            checked: true,
	            onChange: function onChange(v) {
	                return (0, _src2.default)('my-loading').loading(v);
	            }
	        }]
	    }]
	};

	var demo3 = {
	    title: '自定义描述文案',
	    description: '自定义描述文案。',
	    config: [{
	        type: 'loading',
	        loading: true,
	        tip: 'Loading...',
	        content: {
	            type: 'alert',
	            mode: 'info',
	            message: 'Alert message title',
	            description: 'Further details about the context of this alert.'
	        }
	    }]
	};

	var demo4 = {
	    title: '延迟',
	    description: '延迟显示 loading 效果。当 loading 状态在 delay 时间内结束，则不显示 loading 状态。',
	    config: [{
	        type: 'loading',
	        name: 'my-loading2',
	        delay: 500,
	        content: {
	            type: 'alert',
	            mode: 'info',
	            description: 'Further details about the context of this alert.'
	        }
	    }, {
	        type: 'div',
	        style: { marginTop: 10 },
	        content: ['Loading state: ', {
	            type: 'switch',
	            onChange: function onChange(v) {
	                return (0, _src2.default)('my-loading2').set({ loading: v });
	            }
	        }]
	    }]
	};

	var Loading = function (_BaseDoc) {
	    _inherits(Loading, _BaseDoc);

	    function Loading(props) {
	        _classCallCheck(this, Loading);

	        var _this = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, props));

	        _this.doc = 'antd-loading.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Loading, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2, demo3, demo4);
	        }
	    }]);

	    return Loading;
	}(_BaseDoc3.default);

	exports.default = Loading;

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	


	var demo1 = {
	    title: '基本',
	    description: '最简单的用法。',
	    config: ['见右下角 `灰色` 按钮', {
	        type: 'backtop'
	    }]
	};

	var demo2 = {
	    title: '自定义样式',
	    description: '可以自定义回到顶部按钮的样式，限制宽高：40px * 40px。',
	    config: ['见右下角 `蓝色` 按钮', {
	        type: 'backtop',
	        content: {
	            type: 'span',
	            content: 'UP',
	            style: { display: 'block', height: '40px', width: '40px', lineHeight: '40px', borderRadius: '4px', backgroundColor: '#1088e9', color: '#fff', textAlign: 'center', fontSize: '20px', marginTop: '-50px' }
	        }
	    }]
	};

	var BackTop = function (_BaseDoc) {
	    _inherits(BackTop, _BaseDoc);

	    function BackTop(props) {
	        _classCallCheck(this, BackTop);

	        var _this = _possibleConstructorReturn(this, (BackTop.__proto__ || Object.getPrototypeOf(BackTop)).call(this, props));

	        _this.doc = 'antd-backtop.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(BackTop, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1, demo2);
	        }
	    }]);

	    return BackTop;
	}(_BaseDoc3.default);

	exports.default = BackTop;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 时间轴
	


	var demo1 = {
	    title: '基本用法',
	    description: '最简单的用法',
	    name: 'demo1',
	    config: {
	        type: 'anchor',
	        content: [{
	            type: 'anchor-link',
	            href: '#demo1',
	            title: 'demo1'
	        }, {
	            type: 'anchor-link',
	            href: '#demo2',
	            title: 'demo2'
	        }]
	    }
	};

	var Anchor = function (_BaseDoc) {
	    _inherits(Anchor, _BaseDoc);

	    function Anchor(props) {
	        _classCallCheck(this, Anchor);

	        var _this = _possibleConstructorReturn(this, (Anchor.__proto__ || Object.getPrototypeOf(Anchor)).call(this, props));

	        _this.doc = 'antd-anchor.md';
	        _this.__init();
	        return _this;
	    }

	    _createClass(Anchor, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemo(demo1);
	        }
	    }]);

	    return Anchor;
	}(_BaseDoc3.default);

	exports.default = Anchor;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(390);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 配置化树形控件，Demo及文档说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '默认高度自动根据内容调整',
	    config: {
	        type: 'iframe',
	        src: 'docs/demo/router.php#/',
	        height: 300
	        // mode: 'auto' // default
	        // mode: 'fixed'
	        // mode: 'max'
	    }
	};

	var ExportApp = function (_BaseDoc) {
	    _inherits(ExportApp, _BaseDoc);

	    function ExportApp(props) {
	        _classCallCheck(this, ExportApp);

	        var _this = _possibleConstructorReturn(this, (ExportApp.__proto__ || Object.getPrototypeOf(ExportApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ExportApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return ExportApp;
	}(_BaseDoc3.default);

	exports.default = ExportApp;

/***/ }),
/* 390 */
/***/ (function(module, exports) {

	module.exports = "iframe 的增强版。\n\n### 功能说明  \n* iframe加载子页面时自动展示loading状态\n* 文档加载完成后iframe的高度自动重新设定，支持三种模式\n\n\n## 组件&参数\n\n### # iframe\n\n参数 | 说明 | 类型 | 默认值 | 是否必填\n---- | ---- | ----- | ----- | -----\nsrc | 子页面的url。可以是全路径，也可以是相对路径 | string |  | 必填\nmode | 文档加载完成后iframe的高度自动重新设定，支持三种模式： `auto` - 自动调整，监听内部文档高度变化，不断调整iframe的高度（默认）；`max` - 总是展示最大高度，iframe会逐渐被撑大；`fixed` - 高度固定，需自行设定iframe的height（同iframe默认效果，容易出现滚动条） | string | 'auto' | \ndelay | 子页面高度变化时，延迟重新设定iframe高度，可防止高度闪烁 | number | 0 |\n\n其他属性同原生的 iframe，例如：`height`、`width`等\n\n#### 注意：\n使用`mode`属性时需要注意以下问题：\n\n* 跨域问题  \n要使用`mode`属性，默认会因跨域问题导致此属性无效。解决办法有两种：\n> * 需在当前页面和其子页面的 js 里同时增加一行代码设置为同一个域：`document.domain = 'baidu.com';`\n> * 使用 `UF.config({global: {domain: 'baidu.com'}})`，见 [全局配置](#/Develop/Config)\n\n* 子页面高度问题  \n此外如果子页面的`body/html`标签 CSS 设置了`height: 100%`，则`mode: 'auto'`失效，展现出的效果同`mode: 'max'`\n> theme.css 里定义了`body`标签为`height: 100%`，所以如果嵌套通用用UF开发的子页面，可以在子页面入口的html中加入`<style>html, body {height: auto !important;}</style>`，覆盖掉默认样式\n\n---\n\n*关于样式：*\n\ndemo里的浏览器样式是文档里额外加的，默认的`Iframe`组件没有额外样式，没有边框及阴影。如果想要使用demo里的样式，可以参考如下css代码：\n```css\n.uf-iframe {\n    border-top: 2em solid rgba(230, 230, 230, 0.7);\n    box-shadow: 0 0.1em 0.5em 0 rgba(0, 0, 0, 0.28);\n    position: relative;\n    border-radius: 3px 3px 0 0;\n}\n.uf-iframe:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: -1.25em;\n    left: 1em;\n    width: 0.5em;\n    height: 0.5em;\n    border-radius: 50%;\n    background-color: #f44;\n    box-shadow: 0 0 0 2px #f44, 1.5em 0 0 2px #9b3, 3em 0 0 2px #fb5;\n}\n.uf-iframe:after {\n    content: attr(data-src);\n    display: block;\n    position: absolute;\n    color: #ddd;\n    font-weight: 100;\n    padding-left: 5px;\n    width: calc(100% - 6em);\n    height: 1.2em;\n    line-height: 1.2em;\n    top: -1.6em;\n    left: 5.5em;\n    border-radius: 2px;\n    background-color: white;\n}\n```"

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _src = __webpack_require__(115);

	var _src2 = _interopRequireDefault(_src);

	var _markdown = __webpack_require__(392);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file Demo及文档说明
	


	var demo1 = {
	    title: '基本用法',
	    description: '',
	    config: {
	        type: 'fieldset',
	        title: '这是标题',
	        content: [{
	            type: 'alert',
	            mode: 'info',
	            message: 'Informational Notes',
	            showIcon: true
	        }, {
	            type: 'alert',
	            mode: 'info',
	            message: 'Informational Notes',
	            showIcon: true
	        }]
	    }
	};

	var FieldsetApp = function (_BaseDoc) {
	    _inherits(FieldsetApp, _BaseDoc);

	    function FieldsetApp(props) {
	        _classCallCheck(this, FieldsetApp);

	        var _this = _possibleConstructorReturn(this, (FieldsetApp.__proto__ || Object.getPrototypeOf(FieldsetApp)).call(this, props));

	        _this.state = {};
	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(FieldsetApp, [{
	        key: 'render',
	        value: function render() {
	            return this.__getDemoSingle(demo1);
	        }
	    }]);

	    return FieldsetApp;
	}(_BaseDoc3.default);

	exports.default = FieldsetApp;

/***/ }),
/* 392 */
/***/ (function(module, exports) {

	module.exports = "fieldset 的增强版。\n\n## 组件&参数\n\n### # fieldset\n\n参数 | 说明 | 类型 | 默认值 \n---- | ---- | ----- | -----\ntitle | 文本块的标题，原`<legend>`标签中的内容 | string&#124;`config` |\ncontent | 文本块的内容 | `config` |"

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	


	var GuideApp = function (_BaseDoc) {
	    _inherits(GuideApp, _BaseDoc);

	    function GuideApp(props) {
	        _classCallCheck(this, GuideApp);

	        var _this = _possibleConstructorReturn(this, (GuideApp.__proto__ || Object.getPrototypeOf(GuideApp)).call(this, props));

	        _this.doc = 'mobile-guide.md';
	        _this.__init();
	        return _this;
	    }

	    return GuideApp;
	}(_BaseDoc3.default);

	exports.default = GuideApp;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _button = __webpack_require__(395);

	var _button2 = _interopRequireDefault(_button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 按钮
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '1\u3001\u6309\u94AE\u6709\u56DB\u79CD\u7C7B\u578B\uFF1A\u4E3B\u6309\u94AE\u3001\u6B21\u6309\u94AE\u3001\u5371\u9669\u6309\u94AE\u3002  \n2\u3001\u652F\u6301\u5C55\u793Aloading\u72B6\u6001\uFF0C\u4F7F\u6309\u94AE\u4E34\u65F6\u5931\u6548\u3002  \n3\u3001\u652F\u6301\u914D\u7F6E\u5E26\u56FE\u6807\u7684\u6309\u94AE\u3002',
	    config: [{ type: 'button', content: 'Default' }, { type: 'button', mode: 'primary', content: 'Primary' }, { type: 'button', mode: 'primary', disabled: true, content: 'Disabled' }, { type: 'button', mode: 'warning', content: 'Warning' }, { type: 'button', loading: true, content: 'Loading Button' }, { type: 'button', icon: 'check-circle-o', content: 'Icon Button' }]
	};

	var demo2 = {
	    title: '行内按钮',
	    description: '按钮默认为大按钮，独占一行。可以通过配置`inline`属性配置组件为行内按钮。  \n并支持定制按钮大小',
	    config: [{ type: 'button', inline: true, mode: 'primary', content: 'Inline Primary' }, { type: 'button', inline: true, mode: 'ghost', content: 'Inline Ghost' }, { type: 'button', inline: true, mode: 'primary', size: 'small', content: 'Small' }, { type: 'button', inline: true, mode: 'ghost', size: 'small', content: 'Small' }]
	};

	// const demo3 = {
	//     title: '应用场景',
	//     description: '',
	//     config: [
	//     ]
	// };

	var Button = function (_BaseDoc) {
	    _inherits(Button, _BaseDoc);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this.doc = _button2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Button, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1, demo2);
	        }
	    }]);

	    return Button;
	}(_BaseDoc3.default);

	exports.default = Button;

/***/ }),
/* 395 */
/***/ (function(module, exports) {

	module.exports = "点击后会触发一个操作。\n\n## 组件&配置\n\n### # button\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nmode    | 按钮类型，可选值为`primary`/`ghost`/`warning`或者不设  |   string   |\nsize    | 按钮大小，可选值为`large`、`small` | string | `large`\nactiveStyle  | 点击反馈的自定义样式 (设为 false 时表示禁止点击反馈) | {}/false | {}\nactiveClassName  | 点击反馈的自定义类名 | string |\ndisabled   | 设置禁用  | boolean |    false\nonClick    | 点击按钮的点击回调函数 | (e: Object): void |   \nstyle    | 自定义样式 |   Object  | \ninline     | 是否设置为行内按钮  | boolean |   false\nloading\t   | 设置按钮载入状态\t  | boolean\t | false\nicon  | 可以是 [Icon](#/Mobile/Global/Icon) 组件里内置的某个 icon 的 mode 值，也可以是任意组件的配置 | `string`&#124;`config` | -\nprefixCls |  class前缀 | string | `am-button`\nclassName |  样式类名 | string | "

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _flex = __webpack_require__(397);

	var _flex2 = _interopRequireDefault(_flex);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 布局
	


	var placeholder = { type: 'div', className: 'flex-demo-block' };
	var demo1 = {
	    title: '基本用法',
	    description: 'Flex布局的一个封装，基本用法',
	    config: [{
	        type: 'flex',
	        content: [{
	            type: 'flex-item',
	            content: placeholder
	        }, {
	            type: 'flex-item',
	            content: placeholder
	        }]
	    }, {
	        type: 'flex',
	        content: [{
	            type: 'flex-item',
	            content: placeholder
	        }, {
	            type: 'flex-item',
	            content: placeholder
	        }, {
	            type: 'flex-item',
	            content: placeholder
	        }, {
	            type: 'flex-item',
	            content: placeholder
	        }]
	    }]
	};

	var Flex = function (_BaseDoc) {
	    _inherits(Flex, _BaseDoc);

	    function Flex(props) {
	        _classCallCheck(this, Flex);

	        var _this = _possibleConstructorReturn(this, (Flex.__proto__ || Object.getPrototypeOf(Flex)).call(this, props));

	        _this.doc = _flex2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Flex, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1);
	        }
	    }]);

	    return Flex;
	}(_BaseDoc3.default);

	exports.default = Flex;

/***/ }),
/* 397 */
/***/ (function(module, exports) {

	module.exports = "\nFlex 是 CSS flex 布局的一个封装。\n\n## 组件&配置\n\n### # flex\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndirection | 项目定位方向，值可以为 `row`,`row-reverse`,`column`,`column-reverse`  | String  | `row`\nwrap | 子元素的换行方式，可选`nowrap`,`wrap`,`wrap-reverse`  | String  | `nowrap`\njustify  | 子元素在主轴上的对齐方式，可选`start`,`end`,`center`,`between`,`around`    | String   | `start`\nalign    | 子元素在交叉轴上的对齐方式，可选`start`,`center`,`end`,`baseline`,`stretch`  | String   | `center`\nalignContent | 有多根轴线时的对齐方式，可选`start`,`end`,`center`,`between`,`around`,`stretch`    | String  | `stretch`\n\n### flex-item\n\n`flex-item` 组件默认加上了样式`{flex: 1}`,保证所有 item 平均分宽度, Flex 容器的 content 不一定是 `flex-item`\n"

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _grid = __webpack_require__(399);

	var _grid2 = _interopRequireDefault(_grid);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 宫格
	


	var items = Array.from(new Array(8)).map(function (v, i) {
	    return { icon: '../../public/img/demo-icon.png', text: 'name-' + i };
	});

	var demo1 = {
	    title: '基本用法',
	    description: '基本用法，4列，有边框',
	    config: {
	        type: 'grid',
	        items: items,
	        columnNum: 4,
	        hasLine: true
	    }
	};

	var demo2 = {
	    title: '没有边框',
	    description: '4列，没有边框',
	    config: {
	        type: 'grid',
	        items: items,
	        columnNum: 4,
	        hasLine: false
	    }
	};

	var Grid = function (_BaseDoc) {
	    _inherits(Grid, _BaseDoc);

	    function Grid(props) {
	        _classCallCheck(this, Grid);

	        var _this = _possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).call(this, props));

	        _this.doc = _grid2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Grid, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1, demo2);
	        }
	    }]);

	    return Grid;
	}(_BaseDoc3.default);

	exports.default = Grid;

/***/ }),
/* 399 */
/***/ (function(module, exports) {

	module.exports = "\n在水平和垂直方向，将布局切分成若干等大的区块。\n\n## 何时使用\n\n- 区块中的内容应该是同类元素，eg：都是图片，或者都是图标+文字。\n\n## 组件&配置\n\n### # grid\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nitems    |    传入的菜单数据，本身为一个数组，属相见下面表格`item`    | `Array<{icon, text}>`  | []\nitemStyle | 每个格子自定义样式| object|{}\nonClick    |   点击每个菜单的回调函数   | (el: Object, index: number): void  | -\ncolumnNum    |   列数     | number  |  `4`\nhasLine    |   是否有边框     | boolean  |  `true`\nisCarousel    |   是否跑马灯,     | boolean  | `false`\ncarouselMaxRow    |   如果是跑马灯, 一页跑马灯需要展示的行数   | number  | `2`\nrenderItem    |   自定义每个 grid 条目的创建函数   | (el, index) => `config`  | -\nsquare     |   每个格子是否固定为正方形   | boolean | true\nactiveStyle  | 点击反馈的自定义样式 (设为 false 时表示禁止点击反馈) | {}/false | {}\nactiveClassName  | 点击反馈的自定义类名 | string |\n\n> `isCarousel = true` 模式时，还可以传递 `carousel` 相关的 API。\n\n#### *item*\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nicon |  图标地址，为一个图片的url  | string | \ntext |  展示文字内容  | string | "

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _icon = __webpack_require__(401);

	var _icon2 = _interopRequireDefault(_icon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 图标
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var iconList = ['check-circle', 'check', 'check-circle-o', 'cross-circle', 'cross', 'cross-circle-o', 'up', 'down', 'left', 'right', 'ellipsis', 'loading', 'search'];

	var demo1 = {
	    title: '可用图标',
	    description: '目前只支持只支持内置的几种类型。',
	    config: {
	        type: 'grid',
	        columnNum: 3,
	        hasLine: false,
	        activeStyle: false,
	        items: iconList.map(function (mode) {
	            return {
	                icon: {
	                    type: 'icon',
	                    mode: mode
	                },
	                text: mode
	            };
	        })
	    }
	};

	var demo2 = {
	    title: '大小控制',
	    description: '可通过`size`调节大小。',
	    config: {
	        type: 'grid',
	        columnNum: 5,
	        hasLine: false,
	        activeStyle: false,
	        items: ['xxs', 'xs', 'sm', 'md', 'lg'].map(function (i) {
	            return {
	                icon: {
	                    type: 'icon',
	                    mode: 'search',
	                    size: i
	                }
	            };
	        })
	    }
	};

	var Icon = function (_BaseDoc) {
	    _inherits(Icon, _BaseDoc);

	    function Icon(props) {
	        _classCallCheck(this, Icon);

	        var _this = _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).call(this, props));

	        _this.doc = _icon2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Icon, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1, demo2);
	        }
	    }]);

	    return Icon;
	}(_BaseDoc3.default);

	exports.default = Icon;

/***/ }),
/* 401 */
/***/ (function(module, exports) {

	module.exports = "\n## 图标的命名规范\n\n我们为每个图标赋予了语义化的命名，命名规则如下:\n\n- 实心和描线图标保持同名，用 `-o` 来区分，比如 `question-circle`(实心) 和 `question-circle-o`(描线)；\n\n- 命名顺序：`[icon名]-[形状可选]-[描线与否]-[方向可选]`。\n\n## 组件&配置\n\n### # icon\n\n属性        | 说明           | 类型            | 默认值       \n-----------|----------------|----------------|--------------\nmode    |   内置 icon 名称   | String   \nsize    |   图标大小    | 'xxs'/'xs'/'sm'/'md'/'lg'  | `md` \ncolor   | 图标颜色   | string  | '#000' \n\n### 提示\n\n现在，我们只支持内置的 'check-circle', 'check', 'check-circle-o', 'cross-circle', 'cross', 'cross-circle-o', 'up', 'down', 'left', 'right', 'ellipsis', 'loading' 这些 icon 类型。\n\n更多图标请查看：[IconPlus](#/Mobile/Global/IconPlus)"

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _markdown = __webpack_require__(351);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 路由
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Router = function (_BaseDoc) {
	    _inherits(Router, _BaseDoc);

	    function Router(props) {
	        _classCallCheck(this, Router);

	        var _this = _possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).call(this, props));

	        _this.doc = _markdown2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Router, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Router;
	}(_BaseDoc3.default);

	exports.default = Router;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _whiteSpace = __webpack_require__(404);

	var _whiteSpace2 = _interopRequireDefault(_whiteSpace);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 上下留白
	


	var WhiteSpace = function (_BaseDoc) {
	    _inherits(WhiteSpace, _BaseDoc);

	    function WhiteSpace(props) {
	        _classCallCheck(this, WhiteSpace);

	        var _this = _possibleConstructorReturn(this, (WhiteSpace.__proto__ || Object.getPrototypeOf(WhiteSpace)).call(this, props));

	        _this.doc = _whiteSpace2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(WhiteSpace, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return WhiteSpace;
	}(_BaseDoc3.default);

	exports.default = WhiteSpace;

/***/ }),
/* 404 */
/***/ (function(module, exports) {

	module.exports = "\n布局控件\n\n## 组件&配置\n\n### # white-space\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nsize |  上下留白的间距，可选`xs`,`sm`,`md`,`lg`,`xl`  | string | `md`\n"

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _wingBlank = __webpack_require__(406);

	var _wingBlank2 = _interopRequireDefault(_wingBlank);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 两翼留白
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '布局控件',
	    description: '布局控件',
	    config: ['lg', 'md', 'sm'].map(function (size) {
	        return {
	            type: 'wing-blank',
	            size: size,
	            content: {
	                type: 'div',
	                className: 'flex-demo-block'
	            }
	        };
	    })
	};

	var WingBlank = function (_BaseDoc) {
	    _inherits(WingBlank, _BaseDoc);

	    function WingBlank(props) {
	        _classCallCheck(this, WingBlank);

	        var _this = _possibleConstructorReturn(this, (WingBlank.__proto__ || Object.getPrototypeOf(WingBlank)).call(this, props));

	        _this.doc = _wingBlank2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(WingBlank, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return WingBlank;
	}(_BaseDoc3.default);

	exports.default = WingBlank;

/***/ }),
/* 406 */
/***/ (function(module, exports) {

	module.exports = "\n布局控件\n\n## 组件&配置\n\n### # wing-blank\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nsize    | 两翼留白的间距，可选`sm`,`md`,`lg`  | string |  `lg` \n"

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _steps = __webpack_require__(408);

	var _steps2 = _interopRequireDefault(_steps);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 步骤条
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '步骤条',
	    description: '基本用法',
	    config: {
	        type: 'steps',
	        current: 1,
	        size: 'small',
	        content: [{
	            type: 'step',
	            title: 'Finish',
	            description: 'This is description'
	        }, {
	            type: 'step',
	            title: 'In Progress',
	            description: 'This is description'
	        }, {
	            type: 'step',
	            title: 'Waiting',
	            description: 'This is description'
	        }]
	    }
	};

	var demo2 = {
	    title: '横向步骤条',
	    description: '横向步骤条',
	    config: {
	        type: 'steps',
	        current: 1,
	        direction: 'horizontal',
	        content: [{
	            type: 'step',
	            title: 'Step1',
	            description: 'description'
	        }, {
	            type: 'step',
	            title: 'Step2',
	            description: 'description'
	        }, {
	            type: 'step',
	            title: 'Step3',
	            description: 'description'
	        }]
	    }
	};

	var Steps = function (_BaseDoc) {
	    _inherits(Steps, _BaseDoc);

	    function Steps(props) {
	        _classCallCheck(this, Steps);

	        var _this = _possibleConstructorReturn(this, (Steps.__proto__ || Object.getPrototypeOf(Steps)).call(this, props));

	        _this.doc = _steps2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Steps, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1, demo2);
	        }
	    }]);

	    return Steps;
	}(_BaseDoc3.default);

	exports.default = Steps;

/***/ }),
/* 408 */
/***/ (function(module, exports) {

	module.exports = "\n显示一个任务的进度；或者引导用户完成某个复杂任务。\n\n### 规则\n- 应用在离散和时间较长的进度显示，eg：转账进度；如果任务是连续和短暂的，应该使用 Progress 来显示，eg：打开页面。\n- 当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务，eg：用户注册新账号。\n\n\n## 组件&配置\n\n### # steps\n\n整体步骤条。\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ncurrent | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 \nsize | 尺寸，支持设置小尺寸`small` | string | - \nstatus | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` \ndirection | step 的方向  |  Enum { 'vertical', 'horizontal' } | `vertical`  \n\n### # step\n\n步骤条内的每一个步骤。\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nstatus | 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。 | Enum { 'wait', 'process', 'finish', 'error' } | `wait` \ntitle | 标题 | string&#124;`config` | -     \ndescription | 步骤的详情描述，可选 | string&#124;`config` | -  \nicon | 步骤图标，可选 | string&#124;`config` | - \n"

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _drawer = __webpack_require__(410);

	var _drawer2 = _interopRequireDefault(_drawer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 抽屉
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var demo1 = {
	    title: '基本用法',
	    description: '侧拉弹出菜单',
	    config: {
	        type: 'div',
	        content: [{
	            type: 'nav-bar',
	            icon: {
	                type: 'icon',
	                mode: 'ellipsis'
	            },
	            content: 'Basic'
	        }, {
	            type: 'drawer',
	            enableDragHandle: true,
	            open: true,
	            sidebar: {
	                type: 'list',
	                content: new Array(4).map(function (i) {
	                    return {
	                        type: 'item',
	                        thumb: '../../public/img/demo-icon.png',
	                        content: '菜单项-' + i
	                    };
	                })
	            },
	            content: '点左上角按钮查看'
	        }]
	    }
	};

	var Drawer = function (_BaseDoc) {
	    _inherits(Drawer, _BaseDoc);

	    function Drawer(props) {
	        _classCallCheck(this, Drawer);

	        var _this = _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, props));

	        _this.doc = _drawer2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Drawer, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1);
	        }
	    }]);

	    return Drawer;
	}(_BaseDoc3.default);

	exports.default = Drawer;

/***/ }),
/* 410 */
/***/ (function(module, exports) {

	module.exports = "\n用于在屏幕边缘显示应用导航等内容的面板。是 Android 推荐的导航方式，常见于该平台应用。\n\n## 组件&配置\n\n### # drawer\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nsidebar | 抽屉里的内容 | `config` | - \nonOpenChange | open 状态切换时调用 | (open: bool): void | - \nopen | 开关状态 | Boolean | false \nposition | 抽屉所在位置 | String | 'left', enum{'left', 'right', 'top', 'bottom'} \nsidebarStyle | - | Object | {} \ncontentStyle | - | Object | {} \noverlayStyle | - | Object | {} \ndragHandleStyle | - | Object | {} \ntouch | 是否开启触摸手势 | Boolean | true \ntransitions | 是否开启动画 | Boolean | true \ndocked | 是否嵌入到正常文档流里 | Boolean | false \nenableDragHandle | 是否禁止 dragHandle | Boolean | false \ndragToggleDistance | 打开关闭抽屉时距 sidebar 的拖动距离 | Number | 30 \n"

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _menu = __webpack_require__(412);

	var _menu2 = _interopRequireDefault(_menu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 菜单
	


	var Menu = function (_BaseDoc) {
	    _inherits(Menu, _BaseDoc);

	    function Menu(props) {
	        _classCallCheck(this, Menu);

	        var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

	        _this.doc = _menu2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Menu, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Menu;
	}(_BaseDoc3.default);

	exports.default = Menu;

/***/ }),
/* 412 */
/***/ (function(module, exports) {

	module.exports = "\n在一个临时的面板上显示一组操作。\n\n## 何时使用\n- 至少包含 2 个以上的菜单项。\n- 不应该被当做主要导航方式。\n\n## 组件&配置\n\n### # menu\n\n| 属性 | 说明 | 类型 | 默认值 | \n| ----|-----|------|------ | \n| data    |  数据(isLeaf 设置后 children 无效)  | `Array<{label: ReactNode, value, disabled?, children<data>?, isLeaf?}>` | [] |\n| level    |  菜单级数，可选1/2  | number  | 2 |\n| value    |  初始值，一级和二级筛选数据的`value`组成的数组。在多选状态下，如果为二级菜单，则数组的第一个元素为一级菜单的选项，数组的第二个元素是一个数组，里面包含了二级菜单的多选项；如果为一级菜单，则数组所有元素都是多选项  | Array | |\n| onChange    |   选择后的回调函数    | (item: Object): void  |  |\n| onOk    |  多选状态下确认按钮回调  | (value: Object): void  |  |\n| onCancel    |   多选状态下取消按钮回调  | (): void  |  |\n| height    |   筛选组件的高度   | number  | `document.documentElement.clientHeight / 2` |\n| multiSelect    |   是否支持菜单多选  | boolean  | false |\n"

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _navBar = __webpack_require__(414);

	var _navBar2 = _interopRequireDefault(_navBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 导航条
	


	var NavBar = function (_BaseDoc) {
	    _inherits(NavBar, _BaseDoc);

	    function NavBar(props) {
	        _classCallCheck(this, NavBar);

	        var _this = _possibleConstructorReturn(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).call(this, props));

	        _this.doc = _navBar2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(NavBar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return NavBar;
	}(_BaseDoc3.default);

	exports.default = NavBar;

/***/ }),
/* 414 */
/***/ (function(module, exports) {

	module.exports = "\n位于 app 内容区的上方，系统状态栏的下方，并且提供在一系列页面中的导航能力。\n\n### 规则\n\n- 可在导航栏中显示当前视图的标题。如果标题非常冗长且无法精简，可以空缺。\n- 可在导航栏中使用 SegmentedControl 对内容进行层级划分。\n- 避免用过多的元素填满导航栏。一般情况下，一个『返回按钮』、一个『标题』、一个『当前视图的控件』就足够了；如果已经有了 SegmentedControl ，一般只搭配一个『返回按钮』或者『当前视图的控件』。\n- 为图标和文字控件，提供更大的点击热区。\n\n## 组件&配置\n\n### # nav-bar\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nmode   | 模式   | string |  'dark' enum{'dark', 'light'} \nicon   | 出现在最左边的图标占位符  | `config` |  - \nleftContent  | 导航左边内容      | `config` |   \nrightContent  | 导航右边内容      | `config` |   \nonLeftClick   | 导航左边点击回调      | (e: Object): void |   \n"

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _pagination = __webpack_require__(416);

	var _pagination2 = _interopRequireDefault(_pagination);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 分页
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Pagination = function (_BaseDoc) {
	    _inherits(Pagination, _BaseDoc);

	    function Pagination(props) {
	        _classCallCheck(this, Pagination);

	        var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

	        _this.doc = _pagination2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Pagination, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Pagination;
	}(_BaseDoc3.default);

	exports.default = Pagination;

/***/ }),
/* 416 */
/***/ (function(module, exports) {

	module.exports = "\n分隔长列表，每次只加载一个页面。\n\n### 规则\n- 当加载/渲染所有数据将花费很多时间或者流量时使用\n\n## 组件&配置\n\n### # pagination\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nmode  | 形态，可选`button`,`number`,`pointer` | string | `button` \ncurrent  | 当前页号 | number  |  1 \ntotal  | 数据总数 | number  |  0 \nsimple  | 是否隐藏数值 | boolean | false \ndisabled  | 禁用状态 | boolean | false \nonChange | change 事件触发的回调函数 | (e: Object): void | 无\n"

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tabs = __webpack_require__(418);

	var _tabs2 = _interopRequireDefault(_tabs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 标签页
	


	var Tabs = function (_BaseDoc) {
	    _inherits(Tabs, _BaseDoc);

	    function Tabs(props) {
	        _classCallCheck(this, Tabs);

	        var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));

	        _this.doc = _tabs2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tabs, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Tabs;
	}(_BaseDoc3.default);

	exports.default = Tabs;

/***/ }),
/* 418 */
/***/ (function(module, exports) {

	module.exports = "\n用于让用户在不同的视图中进行切换。\n\n### 规则\n- 标签数量，一般 2-4 个；其中，标签中的文案需要精简，一般 2-4 个字。\n- 在 iOS 端的次级页面中，不建议使用左右滑动来切换 Tab，这个和 iOS 的左滑返回存在冲突，eg：详情页中 Tabs。\n\n## 组件&配置\n\n### # tabs\n\n属性 | 说明 | 类型 | 默认值 | 必选\n----|-----|------|------|------\nprefixCls  | 样式前缀  | string |  rmc-tabs | false\ntabs | tab数据 | Models.TabData[] |  | true\ntabBarPosition  | TabBar位置 | 'top'&#124;'bottom'&#124;'left'&#124;'right' |  top | false\ninitialPage  | 初始化Tab, index or key | number&#124;string |  | false\npage  | 当前Tab, index or key | number&#124;string |  | false\nswipeable  | 是否可以滑动内容切换 | boolean |  true | false\nuseOnPan  | 使用跟手滚动 | boolean |  true | false\nprerenderingSiblingsNumber  | 预加载两侧Tab数量 | number |  1 | false\nanimated  | 是否开启切换动画 | boolean |  true | false\ndestroyInactiveTab | 销毁超出范围Tab | boolean |  false | false\ndistanceToChangeTab | 滑动切换阈值(宽度比例) | number |  0.3 | false\nusePaged | 是否启用分页模式 | boolean |  true | false\ntabDirection | Tab方向 | 'horizontal'&#124;'vertical' |  horizontal | false\ntabBarUnderlineStyle  | tabBar下划线样式 | object |  | false\ntabBarBackgroundColor  | tabBar背景色 | string |  | false\ntabBarActiveTextColor  | tabBar激活Tab文字颜色 | string |  | false\ntabBarInactiveTextColor  | tabBar非激活Tab文字颜色 | string |  | false\ntabBarTextStyle  | tabBar文字样式 | object |  | false\nrenderTab | 替换TabBar的Tab | (tab: Models.TabData) => `config` | | false\nrenderTabBar  | 替换TabBar | ((props: TabBarPropsType) => `config`)&#124;false |  | false\nonChange  | tab变化时触发 | (tab: Models.TabData, index: number) => void |  | false\nonTabClick  | tab 被点击的回调 | (tab: Models.TabData, index: number) => void |  | false\n"

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tabBar = __webpack_require__(420);

	var _tabBar2 = _interopRequireDefault(_tabBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 标签栏
	


	var TabBar = function (_BaseDoc) {
	    _inherits(TabBar, _BaseDoc);

	    function TabBar(props) {
	        _classCallCheck(this, TabBar);

	        var _this = _possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

	        _this.doc = _tabBar2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(TabBar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return TabBar;
	}(_BaseDoc3.default);

	exports.default = TabBar;

/***/ }),
/* 420 */
/***/ (function(module, exports) {

	module.exports = "\n位于 APP 底部，方便用户在不同功能模块之间进行快速切换。\n\n### 规则\n- 用作 APP 的一级分类，数量控制在 3-5 个之间。\n- 即使某个 Tab 不可用，也不要禁用或者移除该 Tab。\n- 使用 Badge 进行提示，足不出户也能知道有内容更新。\n\n## 组件&配置\n\n### # tab-bar\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nbarTintColor  | tabbar 背景色     | String   | `white`            \ntintColor   | 选中的字体颜色  | String | `#108ee9`\nunselectedTintColor   | 未选中的字体颜色  | String | `#888`       \nhidden      | 是否隐藏  | Boolean | false           \nprefixCls| 样式前缀  | String   | 'am-tab-bar'      \nnoRenderContent| 不渲染内容部分  | Boolean   |   false   \nprerenderingSiblingsNumber| 预加载相邻的tab内容。`1`: 加载所有的tab内容, `0`: 仅加载当前tab内容, 当页面较复杂时，建议设为0，提升页面加载性能  | number |   1 \ntabBarPosition | tabbar 位置 | 'top'&#124;'bottom' | 'bottom' \n\n\n### # tab-bar-item\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ntitle  |  标题文字 | String |      \nbadge  | 徽标数  | Number&#124;String  |   \ndot | 是否在右上角显示小红点（在设置badge的情况下失效）  | Boolean   |  false  \nonPress  | bar 点击触发，需要自己改变组件 | Function | \nselected  | 是否选中 | Boolean | false     \nicon  | 默认展示图片 |  |      \nselectedIcon  |  选中后的展示图片 |  | \n"

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _checkbox = __webpack_require__(422);

	var _checkbox2 = _interopRequireDefault(_checkbox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 复选框
	


	var Checkbox = function (_BaseDoc) {
	    _inherits(Checkbox, _BaseDoc);

	    function Checkbox(props) {
	        _classCallCheck(this, Checkbox);

	        var _this = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

	        _this.doc = _checkbox2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Checkbox, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Checkbox;
	}(_BaseDoc3.default);

	exports.default = Checkbox;

/***/ }),
/* 422 */
/***/ (function(module, exports) {

	module.exports = "\n复选框\n\n## 组件&配置\n\n### # checkbox\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndefaultChecked  |  初始是否选中  | Boolean   | \nchecked         |   指定当前是否选中   | Boolean  | \ndisabled        |         | Boolean |  false \nonChange        | change 事件触发的回调函数 | (e: Object): void |  \n\n### # checkbox-item\n\n基于`List.Item`对`Checkbox`进行封装,`List.Item`的`thumb`属性固定传入`Checkbox`,其他属性和`List.Item`一致。\n其他 API 和 Checkbox 相同。\n\n### Checkbox.AgreeItem\n\n用于同意协议这种场景的复选框\n"

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _input = __webpack_require__(424);

	var _input2 = _interopRequireDefault(_input);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 输入框
	


	var Input = function (_BaseDoc) {
	    _inherits(Input, _BaseDoc);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.doc = _input2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Input, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Input;
	}(_BaseDoc3.default);

	exports.default = Input;

/***/ }),
/* 424 */
/***/ (function(module, exports) {

	module.exports = "\n用于接受单行文本。\n\n## 何时使用\n- 支持通过键盘或者剪切板输入文本。\n- 通过光标可以在水平方向进行移动。\n- 对特定格式的文本进行处理，eg：隐藏密码。\n\n## 组件&配置\n\n**`Input` 必须用 [`List`]() 组件包裹才能正常使用**\n\n| 属性 | 说明 | 类型 | 默认值| \n| ----|-----|------|------| \n| name    | input 的 name  | String |  无  |\n| mode    | 可以是银行卡`bankCard`；手机号`phone`(此时最大长度固定为11)；密码`password`；数字`number`；`digit`(表示原生的 number 类型)；`money`(带小数点的模拟的数字键盘)  | String |  `text`  |\n| value    | value 值  | String |  无  |\n| defaultValue  | 设置初始默认值        | String |  -  |\n| placeholder   | placeholder        | String | ''  |\n| editable    | 是否可编辑        | bool |  true  |\n| disabled    | 是否禁用        | bool |  false  |\n| clear      |  是否带清除功能(仅`editable`为`true`,`disabled`为`false`才生效) | bool | false  |\n| maxLength  |  最大长度      | number |  |\n| error       | 报错样式        | bool |  false  |\n| extra       | 右边注释   | string or node |  ''  |\n| labelNumber  | 标签的文字个数，可用`2-7`之间的数字 | number | `5` |\n| updatePlaceholder  | 当清除内容时，是否将清除前的内容替换到 placeholder 中 | bool |  false  |\n| prefixListCls     |   列表 className 前缀      | String |  `am-list`  |\n| moneyKeyboardAlign    | 文字排版起始方向, 只有 `mode='money'` 支持， 可选为 `'left'`, `'right'`       | String |  'right'  |\n| moneyKeyboardWrapProps    | 自定义金额虚拟键盘属性  | Object | {} |\n| moneyKeyboardHeader    | 自定义金额虚拟键盘头部  | `config` | null |\n| onChange    | change 事件触发的回调函数 | (val: string): void |  -  |\n| onBlur     | blur 事件触发的回调函数 | (val: string): void |   -  |\n| onFocus    | focus 事件触发的回调函数 | (val: string): void |  -  |\n| onErrorClick   | 点击报错 icon 触发的回调函数  | (e: Object): void |  无  |\n| onExtraClick      | extra 点击事件触发的回调函数 | (e: Object): void |  无  |\n| onVirtualKeyboardConfirm | 虚拟键盘点击确认时的回调函数 | (val: string): void |  无  |\n\n> 注意: `Input` 当 `mode=number` 时不支持输入负号, 你可以利用 `mode=text` 来自己实现。\n> 注意: 使用 `moneyKeyboardHeader` 时，页面中只能有一个 `mode=money` 的 `Input`。\n\n### 组件接口\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\n| focus | 使 input 聚焦  | (): void |  -  |\n"

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _select = __webpack_require__(426);

	var _select2 = _interopRequireDefault(_select);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 选择框
	


	var Select = function (_BaseDoc) {
	    _inherits(Select, _BaseDoc);

	    function Select(props) {
	        _classCallCheck(this, Select);

	        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

	        _this.doc = _select2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Select, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Select;
	}(_BaseDoc3.default);

	exports.default = Select;

/***/ }),
/* 426 */
/***/ (function(module, exports) {

	module.exports = "\n在一组预设数据中进行选择，e.g. 省市区选择。\n\n### 规则\n- 尽量使用 Picker 来帮助用户完成输入，避免用户通过键盘直接输入。\n- DatePicker 是 Picker 的特定模式。\n\n## 组件&配置\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\noptions    | 数据列表  | `Array<{value, label, children: Array}>` |   - \nvalue   | 值, 格式是`[value1, value2, value3]`, 对应数据源的相应级层value    | Array  | -\nformat  | 格式化选中目标的函数  | function(labels): any | if label is string: `(labels) => { return labels.join(',');}` else: `(labels) => { return labels;} ` \ncols    | 列数    | Number |  `3`  \nonChange | 选中后的回调，可使用 | (val): void | - \nonPickerChange | 每列数据选择变化后的回调函数   | (val): void | - \nonVisibleChange  | 当显隐状态变化时回调函数    | (visible: bool): void |  -   \nitemStyle | 每列样式  |   Object   | -  \nindicatorStyle  | indicator 样式 | Object | - \nokText  | 选中的文案 | String |  `确定`  \ndismissText  | 取消选中的文案 | String |  `取消`  \nonOk  | 点击选中时执行的回调 | (val): void  |  无 \nonDismiss  | 点击取消时执行的回调 | (): void  |  无  \ntitle  | 大标题 | String | - \nextra  |  | String |  `请选择`  \ncontent | 组件的`content`建议是`item`组件, 如果不是，需要是自定义组件(组件内需处理`onClick`/`extra`属性) | Object | \ndisabled  | 是否不可用 | Boolean | false \ncascade  | 是否联动 | Boolean | true \n"

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _calendar = __webpack_require__(428);

	var _calendar2 = _interopRequireDefault(_calendar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 日历
	


	var Calendar = function (_BaseDoc) {
	    _inherits(Calendar, _BaseDoc);

	    function Calendar(props) {
	        _classCallCheck(this, Calendar);

	        var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props));

	        _this.doc = _calendar2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Calendar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Calendar;
	}(_BaseDoc3.default);

	exports.default = Calendar;

/***/ }),
/* 428 */
/***/ (function(module, exports) {

	module.exports = "\n用于选择日期区间。\n\n## 组件&配置\n\n### # calendar\n\n属性 | 说明 | 类型 | 默认值 | 必选\n----|-----|------|------|------\nmode | 选择类型 one: 单日 range: 日期区间 | 'one'&#124;'range'| range | false\nenterDirection | 入场方向 vertical: 垂直 horizontal: 水平 | 'horizontal'&#124;'vertical'| vertical | false\nlocale | 本地化 | Models.Locale | | false\nonCancel | 关闭时回调 | () => void | | false\nonConfirm | 确认时回调 | (startDateTime?: Date, endDateTime?: Date) => void | | false\npickTime|是否选择时间 | boolean | false | false\nprefixCls| 样式前缀 | string | rmc-calendar | false\nrenderShortcut | 替换快捷选择栏，返回结果为组件配置。需要设置showShortcut: true | (select: (startDate?: Date, endDate?: Date) => void) => `config` | | false\nrenderHeader | 替换标题栏，返回结果为组件配置。 | () => `config` | | false\nshowShortcut | 快捷日期选择 | boolean | false | false\ntitle | header title | string | {locale.title}|false\nvisible | 是否显示 | boolean | false | false\ndefaultDate | 显示开始日期 | Date | today | false\ngetDateExtra | 日期扩展数据 | (date: Date) => Models.ExtraData | | false\ninfiniteOpt | 无限滚动优化（大范围选择）| boolean | false | false\ninitalMonths | 初始化月个数 | number | 6 | false\nmaxDate | 最大日期 | Date | | false\nminDate | 最小日期 | Date | | false\nonSelect | 选择区间回调 | (date: Date, state?: \\[Date | undefined, Date | undefined\\]) => \\[Date, Date\\]&#124;\\[Date\\]&#124;void | | false\nonSelectHasDisableDate | 选择区间包含不可用日期 | (date: Date[]) => void | | false\nrowSize | 行大小 | 'normal'&#124;'xl' | | false\ndefaultValue | 默认日历选择范围 | \\[Date, Date\\]&#124;\\[Date\\] | | false\ndefaultTimeValue | 默认时间选择值 | Date | | false\n"

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _radio = __webpack_require__(430);

	var _radio2 = _interopRequireDefault(_radio);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 单选框
	


	var Radio = function (_BaseDoc) {
	    _inherits(Radio, _BaseDoc);

	    function Radio(props) {
	        _classCallCheck(this, Radio);

	        var _this = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

	        _this.doc = _radio2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Radio, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Radio;
	}(_BaseDoc3.default);

	exports.default = Radio;

/***/ }),
/* 430 */
/***/ (function(module, exports) {

	module.exports = "\n单选框\n\n## 组件&配置\n\n### # radio\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndefaultChecked |   初始是否选中   | Boolean  | 无 \nchecked    |   指定当前是否选中  | Boolean  | 无 \ndisabled      |  禁用  | Boolean |  false \nonChange    | change 事件触发的回调函数 | (e: Object): void |   无 \n\n\n### radio-item\n\n基于`List.Item`对`Radio`进行封装,`List.Item`的`extra`属性固定传入`Radio`,其他属性和`List.Item`一致。\n其他 API 和 Radio 相同。\n\n\n### # radio-button\n\n按钮形式的radio\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nitems  | 选项数组,值是字符串        | array |  []  \nvalue  |  当前选中的值  | string |   \nprefixCls  | 样式前缀        | String |  `am-segment`  \ntintColor  | 组件主色调      | String |  `#2DB7F5`  \ndisabled  | 是否启用         | Boolean |  false  \nonChange    | 回调函数, 其中`e.nativeEvent.selectedSegmentIndex`是选中项索引,`e.nativeEvent.value`是选中的值. | (e): void | \nonValueChange    |    回调函数   | (val): void | \n"

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _datePicker = __webpack_require__(432);

	var _datePicker2 = _interopRequireDefault(_datePicker);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 日期选择
	


	var DatePicker = function (_BaseDoc) {
	    _inherits(DatePicker, _BaseDoc);

	    function DatePicker(props) {
	        _classCallCheck(this, DatePicker);

	        var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

	        _this.doc = _datePicker2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(DatePicker, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return DatePicker;
	}(_BaseDoc3.default);

	exports.default = DatePicker;

/***/ }),
/* 432 */
/***/ (function(module, exports) {

	module.exports = "\n用于选择日期或者时间。\n\n## 组件&配置\n\n### # date-picker\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nmode  | 日期选择的类型, 可选值：`date`,`time`,`datetime`,`year`,`month` | String | `date`\nvalue | 当前选中时间 | Date |  \nminDate   | 最小可选日期 | Date  | \nmaxDate   | 最大可选日期 | Date  | \nuse12Hours | 12小时制 | Boolean | false \nminuteStep |  分钟数递增步长设置   | Number | 1\ndisabled   | 是否不可用      | Boolean |    false\nonChange   | 时间发生变化的回调函数  | (date: Object): void | \nonValueChange | 每列 picker 改变时的回调 | (vals: any, index: number) => void | \nformat  | 格式化选中的值 | (value: Date) => date string | \ntitle  | 弹框的标题 | string&#124;`config` | \nextra   | 显示文案 | String  |  请选择  \nprefixCls |  class前缀 | string | 'am-picker' \nclassName |  样式类名 | string | \nonOk  | 点击选中时执行的回调 | (val): void  | \nonDismiss  | 点击取消时执行的回调 | (): void  | \n\n注意：日期字符串在不同浏览器有不同的实现，例如 `new Date('2017-1-1')` 在 Safari 上是 Invalid Date，而在 Chrome 上是能正常解析的。\n\n> 注意：`DatePicker` children 建议是 `List.Item`, 如果不是，需要是自定义组件(组件内需处理 `onClick` / `extra` / `children` 属性\n\n\n### # date-picker-view\n\nDatePickerView 的功能类似于 DatePicker ，但它是直接渲染在区域中，而不是弹出窗口。\n\n参数和`date-picker`保持一致"

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _slider = __webpack_require__(434);

	var _slider2 = _interopRequireDefault(_slider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 滑动输入
	


	var Slider = function (_BaseDoc) {
	    _inherits(Slider, _BaseDoc);

	    function Slider(props) {
	        _classCallCheck(this, Slider);

	        var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

	        _this.doc = _slider2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Slider, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Slider;
	}(_BaseDoc3.default);

	exports.default = Slider;

/***/ }),
/* 434 */
/***/ (function(module, exports) {

	module.exports = "\n允许用户在一个区间中选择特定值，eg：控制屏幕的显示亮度。\n\n### 规则\n- 默认状态下，左边为最小值，右边为最大值。\n- 一般水平放置。\n\n## 组件&配置\n\n### # slider\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nmin    | 最小值 |  Number     | 0    \nmax    | 最大值 |  Number     | 100   \nstep    | 步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 `null`，此时 Slider 的可选值仅有 marks 标出来的部分。 |  Number or null     | 1   \nvalue     | 设置当前取值。  |  Number  |   \ndefaultValue   | 设置初始取值。  |  Number   | 0    \ndisabled    | 值为 `true` 时，滑块为禁用状态  |  Boolean     | false   \nonChange    | 当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入。  |  Function     |    \nonAfterChange   | 与 `ontouchend` 触发时机一致，把当前值作为参数传入。   |  Function     |    \nmarks   | 刻度标记，key 的类型必须为 `Number` 且取值在闭区间 [min, max] 内  |  Object{Number:String}     | \ndots    | 是否只能拖拽到刻度上 |  Boolean     | false \nincluded   | `marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列 |  Boolean     | true   \nmaximumTrackStyle  | 未选中 track 的样式(`将被废弃，请使用 railStyle 代替`)  |  Object     | \nminimumTrackStyle   | 选中部分的 track 样式 (`将被废弃，请使用 trackStyle 代替`) |  Object  |\nhandleStyle  | 滑块的样式   |  Object    |   \ntrackStyle | 选中部分滑动条的样式  | Object     |    \nrailStyle  | 未选中部分 |  Object     |  \n\n\n### # slider-range\n\n多个滑块，可以用于选择范围。大部分属性和`slider`组件一致，以下为组件自己的额外属性：\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ncount  | 确定要呈现多少个范围，并将呈现多个滑块(number + 1).  | number | `1`\nallowCross  | 可以设置为true，以允许交叉  | boolean | `true`\npushable | 可以设置为`true`，以允许在移动某一滑块时推动周围的滑块。当设置为数字时，该数字将是确保各个滑块之间的最小距离。 | boolean&#124;number | `true` \n"

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _textarea = __webpack_require__(436);

	var _textarea2 = _interopRequireDefault(_textarea);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 多行输入
	


	var Textarea = function (_BaseDoc) {
	    _inherits(Textarea, _BaseDoc);

	    function Textarea(props) {
	        _classCallCheck(this, Textarea);

	        var _this = _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).call(this, props));

	        _this.doc = _textarea2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Textarea, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Textarea;
	}(_BaseDoc3.default);

	exports.default = Textarea;

/***/ }),
/* 436 */
/***/ (function(module, exports) {

	module.exports = "\n用于接受多行文本。\n\n### 规则\n- 支持通过键盘或者剪切板输入文本。\n- 通过光标可以在垂直或者水平方向进行移动。\n\n\n## 组件&配置\n\n### # textarea\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nvalue    | value 值  | String |  无  \ndefaultValue    | 设置初始默认值        | String |  -  \nplaceholder  | placeholder        | String | ''  \neditable    | 是否可编辑        | bool |  true  \ndisabled    | 是否禁用        | bool |  false  \nclear      |  是否带清除功能(仅`editable`为`true`,`disabled`为`false`才生效) | bool | false  \nrows      |   显示几行      | number |   1 \ncount      |  计数功能,兼具最大长度,默认为0,代表不开启计数功能      | number | -  \nonChange    | change 事件触发的回调函数 | (val: string): void |  -  \nonBlur     | blur 事件触发的回调函数 | (val: string): void |   -  \nonFocus    | focus 事件触发的回调函数 | (val: string): void |  -  \nerror       | 报错样式        | bool |  false  \nonErrorClick       | 点击报错 icon 触发的回调   | (): void |  无  \nautoHeight       | 高度自适应, autoHeight 和 rows 请二选一    | bool  | false  \nlabelNumber  | 定宽枚举值：`num * @input-label-width: 34px`，可用`2-7`之间的数字，一般(不能保证全部)能对应显示出相应个数的中文文字(不考虑英文字符) | number | `5` \nname   | textarea 的 name       | String |   -  \nprefixListCls   |   列表 className 前缀      | String |  `am-list`  \ntitle   | 文案说明        | String/node |  '' \n\n### 组件接口\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nfocus | 强制获得焦点  | - |  - \n"

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _imagePicker = __webpack_require__(438);

	var _imagePicker2 = _interopRequireDefault(_imagePicker);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 图片选择
	


	var ImagePicker = function (_BaseDoc) {
	    _inherits(ImagePicker, _BaseDoc);

	    function ImagePicker(props) {
	        _classCallCheck(this, ImagePicker);

	        var _this = _possibleConstructorReturn(this, (ImagePicker.__proto__ || Object.getPrototypeOf(ImagePicker)).call(this, props));

	        _this.doc = _imagePicker2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ImagePicker, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return ImagePicker;
	}(_BaseDoc3.default);

	exports.default = ImagePicker;

/***/ }),
/* 438 */
/***/ (function(module, exports) {

	module.exports = "\n注意：只是图片选择器，一般用于上传图片前的文件选择操作，但不包括图片上传的功能\n\n## 组件&配置\n\n### # image-picker\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nfiles    | 图片文件数组,元素为对象,包含属性 url（必选, 可能还有id, orientation, 以及业务需要的其它属性     | Array  | []\nonChange    | files 值发生变化触发的回调函数, operationType 操作类型有添加，移除，如果是移除操作，则第三个参数代表的是移除图片的索引  | (files: Object, operationType: string, index: number): void | \nonImageClick    | 点击图片触发的回调  | (index: number, files: Object): void |   \nonAddImageClick  | 自定义选择图片的方法  | (): void |   \nonFail | 选择失败  | (msg: string): void |   \nselectable | 是否显示添加按钮  | boolean |  true \nmultiple | 是否支持多选  | boolean |  false \naccept | 图片类型  | string |  image/* \nlength | 单行的图片数量  | string&#124;number | 4 \n"

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _switch = __webpack_require__(440);

	var _switch2 = _interopRequireDefault(_switch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 开关
	


	var Switch = function (_BaseDoc) {
	    _inherits(Switch, _BaseDoc);

	    function Switch(props) {
	        _classCallCheck(this, Switch);

	        var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

	        _this.doc = _switch2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Switch, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Switch;
	}(_BaseDoc3.default);

	exports.default = Switch;

/***/ }),
/* 440 */
/***/ (function(module, exports) {

	module.exports = "\n开关。\n\n### 规则\n- **只在 List 中使用。**\n- 避免增加额外的文案来描述当前 Switch 的值。\n\n## 组件&配置\n\n### # switch\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nchecked    | 是否默认选中    | Boolean       |   false  \ndisabled   | 是否不可修改    | Boolean       |   false  \nonChange   | change 事件触发的回调函数 | (checked: bool): void |  无  \ncolor | 开关打开后的颜色 | String | #4dd865 \nplatform |  设定组件的平台特有样式, 可选值为 `android`, `ios`， 默认为 `ios`  | String | `'ios'`\nonClick   | click事件触发的回调函数，当switch为disabled时，入参的值始终是默认传入的checked值。 | (checked: bool): void |  无  \n"

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _stepper = __webpack_require__(442);

	var _stepper2 = _interopRequireDefault(_stepper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 分步器
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Stepper = function (_BaseDoc) {
	    _inherits(Stepper, _BaseDoc);

	    function Stepper(props) {
	        _classCallCheck(this, Stepper);

	        var _this = _possibleConstructorReturn(this, (Stepper.__proto__ || Object.getPrototypeOf(Stepper)).call(this, props));

	        _this.doc = _stepper2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Stepper, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Stepper;
	}(_BaseDoc3.default);

	exports.default = Stepper;

/***/ }),
/* 442 */
/***/ (function(module, exports) {

	module.exports = "---\ncategory: Components\ntype: Data Entry\ntitle: Stepper\nsubtitle: 步进器\n---\n\n用作增加或者减少当前数值。\n\n### 规则\n- 当想要对数值进行小幅度调整时，可以使用 Stepper，eg：将年化收益从 4.00% 调整到 4.05%。\n\n## 组件&配置\n\n### # stepper\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndefaultValue   | 初始值       | Number      |          \nvalue     | 当前值       | Number      | \nmin     | 最小值   | Number |  \nmax     | 最大值       | Number      | \nstep     | 每次改变步数，可以为小数  | Number&#124;String  |  1    \nonChange     | 变化时回调函数      | (): void      |          \ndisabled     | 禁用       | Boolean    | false    \nreadOnly     | input 只读       | Boolean    |      false    \nshowNumber  | 是否显示数值，默认不显示  | Boolean    |      false    \n"

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _searchBar = __webpack_require__(444);

	var _searchBar2 = _interopRequireDefault(_searchBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 搜索框
	


	var SearchBar = function (_BaseDoc) {
	    _inherits(SearchBar, _BaseDoc);

	    function SearchBar(props) {
	        _classCallCheck(this, SearchBar);

	        var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));

	        _this.doc = _searchBar2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(SearchBar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return SearchBar;
	}(_BaseDoc3.default);

	exports.default = SearchBar;

/***/ }),
/* 444 */
/***/ (function(module, exports) {

	module.exports = "\n一般可位于 NavBar 下方，通过『取消按钮』退出激活状态。\n\n### 规则\n\n- 应该在 placeholder 里提供提示文字，提醒用户输入相关内容，比如：双11特卖。\n- 在搜索栏下方，可提供有用的标签文案，帮助用户通过点击直接完成输入，比如：列出一些最近搜索的关键词。\n\n## 组件&配置\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndefaultValue |    搜索框的默认值     | String |    \nvalue      |  搜索框的当前值  | String |    \nplaceholder    |    placeholder     | String |    \nonSubmit    |  submit 事件 (点击键盘的 enter)  | (val: string): void |    \nonChange    |    change 事件的回调     | (val: string): void |    \nonFocus    |    focus 事件的回调     | (): void |    \nonBlur    |    blur 事件的回调     | (): void |    \nonCancel  | 点击`取消`按钮触发 (不再自动清除输入框的文字) | (val: string): void |    \nshowCancelButton    |    是否一直显示`取消`按钮     | bool |  `false`  \ncancelText    |   定制`取消`按钮的文字     | String |  `取消`  \ndisabled    |  设置禁用   | bool |  `false`  \nonClear    |    点击 clear 图标触发  | (val: string): void |    \nmaxLength      |  最多允许输入的字符个数    | number | -  \n\n\n### 组件接口\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nfocus     | 使 SearchBar 聚焦  | (): void |  -  \n"

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _collapse = __webpack_require__(446);

	var _collapse2 = _interopRequireDefault(_collapse);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 折叠面板
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Collapse = function (_BaseDoc) {
	    _inherits(Collapse, _BaseDoc);

	    function Collapse(props) {
	        _classCallCheck(this, Collapse);

	        var _this = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));

	        _this.doc = _collapse2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Collapse, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Collapse;
	}(_BaseDoc3.default);

	exports.default = Collapse;

/***/ }),
/* 446 */
/***/ (function(module, exports) {

	module.exports = "\n可以折叠/展开的内容区域。\n\n## 何时使用\n- 对复杂区域进行分组和隐藏。\n- 通常，一次只允许单个内容区域展开；特殊情况，多个内容区域可以同时展开。\n\n\n## 组件&配置\n\n### # collapse\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nactiveKey  | 当前激活 tab 面板的 key| Array or String   | 默认无，accordion模式下默认第一个元素\ndefaultActiveKey | 初始化选中面板的 key | String   | \nonChange      |   切换面板的回调   | (key: string): void |  noop  \naccordion    | `手风琴`模式 | Boolean | false  \nopenAnimation  |  设置自定义切换动画，禁止动画可设为`{}` | Object | \ncontent  | 每个面板内容   | Panel[]   | \n\n### # panel\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nkey  | 对应 activeKey   | String   | \nheader | 面板头内容 | string&#124;`config` | \ncontent | 面板内容 | string&#124;`config` | \n"

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _badge = __webpack_require__(448);

	var _badge2 = _interopRequireDefault(_badge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 徽标数
	


	var Badge = function (_BaseDoc) {
	    _inherits(Badge, _BaseDoc);

	    function Badge(props) {
	        _classCallCheck(this, Badge);

	        var _this = _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props));

	        _this.doc = _badge2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Badge, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Badge;
	}(_BaseDoc3.default);

	exports.default = Badge;

/***/ }),
/* 448 */
/***/ (function(module, exports) {

	module.exports = "\n图标右上角的红点、数字或者文字。用于告知用户，该区域的状态变化或者待处理任务的数量。\n\n## 何时使用\n\n- 当用户只需知道大致有内容更新时，应该使用红点型，如：社交中的群消息通知。\n- 当用户有必要知晓每条更新时，应该使用数字型。如：社交中的一对一的消息通知。\n\n## 组件&配置\n\n### # badge\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nsize | 大小，可选 `large` `small` | string | `small`\ntext | 展示的数字或文案，当为数字时候，大于`overflowCount`时显示为`${overflowCount}+`，为 0 时隐藏 | string&#124;number | -\ncorner | 置于角落 | boolean | `false`\ndot | 不展示数字，只有一个小红点 | boolean | `false`\noverflowCount | 展示封顶的数字值 | number | `99`\nhot | 营销样式 | boolean | `false`\n"

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _carousel = __webpack_require__(450);

	var _carousel2 = _interopRequireDefault(_carousel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 轮播图
	


	var Carousel = function (_BaseDoc) {
	    _inherits(Carousel, _BaseDoc);

	    function Carousel(props) {
	        _classCallCheck(this, Carousel);

	        var _this = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));

	        _this.doc = _carousel2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Carousel, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Carousel;
	}(_BaseDoc3.default);

	exports.default = Carousel;

/***/ }),
/* 450 */
/***/ (function(module, exports) {

	module.exports = "\n走马灯，轮播图\n\n## 组件&配置\n\n### # carousel\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nselectedIndex |  手动设置当前显示的索引  |  number  |  0  \ndots | 是否显示面板指示点 | Boolean   | true \nvertical | 垂直显示 | Boolean   | false \nautoplay | 是否自动切换 | Boolean   | false \nautoplayInterval | 自动切换的时间间隔 | Number | 3000 \ninfinite | 是否循环播放 | Boolean   | false \nafterChange  | 切换面板后的回调函数 | (current: number): void  | 无 \ndotStyle  | 指示点样式 | Object | 无 \ndotActiveStyle  | 当前激活的指示点样式 | Object | 无 \nframeOverflow | 设置 slider frame 的 overflow 样式 | string | `hidden` \ncellSpacing | 项目之间的间距，以`px`为单位 | number | - \nslideWidth | 手动设置项目宽度. 可以是`slideWidth=\"20px\"`，也可以是相对容器的百分比`slideWidth={0.8}` | string / number | \neasing | 缓动函数，你可以使用[这里](https://github.com/chenglou/tween-functions)提供的其他函数 | Function   | easeOutCirc\nswipeSpeed | 滑动灵敏度 |  number | 12 \nbeforeChange | 切换面板前的回调函数 | (from: number, to: number): void | \n"

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _card = __webpack_require__(452);

	var _card2 = _interopRequireDefault(_card);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 卡片
	


	var Card = function (_BaseDoc) {
	    _inherits(Card, _BaseDoc);

	    function Card(props) {
	        _classCallCheck(this, Card);

	        var _this = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));

	        _this.doc = _card2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Card, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Card;
	}(_BaseDoc3.default);

	exports.default = Card;

/***/ }),
/* 452 */
/***/ (function(module, exports) {

	module.exports = "\n用于组织信息和操作，通常也作为详细信息的入口。\n\n## 组件&配置\n\n### # card\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nfull  |  是否通栏  | boolean | `false`\nheader | 卡片头部，详见下方`header` | object | \ncontent | 卡片中间部分，可以是任意组件配置 | `config` | \nfooter | 卡片尾部，详见下方`footer` | object | \n\n#### *`header`*\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ntitle| 卡片标题 | string&#124;`config` |\nthumb| 卡片标题图片 | string&#124;`config` | \nthumbStyle| 标题图片样式 | Object | {}\nextra| 卡片标题辅助内容 | string&#124;`config` | \n\n#### *`footer`*\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ncontent|尾部内容 | string&#124;`config` | \nextra| 尾部辅助内容 | string&#124;`config` | \n"

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _list = __webpack_require__(454);

	var _list2 = _interopRequireDefault(_list);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 列表
	


	var List = function (_BaseDoc) {
	    _inherits(List, _BaseDoc);

	    function List(props) {
	        _classCallCheck(this, List);

	        var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));

	        _this.doc = _list2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(List, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return List;
	}(_BaseDoc3.default);

	exports.default = List;

/***/ }),
/* 454 */
/***/ (function(module, exports) {

	module.exports = "连续模块垂直排列。\n\n## 何时使用\n- 一般由主要信息、主要操作、次要信息、次要操作组成。\n- 主要信息和主要操作放在列表的左边，次要信息和次要操作放在列表的右边。\n- 单个连续模块垂直排列，显示当前的内容、状态和可进行的操作。eg：联系人列表。\n- 当你需要一个 infinite scroll 列表时，请使用 ListView\n\n## 组件&配置\n\n### # list\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nrenderHeader  | 渲染List头部额外信息  | () => `config` |\nrenderFooter  | 渲染List底部额外信息  | () => `config` |\n\n### # item\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nthumb   | 缩略图(当为 string 类型时作为 img src)  | string&#124;`config` | \nextra   | 右边内容        | string&#124;`config` | \narrow   | 箭头方向(右,上,下), 可选`horizontal`,`up`,`down`,`empty`，如果是`empty`则存在对应的dom,但是不显示   | String | \nalign    |  子元素垂直对齐，可选`top`,`middle`,`bottom`  | String   | `middle`\nonClick    | 点击事件的回调函数 | (): void | \nerror    | 报错样式,右侧文字颜色变成橙色 | Boolean  | `false`\nmultipleLine    | 多行 | Boolean  | `false`\nwrap    | 是否换行，默认情况下，文字超长会被隐藏， | Boolean  | `false`\nactiveStyle    | 自定义active的样式 | Object  | \nplatform  |  设定组件的平台特有样式, 可选值为 `android`, `ios`， 默认为 `cross`， 即组件会自动检测设备 UA 应用不同平台的样式    | String | `'cross'`\n\n### item-brief\n\n辅助说明\n\n\n---\n\n\n适用于显示同类的长列表数据类型，对渲染性能有一定的优化效果。\n\n### list-view\n\n| 属性 | 说明 | 类型 | 默认值 |\n|----|-----|------|------|\n| dataSource |  | ListViewDataSource | - |\n| initialListSize | 指定在组件刚挂载的时候渲染多少行数据，用这个属性来确保首屏显示合适数量的数据 | number | - |\n| onEndReached | 当所有的数据都已经渲染过，并且列表被滚动到距离最底部不足`onEndReachedThreshold`个像素的距离时调用 | (event?) => {} | - |\n| onEndReachedThreshold | 调用`onEndReached`之前的临界值，单位是像素 | number | 1000 |\n| pageSize | 每次事件循环（每帧）渲染的行数 | number | 1 |\n| renderHeader / renderFooter | 页头与页脚（如果提供）会在每次渲染过程中都重新渲染。如果它们重绘的性能开销很大，把他们包装到一个StaticContainer或者其它恰当的结构中。页脚在列表的最底部，而页头会在最顶部 | () => renderable | - |\n| renderRow | 从数据源(data source)中接受一条数据，以及它和它所在section的ID。返回一个可渲染的组件来为这行数据进行渲染。默认情况下参数中的数据就是放进数据源中的数据本身，不过也可以提供一些转换器。如果某一行正在被高亮（通过调用highlightRow函数），ListView会得到相应的通知。 | (rowData, sectionID, rowID, highlightRow) => renderable | - |\n| renderScrollComponent | 指定一个函数，在其中返回一个可以滚动的组件，ListView将会在该组件内部进行渲染。默认情况下会返回一个包含指定属性的ScrollView。 | (props) => renderable | - |\n| renderSectionHeader | 如果提供了此函数，会为每个小节(section)渲染一个标题 | (sectionData, sectionID) => renderable | - |\n| renderSeparator | 如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。在其上方的小节ID和行ID，以及邻近的行是否被高亮会作为参数传递进来。 | (sectionID, rowID, adjacentRowHighlighted) => renderable | - |\n| scrollRenderAheadDistance | 当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行 | number | 1000 |\n| contentContainerStyle | 这些样式会应用到一个内层的内容容器上，所有的子视图都会包裹在内容容器内 | Object | - |\n| horizontal | 当此属性为true的时候，所有的的子视图会在水平方向上排成一行，而不是默认的在垂直方向上排成一列 | bool | false |\n| onContentSizeChange | 此函数会在 ScrollView 内部可滚动内容的视图发生变化时调用。 | (contentWidth, contentHeight) => {} | - |\n| onScroll | 在滚动的过程中，每帧最多调用一次此回调函数。调用的频率可以用`scrollEventThrottle`属性来控制。| e => {} | - |\n| scrollEventThrottle | 控制在滚动过程中，scroll事件被调用的频率 | number | 50 |\n| onLayout | 当组件挂载或者布局变化的时候调用 | ({nativeEvent:{ layout:{ width, height }}}) => {} | - |\n| ---- |\n| renderBodyComponent  | 自定义 body 的包裹组件 | () => renderable | - |\n| renderSectionWrapper  | 渲染自定义的区块包裹组件 | (sectionID) => renderable | - |\n| renderSectionBodyWrapper  | 渲染自定义的区块 body 包裹组件 | (sectionID) => renderable | - |\n| useBodyScroll  | 使用 html 的 `body` 作为滚动容器 | bool | false |\n| pullToRefresh  | 使用 pullToRefresh， 你需要和 `PullToRefresh` 组件一起使用 | bool | false |\n\n### 方法\n\n- getMetrics() - 导出一些用于性能分析的数据。\n- scrollTo(...args) - 滚动到指定的x, y偏移处(暂不支持过渡动画)。\n\n## list-view-index\n\n此组件常用于 “通讯录”/“城市列表” 等场景中，支持索引导航功能。\n\n> 你可以使用 ListView 上的几乎所有 APIs。\n\n> 注意：由于索引列表可以点击任一项索引来定位其内容、即内容需要直接滚动到任意位置，这样就难以做到像 ListView 一样能在滚动时自动懒渲染。目前实现上只支持分两步渲染，能借此达到首屏优先显示目的，但如果列表数据量过大时、整体性能仍会有影响。\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\n| quickSearchBarTop | 快捷导航栏最顶部按钮、常用于回到顶部 | object{value:string, label:string} | `{ value: '#', label: '#' }` |\n| quickSearchBarStyle | quickSearchBar 的 style | object | - |\n| onQuickSearch | 快捷导航切换时调用 | (sectionID: any, topId?:any) => void | - |\n| showQuickSearchIndicator | whether show quick search indicator | bool | false |\n| delayTime | 延迟渲染时间设置（用于首屏优化，一开始渲染`initialListSize`数量的数据，在此时间后、延迟渲染剩余的数据项、即`totalRowCount - initialListSize`） | number |`100ms` |\n| delayActivityIndicator | 延迟渲染的 loading 指示器 | `config` | - |\n\n\n## 提示\n\nListView 有两种类型的滚动容器：\n\n1. 局部 div 容器\n    - 默认，注意：**需要手动给 ListView 设置高度**\n2. html 的 body 容器\n    - 设置`useBodyScroll`后生效 (不需要设置高度)\n\n<br />\n\n对 dataSource 对象变化时的处理方式是什么？何时调用 onEndReached 方法？\n\nListView 在 componentWillReceiveProps 里会监听 dataSource 对象的变化，并做一次\n[`this._renderMoreRowsIfNeeded()`](https://github.com/react-component/m-list-view/blob/90badfdb6e94093136c86e5874ce6054eae88a0d/src/ListView.js#L156) ，\n由于此时[`this.state.curRenderedRowsCount === this.props.dataSource.getRowCount()`](https://github.com/react-component/m-list-view/blob/90badfdb6e94093136c86e5874ce6054eae88a0d/src/ListView.js#L348)\n即已经渲染的数据与 dataSource 里已有的数据项个数相同，所以 ListView 认为应该再调用 onEndReached 方法。\n\nonEndReached 为什么会不停调用？[520#issuecomment-263510596](https://github.com/ant-design/ant-design-mobile/issues/520#issuecomment-263510596)\n\n<br />\n\n其他问题：[#633](https://github.com/ant-design/ant-design-mobile/issues/633) [#573](https://github.com/ant-design/ant-design-mobile/issues/573) [#541](https://github.com/ant-design/ant-design-mobile/issues/541)\n"

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _popover = __webpack_require__(456);

	var _popover2 = _interopRequireDefault(_popover);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 气泡
	


	var Popover = function (_BaseDoc) {
	    _inherits(Popover, _BaseDoc);

	    function Popover(props) {
	        _classCallCheck(this, Popover);

	        var _this = _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(this, props));

	        _this.doc = _popover2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Popover, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Popover;
	}(_BaseDoc3.default);

	exports.default = Popover;

/***/ }),
/* 456 */
/***/ (function(module, exports) {

	module.exports = "\n在点击控件或者某个区域后，浮出一个气泡菜单来做更多的操作。\n如果设置了遮罩层，建议通过点击遮罩层的任一位置，进行退出。\n\n## 组件&配置\n\n### # popover\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nvisible    | 当前显隐状态    | Boolean |  false \nonVisibleChange    | 当显隐状态变化时回调函数    | (visible: bool): void |  - \nplacement    | enum{'left','right','top','bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight'} | String |  'bottomRight' \nmask    | 是否显示遮罩背景层    | Boolean |  false\noverlay   | 弹出层内容    | `config` |  - \nonSelect   | 选中某选项时的回调函数    | (node: any, index?: number): void |  - \n\n更多 API 可查看 [rmc-tooltip](https://github.com/react-component/m-tooltip#api)\n\n### popover-item\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndisabled   | 是否禁用    | Boolean |  false \nstyle  | item 样式    | Object |  - \nicon   | icon   | `config` |  - \n"

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _noticeBar = __webpack_require__(458);

	var _noticeBar2 = _interopRequireDefault(_noticeBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 通告栏
	


	var NoticeBar = function (_BaseDoc) {
	    _inherits(NoticeBar, _BaseDoc);

	    function NoticeBar(props) {
	        _classCallCheck(this, NoticeBar);

	        var _this = _possibleConstructorReturn(this, (NoticeBar.__proto__ || Object.getPrototypeOf(NoticeBar)).call(this, props));

	        _this.doc = _noticeBar2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(NoticeBar, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return NoticeBar;
	}(_BaseDoc3.default);

	exports.default = NoticeBar;

/***/ }),
/* 458 */
/***/ (function(module, exports) {

	module.exports = "\n在导航栏下方，一般用作系统提醒、活动提醒等通知。\n\n### 规则\n- 需要引起用户关注时使用，重要级别低于 Modal ，高于 Toast。\n\n## 组件&配置\n\n### # notice-bar\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nmode    | 提示类型，可选 `closable`,`link`   | String |  ''  \nicon    | 在开始位置设置图标  |  `config` | \nonClick | 点击关闭或者操作区域的回调函数        | (): void |   \nmarqueeProps | marquee 参数  | Object | `{loop: false, leading: 500, trailing: 800, fps: 40, style: {}}`  \naction | 用于替换操作 icon 的文案 | `config` | \n"

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _tag = __webpack_require__(460);

	var _tag2 = _interopRequireDefault(_tag);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 标签
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Tag = function (_BaseDoc) {
	    _inherits(Tag, _BaseDoc);

	    function Tag(props) {
	        _classCallCheck(this, Tag);

	        var _this = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));

	        _this.doc = _tag2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Tag, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Tag;
	}(_BaseDoc3.default);

	exports.default = Tag;

/***/ }),
/* 460 */
/***/ (function(module, exports) {

	module.exports = "\n进行标记和分类的小标签，用于标记事物的属性和维度，以及进行分类。\n\n### 规则\n- 标签文字必须显示完全。\n\n\n## 组件&配置\n\n### # tag\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nsmall   |  小号标签  |   Boolean    |  `false`  \ndisabled   | 是否不可用      | Boolean |    `false`  \nclosable   | 是否关闭（非 disabled small 状态） | Boolean | `false` \nselected   | 是否默认选中      | Boolean |    `false`  \nonChange   | 切换选中回调函数 | (selected: bool): void |   无  \nonClose   | 点关闭时的回调函数 | (): void |   无  \nafterClose   | 关闭后的回调 | (): void |   无  \n"

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _result = __webpack_require__(462);

	var _result2 = _interopRequireDefault(_result);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 结果页
	


	var Result = function (_BaseDoc) {
	    _inherits(Result, _BaseDoc);

	    function Result(props) {
	        _classCallCheck(this, Result);

	        var _this = _possibleConstructorReturn(this, (Result.__proto__ || Object.getPrototypeOf(Result)).call(this, props));

	        _this.doc = _result2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Result, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Result;
	}(_BaseDoc3.default);

	exports.default = Result;

/***/ }),
/* 462 */
/***/ (function(module, exports) {

	module.exports = "\n在整张页面中组织插画、图标、文字等内容，向用户反馈操作结果。\n\n### 规则\n\n- 用作非常重要的操作反馈，如支付成功，无网络状态。\n- 个性化且优美的插画，可以提升品牌形象。\n- 对于错误类型的结果页，页面中需要提供明确的行动点，eg：重新加载。\n\n## 组件&配置\n\n### # result\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nimgUrl | 插图 url | string  | -\nimg | 插图配置，为一个`img`组件或者`icon`组件, 会覆盖 imgUrl 设置  | `config` | -\ntitle | title 文案 | string&#124;`config` | -\nmessage | message 文案 | string&#124;`config` | -\nbuttonText | 按钮文案 | string | -\nbuttonType | 请参考 button 的配置 | string | -\nonButtonClick | 按钮回调函数 | (e: Object): void | -\n"

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _modal = __webpack_require__(464);

	var _modal2 = _interopRequireDefault(_modal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 弹框
	


	var Modal = function (_BaseDoc) {
	    _inherits(Modal, _BaseDoc);

	    function Modal(props) {
	        _classCallCheck(this, Modal);

	        var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

	        _this.doc = _modal2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Modal, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Modal;
	}(_BaseDoc3.default);

	exports.default = Modal;

/***/ }),
/* 464 */
/***/ (function(module, exports) {

	module.exports = "\n用作显示系统的重要信息，并请求用户进行操作反馈，eg：删除某个重要内容时，弹出 Modal 进行二次确认。\n\n### 规则\n- 尽可能少用。Modal 会打断用户操作，只用在重要的时候。\n- 标题应该简明，不能超过 1 行；描述内容应该简明、完整，一般不多于 2 行。\n- 操作按钮最多到 3 个（竖排），一般为 1-2 个（横排）；3 个以上建议使用组件 ActionSheet 来完成。\n- 一般将用户最可能点击的按钮，放在右侧。另外，取消按钮应当始终放在左侧。\n\n## 组件&配置\n\n### # modal\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nafterClose | Modal 完全关闭后的回调 | function | 无 \nvisible | 对话框是否可见 | Boolean | false \nclosable | 是否显示关闭按钮 | Boolean | false \nmaskClosable | 点击蒙层是否允许关闭 | Boolean | true \nonClose | 点击 x 或 mask 回调 | (): void | 无 \ntransparent | 是否背景透明 | Boolean | false \npopup | 是否弹窗模式 | Boolean | false \nanimationType | 可选: 'slide-down / up' / 'fade' / 'slide' | String | fade \ntitle | 标题 | string&#124;`config` | 无 \nfooter | 底部内容 | Array [{text, onPress}] | [] \nplatform  | 设定组件的平台特有样式, 可选值为 `android`, `ios` | String | `ios'`\ntransitionName  | Modal 主内容动画 className | String | \nmaskTransitionName  | mask 动画 className | String | \nclassName  | 手动设置 Modal 的 className | String | \nwrapClassName  | 手动设置 Modal wrap 的 className | String | \n\n#### Modal.alert(config)\n\n属性 | 说明 | 类型 | 默认值 | 是否必填\n----|-----|------|------ | -----\ntitle | 标题  | string&#124;`config` | | 是\nmessage  | 提示信息  | string&#124;`config`  | | 是\nactions | 按钮组, [{text, onPress, style}] | Array | |\nplatform  |  设定组件的平台特有样式, 可选值为 `android`, `ios`  | String | `'ios'`|\n\n`Modal.alert(config).close()` 可以在外部关闭 Alert\n\n#### Modal.prompt(config)\n\n属性 | 说明 | 类型 | 默认值| 是否必填\n----|-----|------|------| -----\ntitle | 标题  | string&#124;`config` | 无 | 是 \nmessage  | 提示信息  | string&#124;`config`  | 无 | 是\ncallbackOrActions  | 按钮组 [{text, onPress}] 或回调函数  | Array or Function | 无 |\nmode | prompt 的样式 | String (`default`, `secure-text`, `login-password`)|  `default` |\ndefaultValue | 默认值(input 为 password 类型不支持) | String |  |\nplaceholders | ['', '']  | String[] |  |\nplatform  |  设定组件的平台特有样式, 可选值为 `android`, `ios`  | String | `'ios'`|\n\n> `Modal.prompt(config).close()` 可以在外部关闭 prompt`\n\n### Modal.operation(config)\n\n属性 | 说明 | 类型 | 默认值| 是否必填\n----|-----|------|------|-----\nactions | 按钮组, [{text, onPress, style}] | Array | 无 |\nplatform  |  设定组件的平台特有样式, 可选值为 `android`, `ios`  | String | `'ios'`|\n\n> `Modal.operation(config).close()` 可以在外部关闭 operation`\n"

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _actionSheet = __webpack_require__(466);

	var _actionSheet2 = _interopRequireDefault(_actionSheet);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 动作面板
	


	var demo1 = {
	    title: '基本用法',
	    description: '\n  支持展示loading状态，使按钮临时失效。\n  支持配置带图标的按钮。',
	    config: [{ type: 'button', content: 'showActionSheet' }]
	};

	var ActionSheet = function (_BaseDoc) {
	    _inherits(ActionSheet, _BaseDoc);

	    function ActionSheet(props) {
	        _classCallCheck(this, ActionSheet);

	        var _this = _possibleConstructorReturn(this, (ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).call(this, props));

	        _this.doc = _actionSheet2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(ActionSheet, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo(demo1);
	        }
	    }]);

	    return ActionSheet;
	}(_BaseDoc3.default);

	exports.default = ActionSheet;

/***/ }),
/* 466 */
/***/ (function(module, exports) {

	module.exports = "\n从底部弹出的模态框，提供和当前场景相关的 2 个以上的操作动作，也支持提供标题和描述。内置固定的展示样式、不支持特别灵活的修改。\n\n## 何时使用\n\n- 提供清晰的退出按钮。\n- 可高亮破坏性操作，e.g. 将『删除』处理成红色文本。\n- 不要放置过多内容，避免面板纵向滚动。\n\n\n## 组件&配置\n\n#### ActionSheet.showActionSheetWithOptions(options, callback)\n\n显示 action sheet，`options`为对象必须包含以下的一个或者多个。`callback`函数支持返回 Promise。\n\n属性 | 说明 | 类型 | 默认值 | 是否必填\n----|-----|------|------ | -----\noptions | 选项按钮列表 | string[] | | 是\nbadges |  徽标数列表，为一个数组，数组每一项包含两个属性：index、text | [{index, text}...] | | \ncancelButtonIndex |  按钮列表中取消按钮的索引位置 | Number  | | \ndestructiveButtonIndex |  按钮列表中破坏性按钮（一般为删除）的索引位置 | Number | | \ntitle |  顶部标题 | string | | \nmessage |  顶部标题下的简要消息 | string&#124;`config` | | \nmaskClosable |  点击蒙层是否允许关闭，默认允许 | boolean | true | \n\n\n#### ActionSheet.showShareActionSheetWithOptions(options, callback)\n\n显示分享 action sheet，`options`为对象必须包含以下的一个或者多个。`callback`函数支持返回 Promise。\n\n属性 | 说明 | 类型 | 默认值 | 是否必填\n----|-----|------|------ | -----\noptions | 分享按钮列表，具体见下方说明 | [{icon: `config`, title: string}...] | | 是\ntitle | 顶部标题 | string |  | \ncancelButtonText | 取消按钮文案 | string | 取消 | \nmessage | 顶部标题下的简要消息 | string&#124;`config` |  | \nmaskClosable |  点击蒙层是否允许关闭，默认允许 | boolean | true | \n\n- options (array of \\`{icon: `config`, title: string}\\`)\n    - 可以是二维数组，能显示多行按钮，例如`[[{icon,title},...],...]`表示两行两列。当为二维数组时`callback`有两个参数，第一个为`列`序列、第二个为`行`序列。\n\n#### ActionSheet.close()\n\n关闭弹窗。\n"

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _progress = __webpack_require__(468);

	var _progress2 = _interopRequireDefault(_progress);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 进度条
	


	var Progress = function (_BaseDoc) {
	    _inherits(Progress, _BaseDoc);

	    function Progress(props) {
	        _classCallCheck(this, Progress);

	        var _this = _possibleConstructorReturn(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).call(this, props));

	        _this.doc = _progress2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Progress, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Progress;
	}(_BaseDoc3.default);

	exports.default = Progress;

/***/ }),
/* 468 */
/***/ (function(module, exports) {

	module.exports = "\n表明某个任务的当前进度。\n\n### 规则\n\n- 需要准确告知当前进度，否则应该使用组件 ActivityIndicator。\n- 和 NavBar 一起搭配使用时，可以隐藏 Progress 未填充部分的轨道，提升整体感。\n\n## 组件&配置\n\n### # progress\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\npercent | 进度百分比 | number | 0\nposition | 进度条的位置，fixed 将浮出固定在最顶层，可选: `fixed` `normal` | string | `fixed`\nunfilled | 是否显示未填充的轨道 | boolean | true\nstyle | 进度条样式 | object | {}\nbarStyle | 进度样式 | object | {}\n"

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _loading = __webpack_require__(470);

	var _loading2 = _interopRequireDefault(_loading);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 加载中
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var Loading = function (_BaseDoc) {
	    _inherits(Loading, _BaseDoc);

	    function Loading(props) {
	        _classCallCheck(this, Loading);

	        var _this = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this, props));

	        _this.doc = _loading2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Loading, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Loading;
	}(_BaseDoc3.default);

	exports.default = Loading;

/***/ }),
/* 470 */
/***/ (function(module, exports) {

	module.exports = "\nLoading效果，表明某个任务正在进行中。\n\n## 何时使用\n- 不要让活动指示器静止，用户会以为该任务停滞了。\n- 在某些特定场景下，提供有意义的文案，帮助用户明白哪个任务正在进行中，eg：正在上传照片。\n- 如果能知道用户的等待时间，可以使用组件 Progress 来替代。\n\n\n## 组件&配置\n\n### # loading\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nloading  | 显隐状态 | boolean  | true  \nsize  | spinner大小，可选`small`/`large` | string  | small  \ntoast  | loading样式类型 | boolean  | false  \ntext  | loading文本 | string |  -   \n"

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _message = __webpack_require__(472);

	var _message2 = _interopRequireDefault(_message);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 提示信息
	


	var Message = function (_BaseDoc) {
	    _inherits(Message, _BaseDoc);

	    function Message(props) {
	        _classCallCheck(this, Message);

	        var _this = _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).call(this, props));

	        _this.doc = _message2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(Message, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return Message;
	}(_BaseDoc3.default);

	exports.default = Message;

/***/ }),
/* 472 */
/***/ (function(module, exports) {

	module.exports = "\n一种轻量级反馈/提示，可以用来显示不会打断用户操作的内容，适合用于页面转场、数据交互的等场景中。\n\n## 何时使用\n- 一次只显示一个 message\n- 有 Icon 的 Message，字数为 4-6 个；没有 Icon 的 Message，字数不宜超过 14 个。\n\n## 组件&配置\n\n- `UF.message.success(content, duration, onClose, mask)`\n- `UF.message.fail(content, duration, onClose, mask)`\n- `UF.message.info(content, duration, onClose, mask)`\n- `UF.message.loading(content, duration, onClose, mask)`\n- `UF.message.offline(content, duration, onClose, mask)`\n\n组件提供了五个静态方法，参数如下：\n\n| 属性 | 说明 | 类型 | 默认值 |\n| ----|-----|------|------ |\n| content    | 提示内容       | string&#124;`config`    | 无           |\n| duration   | 自动关闭的延时，单位秒 | number                 | 3          |\n| onClose    | 关闭后回调 |  Function                 | 无          |\n| mask    | 是否显示透明蒙层，防止触摸穿透 |  Boolean  | true          |\n\n> **注：**  duration = 0 时，onClose 无效，message 不会消失；隐藏 message 需要手动调用 hide\n\n还提供了全局配置和全局销毁方法：\n\n- `UF.message.hide()`\n"

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _pullRefresh = __webpack_require__(474);

	var _pullRefresh2 = _interopRequireDefault(_pullRefresh);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 下拉刷新
	


	var PullRefresh = function (_BaseDoc) {
	    _inherits(PullRefresh, _BaseDoc);

	    function PullRefresh(props) {
	        _classCallCheck(this, PullRefresh);

	        var _this = _possibleConstructorReturn(this, (PullRefresh.__proto__ || Object.getPrototypeOf(PullRefresh)).call(this, props));

	        _this.doc = _pullRefresh2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(PullRefresh, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return PullRefresh;
	}(_BaseDoc3.default);

	exports.default = PullRefresh;

/***/ }),
/* 474 */
/***/ (function(module, exports) {

	module.exports = "\n通过触发，立刻重新加载内容。\n\n### 规则\n- 可以和 `ListView` 结合使用，也可以单独使用。\n- 可考虑定期自动刷新, e.g. 登录 APP 后，自动刷新首页 List。\n\n## 组件&配置\n\n### # pull-refresh\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\ndirection  | 拉动方向，可以是 `up` 或 `down` | String | `down` \ndistanceToRefresh | 刷新距离 | number | 25 \nrefreshing | 是否显示刷新状态 | bool | false \nonRefresh | 必选, 刷新回调函数 | () => void | - \nindicator  | 指示器配置，为一对象，具体属性见下表`indicator` | Object | - \ndamping | 拉动距离限制, 建议小于 200 | number | 100 \n\n> 如果页面使用了对 viewport 进行缩放的高清适配方案，请自行对 distanceToRefresh 进行调整, 例如对 antd-mobile@1.x 高清方案，可设置 `distanceToRefresh = window.devicePixelRatio * 25`\n\n#### *indicator*\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nactivate  | 下拉是的提示 | `config` | \ndeactivate  | 无效提示 | `config` | \nrelease  | 释放时的提示 | `config` | \nfinish  | 完成后的提示 | `config` | \n"

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	var _swipeAction = __webpack_require__(476);

	var _swipeAction2 = _interopRequireDefault(_swipeAction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 滑动操作
	


	var SwipeAction = function (_BaseDoc) {
	    _inherits(SwipeAction, _BaseDoc);

	    function SwipeAction(props) {
	        _classCallCheck(this, SwipeAction);

	        var _this = _possibleConstructorReturn(this, (SwipeAction.__proto__ || Object.getPrototypeOf(SwipeAction)).call(this, props));

	        _this.doc = _swipeAction2.default;
	        _this.__init();
	        return _this;
	    }

	    _createClass(SwipeAction, [{
	        key: 'render',
	        value: function render() {
	            return this.__getMobileDemo();
	        }
	    }]);

	    return SwipeAction;
	}(_BaseDoc3.default);

	exports.default = SwipeAction;

/***/ }),
/* 476 */
/***/ (function(module, exports) {

	module.exports = "\n滑动操作组件。结合手势操作，从屏幕一侧唤出操作。\n\n## 何时使用\n- 一次只可滑动一行列表\n- 点击任意按钮之外处或往回滑动该列表可隐藏操作。\n\n## 组件&配置\n\n### # swipe-action\n\n属性 | 说明 | 类型 | 默认值\n----|-----|------|------\nstyle      | `swipeout` 样式      | Object |    \nleft       | 左侧按钮组      | Array | `null` \nright       | 右侧按钮组      | Array | `null` \nautoClose   | 点击按钮后自动隐藏按钮   | Boolean | \ndisabled    |   禁用 `swipeout`    | Boolean | `false` \nonOpen      |    打开时回调函数   | (): void | \nonClose  |  关闭时回调函数    | (): void | \n"

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Markdown = __webpack_require__(233);

	var _Markdown2 = _interopRequireDefault(_Markdown);

	var _Demo = __webpack_require__(299);

	var _Demo2 = _interopRequireDefault(_Demo);

	var _antd = __webpack_require__(111);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	

	// import BaseDoc from 'docs/app/base/BaseDoc.js';


	var Home = function (_React$Component) {
	    _inherits(Home, _React$Component);

	    function Home() {
	        _classCallCheck(this, Home);

	        return _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).apply(this, arguments));
	    }

	    _createClass(Home, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'umpui-component home' },
	                _react2.default.createElement(
	                    'h1',
	                    { className: 'umpui-layer umpui-title' },
	                    'Umpfe Framework'
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'umpui-layer umpui-block markdown' },
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        '\u4E00\u4E2A\u81EA\u52A9\u914D\u7F6E\u6846\u67B6\uFF0C\u901A\u8FC7\u914D\u7F6E JSON \u5373\u80FD\u751F\u6210\u9875\u9762\u3002'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            _antd.Button,
	                            { className: 'banner-btn start', type: 'primary', size: 'large' },
	                            _react2.default.createElement(
	                                'a',
	                                { href: '#/Docs' },
	                                '\u5F00\u59CB\u4F7F\u7528'
	                            )
	                        ),
	                        _react2.default.createElement(
	                            _antd.Button,
	                            { className: 'banner-btn component', type: 'default', size: 'large' },
	                            _react2.default.createElement(
	                                'a',
	                                { href: '#/Component' },
	                                '\u7EC4\u4EF6\u6587\u6863'
	                            )
	                        ),
	                        _react2.default.createElement(
	                            _antd.Tag,
	                            { style: { marginLeft: '12px' } },
	                            _react2.default.createElement(
	                                'a',
	                                { href: '#/Standard' },
	                                '\u52A0\u5165\u6211\u4EEC'
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Home;
	}(_react2.default.Component);

	exports.default = Home;

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 开发规范
	


	var StandardApp = function (_BaseDoc) {
	    _inherits(StandardApp, _BaseDoc);

	    function StandardApp(props) {
	        _classCallCheck(this, StandardApp);

	        var _this = _possibleConstructorReturn(this, (StandardApp.__proto__ || Object.getPrototypeOf(StandardApp)).call(this, props));

	        _this.doc = 'standard.md';
	        _this.__init();
	        return _this;
	    }

	    return StandardApp;
	}(_BaseDoc3.default);

	exports.default = StandardApp;

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(107);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(108);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _BaseDoc2 = __webpack_require__(232);

	var _BaseDoc3 = _interopRequireDefault(_BaseDoc2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 第三方组件列表
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * **/


	var StandardApp = function (_BaseDoc) {
	    _inherits(StandardApp, _BaseDoc);

	    function StandardApp(props) {
	        _classCallCheck(this, StandardApp);

	        var _this = _possibleConstructorReturn(this, (StandardApp.__proto__ || Object.getPrototypeOf(StandardApp)).call(this, props));

	        _this.doc = 'third-party.md';
	        _this.__init();
	        return _this;
	    }

	    return StandardApp;
	}(_BaseDoc3.default);

	exports.default = StandardApp;

/***/ })
/******/ ]);